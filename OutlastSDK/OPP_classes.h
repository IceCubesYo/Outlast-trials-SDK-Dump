// Class OPP.AlignedWrapBox
// Size: 0x140 (Inherited: 0x120)
struct UAlignedWrapBox : UPanelWidget {
	struct FVector2D InnerSlotPadding; // 0x120(0x08)
	float WrapWidth; // 0x128(0x04)
	bool bExplicitWrapWidth; // 0x12c(0x01)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x12d(0x01)
	char pad_12E[0x12]; // 0x12e(0x12)

	void SetInnerSlotPadding(struct FVector2D InPadding); // Function OPP.AlignedWrapBox.SetInnerSlotPadding // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1ce51b0
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function OPP.AlignedWrapBox.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce50b0
	struct UAlignedWrapBoxSlot* AddChildWrapBox(struct UWidget* Content); // Function OPP.AlignedWrapBox.AddChildWrapBox // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce4e30
};

// Class OPP.AlignedWrapBoxSlot
// Size: 0x60 (Inherited: 0x38)
struct UAlignedWrapBoxSlot : UPanelSlot {
	struct FMargin Padding; // 0x38(0x10)
	bool bFillEmptySpace; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float FillSpanWhenLessThan; // 0x4c(0x04)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x50(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x51(0x01)
	char pad_52[0xe]; // 0x52(0x0e)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function OPP.AlignedWrapBoxSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce52ec
	void SetPadding(struct FMargin InPadding); // Function OPP.AlignedWrapBoxSlot.SetPadding // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce5260
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function OPP.AlignedWrapBoxSlot.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce5134
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan); // Function OPP.AlignedWrapBoxSlot.SetFillSpanWhenLessThan // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce502c
	void SetFillEmptySpace(bool InbFillEmptySpace); // Function OPP.AlignedWrapBoxSlot.SetFillEmptySpace // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce4fac
};

// Class OPP.OPPEngine
// Size: 0xdf0 (Inherited: 0xde0)
struct UOPPEngine : UGameEngine {
	struct URBFunctionalTestManager* FunctionalTestManager; // 0xde0(0x08)
	char pad_DE8[0x8]; // 0xde8(0x08)
};

// Class OPP.RBAchievementManager
// Size: 0x3a0 (Inherited: 0x28)
struct URBAchievementManager : UObject {
	char pad_28[0x30]; // 0x28(0x30)
	struct TArray<struct ARBController*> RegisteredControllers; // 0x58(0x10)
	struct TMap<struct FProfileId, struct FPlayerAchievementsRuntimeData> RuntimeData; // 0x68(0x50)
	char pad_B8[0x2e8]; // 0xb8(0x2e8)
};

// Class OPP.RBAchievementDefinition
// Size: 0x70 (Inherited: 0x28)
struct URBAchievementDefinition : UObject {
	struct FName OnlineUnlockId; // 0x28(0x08)
	struct FText Name; // 0x30(0x18)
	struct FText Description; // 0x48(0x18)
	struct URBAchievementUnlockCondition* UnlockCondition; // 0x60(0x08)
	struct FName RewardDataId; // 0x68(0x08)
};

// Class OPP.RBAchievementsConfig
// Size: 0x38 (Inherited: 0x28)
struct URBAchievementsConfig : UObject {
	struct TArray<struct URBAchievementDefinition*> Achievements; // 0x28(0x10)

	void RefreshAchievements(); // Function OPP.RBAchievementsConfig.RefreshAchievements // (Final|Native|Public) // @ game+0x1521dbc
};

// Class OPP.RBAchievementUnlockCondition
// Size: 0x48 (Inherited: 0x28)
struct URBAchievementUnlockCondition : UObject {
	struct URBAchievementDefinition* AssociatedAchievementDefinition; // 0x28(0x08)
	struct ARBPlayerState* RBPlayerState; // 0x30(0x08)
	char pad_38[0x10]; // 0x38(0x10)
};

// Class OPP.RBAchievementUnlockCondition_StageCompletion
// Size: 0xb0 (Inherited: 0x48)
struct URBAchievementUnlockCondition_StageCompletion : URBAchievementUnlockCondition {
	int32_t NumTimes; // 0x48(0x04)
	enum class EGameDifficulty MinDifficulty; // 0x4c(0x01)
	enum class EGameDifficulty MaxDifficulty; // 0x4d(0x01)
	bool bAnyMission; // 0x4e(0x01)
	char pad_4F[0x1]; // 0x4f(0x01)
	struct TArray<struct FRBMissionID> MissionIds; // 0x50(0x10)
	bool bAnyStage; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
	struct TArray<struct FRBStageID> StageIds; // 0x68(0x10)
	struct FRBPlayerLoadoutValidator PlayerLoadoutValidator; // 0x78(0x18)
	struct TArray<enum class EPlayerEvent> PlayerEventFailureConditions; // 0x90(0x10)
	int32_t MaxDamagePerStage; // 0xa0(0x04)
	char pad_A4[0xc]; // 0xa4(0x0c)

	void OnStageEnded(struct FRBStageID& StageID, struct FRBMissionID& MissionID, bool bIsReset); // Function OPP.RBAchievementUnlockCondition_StageCompletion.OnStageEnded // (Final|Native|Private|HasOutParms) // @ game+0x1ce8d9c
	void OnPlayerEvent(enum class EPlayerEvent EventType, int32_t Value); // Function OPP.RBAchievementUnlockCondition_StageCompletion.OnPlayerEvent // (Final|Native|Private) // @ game+0x1ce8cac
};

// Class OPP.RBActor
// Size: 0x250 (Inherited: 0x248)
struct ARBActor : AActor {
	bool bAllowAttachmentReplication; // 0x248(0x01)
	char pad_249[0x7]; // 0x249(0x07)
};

// Class OPP.RBActiveSkill
// Size: 0x3d8 (Inherited: 0x250)
struct ARBActiveSkill : ARBActor {
	struct UStaticMeshComponent* ActiveSkillMesh; // 0x250(0x08)
	enum class EActiveSkillType ActiveSkillType; // 0x258(0x01)
	char pad_259[0x7]; // 0x259(0x07)
	struct ARBActiveSkillController* ControllerItemClass; // 0x260(0x08)
	struct FText SkillStillRecharginText; // 0x268(0x18)
	struct FText NoSkillChargeForEquip; // 0x280(0x18)
	struct FMulticastInlineDelegate OnIsInCooldownChangedEvent; // 0x298(0x10)
	struct FMulticastInlineDelegate OnIsActiveChangedEvent; // 0x2a8(0x10)
	struct ARBPlayer* PlayerOwner; // 0x2b8(0x08)
	struct FRBActiveSkillSettings ActiveSkillSettings; // 0x2c0(0x2c)
	bool bIsActive; // 0x2ec(0x01)
	char pad_2ED[0x1]; // 0x2ed(0x01)
	bool bIsInCooldown; // 0x2ee(0x01)
	char pad_2EF[0x1]; // 0x2ef(0x01)
	float ActivationTimeRemaining; // 0x2f0(0x04)
	char pad_2F4[0x4]; // 0x2f4(0x04)
	float CooldownPawnTime; // 0x2f8(0x04)
	char pad_2FC[0x4]; // 0x2fc(0x04)
	struct FRBGameplayAttribute ActiveSkillCooldown; // 0x300(0x30)
	struct FRBGameplayAttribute ActiveSkillEffectRadius; // 0x330(0x30)
	struct FRBGameplayAttribute ActiveSkillEffectDuration; // 0x360(0x30)
	struct FRBGameplayAttribute ActiveSkillEffect2Duration; // 0x390(0x30)
	struct ARBActiveSkillController* ControllerItem; // 0x3c0(0x08)
	char pad_3C8[0x10]; // 0x3c8(0x10)

	void OnRep_IsInCooldown(); // Function OPP.RBActiveSkill.OnRep_IsInCooldown // (Final|Native|Public) // @ game+0x13b1f58
	void OnRep_IsActive(); // Function OPP.RBActiveSkill.OnRep_IsActive // (Final|Native|Public) // @ game+0x1ce8d70
	float GetCooldownTimeRemaining(); // Function OPP.RBActiveSkill.GetCooldownTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ce8a18
	float GetCooldownRatio(); // Function OPP.RBActiveSkill.GetCooldownRatio // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ce89f0
	void Event_OnPlayerInitReplicated(struct ARBPlayer* Player); // Function OPP.RBActiveSkill.Event_OnPlayerInitReplicated // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnIsInCooldownChanged(bool isInCooldown); // Function OPP.RBActiveSkill.Event_OnIsInCooldownChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnIsActiveChanged(bool IsActive); // Function OPP.RBActiveSkill.Event_OnIsActiveChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_DisplayDebugInfo(); // Function OPP.RBActiveSkill.Event_DisplayDebugInfo // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	bool BP_IsSkillUsageDisabled(); // Function OPP.RBActiveSkill.BP_IsSkillUsageDisabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ce87fc
	float BP_GetTotalCooldownTime(); // Function OPP.RBActiveSkill.BP_GetTotalCooldownTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ce87d0
	float BP_GetEffectDuration(); // Function OPP.RBActiveSkill.BP_GetEffectDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ce87a4
	bool BP_CanUseSkillInLocation(); // Function OPP.RBActiveSkill.BP_CanUseSkillInLocation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ce877c
};

// Class OPP.RBPickup
// Size: 0x9d0 (Inherited: 0x250)
struct ARBPickup : ARBActor {
	char pad_250[0x18]; // 0x250(0x18)
	struct URBInteractionZoneComponent* InteractionZoneBox; // 0x268(0x08)
	struct URBActiveSkillVisionComponent* ActiveSkillVisionComponent; // 0x270(0x08)
	struct UStaticMeshComponent* ActiveSkillWaveSphere; // 0x278(0x08)
	struct FItemDefinition ItemDefinition; // 0x280(0x48)
	struct UMeshComponent* InWorldMeshComponent; // 0x2c8(0x08)
	struct UMeshComponent* InHandMeshComponent; // 0x2d0(0x08)
	float WaterFloatingDepth; // 0x2d8(0x04)
	char pad_2DC[0x4]; // 0x2dc(0x04)
	struct USceneComponent* SpawnPointRef; // 0x2e0(0x08)
	char pad_2E8[0x8]; // 0x2e8(0x08)
	struct FTransform SpawnPointRelativeInverseTransform; // 0x2f0(0x30)
	struct UItemAnimRef* AnimationData1P; // 0x320(0x08)
	struct UItemAnimRef* AnimationData1PDown; // 0x328(0x08)
	struct UItemAnimRef* AnimationData3P; // 0x330(0x08)
	float staminaRestoreAmount; // 0x338(0x04)
	float HealthRestoreAmount; // 0x33c(0x04)
	float TemporaryHealthRestoreAmount; // 0x340(0x04)
	float PsychosisRestoreAmount; // 0x344(0x04)
	float BatteryRestoreAmount; // 0x348(0x04)
	bool bResetActiveSkillCooldown; // 0x34c(0x01)
	char pad_34D[0x3]; // 0x34d(0x03)
	struct FRBConfigurableGameplayAttributeModifier AttributeModifier; // 0x350(0xd0)
	float noStaminaConsumptionDuration; // 0x420(0x04)
	float MovementSpeedBonusMultiplier; // 0x424(0x04)
	struct FHUDTutorialTextData PickupTutorialData; // 0x428(0x38)
	bool bOverrideTutorialDefaultDuration; // 0x460(0x01)
	char pad_461[0x7]; // 0x461(0x07)
	struct FTutorialTextData EquippedTutorialData; // 0x468(0x20)
	bool bDisableHoldUseTutorial; // 0x488(0x01)
	bool bDisablesInputInTutorial; // 0x489(0x01)
	char pad_48A[0x6]; // 0x48a(0x06)
	struct FText CustomInteractionText; // 0x490(0x18)
	struct FText CannotUseTwiceCustomText; // 0x4a8(0x18)
	struct FText NoRoomInInventoryInteractionText; // 0x4c0(0x18)
	struct FString PickupSwitchName; // 0x4d8(0x10)
	struct URBOutlineComponent* OutlineComponent; // 0x4e8(0x08)
	struct FMulticastInlineDelegate PickedUpEvent; // 0x4f0(0x10)
	struct FMulticastInlineDelegate DroppedEvent; // 0x500(0x10)
	struct FMulticastInlineDelegate DuplicatedEvent; // 0x510(0x10)
	struct FMulticastInlineDelegate OnConsumedChanged; // 0x520(0x10)
	struct FMulticastInlineDelegate OnPlayerOwnerChanged; // 0x530(0x10)
	struct FMulticastInlineDelegate OnTossDone; // 0x540(0x10)
	struct UTexture2D* Icon; // 0x550(0x08)
	struct UTexture2D* HoldConsumeIcon; // 0x558(0x08)
	struct FText HoldConsumeText; // 0x560(0x18)
	struct FText DisplayName; // 0x578(0x18)
	bool bOverrideCategoryColor; // 0x590(0x01)
	char pad_591[0x3]; // 0x591(0x03)
	struct FLinearColor InventoryItemColor; // 0x594(0x10)
	bool bConsumeCameraLimit; // 0x5a4(0x01)
	char pad_5A5[0x3]; // 0x5a5(0x03)
	float ConsumeCameraMinYaw; // 0x5a8(0x04)
	float ConsumeCameraMaxYaw; // 0x5ac(0x04)
	float ConsumeCameraMinPitch; // 0x5b0(0x04)
	float ConsumeCameraMaxPitch; // 0x5b4(0x04)
	struct FString ServerName; // 0x5b8(0x10)
	struct FScheduledUObject PawnOwner; // 0x5c8(0x88)
	struct FScheduledInt OwnerInventorySlot; // 0x650(0x78)
	struct FScheduledBool IsConsumedScheduled; // 0x6c8(0x70)
	char pad_738[0x8]; // 0x738(0x08)
	struct FScheduledTransform PickupTransform; // 0x740(0x130)
	struct FScheduledBool ConsumeOutcomeProcessed; // 0x870(0x70)
	struct FScheduledBool bDoubleDoseUsedOnce; // 0x8e0(0x70)
	bool bIsInHand; // 0x950(0x01)
	bool bIsDuplicatedToPersistent; // 0x951(0x01)
	char pad_952[0x6]; // 0x952(0x06)
	struct ARBPawn* PickingUpPawn; // 0x958(0x08)
	struct ARBContainer* Container; // 0x960(0x08)
	char pad_968[0x8]; // 0x968(0x08)
	struct FTransform ContainerPickupTransform; // 0x970(0x30)
	bool bHasBeenPickedUp; // 0x9a0(0x01)
	char pad_9A1[0x7]; // 0x9a1(0x07)
	struct AActor* UsedOnActor; // 0x9a8(0x08)
	char pad_9B0[0x8]; // 0x9b0(0x08)
	struct ARBPawn* LastDroppedBy; // 0x9b8(0x08)
	char pad_9C0[0x10]; // 0x9c0(0x10)

	void OnRep_PickupTransform(); // Function OPP.RBPickup.OnRep_PickupTransform // (Final|Native|Protected) // @ game+0x1dc0034
	void OnRep_PawnOwner(); // Function OPP.RBPickup.OnRep_PawnOwner // (Native|Protected) // @ game+0x1dc001c
	void OnRep_OwnerInventorySlot(); // Function OPP.RBPickup.OnRep_OwnerInventorySlot // (Native|Protected) // @ game+0x1dbfff0
	void OnRep_IsDuplicatedToPersistent(); // Function OPP.RBPickup.OnRep_IsDuplicatedToPersistent // (Final|Native|Protected) // @ game+0x1dbffdc
	void OnRep_IsConsumed(); // Function OPP.RBPickup.OnRep_IsConsumed // (Final|Native|Protected) // @ game+0x1dbffc0
	void OnRep_HasBeenPickedUp(); // Function OPP.RBPickup.OnRep_HasBeenPickedUp // (Final|Native|Protected) // @ game+0x1d3a1b8
	void OnRep_DoubleDoseUsedOnce(); // Function OPP.RBPickup.OnRep_DoubleDoseUsedOnce // (Final|Native|Protected) // @ game+0x1dbffa4
	void OnRep_ContainerPickupTransform(); // Function OPP.RBPickup.OnRep_ContainerPickupTransform // (Final|Native|Protected) // @ game+0x1dbff90
	void OnRep_Container(); // Function OPP.RBPickup.OnRep_Container // (Final|Native|Protected) // @ game+0x1dbff7c
	void OnRep_ConsumeOutcomeProcessed(); // Function OPP.RBPickup.OnRep_ConsumeOutcomeProcessed // (Final|Native|Protected) // @ game+0x1dbff60
	void OnPickupTransformChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBPickup.OnPickupTransformChangedCallback // (Final|Native|Protected) // @ game+0x1dbfee0
	void OnPawnOwnerChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBPickup.OnPawnOwnerChangedCallback // (Native|Protected) // @ game+0x1dbfe5c
	void OnOwnerInventorySlotChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBPickup.OnOwnerInventorySlotChangedCallback // (Native|Protected) // @ game+0x1dbfdd8
	void OnIsConsumedChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBPickup.OnIsConsumedChangedCallback // (Native|Protected) // @ game+0x1dbfd54
	void OnDoubleDoseUsedOnceChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBPickup.OnDoubleDoseUsedOnceChangedCallback // (Native|Protected) // @ game+0x1dbfcd0
	void OnConsumeItemStartNotify(struct ARBPawn* Pawn); // Function OPP.RBPickup.OnConsumeItemStartNotify // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void OnConsumeItemNotify(struct ARBPawn* Pawn); // Function OPP.RBPickup.OnConsumeItemNotify // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void OnConsumeItemCancelledNotify(struct ARBPawn* Pawn); // Function OPP.RBPickup.OnConsumeItemCancelledNotify // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Multicast_OnDropped(struct ARBPawn* Pawn, struct FTransform Transform, bool bPredicted); // Function OPP.RBPickup.Multicast_OnDropped // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1dbfb8c
	bool IsItemHeldInHand(); // Function OPP.RBPickup.IsItemHeldInHand // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dbec70
	bool IsConsumed(); // Function OPP.RBPickup.IsConsumed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dbec58
	struct ARBPawn* GetPawnOwner(); // Function OPP.RBPickup.GetPawnOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dbec34
	struct UMeshComponent* GetDisplayMesh(); // Function OPP.RBPickup.GetDisplayMesh // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cfe9b8
	struct ARBContainer* GetContainer(); // Function OPP.RBPickup.GetContainer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dbec1c
	void Event_SnapToState(); // Function OPP.RBPickup.Event_SnapToState // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnUpdateVisibility(bool bShouldBeHidden); // Function OPP.RBPickup.Event_OnUpdateVisibility // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnPickedUp(struct ARBPawn* Pawn); // Function OPP.RBPickup.Event_OnPickedUp // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnItemHeldInHandChanged(bool bHeldInHand); // Function OPP.RBPickup.Event_OnItemHeldInHandChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnContainerChanged(); // Function OPP.RBPickup.Event_OnContainerChanged // (Event|Protected|BlueprintEvent) // @ game+0x201e6d4
	bool CanSwapBetweenItem(struct ARBPickup* otherItem); // Function OPP.RBPickup.CanSwapBetweenItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dbe9b0
	void BP_UpdateDisplayMesh(); // Function OPP.RBPickup.BP_UpdateDisplayMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x1d3a1b8
	bool BP_TickItem(float DeltaTime); // Function OPP.RBPickup.BP_TickItem // (Native|Event|Public|BlueprintEvent) // @ game+0x1d9db18
	void BP_SetIsInteractible(bool interactible); // Function OPP.RBPickup.BP_SetIsInteractible // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dbe930
	struct ARBPlayer* BP_GetPlayerOwner(); // Function OPP.RBPickup.BP_GetPlayerOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dbe858
};

// Class OPP.RBActiveSkillController
// Size: 0x9e0 (Inherited: 0x9d0)
struct ARBActiveSkillController : ARBPickup {
	struct USkeletalMeshComponent* SkeletalDisplayMesh; // 0x9d0(0x08)
	struct ARBActiveSkill* ActiveSkillControlled; // 0x9d8(0x08)

	bool IsSkillActive(); // Function OPP.RBActiveSkillController.IsSkillActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ce8b70
	void Event_OnSkillActiveChanged(bool IsActive); // Function OPP.RBActiveSkillController.Event_OnSkillActiveChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBActiveSkillVisionComponent
// Size: 0x240 (Inherited: 0x220)
struct URBActiveSkillVisionComponent : USceneComponent {
	bool bOverrideMeshMaterials; // 0x218(0x01)
	bool bShowHaloWhenVisionActive; // 0x219(0x01)
	enum class EIntelType IntelType; // 0x21a(0x01)
	struct FMulticastInlineDelegate OnActiveSkillVisionChangedCallback; // 0x220(0x10)
	struct FMulticastInlineDelegate OnSeeThroughWallChangedCallback; // 0x230(0x10)

	void Event_OnSeeThroughWallChanged(bool Enabled); // Function OPP.RBActiveSkillVisionComponent.Event_OnSeeThroughWallChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnActiveSkillChanged(bool Enabled); // Function OPP.RBActiveSkillVisionComponent.Event_OnActiveSkillChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBUserWidget
// Size: 0x268 (Inherited: 0x260)
struct URBUserWidget : UUserWidget {
	struct UGameViewportClient* SpecificViewport; // 0x260(0x08)

	void RemoveFromGameViewport(); // Function OPP.RBUserWidget.RemoveFromGameViewport // (Final|Native|Public|BlueprintCallable) // @ game+0x1e314d4
	void Event_InputSourceChanged(bool bIsGamepad); // Function OPP.RBUserWidget.Event_InputSourceChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	struct TArray<struct FText> BP_SplitMessageToMultipleLines(struct FText& Message); // Function OPP.RBUserWidget.BP_SplitMessageToMultipleLines // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1e30a98
	bool BP_IsUsingGamepad(); // Function OPP.RBUserWidget.BP_IsUsingGamepad // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e309f4
	void AddToGameViewport(int32_t ZOrder); // Function OPP.RBUserWidget.AddToGameViewport // (Final|Native|Public|BlueprintCallable) // @ game+0x1e30918
};

// Class OPP.RBTaskMenuWidgetBase
// Size: 0x278 (Inherited: 0x268)
struct URBTaskMenuWidgetBase : URBUserWidget {
	struct ARBTaskManager* TaskManager; // 0x268(0x08)
	enum class ETaskType TaskType; // 0x270(0x01)
	char pad_271[0x7]; // 0x271(0x07)

	void Event_Refresh(); // Function OPP.RBTaskMenuWidgetBase.Event_Refresh // (Event|Protected|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBActiveTaskListWidget
// Size: 0x288 (Inherited: 0x278)
struct URBActiveTaskListWidget : URBTaskMenuWidgetBase {
	struct TArray<struct ARBTask*> ActiveTasks; // 0x278(0x10)
};

// Class OPP.RBActorGroup
// Size: 0x2a8 (Inherited: 0x248)
struct ARBActorGroup : AActor {
	char pad_248[0x18]; // 0x248(0x18)
	struct USceneComponent* ActorGroupRootComponent; // 0x260(0x08)
	struct TArray<struct AActor*> ActorClasses; // 0x268(0x10)
	struct TArray<struct FName> PossibleTags; // 0x278(0x10)
	struct TArray<struct TSoftObjectPtr<AActor>> ActorsRefs; // 0x288(0x10)
	struct TArray<struct AActor*> Actors; // 0x298(0x10)

	void SelectLinkedActors(); // Function OPP.RBActorGroup.SelectLinkedActors // (Final|Native|Public) // @ game+0x1521dbc
	struct TArray<struct AActor*> GetActors(); // Function OPP.RBActorGroup.GetActors // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ce89d4
	void CenterOnLinkedActors(); // Function OPP.RBActorGroup.CenterOnLinkedActors // (Final|Native|Public) // @ game+0x1ce88ec
	void AddSelectedActors(); // Function OPP.RBActorGroup.AddSelectedActors // (Final|Native|Public) // @ game+0x1521dbc
};

// Class OPP.RBActorPrevisComponent
// Size: 0x290 (Inherited: 0x270)
struct URBActorPrevisComponent : UChildActorComponent {
	bool bPrevisEnabled; // 0x268(0x01)
	bool bOnlyPrevisWhenSelected; // 0x269(0x01)
	bool bAutoSpawnOnBeginPlay; // 0x26a(0x01)
	struct AActor* runtimeChildActor; // 0x270(0x08)
	struct FMulticastInlineDelegate OnActorPrevisRuntimeChildActorChanged; // 0x278(0x10)
	char pad_28B[0x5]; // 0x28b(0x05)

	void OnRep_RuntimeChildActor(); // Function OPP.RBActorPrevisComponent.OnRep_RuntimeChildActor // (Final|Native|Public) // @ game+0x1ce8d88
	void BP_SpawnRuntimeChildActor(); // Function OPP.RBActorPrevisComponent.BP_SpawnRuntimeChildActor // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1ce8824
	void BP_ForceUpdateVisibility(); // Function OPP.RBActorPrevisComponent.BP_ForceUpdateVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x1521dbc
};

// Class OPP.RBActorProximityDetectionComponent
// Size: 0x140 (Inherited: 0xb8)
struct URBActorProximityDetectionComponent : UActorComponent {
	char pad_B8[0x8]; // 0xb8(0x08)
	struct TArray<struct AActor*> ActorClasses; // 0xc0(0x10)
	struct TArray<struct FName> PossibleTags; // 0xd0(0x10)
	struct TArray<struct TSoftObjectPtr<AActor>> ActorsRefs; // 0xe0(0x10)
	float ProximityDistance; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct FMulticastInlineDelegate OnActorEnterProximity; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnActorExitProximity; // 0x108(0x10)
	bool bEnableOnServer; // 0x118(0x01)
	char pad_119[0x7]; // 0x119(0x07)
	struct TArray<struct AActor*> CheckedActors; // 0x120(0x10)
	struct TArray<struct AActor*> ActorsInProximity; // 0x130(0x10)

	void OnPawnUnregistered(struct ARBPawn* RBPawn); // Function OPP.RBActorProximityDetectionComponent.OnPawnUnregistered // (Final|Native|Private) // @ game+0x1ce8c2c
	void OnPawnRegistered(struct ARBPawn* RBPawn); // Function OPP.RBActorProximityDetectionComponent.OnPawnRegistered // (Final|Native|Private) // @ game+0x1ce8bac
	void Event_OnActorExitProximity(struct AActor* Actor); // Function OPP.RBActorProximityDetectionComponent.Event_OnActorExitProximity // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnActorEnterProximity(struct AActor* Actor); // Function OPP.RBActorProximityDetectionComponent.Event_OnActorEnterProximity // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void ActorProximityDetectionComponentEvent__DelegateSignature(struct AActor* Actor); // DelegateFunction OPP.RBActorProximityDetectionComponent.ActorProximityDetectionComponentEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
};

// Class OPP.RBAddFriendWidget
// Size: 0x2e0 (Inherited: 0x268)
struct URBAddFriendWidget : URBUserWidget {
	char pad_268[0x78]; // 0x268(0x78)

	void ShowProfile(); // Function OPP.RBAddFriendWidget.ShowProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce90c0
	void SendPlatformFriendRequest(); // Function OPP.RBAddFriendWidget.SendPlatformFriendRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce9038
	void SendFriendRequest(); // Function OPP.RBAddFriendWidget.SendFriendRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce8fc0
	void ResolveProfile(struct FString friendCode); // Function OPP.RBAddFriendWidget.ResolveProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce8ee4
	bool IsOperationPending(); // Function OPP.RBAddFriendWidget.IsOperationPending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ce8b44
	bool IsInitialDataPending(); // Function OPP.RBAddFriendWidget.IsInitialDataPending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ce8b18
	void Init(); // Function OPP.RBAddFriendWidget.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce8b04
	bool HasProfile(); // Function OPP.RBAddFriendWidget.HasProfile // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ce8ae8
	enum class EProfilePlatform GetProfilePlatform(); // Function OPP.RBAddFriendWidget.GetProfilePlatform // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ce8ac0
	struct FString GetName(); // Function OPP.RBAddFriendWidget.GetName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ce8a5c
	struct FString GetFriendCode(); // Function OPP.RBAddFriendWidget.GetFriendCode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ce8a40
	struct FString FilterFriendCodeInputText(struct FString inputText); // Function OPP.RBAddFriendWidget.FilterFriendCodeInputText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ce892c
	void Event_ResolveCompleted(); // Function OPP.RBAddFriendWidget.Event_ResolveCompleted // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_Refresh(); // Function OPP.RBAddFriendWidget.Event_Refresh // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnError(); // Function OPP.RBAddFriendWidget.Event_OnError // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_Init(); // Function OPP.RBAddFriendWidget.Event_Init // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_Done(); // Function OPP.RBAddFriendWidget.Event_Done // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void CopyFriendCode(); // Function OPP.RBAddFriendWidget.CopyFriendCode // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1ce8900
	bool CanShowProfile(); // Function OPP.RBAddFriendWidget.CanShowProfile // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ce8880
	bool CanSendPlatformFriendRequest(); // Function OPP.RBAddFriendWidget.CanSendPlatformFriendRequest // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ce885c
	bool CanSendFriendRequest(); // Function OPP.RBAddFriendWidget.CanSendFriendRequest // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ce8838
};

// Class OPP.RBAIActivity
// Size: 0x48 (Inherited: 0x28)
struct URBAIActivity : UObject {
	struct ARBBot* bot; // 0x28(0x08)
	struct ARBNPC* NPC; // 0x30(0x08)
	struct URBAIPlayerManager* PlayerMgr; // 0x38(0x08)
	char pad_40[0x8]; // 0x40(0x08)
};

// Class OPP.RBAIActivityChase
// Size: 0xe0 (Inherited: 0x48)
struct URBAIActivityChase : URBAIActivity {
	struct ARBPlayer* TargetPlayer; // 0x48(0x08)
	char pad_50[0x30]; // 0x50(0x30)
	struct URBAreaExitPoint* PathBlockingExitPoint; // 0x80(0x08)
	char pad_88[0x10]; // 0x88(0x10)
	struct ARBNPC* YieldingToNPC; // 0x98(0x08)
	char pad_A0[0x8]; // 0xa0(0x08)
	float SprintSpeedGain; // 0xa8(0x04)
	char pad_AC[0x24]; // 0xac(0x24)
	struct ARBPlayer* LastActivelyChasedPlayer; // 0xd0(0x08)
	char pad_D8[0x8]; // 0xd8(0x08)
};

// Class OPP.RBAIActivityInvestigate
// Size: 0x258 (Inherited: 0x48)
struct URBAIActivityInvestigate : URBAIActivity {
	struct ARBPlayer* TargetPlayer; // 0x48(0x08)
	struct AActor* InitialInvestigationActor; // 0x50(0x08)
	struct TArray<struct FInvestigationPoint> InvestigationPoints; // 0x58(0x10)
	char pad_68[0x14]; // 0x68(0x14)
	int32_t NbPointsToCheck; // 0x7c(0x04)
	int32_t NbPointsChecked; // 0x80(0x04)
	bool bInvestigatingDisturbance; // 0x84(0x01)
	char pad_85[0x13]; // 0x85(0x13)
	bool bAtInvestigationPoint; // 0x98(0x01)
	char pad_99[0x27]; // 0x99(0x27)
	struct FInvestigationPoint CurrentInvestigationPoint; // 0xc0(0xc0)
	struct FNPCInvestigationSelectedAnimData PreselectedAnimData; // 0x180(0x30)
	bool bDynamicLookActive; // 0x1b0(0x01)
	bool bDynamicLookExplicit; // 0x1b1(0x01)
	char pad_1B2[0x2]; // 0x1b2(0x02)
	float DynamicLookStartedTime; // 0x1b4(0x04)
	char pad_1B8[0x10]; // 0x1b8(0x10)
	struct TArray<struct FInvestigationInterestPointData> InterestPoints; // 0x1c8(0x10)
	char pad_1D8[0x8]; // 0x1d8(0x08)
	struct TArray<struct URBInvestigationComponent*> InvestigatedPoints; // 0x1e0(0x10)
	char pad_1F0[0x68]; // 0x1f0(0x68)
};

// Class OPP.RBAIAwarenessState
// Size: 0x38 (Inherited: 0x28)
struct URBAIAwarenessState : UObject {
	enum class EAIAwarenessStateType Type; // 0x28(0x01)
	enum class EAIAwarenessStateType PreviousState; // 0x29(0x01)
	char pad_2A[0x2]; // 0x2a(0x02)
	float StartedTimestamp; // 0x2c(0x04)
	struct URBAIPlayerManager* ManagerOwner; // 0x30(0x08)
};

// Class OPP.RBAIAmbientAwarenessState
// Size: 0x68 (Inherited: 0x38)
struct URBAIAmbientAwarenessState : URBAIAwarenessState {
	enum class EAmbientAwarenessPhase Phase; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	float StationStartTimestamp; // 0x3c(0x04)
	struct FAIStimulusInfo HighestPriorityStimulus; // 0x40(0x20)
	struct URBAmbientStationComponent* CurrentAmbientStation; // 0x60(0x08)
};

// Class OPP.RBAIScriptedState
// Size: 0x38 (Inherited: 0x38)
struct URBAIScriptedState : URBAIAwarenessState {
};

// Class OPP.RBAIUnawareState
// Size: 0x68 (Inherited: 0x38)
struct URBAIUnawareState : URBAIAwarenessState {
	float AwarenessMeter; // 0x38(0x04)
	float LastMeterIncreaseTimestamp; // 0x3c(0x04)
	bool bHasPlayedIncreaseVO; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	struct FAIStimulusInfo HighestPriorityStimulus; // 0x48(0x20)
};

// Class OPP.RBAISuspiciousState
// Size: 0x78 (Inherited: 0x38)
struct URBAISuspiciousState : URBAIAwarenessState {
	float AwarenessMeter; // 0x38(0x04)
	float LastMeterIncreaseTimestamp; // 0x3c(0x04)
	float LastInvestigationTimestamp; // 0x40(0x04)
	float LastSourceInvestigationStartedTimestamp; // 0x44(0x04)
	bool bWaitingForStartle; // 0x48(0x01)
	bool bNeedStartle; // 0x49(0x01)
	bool bWaitingForValidState; // 0x4a(0x01)
	char pad_4B[0x5]; // 0x4b(0x05)
	struct FAIStimulusInfo TriggeringStimulus; // 0x50(0x20)
	char pad_70[0x8]; // 0x70(0x08)
};

// Class OPP.RBAIAlertedState
// Size: 0x70 (Inherited: 0x38)
struct URBAIAlertedState : URBAIAwarenessState {
	float ProgressiveAwarenessMeter; // 0x38(0x04)
	float LastInvestigationTimestamp; // 0x3c(0x04)
	float LastSourceInvestigationStartedTimestamp; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct FAIStimulusInfo InvestigationStimulus; // 0x48(0x20)
	char pad_68[0x8]; // 0x68(0x08)
};

// Class OPP.RBAIBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct URBAIBlueprintLibrary : UBlueprintFunctionLibrary {

	void ZoneDefense(struct ARBBot* bot, struct TArray<struct AActor*>& zonePatrolPoints, struct AActor* fallbackLocation, struct ARBZoneDefenseMarker* defensiveSpline, struct FRBAIConditionSet& ExitConditions, bool bCanAttack); // Function OPP.RBAIBlueprintLibrary.ZoneDefense // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cf1bb4
	void WakeUp(struct ARBBot* bot, bool bScream); // Function OPP.RBAIBlueprintLibrary.WakeUp // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cf1b00
	void WaitForAIConditions(struct ARBBot* bot, struct FLatentActionInfo LatentInfo, struct FRBAIConditionSet& conditionSet); // Function OPP.RBAIBlueprintLibrary.WaitForAIConditions // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cf19c8
	void TryPlayAttackType(struct ARBBot* bot, enum class EAttackType AttackType, float MovementSpeed, struct AActor* TargetActor); // Function OPP.RBAIBlueprintLibrary.TryPlayAttackType // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cf188c
	void TriggerStimulusFromPlayer(enum class ETriggeringStimulusType StimulusType, struct ARBPlayer* Player); // Function OPP.RBAIBlueprintLibrary.TriggerStimulusFromPlayer // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cf17d8
	void TriggerStimulus(enum class ETriggeringStimulusType StimulusType, struct FVector& Location, struct AActor* SourceActor); // Function OPP.RBAIBlueprintLibrary.TriggerStimulus // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cf16a4
	void TriggerDoubleSidedStimulusFromPlayer(enum class ETriggeringStimulusType StimulusType, struct ARBPlayer* Player, struct FVector& baseLocation, struct FVector& offsetWS); // Function OPP.RBAIBlueprintLibrary.TriggerDoubleSidedStimulusFromPlayer // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cf1550
	void TriggerDoubleSidedStimulus(enum class ETriggeringStimulusType StimulusType, struct AActor* SourceActor, struct FVector& baseLocation, struct FVector& offsetWS); // Function OPP.RBAIBlueprintLibrary.TriggerDoubleSidedStimulus // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cf13e4
	void TriggerCustomHighPriorityStimulusFromPlayer(struct ARBPlayer* Player, float fullLoudnessRange, float MaxHearingDistance); // Function OPP.RBAIBlueprintLibrary.TriggerCustomHighPriorityStimulusFromPlayer // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cf12e8
	void TriggerCustomHighPriorityStimulus(struct FVector& NoiseLocation, struct AActor* Source, float fullLoudnessRange, float maxBotDistance); // Function OPP.RBAIBlueprintLibrary.TriggerCustomHighPriorityStimulus // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cf11ac
	void TestAIConditions(struct ARBBot* bot, enum class EAIBoolCommandResult& operationResult, struct FRBAIConditionSet& conditionSet); // Function OPP.RBAIBlueprintLibrary.TestAIConditions // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cf1090
	void SummonNPC(enum class ENPCType NPCType, enum class ESpecialBotInitialBehavior initialBehavior, enum class EMonsterClosetSelectionMode closetSelectionMethod, struct ARBPlayer* TargetPlayer, struct ARBMonsterCloset* specificMonsterCloset, float MinBotLifetime, struct ARBBot*& spawnedBot, struct ARBNPC*& spawnedPawn); // Function OPP.RBAIBlueprintLibrary.SummonNPC // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cf0e30
	void StartPatrolInvestigateVolumeGroup(struct ARBBot* bot, enum class EAICommandResult& operationResult, struct FLatentActionInfo LatentInfo, struct TArray<struct TSoftObjectPtr<ARBVolumeGroup>>& RestrictedVolumeGroups, bool bSetLeashWithVolumes); // Function OPP.RBAIBlueprintLibrary.StartPatrolInvestigateVolumeGroup // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cf0c60
	void StartPatrolInvestigateSoft(struct ARBBot* bot, enum class EAICommandResult& operationResult, struct FLatentActionInfo LatentInfo, struct TArray<struct TSoftObjectPtr<AVolume>>& RestrictedVolumes, bool bSetLeashWithVolumes); // Function OPP.RBAIBlueprintLibrary.StartPatrolInvestigateSoft // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cf0a90
	void StartPatrolInvestigate(struct ARBBot* bot, enum class EAICommandResult& operationResult, struct FLatentActionInfo LatentInfo, struct TArray<struct AVolume*>& RestrictedVolumes, bool bSetLeashWithVolumes); // Function OPP.RBAIBlueprintLibrary.StartPatrolInvestigate // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cf0898
	void StartPatrol(struct ARBBot* bot, enum class EAICommandResult& operationResult, struct FLatentActionInfo LatentInfo, struct TArray<struct ARBWaypoint*>& WaypointList, enum class EPatrolWaypointSelectionMode Mode, float overrideSpeed, bool bForced); // Function OPP.RBAIBlueprintLibrary.StartPatrol // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cf0630
	void SpawnPouncers(struct TArray<struct AVolume*>& allowedVolumes, struct FLatentActionInfo LatentInfo, int32_t minPouncers, int32_t maxPouncers, struct URBAIConfig* configOverride); // Function OPP.RBAIBlueprintLibrary.SpawnPouncers // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cf0474
	void SpawnPouncer(struct AActor* hidespot, struct URBAIConfig* configOverride, struct ARBBot*& spawnedBot, struct ARBNPC*& spawnedPawn, struct FLatentActionInfo LatentInfo); // Function OPP.RBAIBlueprintLibrary.SpawnPouncer // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cf01cc
	void SpawnAISync(struct ARBNPC* PawnClass, struct URBAIConfig* configAsset, struct FAIConfigData ConfigOverrides, struct TArray<struct URBPartialAIConfig*>& AdditionalConfigs, struct URBVOMapping* VOMappingOverride, struct AActor* spawnPoint, struct ARBBot*& spawnedBot, struct ARBNPC*& spawnedPawn); // Function OPP.RBAIBlueprintLibrary.SpawnAISync // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cefeec
	void SpawnAI(struct ARBNPC* PawnClass, struct URBAIConfig* configAsset, struct FAIConfigData ConfigOverrides, struct TArray<struct URBPartialAIConfig*>& AdditionalConfigs, struct URBVOMapping* VOMappingOverride, struct AActor* spawnPoint, struct ARBBot*& spawnedBot, struct ARBNPC*& spawnedPawn, struct FLatentActionInfo LatentInfo); // Function OPP.RBAIBlueprintLibrary.SpawnAI // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cefba0
	void SetVOMapOverrides(struct ARBBot* bot, struct URBVOMappingOverride* voOverrides); // Function OPP.RBAIBlueprintLibrary.SetVOMapOverrides // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cef980
	void SetupAmbush(struct ARBBot* bot, struct URBHidespotComponent* hidespot, bool bImmediate); // Function OPP.RBAIBlueprintLibrary.SetupAmbush // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cefaa4
	void SetupAIDirectorForOpenedSections(struct URBAIDirectorConfig* directorConfig); // Function OPP.RBAIBlueprintLibrary.SetupAIDirectorForOpenedSections // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cefa34
	void SetupAIDirector(struct URBAIDirectorConfig* directorConfig); // Function OPP.RBAIBlueprintLibrary.SetupAIDirector // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cefa34
	void SetSpecificTarget(struct ARBBot* bot, struct ARBPlayer* TargetPlayer); // Function OPP.RBAIBlueprintLibrary.SetSpecificTarget // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cef8cc
	void SetSnipingSplines(struct ARBBot* bot, struct TArray<struct ARBSplineActor*>& splineMarkers); // Function OPP.RBAIBlueprintLibrary.SetSnipingSplines // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cef7fc
	void SetLeashes(struct ARBBot* bot, struct TArray<struct ARBLeashMarker*>& leashMarkers); // Function OPP.RBAIBlueprintLibrary.SetLeashes // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cef72c
	void SetLeashByVolumesSoft(struct ARBBot* bot, struct TArray<struct TSoftObjectPtr<AVolume>>& RestrictedVolumes); // Function OPP.RBAIBlueprintLibrary.SetLeashByVolumesSoft // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cef660
	void SetLeashByVolumes(struct ARBBot* bot, struct TArray<struct AVolume*>& RestrictedVolumes); // Function OPP.RBAIBlueprintLibrary.SetLeashByVolumes // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cef590
	void SetLeashByVolumeGroups(struct ARBBot* bot, struct TArray<struct TSoftObjectPtr<ARBVolumeGroup>>& RestrictedVolumeGroups); // Function OPP.RBAIBlueprintLibrary.SetLeashByVolumeGroups // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cef4c4
	void SetLeash(struct ARBBot* bot, struct ARBLeashMarker* leashMarker); // Function OPP.RBAIBlueprintLibrary.SetLeash // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cef410
	void SetGuard(struct ARBBot* bot, struct AActor* guardAnchor, struct FRBAIConditionSet& ExitConditions, bool bCanAttack, float lateralBlockingDistance); // Function OPP.RBAIBlueprintLibrary.SetGuard // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cef278
	void SetFixedAnimPose(struct ARBBot* bot, struct UAnimSequence* AnimToPlay, float animTime); // Function OPP.RBAIBlueprintLibrary.SetFixedAnimPose // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cef178
	void SetConditionalAIConfig(struct ARBBot* bot, struct FRBAIConditionSet& conditionSet, struct FAIConfigData ConfigOverrides, bool bStayActivated); // Function OPP.RBAIBlueprintLibrary.SetConditionalAIConfig // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ceefc4
	void SetAvailableAmbientActivityMarkers(struct ARBBot* bot, struct TArray<struct ARBAmbientActivityMarker*>& ambientMarkers); // Function OPP.RBAIBlueprintLibrary.SetAvailableAmbientActivityMarkers // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ceeef4
	void SetAIConfig(struct ARBBot* bot, struct URBAIConfig* configAsset, struct TArray<struct URBPartialAIConfig*>& AdditionalConfigs, struct FAIConfigData ConfigOverrides, bool bSetAsDefault, bool bResetAwarenessState); // Function OPP.RBAIBlueprintLibrary.SetAIConfig // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ceecb0
	void SeekRetirement(struct ARBBot* bot, bool bPriorityOverActiveBehaviors); // Function OPP.RBAIBlueprintLibrary.SeekRetirement // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1ceebfc
	void RetirePouncersInVolumes(struct TArray<struct AVolume*>& allowedVolumes); // Function OPP.RBAIBlueprintLibrary.RetirePouncersInVolumes // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ceeb74
	void ResetAIConfig(struct ARBBot* bot); // Function OPP.RBAIBlueprintLibrary.ResetAIConfig // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1ceeb04
	void RequestPatrol(struct ARBBot* bot, struct TArray<struct ARBWaypoint*>& WaypointList, enum class EPatrolWaypointSelectionMode Mode, float overrideSpeed, bool bForced); // Function OPP.RBAIBlueprintLibrary.RequestPatrol // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cee968
	void RequestInvestigatePoints(struct ARBBot* bot, struct TArray<struct AActor*>& pointList, enum class EInvestigationPointSelectionMode SelectionMode, bool bAware, bool bContinueInvestigatingWhenDone, int32_t maxNumberOfPoints, bool bOnlySpecifiedPoints); // Function OPP.RBAIBlueprintLibrary.RequestInvestigatePoints // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cee760
	void RequestInvestigatePoint(struct ARBBot* bot, struct AActor* InvestigationPoint, bool bAware, bool bContinueInvestigatingWhenDone); // Function OPP.RBAIBlueprintLibrary.RequestInvestigatePoint // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cee628
	void RequestInvestigateLocation(struct ARBBot* bot, struct FVector& investigationLoc, bool bAware, bool bContinueInvestigatingWhenDone); // Function OPP.RBAIBlueprintLibrary.RequestInvestigateLocation // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cee4c0
	void RequestInvestigate(struct ARBBot* bot, bool bAware); // Function OPP.RBAIBlueprintLibrary.RequestInvestigate // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cee3dc
	void RequestGotoAmbientMarker(struct ARBBot* bot, struct AActor* ambientLocation); // Function OPP.RBAIBlueprintLibrary.RequestGotoAmbientMarker // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cee328
	void RequestGoto(struct ARBBot* bot, struct AActor* Destination, float overrideSpeed, bool bTurnToRotation, float distanceBuffer, bool bForced); // Function OPP.RBAIBlueprintLibrary.RequestGoto // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cedecc
	void PlaySingleShotAnim(struct ARBBot* bot, enum class EAICommandResult& operationResult, struct FLatentActionInfo LatentInfo, struct UAnimSequence* AnimSeq); // Function OPP.RBAIBlueprintLibrary.PlaySingleShotAnim // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cedc04
	void PlayScriptedVO(struct ARBBot* bot, struct UAkAudioEvent* AudioEvent, enum class EVOPriority VOPriority); // Function OPP.RBAIBlueprintLibrary.PlayScriptedVO // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cedb0c
	void PlayLoopingIdle(struct ARBBot* bot, enum class EAICommandResult& operationResult, struct FLatentActionInfo LatentInfo, struct UAnimSequence* IdleAnim, bool bIgnorePlayers, struct FRBAIConditionSet& specificExitConditions, struct UAnimSequence* specificExitAnim); // Function OPP.RBAIBlueprintLibrary.PlayLoopingIdle // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ced70c
	void PlayHitReaction(struct ARBBot* bot, enum class ENPCHitReactionType ReactionType, struct FVector& impactSourceLocation, bool bPlayEffects); // Function OPP.RBAIBlueprintLibrary.PlayHitReaction // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1ced5d0
	void PlayContextualVO(struct ARBBot* bot, enum class EVOContext Context); // Function OPP.RBAIBlueprintLibrary.PlayContextualVO // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1ced51c
	void OverrideBotAnims(struct ARBBot* bot, struct URBAnimReferences* AnimRefsAsset); // Function OPP.RBAIBlueprintLibrary.OverrideBotAnims // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1ced468
	void KillBot(struct ARBBot* bot); // Function OPP.RBAIBlueprintLibrary.KillBot // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1ced3f8
	void KillAllBots(); // Function OPP.RBAIBlueprintLibrary.KillAllBots // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1ced3bc
	bool IsAnyBotOfType(enum class ENPCType NPCType); // Function OPP.RBAIBlueprintLibrary.IsAnyBotOfType // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ced344
	void InvestigatePoints(struct ARBBot* bot, enum class EAICommandResult& operationResult, struct FLatentActionInfo LatentInfo, struct TArray<struct AActor*>& pointList, enum class EInvestigationPointSelectionMode SelectionMode, bool bAware, bool bContinueInvestigatingWhenDone, int32_t maxNumberOfPoints, bool bOnlySpecifiedPoints); // Function OPP.RBAIBlueprintLibrary.InvestigatePoints // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ced078
	void InvestigatePoint(struct ARBBot* bot, enum class EAICommandResult& operationResult, struct FLatentActionInfo LatentInfo, struct AActor* InvestigationPoint, bool bAware, bool bContinueInvestigatingWhenDone); // Function OPP.RBAIBlueprintLibrary.InvestigatePoint // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cece90
	void InvestigateLocation(struct ARBBot* bot, enum class EAICommandResult& operationResult, struct FLatentActionInfo LatentInfo, struct FVector& investigationLoc, bool bAware, bool bContinueInvestigatingWhenDone); // Function OPP.RBAIBlueprintLibrary.InvestigateLocation // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cecc64
	void Investigate(struct ARBBot* bot, enum class EAICommandResult& operationResult, struct FLatentActionInfo LatentInfo, bool bAware); // Function OPP.RBAIBlueprintLibrary.Investigate // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cecac8
	void IgnoreAllPlayers(struct ARBBot* bot, bool bBotIgnoreAllPlayers); // Function OPP.RBAIBlueprintLibrary.IgnoreAllPlayers // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1ceca14
	void GotoSabotage(struct ARBBot* bot, struct AActor* sabotageTarget); // Function OPP.RBAIBlueprintLibrary.GotoSabotage // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cec960
	void GotoLocation(struct ARBBot* bot, enum class EAICommandResult& operationResult, struct FLatentActionInfo LatentInfo, struct AActor* Destination, float overrideSpeed, bool bTurnToRotation, float distanceBuffer, bool bForced); // Function OPP.RBAIBlueprintLibrary.GotoLocation // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cec44c
	void GotoHidingSpot(struct ARBBot* bot, struct AActor* hidespot); // Function OPP.RBAIBlueprintLibrary.GotoHidingSpot // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cec398
	void GotoAmbientMarker(struct ARBBot* bot, struct AActor* ambientLocation, enum class EAICommandResult& operationResult, struct FLatentActionInfo LatentInfo); // Function OPP.RBAIBlueprintLibrary.GotoAmbientMarker // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cec238
	void GoRetireInCloset(struct ARBBot* bot, struct ARBMonsterCloset* closet, bool bPriorityOverActiveBehaviors); // Function OPP.RBAIBlueprintLibrary.GoRetireInCloset // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cec13c
	void GlobalIgnoreAllPlayers(bool bIgnoreAllPlayers); // Function OPP.RBAIBlueprintLibrary.GlobalIgnoreAllPlayers // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cec0b8
	int32_t GetNumberOfBotsByType(enum class ENPCType NPCType); // Function OPP.RBAIBlueprintLibrary.GetNumberOfBotsByType // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cec038
	int32_t GetNumberOfBotsAroundInActivity(enum class EAIActivity Activity, struct FVector& Point, float Radius, struct ARBPawn* excludedPawn); // Function OPP.RBAIBlueprintLibrary.GetNumberOfBotsAroundInActivity // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1cebef8
	int32_t GetNumberOfBotsAround(struct FVector& Point, float Radius, struct ARBPawn* excludedPawn); // Function OPP.RBAIBlueprintLibrary.GetNumberOfBotsAround // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1cebde8
	int32_t GetNumberOfBots(); // Function OPP.RBAIBlueprintLibrary.GetNumberOfBots // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cebda8
	struct ARBNPC* GetNPCByType(enum class ENPCType NPCType); // Function OPP.RBAIBlueprintLibrary.GetNPCByType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cebd00
	struct ARBNPC* GetNPCByClass(struct ARBNPC* NPCClass); // Function OPP.RBAIBlueprintLibrary.GetNPCByClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cebc28
	void GetBotsByType(enum class ENPCType NPCType, struct TArray<struct ARBBot*>& bots); // Function OPP.RBAIBlueprintLibrary.GetBotsByType // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1cebb58
	void GetBotsByClass(struct ARBNPC* NPCClass, struct TArray<struct ARBBot*>& bots); // Function OPP.RBAIBlueprintLibrary.GetBotsByClass // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1ceba88
	struct ARBBot* GetBotByType(enum class ENPCType NPCType); // Function OPP.RBAIBlueprintLibrary.GetBotByType // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ceb9d4
	struct ARBBot* GetBotByClass(struct ARBNPC* NPCClass); // Function OPP.RBAIBlueprintLibrary.GetBotByClass // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ceb8e0
	void ForcePlayStartleAnimation(struct ARBBot* bot, enum class EStartleType startledType, enum class EStartleSpeed startledSpeed, float wsYaw); // Function OPP.RBAIBlueprintLibrary.ForcePlayStartleAnimation // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1ceb7a4
	void ForceGasGroupAttack(struct ARBBot* bot, struct FVector Direction); // Function OPP.RBAIBlueprintLibrary.ForceGasGroupAttack // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1ceb6e0
	void ForceExecute(struct ARBBot* bot, struct ARBPlayer* Player); // Function OPP.RBAIBlueprintLibrary.ForceExecute // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1ceb62c
	void ForceChaseUntilContact(struct ARBBot* bot, struct ARBPlayer* TargetPlayer); // Function OPP.RBAIBlueprintLibrary.ForceChaseUntilContact // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1ceb578
	void ForceAttackSequence(struct ARBBot* bot, struct UAnimSequence* forcedAnimSequence); // Function OPP.RBAIBlueprintLibrary.ForceAttackSequence // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1ceb4c4
	void ExitHidingSpot(struct ARBBot* bot); // Function OPP.RBAIBlueprintLibrary.ExitHidingSpot // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1ceb454
	void DisableAIDirector(); // Function OPP.RBAIBlueprintLibrary.DisableAIDirector // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1ceb440
	void DetachFromScriptedAnimStation(struct ARBBot* bot); // Function OPP.RBAIBlueprintLibrary.DetachFromScriptedAnimStation // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1ceb3d0
	void ClearVOMapOverrides(struct ARBBot* bot); // Function OPP.RBAIBlueprintLibrary.ClearVOMapOverrides // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1ceb360
	void ClearSpecificTarget(struct ARBBot* bot); // Function OPP.RBAIBlueprintLibrary.ClearSpecificTarget // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1ceb2f0
	void ClearScriptedCommands(struct ARBBot* bot); // Function OPP.RBAIBlueprintLibrary.ClearScriptedCommands // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1ceb280
	void ClearLeash(struct ARBBot* bot); // Function OPP.RBAIBlueprintLibrary.ClearLeash // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1ceb210
	void AttachToScriptedAnimStation(struct ARBBot* bot, enum class EAICommandResult& operationResult, struct FLatentActionInfo LatentInfo, struct ARBScriptedAnimStation* Station, struct USkeletalMeshComponent* MeshTarget, bool bIgnorePlayers, struct FRBAIConditionSet& specificExitConditions, float StartDelay); // Function OPP.RBAIBlueprintLibrary.AttachToScriptedAnimStation // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ceaf74
};

// Class OPP.RBAIChaseAwarenessState
// Size: 0x50 (Inherited: 0x38)
struct URBAIChaseAwarenessState : URBAIAwarenessState {
	struct ARBPlayer* TargetPlayer; // 0x38(0x08)
	struct ARBPlayer* KnockdownTargetToForget; // 0x40(0x08)
	char pad_48[0x8]; // 0x48(0x08)
};

// Class OPP.RBAISneakChaseAwarenessState
// Size: 0x50 (Inherited: 0x50)
struct URBAISneakChaseAwarenessState : URBAIChaseAwarenessState {
};

// Class OPP.RBAIAlwaysChaseAwarenessState
// Size: 0x50 (Inherited: 0x50)
struct URBAIAlwaysChaseAwarenessState : URBAIChaseAwarenessState {
};

// Class OPP.RBAICondition
// Size: 0x30 (Inherited: 0x28)
struct URBAICondition : UObject {
	bool bInversed; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
};

// Class OPP.RBAICondition_AllOfSubConditions
// Size: 0x40 (Inherited: 0x30)
struct URBAICondition_AllOfSubConditions : URBAICondition {
	struct TArray<struct URBAICondition*> SubConditions; // 0x30(0x10)
};

// Class OPP.RBAICondition_AnyOfSubConditions
// Size: 0x40 (Inherited: 0x30)
struct URBAICondition_AnyOfSubConditions : URBAICondition {
	struct TArray<struct URBAICondition*> SubConditions; // 0x30(0x10)
};

// Class OPP.RBAICondition_AnyPlayerInVolumes
// Size: 0x40 (Inherited: 0x30)
struct URBAICondition_AnyPlayerInVolumes : URBAICondition {
	struct TArray<struct ARBPlayerTriggerVolume*> TestVolumes; // 0x30(0x10)
};

// Class OPP.RBAICondition_IsInVolumes
// Size: 0x40 (Inherited: 0x30)
struct URBAICondition_IsInVolumes : URBAICondition {
	struct TArray<struct TSoftObjectPtr<AVolume>> TestVolumes; // 0x30(0x10)
};

// Class OPP.RBAICondition_IsInRoom
// Size: 0x58 (Inherited: 0x30)
struct URBAICondition_IsInRoom : URBAICondition {
	struct TSoftObjectPtr<ARBRoom> TestRoom; // 0x30(0x28)
};

// Class OPP.RBAICondition_IsInRoomGroup
// Size: 0x58 (Inherited: 0x30)
struct URBAICondition_IsInRoomGroup : URBAICondition {
	struct TSoftObjectPtr<ARBRoomGroup> TestRoomGroup; // 0x30(0x28)
};

// Class OPP.RBAICondition_AnyPlayerInSight
// Size: 0x30 (Inherited: 0x30)
struct URBAICondition_AnyPlayerInSight : URBAICondition {
};

// Class OPP.RBAICondition_IsBotInStation
// Size: 0x30 (Inherited: 0x30)
struct URBAICondition_IsBotInStation : URBAICondition {
};

// Class OPP.RBAICondition_AnyPlayerCloseToPoint
// Size: 0x40 (Inherited: 0x30)
struct URBAICondition_AnyPlayerCloseToPoint : URBAICondition {
	struct AActor* TestActor; // 0x30(0x08)
	float MaxHorzDistance; // 0x38(0x04)
	float MaxVertDistance; // 0x3c(0x04)
};

// Class OPP.RBAICondition_AnyBotCloseToPoint
// Size: 0x58 (Inherited: 0x30)
struct URBAICondition_AnyBotCloseToPoint : URBAICondition {
	struct AActor* TestActor; // 0x30(0x08)
	float MaxHorzDistance; // 0x38(0x04)
	float MaxVertDistance; // 0x3c(0x04)
	bool bRequireSpecificType; // 0x40(0x01)
	enum class ENPCType SpecificType; // 0x41(0x01)
	char pad_42[0x6]; // 0x42(0x06)
	struct TArray<enum class EAIActivity> SpecificActivities; // 0x48(0x10)
};

// Class OPP.RBAICondition_IsIdle
// Size: 0x30 (Inherited: 0x30)
struct URBAICondition_IsIdle : URBAICondition {
};

// Class OPP.RBAICondition_IsInvestigating
// Size: 0x30 (Inherited: 0x30)
struct URBAICondition_IsInvestigating : URBAICondition {
};

// Class OPP.RBAICondition_IsPatrolling
// Size: 0x30 (Inherited: 0x30)
struct URBAICondition_IsPatrolling : URBAICondition {
};

// Class OPP.RBAICondition_IsChasing
// Size: 0x30 (Inherited: 0x30)
struct URBAICondition_IsChasing : URBAICondition {
};

// Class OPP.RBAICondition_FasterThan
// Size: 0x38 (Inherited: 0x30)
struct URBAICondition_FasterThan : URBAICondition {
	float Speed; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class OPP.RBAICondition_CloseToPoint
// Size: 0x40 (Inherited: 0x30)
struct URBAICondition_CloseToPoint : URBAICondition {
	struct AActor* TestActor; // 0x30(0x08)
	float MaxHorzDistance; // 0x38(0x04)
	float MaxVertDistance; // 0x3c(0x04)
};

// Class OPP.RBAICondition_CloseToAnyPlayer
// Size: 0x38 (Inherited: 0x30)
struct URBAICondition_CloseToAnyPlayer : URBAICondition {
	float MaxHorzDistance; // 0x30(0x04)
	float MaxVertDistance; // 0x34(0x04)
};

// Class OPP.RBAICondition_CloseToAnotherBot
// Size: 0x50 (Inherited: 0x30)
struct URBAICondition_CloseToAnotherBot : URBAICondition {
	float MaxHorzDistance; // 0x30(0x04)
	float MaxVertDistance; // 0x34(0x04)
	bool bRequireSpecificType; // 0x38(0x01)
	enum class ENPCType SpecificType; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
	struct TArray<enum class EAIActivity> SpecificActivities; // 0x40(0x10)
};

// Class OPP.RBAICondition_HasDealtDamage
// Size: 0x38 (Inherited: 0x30)
struct URBAICondition_HasDealtDamage : URBAICondition {
	float TimeWindow; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class OPP.RBAICondition_HasTakenDamage
// Size: 0x38 (Inherited: 0x30)
struct URBAICondition_HasTakenDamage : URBAICondition {
	float TimeWindow; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class OPP.RBAICondition_HasChasedAPlayer
// Size: 0x38 (Inherited: 0x30)
struct URBAICondition_HasChasedAPlayer : URBAICondition {
	float TimeWindow; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class OPP.RBAICondition_HasSeenAPlayer
// Size: 0x38 (Inherited: 0x30)
struct URBAICondition_HasSeenAPlayer : URBAICondition {
	float TimeWindow; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class OPP.RBAICondition_HasBeenDisturbed
// Size: 0x38 (Inherited: 0x30)
struct URBAICondition_HasBeenDisturbed : URBAICondition {
	float TimeWindow; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class OPP.RBAICondition_HasKilledPlayers
// Size: 0x38 (Inherited: 0x30)
struct URBAICondition_HasKilledPlayers : URBAICondition {
	int32_t MinNumPlayersKilled; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class OPP.RBAICondition_IsAtSpawnLocation
// Size: 0x38 (Inherited: 0x30)
struct URBAICondition_IsAtSpawnLocation : URBAICondition {
	float MaxDistance; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class OPP.RBAICondition_IsInDarkness
// Size: 0x30 (Inherited: 0x30)
struct URBAICondition_IsInDarkness : URBAICondition {
};

// Class OPP.RBAICondition_TimeSinceSpawned
// Size: 0x38 (Inherited: 0x30)
struct URBAICondition_TimeSinceSpawned : URBAICondition {
	float MinimumTimeSinceSpawned; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class OPP.RBAICondition_SummonedByAIDirector
// Size: 0x30 (Inherited: 0x30)
struct URBAICondition_SummonedByAIDirector : URBAICondition {
};

// Class OPP.RBAICondition_Blueprint
// Size: 0x50 (Inherited: 0x30)
struct URBAICondition_Blueprint : URBAICondition {
	struct FString ConditionDescription; // 0x30(0x10)
	struct FString ConditionDescriptionInversed; // 0x40(0x10)

	bool Event_EvaluateCondition(struct ARBBot* bot); // Function OPP.RBAICondition_Blueprint.Event_EvaluateCondition // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBAICondition_MinimumHealthyPlayers
// Size: 0x38 (Inherited: 0x30)
struct URBAICondition_MinimumHealthyPlayers : URBAICondition {
	int32_t MinHealthyPlayers; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class OPP.RBAICondition_MaxActiveBots
// Size: 0x38 (Inherited: 0x30)
struct URBAICondition_MaxActiveBots : URBAICondition {
	int32_t MaximumNumberOfActiveBots; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class OPP.RBAICondition_MaxBotsByType
// Size: 0x38 (Inherited: 0x30)
struct URBAICondition_MaxBotsByType : URBAICondition {
	int32_t MaxBotsOfType; // 0x30(0x04)
	enum class ENPCType NPCType; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)
};

// Class OPP.RBAICondition_MaxBotsByTags
// Size: 0x78 (Inherited: 0x30)
struct URBAICondition_MaxBotsByTags : URBAICondition {
	int32_t MaxBotsWithTags; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct FGameplayTagContainer IncludeTags; // 0x38(0x20)
	struct FGameplayTagContainer ExcludeTags; // 0x58(0x20)
};

// Class OPP.RBAICondition_MaxParaspecialists
// Size: 0x38 (Inherited: 0x30)
struct URBAICondition_MaxParaspecialists : URBAICondition {
	int32_t MaxParaspecialists; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class OPP.RBAICondition_MaxPrimeAssets
// Size: 0x38 (Inherited: 0x30)
struct URBAICondition_MaxPrimeAssets : URBAICondition {
	int32_t MaxPrimeAssets; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class OPP.RBAICondition_StageTime
// Size: 0xf8 (Inherited: 0x30)
struct URBAICondition_StageTime : URBAICondition {
	struct FConfigurableFloat StageTimeThresholdInMinutes; // 0x30(0xc8)
};

// Class OPP.RBAICondition_MinimumGameDifficulty
// Size: 0x38 (Inherited: 0x30)
struct URBAICondition_MinimumGameDifficulty : URBAICondition {
	enum class EGameDifficulty MinDifficulty; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class OPP.RBAICondition_Adversity
// Size: 0xf8 (Inherited: 0x30)
struct URBAICondition_Adversity : URBAICondition {
	struct FConfigurableInt MinimumAdversityLevel; // 0x30(0xc8)
};

// Class OPP.RBAIConfig
// Size: 0x1200 (Inherited: 0x28)
struct URBAIConfig : UObject {
	struct URBAIConfig* Parent; // 0x28(0x08)
	struct FString OverridesDescription; // 0x30(0x10)
	struct FAIConfigData Config; // 0x40(0x11bc)
	char pad_11FC[0x4]; // 0x11fc(0x04)
};

// Class OPP.RBPartialAIConfig
// Size: 0x11f8 (Inherited: 0x28)
struct URBPartialAIConfig : UObject {
	struct FAIConfigData Overrides; // 0x28(0x11bc)
	char pad_11E4[0x4]; // 0x11e4(0x04)
	struct FString OverridesDescription; // 0x11e8(0x10)
};

// Class OPP.RBAIDirector
// Size: 0x14a8 (Inherited: 0x28)
struct URBAIDirector : UObject {
	struct FMulticastInlineDelegate OnAIDirectorSpawnedBot; // 0x28(0x10)
	struct URBAIManager* AIMgr; // 0x38(0x08)
	struct FRBAIRandomSpawning RandomSpawner; // 0x40(0x58)
	struct URBAIDirectorConfig* DirectorCfg; // 0x98(0x08)
	struct FSpecialistsConfigData SpecialistsConfig; // 0xa0(0x12f8)
	struct TArray<struct FSpawnRuleData> SpawnEventRules; // 0x1398(0x10)
	char pad_13A8[0x10]; // 0x13a8(0x10)
	struct FDynamicPressureData DynamicPressure; // 0x13b8(0x18)
	struct TArray<struct FStandardBotRespawnData> RespawnableBots; // 0x13d0(0x10)
	struct TArray<struct FRandomSpecialistSpawningData> RandomSpawns; // 0x13e0(0x10)
	char pad_13F0[0x18]; // 0x13f0(0x18)
	struct FPlayerProximityData PlayerProximity; // 0x1408(0x28)
	struct FPlayerRushingData PlayerRushing; // 0x1430(0x18)
	struct FAdversityData Adversity; // 0x1448(0x08)
	struct FRandomNPCSpawningDebugInfo RandomSpawningDebugInfo; // 0x1450(0x10)
	struct TArray<struct FPressureEventDebugData> PressureEventLog; // 0x1460(0x10)
	struct TArray<struct FSummonedBotDebugInfo> SummonedBotsLog; // 0x1470(0x10)
	struct TArray<struct FFailedBotSummonDebugInfo> LastFailedSummons; // 0x1480(0x10)
	char pad_1490[0x18]; // 0x1490(0x18)
};

// Class OPP.RBAIManager
// Size: 0x4e0 (Inherited: 0x28)
struct URBAIManager : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct TArray<struct FBotCollisionInfo> CollisionData; // 0x38(0x10)
	struct TArray<struct ARBBot*> ActiveScreamers; // 0x48(0x10)
	struct TArray<struct FPsychosisMineData> PsychosisMines; // 0x58(0x10)
	char pad_68[0xf0]; // 0x68(0xf0)
	struct URBAIDirector* Director; // 0x158(0x08)
	char pad_160[0x28]; // 0x160(0x28)
	struct TArray<struct AActor*> UsedSpawningPositions; // 0x188(0x10)
	char pad_198[0x60]; // 0x198(0x60)
	struct TArray<struct FInvestigatedDoorData> RecentDoorInvestigations; // 0x1f8(0x10)
	char pad_208[0x138]; // 0x208(0x138)
	struct TArray<struct URBScheduledBotSpawnCommand*> ScheduledSpawns; // 0x340(0x10)
	struct TArray<struct FActiveChemMineData> ChemMines; // 0x350(0x10)
	struct TMap<struct URBAIConfig*, struct URBAIConfig*> ConfigRedirects; // 0x360(0x50)
	struct TArray<struct URBPartialAIConfig*> VariatorGlobalConfigOverrides; // 0x3b0(0x10)
	struct TArray<struct FRBVariatorNPCAIConfigOverride> VariatorConfigOverrides; // 0x3c0(0x10)
	char pad_3D0[0x100]; // 0x3d0(0x100)
	struct TArray<struct FLatentActionInfo> LatentSpawnAIQueue; // 0x4d0(0x10)
};

// Class OPP.RBAimAssistComponent
// Size: 0x230 (Inherited: 0x220)
struct URBAimAssistComponent : USceneComponent {
	enum class EAssistType AssistType; // 0x218(0x01)
	float AssistStartDistance; // 0x21c(0x04)
	float AssistCloseRadius; // 0x220(0x04)
	float AssistFarRadius; // 0x224(0x04)
	char pad_22D[0x3]; // 0x22d(0x03)
};

// Class OPP.RBAIPlayerManager
// Size: 0xb0 (Inherited: 0x28)
struct URBAIPlayerManager : UObject {
	struct ARBNPC* NPC; // 0x28(0x08)
	struct ARBBot* bot; // 0x30(0x08)
	struct URBAIAwarenessState* AwarenessState; // 0x38(0x08)
	char pad_40[0x50]; // 0x40(0x50)
	struct TArray<struct FAIStimulusInfo> PendingStimulusInfoList; // 0x90(0x10)
	struct TArray<struct FAIStimulusInfo> LatestStimulusInfoList; // 0xa0(0x10)
};

// Class OPP.RBAISleeperUnawareState
// Size: 0x68 (Inherited: 0x38)
struct URBAISleeperUnawareState : URBAIAwarenessState {
	float AwarenessMeter; // 0x38(0x04)
	float LastMeterIncreaseTimestamp; // 0x3c(0x04)
	float LastSleeperReactionEvent; // 0x40(0x04)
	float LastSleeperStartleEvent; // 0x44(0x04)
	struct FAIStimulusInfo HighestPriorityStimulus; // 0x48(0x20)
};

// Class OPP.RBAISleeperAlertedState
// Size: 0x58 (Inherited: 0x38)
struct URBAISleeperAlertedState : URBAIAwarenessState {
	struct FAIStimulusInfo InvestigationStimulus; // 0x38(0x20)
};

// Class OPP.RBAISneakAwarenessState
// Size: 0x40 (Inherited: 0x38)
struct URBAISneakAwarenessState : URBAIAwarenessState {
	struct ARBPlayer* TargetPlayer; // 0x38(0x08)
};

// Class OPP.RBAISpawner
// Size: 0x1670 (Inherited: 0x248)
struct ARBAISpawner : AActor {
	char pad_248[0x10]; // 0x248(0x10)
	bool bEnabled; // 0x258(0x01)
	enum class EAISpawnControlType SpawnType; // 0x259(0x01)
	char pad_25A[0x6]; // 0x25a(0x06)
	struct ARBNPC* PawnClass; // 0x260(0x08)
	struct TSoftObjectPtr<ARBRandomManager> ControllingRandomManager; // 0x268(0x28)
	int32_t ControllingRandomizerId; // 0x290(0x04)
	char pad_294[0x4]; // 0x294(0x04)
	struct URBAIConfig* configAsset; // 0x298(0x08)
	struct TArray<struct URBPartialAIConfig*> AdditionalConfigs; // 0x2a0(0x10)
	struct FAIConfigData ConfigOverrides; // 0x2b0(0x11bc)
	char pad_146C[0x4]; // 0x146c(0x04)
	struct FString ConfigOverridesDescription; // 0x1470(0x10)
	struct TArray<struct TSoftObjectPtr<ARBLeashMarker>> LeashesSoftRefs; // 0x1480(0x10)
	struct URBVOMapping* SpecificVOMapping; // 0x1490(0x08)
	struct FGameplayTagContainer ExtraTags; // 0x1498(0x20)
	struct TArray<struct FString> VoiceTypeOptionsOverride; // 0x14b8(0x10)
	char bUseVoiceTypeOptionsOverride : 1; // 0x14c8(0x01)
	char pad_14C8_1 : 7; // 0x14c8(0x01)
	bool bIsFemaleOverride; // 0x14c9(0x01)
	char bUseIsFemaleOverride : 1; // 0x14ca(0x01)
	char pad_14CA_1 : 7; // 0x14ca(0x01)
	char pad_14CB[0x5]; // 0x14cb(0x05)
	struct ARBMonsterCloset* SpawningMonsterCloset; // 0x14d0(0x08)
	struct TSoftObjectPtr<ARBMonsterCloset> SpawningMonsterClosetSoftRef; // 0x14d8(0x28)
	struct TArray<struct TSoftObjectPtr<ARBMonsterCloset>> SpawningMonsterClosets; // 0x1500(0x10)
	bool bSpawnAtRandomLocation; // 0x1510(0x01)
	char pad_1511[0x7]; // 0x1511(0x07)
	struct TArray<struct AActor*> AdditionalPossibleSpawnLocations; // 0x1518(0x10)
	struct TArray<struct AActor*> ExcludedSpawnLocations; // 0x1528(0x10)
	bool bDoNotSpawnAtSpawnerLocation; // 0x1538(0x01)
	bool bSpawnInLimbo; // 0x1539(0x01)
	bool bSpawnAutomatically; // 0x153a(0x01)
	char pad_153B[0x5]; // 0x153b(0x05)
	struct FAISpawnerUICustomizationProxy UICustomizationProxy; // 0x1540(0x08)
	struct URBAmbientConfig* AmbientConfig; // 0x1548(0x08)
	bool bResumeAfterInterruption; // 0x1550(0x01)
	bool bInfiniteIdleOnSpawn; // 0x1551(0x01)
	bool bSpecificIdleDuration; // 0x1552(0x01)
	char pad_1553[0x1]; // 0x1553(0x01)
	float SpecificMinDuration; // 0x1554(0x04)
	float SpecificMaxDuration; // 0x1558(0x04)
	char pad_155C[0x4]; // 0x155c(0x04)
	struct TArray<struct AActor*> AmbientActivityMarkers; // 0x1560(0x10)
	struct TArray<struct TSoftObjectPtr<AVolume>> AmbientActivityVolumes; // 0x1570(0x10)
	bool bAvailableForAmbientPatrol; // 0x1580(0x01)
	bool bOnlyAvailableForSpawnedNPC; // 0x1581(0x01)
	bool bStartInInfiniteInvestigation; // 0x1582(0x01)
	bool bUseRestrictedVolumesForPatrolInvestigate; // 0x1583(0x01)
	char pad_1584[0x4]; // 0x1584(0x04)
	struct TArray<struct TSoftObjectPtr<AVolume>> RestrictedVolumes; // 0x1588(0x10)
	struct TArray<struct TSoftObjectPtr<ARBVolumeGroup>> RestrictedVolumeGroups; // 0x1598(0x10)
	bool bUseRestrictedVolumesForLeash; // 0x15a8(0x01)
	bool bStartInPatrol; // 0x15a9(0x01)
	bool bForcedPatrol; // 0x15aa(0x01)
	char pad_15AB[0x1]; // 0x15ab(0x01)
	float OverridePatrolSpeed; // 0x15ac(0x04)
	struct TArray<struct ARBWaypoint*> PatrolWaypoints; // 0x15b0(0x10)
	struct TArray<struct TSoftObjectPtr<ARBWaypointGroup>> WaypointGroups; // 0x15c0(0x10)
	struct TArray<struct TSoftObjectPtr<AVolume>> PatrolWaypointVolumes; // 0x15d0(0x10)
	enum class EPatrolWaypointSelectionMode PatrolMode; // 0x15e0(0x01)
	char pad_15E1[0x7]; // 0x15e1(0x07)
	struct FMulticastInlineDelegate AIEvent_Server; // 0x15e8(0x10)
	struct FMulticastInlineDelegate SpawnedBot_Server; // 0x15f8(0x10)
	enum class ERBAISpawnerVersion Version; // 0x1608(0x01)
	char pad_1609[0x7]; // 0x1609(0x07)
	struct URBAmbientStationComponent* AmbientStation; // 0x1610(0x08)
	enum class EAISpawnerState State; // 0x1618(0x01)
	char pad_1619[0x7]; // 0x1619(0x07)
	struct ARBBot* bot; // 0x1620(0x08)
	struct ARBNPC* NPC; // 0x1628(0x08)
	struct URBAIConfig* ExternallySetConfigAsset; // 0x1630(0x08)
	struct TArray<struct URBPartialAIConfig*> ExternallySetPartialConfigs; // 0x1638(0x10)
	struct AActor* ExternallySetSpawnLocation; // 0x1648(0x08)
	struct ARBWaypointGroup* ActiveWaypointGroup; // 0x1650(0x08)
	int32_t RandomizationId; // 0x1658(0x04)
	char pad_165C[0x14]; // 0x165c(0x14)

	struct ARBBot* BP_SpawnBotSpecific(struct ARBNPC* specificPawnClass, struct URBAIConfig* specificConfig); // Function OPP.RBAISpawner.BP_SpawnBotSpecific // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1cfe8d8
	void BP_SpawnBotAsync(struct ARBBot*& bot, struct ARBNPC*& spawnedPawn, struct FLatentActionInfo LatentInfo); // Function OPP.RBAISpawner.BP_SpawnBotAsync // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cfe7a0
	struct ARBBot* BP_SpawnBot(); // Function OPP.RBAISpawner.BP_SpawnBot // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1cfe724
};

// Class OPP.RBAIVolume
// Size: 0x288 (Inherited: 0x280)
struct ARBAIVolume : AVolume {
	bool bDisablePouncerSpawning; // 0x280(0x01)
	char pad_281[0x7]; // 0x281(0x07)
};

// Class OPP.RBAmbientActivityMarker
// Size: 0x290 (Inherited: 0x248)
struct ARBAmbientActivityMarker : AActor {
	bool bEnabled; // 0x248(0x01)
	char pad_249[0x3]; // 0x249(0x03)
	float RelativeProbability; // 0x24c(0x04)
	struct URBAmbientConfig* AmbientConfig; // 0x250(0x08)
	struct TArray<struct URBAmbientConfig*> AmbientConfigs; // 0x258(0x10)
	int32_t PreviewConfigIdx; // 0x268(0x04)
	bool bSpecificIdleDuration; // 0x26c(0x01)
	char pad_26D[0x3]; // 0x26d(0x03)
	float SpecificMinDuration; // 0x270(0x04)
	float SpecificMaxDuration; // 0x274(0x04)
	struct URBAmbientStationComponent* AmbientStation; // 0x278(0x08)
	char pad_280[0x10]; // 0x280(0x10)

	void Event_OnReached(struct ARBBot* bot); // Function OPP.RBAmbientActivityMarker.Event_OnReached // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnLeft(struct ARBBot* bot); // Function OPP.RBAmbientActivityMarker.Event_OnLeft // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBAmbientSound
// Size: 0x258 (Inherited: 0x248)
struct ARBAmbientSound : AActor {
	struct URBSoundComponent* SoundComponent; // 0x248(0x08)
	bool StopWhenOwnerIsDestroyed; // 0x250(0x01)
	char pad_251[0x7]; // 0x251(0x07)

	void StopAmbientSound(); // Function OPP.RBAmbientSound.StopAmbientSound // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x1cfe9f8
	void StartAmbientSound(); // Function OPP.RBAmbientSound.StartAmbientSound // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x1cfe9e0
};

// Class OPP.RBAmbientSoundMovable
// Size: 0x268 (Inherited: 0x258)
struct ARBAmbientSoundMovable : ARBAmbientSound {
	struct ARBSplineActor* LinkedSpline; // 0x258(0x08)
	float SplineOffset; // 0x260(0x04)
	float PositionApproachCoeff; // 0x264(0x04)
};

// Class OPP.RBAmbientConfig
// Size: 0x108 (Inherited: 0x28)
struct URBAmbientConfig : UObject {
	struct FNPCAmbientConfig Config; // 0x28(0xe0)
};

// Class OPP.RBAmbientStationComponent
// Size: 0x100 (Inherited: 0xb8)
struct URBAmbientStationComponent : UActorComponent {
	bool bEnabled; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	float RelativeProbability; // 0xbc(0x04)
	struct URBAmbientConfig* configAsset; // 0xc0(0x08)
	struct ARBBot* ActiveBot; // 0xc8(0x08)
	struct ARBBot* IncomingBot; // 0xd0(0x08)
	bool bResumeAfterInterruption; // 0xd8(0x01)
	bool bSpecificIdleDuration; // 0xd9(0x01)
	char pad_DA[0x2]; // 0xda(0x02)
	float SpecificMinDuration; // 0xdc(0x04)
	float SpecificMaxDuration; // 0xe0(0x04)
	char pad_E4[0xc]; // 0xe4(0x0c)
	struct URBAmbientConfig* ValidatedConfigAsset; // 0xf0(0x08)
	char pad_F8[0x8]; // 0xf8(0x08)
};

// Class OPP.RBAnimAnchorComponent
// Size: 0x520 (Inherited: 0x520)
struct URBAnimAnchorComponent : UStaticMeshComponent {
};

// Class OPP.RBAnimatedProp
// Size: 0x260 (Inherited: 0x248)
struct ARBAnimatedProp : AActor {
	struct USceneComponent* LineOfSightTestLocation; // 0x248(0x08)
	struct URBSoundComponent* SoundComponent; // 0x250(0x08)
	struct URBPropOptimizerComponent* PropOptimizerComponent; // 0x258(0x08)
};

// Class OPP.RBCustomSpecialMoveInteractableActor
// Size: 0x2c0 (Inherited: 0x248)
struct ARBCustomSpecialMoveInteractableActor : AActor {
	char pad_248[0x8]; // 0x248(0x08)
	struct URBInteractionZoneComponent* InteractionZone; // 0x250(0x08)
	bool bAllowMultipleInteractors; // 0x258(0x01)
	char pad_259[0x3]; // 0x259(0x03)
	float MinDelayBetweenInteractions; // 0x25c(0x04)
	struct ARBPlayer* interactingPlayer; // 0x260(0x08)
	struct FVector2D CameraYawLimit; // 0x268(0x08)
	struct FVector2D CameraPitchLimit; // 0x270(0x08)
	struct FMulticastInlineDelegate OnLocalPlayerInteracted; // 0x278(0x10)
	struct FMulticastInlineDelegate OnPlayerInteracted; // 0x288(0x10)
	struct FMulticastInlineDelegate OnLocalPlayerInteractionCompleted; // 0x298(0x10)
	struct FMulticastInlineDelegate OnPlayerInteractionCompleted; // 0x2a8(0x10)
	char pad_2B8[0x8]; // 0x2b8(0x08)

	void Multicast_OnPlayerInteractionCompleted(struct ARBPlayer* Player); // Function OPP.RBCustomSpecialMoveInteractableActor.Multicast_OnPlayerInteractionCompleted // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d49188
	void Multicast_OnPlayerInteracted(struct ARBPlayer* Player); // Function OPP.RBCustomSpecialMoveInteractableActor.Multicast_OnPlayerInteracted // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d49104
	void Event_OnLocalPlayerInteractionCompleted(); // Function OPP.RBCustomSpecialMoveInteractableActor.Event_OnLocalPlayerInteractionCompleted // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnLocalPlayerInteracted(); // Function OPP.RBCustomSpecialMoveInteractableActor.Event_OnLocalPlayerInteracted // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void CompleteInteractionForPlayer_Server(struct ARBPlayer* Player); // Function OPP.RBCustomSpecialMoveInteractableActor.CompleteInteractionForPlayer_Server // (Final|Native|Public|BlueprintCallable) // @ game+0x1d48768
	void CompleteInteractionForPlayer_Client(struct ARBPlayer* Player); // Function OPP.RBCustomSpecialMoveInteractableActor.CompleteInteractionForPlayer_Client // (Final|Native|Public|BlueprintCallable) // @ game+0x1d486d4
	void CompleteInteraction_Server(); // Function OPP.RBCustomSpecialMoveInteractableActor.CompleteInteraction_Server // (Final|Native|Public|BlueprintCallable) // @ game+0x1d48838
	void CompleteInteraction_Client(); // Function OPP.RBCustomSpecialMoveInteractableActor.CompleteInteraction_Client // (Final|Native|Public|BlueprintCallable) // @ game+0x1d487f8
};

// Class OPP.RBQuestGiver
// Size: 0x2d8 (Inherited: 0x2c0)
struct ARBQuestGiver : ARBCustomSpecialMoveInteractableActor {
	struct URBMenuWidget* QuestGiverMenuClass; // 0x2c0(0x08)
	struct URBSoundComponent* VoiceAKComponent; // 0x2c8(0x08)
	struct URBQuestGiverConfig* QuestGiverConfig; // 0x2d0(0x08)

	void PlayAkEvent(struct UAkAudioEvent* akEvent, enum class EVOContext VOContext, enum class EVOPriority VOPriority); // Function OPP.RBQuestGiver.PlayAkEvent // (Native|Public|BlueprintCallable) // @ game+0x1deb580
	enum class EMetaNPCType GetMetaNPCType(); // Function OPP.RBQuestGiver.GetMetaNPCType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1deaef0
};

// Class OPP.RBAnimatedQuestGiver
// Size: 0x2f8 (Inherited: 0x2d8)
struct ARBAnimatedQuestGiver : ARBQuestGiver {
	struct AActor* MenuCameraPositionRef; // 0x2d8(0x08)
	struct USkeletalMeshComponent* QuestGiverMesh; // 0x2e0(0x08)
	struct UDataTable* FacialAnimations; // 0x2e8(0x08)
	struct UPoseAsset* FacePoseAsset; // 0x2f0(0x08)

	bool TryPlayFacialAnim(struct FString lineId); // Function OPP.RBAnimatedQuestGiver.TryPlayFacialAnim // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1cfea44
	void StopFacialAnim(); // Function OPP.RBAnimatedQuestGiver.StopFacialAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x1cfea30
	struct USkeletalMeshComponent* GetFaceFXSkeletalMeshComponent(); // Function OPP.RBAnimatedQuestGiver.GetFaceFXSkeletalMeshComponent // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x1cfe9b8
};

// Class OPP.RBAnimInstance
// Size: 0x900 (Inherited: 0x2c0)
struct URBAnimInstance : UAnimInstance {
	struct TMap<struct TSoftClassPtr<UObject>, struct FOperatableAnimationData> OperatableAnimationSequences; // 0x2b8(0x50)
	struct FHidespotsAnimRefs HidespotAnimRefs; // 0x308(0x260)
	struct FBasicDirectionAnimations AdditiveTwitchAnims; // 0x568(0x20)
	struct FName HidingSpotSlotName; // 0x588(0x08)
	struct TMap<enum class ELargeObjectType, struct UAnimSequence*> LargeItemPoseMap; // 0x590(0x50)
	struct TMap<enum class ELargeObjectType, struct UAnimSequence*> LargeItemCradleMap; // 0x5e0(0x50)
	float SpeedToBeConsideredMoving; // 0x630(0x04)
	float SpeedToBeConsideredRunning; // 0x634(0x04)
	bool bUseSmoothVelocityForIsMoving; // 0x638(0x01)
	bool bIsShadow; // 0x639(0x01)
	char pad_642[0x1e]; // 0x642(0x1e)
	bool bIsLanding; // 0x660(0x01)
	char pad_661[0x1]; // 0x661(0x01)
	enum class ELandingType LandingType; // 0x662(0x01)
	enum class ELocomotionMovementSpeed LandingSpeed; // 0x663(0x01)
	enum class EBasicDirection LandingDirection; // 0x664(0x01)
	char pad_665[0x3]; // 0x665(0x03)
	float LandingAngle; // 0x668(0x04)
	char pad_66C[0x4]; // 0x66c(0x04)
	struct ARBPawn* RBPawn; // 0x670(0x08)
	bool bFullBodySynced; // 0x678(0x01)
	bool bFullBodySyncedIsBlendSpace; // 0x679(0x01)
	char pad_67A[0x6]; // 0x67a(0x06)
	struct UAnimSequence* AnimationSyncSequence; // 0x680(0x08)
	struct UBlendSpaceBase* AnimationBlendSyncSequence; // 0x688(0x08)
	float AnimationSyncValue; // 0x690(0x04)
	float AnimationSyncBlendXValue; // 0x694(0x04)
	bool IsPlayingSpecialMoveAnimation; // 0x698(0x01)
	char pad_699[0x7]; // 0x699(0x07)
	struct UAnimMontage* PlayingSpecialMoveAnimMontage; // 0x6a0(0x08)
	struct FName CurrentGameplayState; // 0x6a8(0x08)
	bool isDead; // 0x6b0(0x01)
	bool IsGhost; // 0x6b1(0x01)
	char pad_6B2[0x2]; // 0x6b2(0x02)
	float HealthPercentage; // 0x6b4(0x04)
	struct USkeletalMeshComponent* GhostMesh; // 0x6b8(0x08)
	float GhostBlendIn; // 0x6c0(0x04)
	float GhostBlendOut; // 0x6c4(0x04)
	bool IsPlayingGhostAnim; // 0x6c8(0x01)
	bool IsInGroundAndPound; // 0x6c9(0x01)
	bool IsInNormalLocomotionMode; // 0x6ca(0x01)
	bool IsCrouched; // 0x6cb(0x01)
	bool IsInAir; // 0x6cc(0x01)
	bool bIsInAirFromJumpOver; // 0x6cd(0x01)
	bool IsMoving; // 0x6ce(0x01)
	bool IsMovingTransition; // 0x6cf(0x01)
	bool IsRunning; // 0x6d0(0x01)
	bool IsSlideFloor; // 0x6d1(0x01)
	bool IsSlideFloorBlocked; // 0x6d2(0x01)
	bool IsSlideOver; // 0x6d3(0x01)
	bool IsTraversalDone; // 0x6d4(0x01)
	bool bTraversalBlendToLocomotion; // 0x6d5(0x01)
	bool IsSlideHitWall; // 0x6d6(0x01)
	char pad_6D7[0x1]; // 0x6d7(0x01)
	struct FVector Acceleration; // 0x6d8(0x0c)
	struct FVector Velocity; // 0x6e4(0x0c)
	float SpeedForward; // 0x6f0(0x04)
	float SpeedRight; // 0x6f4(0x04)
	float SpeedTotal; // 0x6f8(0x04)
	float SpeedBlendScaling; // 0x6fc(0x04)
	bool CountsAsWalkingForward; // 0x700(0x01)
	bool IsMovingMoreThanALittle; // 0x701(0x01)
	char pad_702[0x2]; // 0x702(0x02)
	float PercentageOfTotalSpeedRight; // 0x704(0x04)
	float InAirDuration; // 0x708(0x04)
	bool InAirAngleBackward; // 0x70c(0x01)
	char pad_70D[0x3]; // 0x70d(0x03)
	float InAirAngle; // 0x710(0x04)
	float SmoothedRotationSpeed; // 0x714(0x04)
	bool IsTurning; // 0x718(0x01)
	bool OnSlope; // 0x719(0x01)
	char pad_71A[0x2]; // 0x71a(0x02)
	struct FRotator SlopeRotation; // 0x71c(0x0c)
	char pad_728[0x8]; // 0x728(0x08)
	struct FTransform SlopeTransform; // 0x730(0x30)
	enum class ESpecialMove specialMove; // 0x760(0x01)
	bool IsOverrideFullBody; // 0x761(0x01)
	char pad_762[0x2]; // 0x762(0x02)
	float OverrideFullBodyBlendTiming; // 0x764(0x04)
	char pad_768[0x8]; // 0x768(0x08)
	bool IsPlayingSingleEvalBlendSpace; // 0x770(0x01)
	char pad_771[0x7]; // 0x771(0x07)
	struct UBlendSpaceBase* SingleEvalBlendSpace; // 0x778(0x08)
	float SingleEvalBlendSpaceControlValueX; // 0x780(0x04)
	float SingleEvalBlendSpaceControlValueY; // 0x784(0x04)
	float SingleEvalBlendSpacePlayRate; // 0x788(0x04)
	float SingleEvalBlendTimeIn; // 0x78c(0x04)
	float SingleEvalBlendTimeOut; // 0x790(0x04)
	char pad_794[0x4]; // 0x794(0x04)
	struct UAnimSequence* OperatableStart; // 0x798(0x08)
	struct UAnimSequence* OperatableLoop; // 0x7a0(0x08)
	struct UAnimSequence* OperatableEnd; // 0x7a8(0x08)
	bool IsUsingOperatable; // 0x7b0(0x01)
	bool IsOperationComplete; // 0x7b1(0x01)
	char pad_7B2[0x2]; // 0x7b2(0x02)
	float OperatableLoopPosition; // 0x7b4(0x04)
	bool IsHoldingItem; // 0x7b8(0x01)
	bool IsHoldingLargeItem; // 0x7b9(0x01)
	char pad_7BA[0x6]; // 0x7ba(0x06)
	struct UAnimSequence* LargeItemPose; // 0x7c0(0x08)
	struct UAnimSequence* LargeItemCradlePose; // 0x7c8(0x08)
	enum class EHidespotCategory HidingSpotType; // 0x7d0(0x01)
	char pad_7D1[0x7]; // 0x7d1(0x07)
	struct FSingleHidespotInteractionsAnimRefs CurrentHidingSpotAnimations; // 0x7d8(0x40)
	bool IsInHidingSpot; // 0x818(0x01)
	char pad_819[0x3]; // 0x819(0x03)
	float HidingSpotPeekRatio; // 0x81c(0x04)
	float OverrideUpperBody; // 0x820(0x04)
	float OverrideIKHandsChest; // 0x824(0x04)
	bool IsPlayingGrab; // 0x828(0x01)
	bool IsUsingGrabBS; // 0x829(0x01)
	char pad_82A[0x2]; // 0x82a(0x02)
	float GrabBlendSpaceControl; // 0x82c(0x04)
	struct UBlendSpace1D* GrabEnterBS; // 0x830(0x08)
	struct UAnimSequence* GrabEnter; // 0x838(0x08)
	struct UAnimSequence* GrabExit; // 0x840(0x08)
	float AnkleHeight; // 0x848(0x04)
	float HipsOffset; // 0x84c(0x04)
	struct FTransform LeftFootStairTransform; // 0x850(0x30)
	bool LeftFootAnimNotifyDown; // 0x880(0x01)
	bool LeftFootIsDown; // 0x881(0x01)
	char pad_882[0xe]; // 0x882(0x0e)
	struct FTransform RightFootStairTransform; // 0x890(0x30)
	bool RightFootAnimNotifyDown; // 0x8c0(0x01)
	bool RightFootIsDown; // 0x8c1(0x01)
	char pad_8C2[0x2]; // 0x8c2(0x02)
	float FacingStairsUp; // 0x8c4(0x04)
	float FacingStairsDown; // 0x8c8(0x04)
	float AlignedToStairsUp; // 0x8cc(0x04)
	float AlignedToStairsDown; // 0x8d0(0x04)
	bool bValidStairsMarker; // 0x8d4(0x01)
	char pad_8D5[0x3]; // 0x8d5(0x03)
	float StairAnimationBlendTiming; // 0x8d8(0x04)
	char pad_8DC[0x24]; // 0x8dc(0x24)

	void SetIsPlayingSpecialMoveAnimation(bool in_IsPlayingSpecialMoveAnimation); // Function OPP.RBAnimInstance.SetIsPlayingSpecialMoveAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x1d0052c
	void SetHoldingItem(bool Value, bool Force); // Function OPP.RBAnimInstance.SetHoldingItem // (Final|Native|Public|BlueprintCallable) // @ game+0x1d00468
	void OnTraversalSlideDone(bool bHitWall); // Function OPP.RBAnimInstance.OnTraversalSlideDone // (Native|Public) // @ game+0x1d003e4
	bool GetIsPlayingSpecialMoveAnimation(); // Function OPP.RBAnimInstance.GetIsPlayingSpecialMoveAnimation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d003ac
	bool GetIsLeftFootDown(); // Function OPP.RBAnimInstance.GetIsLeftFootDown // (Final|Native|Public|BlueprintCallable) // @ game+0x1d0038c
};

// Class OPP.RBAnimInstanceBackgroundCharacter
// Size: 0x380 (Inherited: 0x2c0)
struct URBAnimInstanceBackgroundCharacter : UAnimInstance {
	struct ARBBackgroundCharacter* Character; // 0x2b8(0x08)
	bool bPlayingAnimSlotA; // 0x2c0(0x01)
	bool bUsingIdleLookAt; // 0x2c1(0x01)
	struct UAnimSequence* AnimSlotA; // 0x2c8(0x08)
	struct UAnimSequence* AnimSlotB; // 0x2d0(0x08)
	struct UAnimSequence* RelaxIdle; // 0x2d8(0x08)
	struct UAnimSequence* AlertIdle; // 0x2e0(0x08)
	struct UBlendSpace* LookAtRelaxBS; // 0x2e8(0x08)
	struct UBlendSpace* LookAtRelaxToAlertBS; // 0x2f0(0x08)
	struct UBlendSpace* LookAtAlertBS; // 0x2f8(0x08)
	struct UBlendSpace* LookAtAlertToRelaxBS; // 0x300(0x08)
	struct UAnimSequence* ForwardLoopAnim; // 0x308(0x08)
	struct UBlendSpace* ForwardLoopBS; // 0x310(0x08)
	bool bIsForwardLoopUsingBlendSpace; // 0x318(0x01)
	char pad_31B[0x5]; // 0x31b(0x05)
	struct UAnimSequence* StartAnim; // 0x320(0x08)
	struct UBlendSpace* StartBS; // 0x328(0x08)
	bool bIsStartUsingBlendSpace; // 0x330(0x01)
	char pad_331[0x7]; // 0x331(0x07)
	struct UAnimSequence* StopAnim; // 0x338(0x08)
	struct UBlendSpace* StopBS; // 0x340(0x08)
	bool bIsStopUsingBlendSpace; // 0x348(0x01)
	char pad_349[0x3]; // 0x349(0x03)
	float StopAnimationStartTime; // 0x34c(0x04)
	bool bMoving; // 0x350(0x01)
	bool bWantPlayStartAnim; // 0x351(0x01)
	bool bWantExitStartAnim; // 0x352(0x01)
	bool bWantIdleToMovingThrough; // 0x353(0x01)
	bool bWantPlayStopAnim; // 0x354(0x01)
	bool bWantExitStopAnim; // 0x355(0x01)
	bool bAlert; // 0x356(0x01)
	char pad_357[0x1]; // 0x357(0x01)
	float LookAtYaw; // 0x358(0x04)
	float LookAtPitch; // 0x35c(0x04)
	char pad_360[0x20]; // 0x360(0x20)
};

// Class OPP.RBAnimInstanceNPC
// Size: 0x20c0 (Inherited: 0x900)
struct URBAnimInstanceNPC : URBAnimInstance {
	float NominalWalkSpeed; // 0x900(0x04)
	float MaxWalkSpeed; // 0x904(0x04)
	float NominalStrideSpeed; // 0x908(0x04)
	float MaxStrideSpeed; // 0x90c(0x04)
	bool bSupportsStrideSpeed; // 0x910(0x01)
	bool bSupportsJogSpeed; // 0x911(0x01)
	char pad_912[0x2]; // 0x912(0x02)
	float NominalJogSpeed; // 0x914(0x04)
	float MaxJogSpeed; // 0x918(0x04)
	float NominalRunSpeed; // 0x91c(0x04)
	char pad_920[0x10]; // 0x920(0x10)
	struct FName NormalLocomotionNodeName; // 0x930(0x08)
	struct FName AgressiveLocomotionNodeName; // 0x938(0x08)
	struct TMap<enum class ELocomotionMovementSpeed, struct FLocomotionTurnDirectionOptions> StartSequences; // 0x940(0x50)
	struct TMap<enum class ELocomotionMovementSpeed, struct FLocomotionTurnDirectionOptions> StartSequencesAggressive; // 0x990(0x50)
	float AnimatedStartDefaultBlendOutTime; // 0x9e0(0x04)
	float AnimatedStartCompleteNotifyBlendOutTime; // 0x9e4(0x04)
	struct TMap<enum class ELocomotionMovementSpeed, struct FLocomotionStopDirectionOptions> StopSequences; // 0x9e8(0x50)
	struct TMap<enum class ELocomotionMovementSpeed, struct FLocomotionStopDirectionOptions> StopSequencesAggressive; // 0xa38(0x50)
	struct UAnimSequence* ImmediateStopFast; // 0xa88(0x08)
	struct UAnimSequence* ImmediateStopSlow; // 0xa90(0x08)
	struct UAnimSequence* ImmediateStopFastAggressive; // 0xa98(0x08)
	struct UAnimSequence* ImmediateStopSlowAggressive; // 0xaa0(0x08)
	struct UBlendSpaceBase* ImmediateStopFastBlendSpace; // 0xaa8(0x08)
	struct UBlendSpaceBase* ImmediateStopSlowBlendSpace; // 0xab0(0x08)
	struct UBlendSpaceBase* ImmediateStopFastBlendSpaceAggressive; // 0xab8(0x08)
	struct UBlendSpaceBase* ImmediateStopSlowBlendSpaceAggressive; // 0xac0(0x08)
	float AnimatedStopsDefaultBlendOutTime; // 0xac8(0x04)
	char pad_ACC[0x4]; // 0xacc(0x04)
	struct TMap<enum class EStartleType, struct FLocomotionStartleSpeedOptions> StartleSequences; // 0xad0(0x50)
	struct TArray<struct FAttackMove> Openers; // 0xb20(0x10)
	struct TArray<struct FAttackMove> Heavies; // 0xb30(0x10)
	struct TArray<struct FAttackMove> Punishes; // 0xb40(0x10)
	float AttackTargetDistanceTooFar; // 0xb50(0x04)
	float AttackTargetDistanceTooClose; // 0xb54(0x04)
	float AttackAngleToTargetTooLarge; // 0xb58(0x04)
	float AttackInitialSpeedDiffTooFast; // 0xb5c(0x04)
	float AttackInitialSpeedDiffTooSlow; // 0xb60(0x04)
	float AttackMaxCeilingClipDistance; // 0xb64(0x04)
	struct TArray<struct FAttackMove> GrabAttacks; // 0xb68(0x10)
	float GrabEnterDistance; // 0xb78(0x04)
	float GrabExitDistance; // 0xb7c(0x04)
	float MinGrabHeightClearance; // 0xb80(0x04)
	char pad_B84[0x4]; // 0xb84(0x04)
	struct FGrabAttackData GrabData; // 0xb88(0x150)
	struct TArray<struct UAnimSequence*> BlindSequences; // 0xcd8(0x10)
	struct TArray<struct UAnimSequence*> BlindSequencesAgitated; // 0xce8(0x10)
	struct TArray<struct FNPCInvestigationAnimData> InvestigationAnims; // 0xcf8(0x10)
	struct TArray<struct FNPCInvestigationAnimData> InvestigationAnimsAggressive; // 0xd08(0x10)
	struct TArray<struct FNPCWaypointAnimData> WaypointAnims; // 0xd18(0x10)
	struct TArray<struct FNPCWaypointAnimData> WaypointAnimsAggressive; // 0xd28(0x10)
	struct TArray<struct FNPCHitReactionAnimData> HitReactionAnims; // 0xd38(0x10)
	struct TArray<struct FNPCHitReactionAnimData> HitReactionAnimsAggressive; // 0xd48(0x10)
	struct FHidespotsAnimRefs HidespotAnimRefsAggressive; // 0xd58(0x260)
	struct FNPCDoorPassthroughAnimDataSet DoorPassthroughUnaware; // 0xfb8(0x440)
	struct FNPCDoorPassthroughAnimDataSet DoorPassthroughChase; // 0x13f8(0x440)
	struct FNPCDoorInvestigationAnimDataSet DoorInvestigationsUnaware; // 0x1838(0x2a0)
	struct FNPCDoorInvestigationAnimDataSet DoorInvestigationsChase; // 0x1ad8(0x2a0)
	struct TArray<struct UAnimSequence*> RelaxedIdleBreakers; // 0x1d78(0x10)
	struct TArray<struct UAnimSequence*> SuspiciousIdleBreakers; // 0x1d88(0x10)
	struct TArray<struct UAnimSequence*> ChaseIdleBreakers; // 0x1d98(0x10)
	bool bUsesCeilingClearance; // 0x1da8(0x01)
	char pad_1DA9[0x3]; // 0x1da9(0x03)
	struct FName WeaponAttachmentBoneForCeilingChecks; // 0x1dac(0x08)
	struct FVector CeilingClearanceOffsetFromAttachmentBone; // 0x1db4(0x0c)
	float MaxHipsDownOffsetForCeiling; // 0x1dc0(0x04)
	float MaxSpineRotationForCeiling; // 0x1dc4(0x04)
	float BaseHeadHeight; // 0x1dc8(0x04)
	float MaxCeilingHeightForEffect; // 0x1dcc(0x04)
	bool bComputeHandShieldingEyes; // 0x1dd0(0x01)
	char pad_1DD1[0xf]; // 0x1dd1(0x0f)
	struct FTransform HandShieldingEyesOffsetFromHead; // 0x1de0(0x30)
	struct FVector HandShieldingEyesLocation; // 0x1e10(0x0c)
	struct FRotator HandShieldingEyesRotation; // 0x1e1c(0x0c)
	bool bUpdateAll; // 0x1e28(0x01)
	bool bUpdateStopCurves; // 0x1e29(0x01)
	bool bUpdateStartCurves; // 0x1e2a(0x01)
	bool bUpdateStartles; // 0x1e2b(0x01)
	bool bUpdateAttackMoves; // 0x1e2c(0x01)
	bool bUpdateInvestigationData; // 0x1e2d(0x01)
	bool bUpdateDoors; // 0x1e2e(0x01)
	bool bResetHitReactionAnims; // 0x1e2f(0x01)
	float MinimumAmountOfTimeBetweenStanceSwitches; // 0x1e30(0x04)
	char pad_1E34[0x4]; // 0x1e34(0x04)
	struct FMulticastInlineDelegate OnAggressiveStanceChanged; // 0x1e38(0x10)
	struct FMulticastInlineDelegate OnPlayingFullBodyIdleBreakerStateChanged; // 0x1e48(0x10)
	struct USkeletalMeshComponent* SkeletalMeshComponent; // 0x1e58(0x08)
	struct ARBNPC* NPC; // 0x1e60(0x08)
	bool IsKnockedDown; // 0x1e68(0x01)
	bool AggressiveStance; // 0x1e69(0x01)
	bool bIsInDarkness; // 0x1e6a(0x01)
	bool IsPassingUnderDoorFrame; // 0x1e6b(0x01)
	bool OverrideRightArm; // 0x1e6c(0x01)
	bool bCombatMovementActive; // 0x1e6d(0x01)
	char pad_1E6E[0x2]; // 0x1e6e(0x02)
	float CombatMovementPlayRate; // 0x1e70(0x04)
	float PlayRateForMovementBlendspaces; // 0x1e74(0x04)
	bool IsCrouchingUnderSomething; // 0x1e78(0x01)
	bool IsCrouchingUnderShort; // 0x1e79(0x01)
	bool IsCrouchingUnderSomethingQuickly; // 0x1e7a(0x01)
	char pad_1E7B[0x5]; // 0x1e7b(0x05)
	struct FCrouchUnderAnimRefs CrouchUnderLong; // 0x1e80(0x20)
	struct FCrouchUnderAnimRefs CrouchUnderShort; // 0x1ea0(0x20)
	bool IsPlayingAmbientIdle; // 0x1ec0(0x01)
	bool IsPlayingAmbientIdleBlendspace; // 0x1ec1(0x01)
	bool bShouldExitAmbientIdle; // 0x1ec2(0x01)
	bool bIsAmbientIdleActiveState; // 0x1ec3(0x01)
	char pad_1EC4[0x4]; // 0x1ec4(0x04)
	struct UAnimSequence* AmbientIdleSequence; // 0x1ec8(0x08)
	struct UBlendSpaceBase* AmbientIdleBlendSpace; // 0x1ed0(0x08)
	struct UAnimSequence* AmbientExitSequence; // 0x1ed8(0x08)
	struct UBlendSpaceBase* AmbientIdleActive; // 0x1ee0(0x08)
	struct UBlendSpaceBase* AmbientIdlePassiveToActive; // 0x1ee8(0x08)
	struct UBlendSpaceBase* AmbientIdleActiveToPassive; // 0x1ef0(0x08)
	float AmbientIdleRelativeYaw; // 0x1ef8(0x04)
	float AmbientIdleRelativePitch; // 0x1efc(0x04)
	struct USkeletalMeshComponent* GhostStationSkeletalMeshTarget; // 0x1f00(0x08)
	bool IsInGhostStation; // 0x1f08(0x01)
	bool GhostStationExitRequested; // 0x1f09(0x01)
	bool ExitGhostStationImmediately; // 0x1f0a(0x01)
	bool IsLooking; // 0x1f0b(0x01)
	float LookAtAlpha; // 0x1f0c(0x04)
	float LookAtOwnership; // 0x1f10(0x04)
	float LookatInvestigationAlpha; // 0x1f14(0x04)
	float LookatInvestigationPercentage; // 0x1f18(0x04)
	float LookAtYaw; // 0x1f1c(0x04)
	float LookAtPitch; // 0x1f20(0x04)
	bool IsPlayingInvestigate; // 0x1f24(0x01)
	char pad_1F25[0x3]; // 0x1f25(0x03)
	struct UAnimSequence* InvestigationSequence; // 0x1f28(0x08)
	bool IsRelaxed; // 0x1f30(0x01)
	bool IsSuspicious; // 0x1f31(0x01)
	bool IsAlerted; // 0x1f32(0x01)
	bool IsChase; // 0x1f33(0x01)
	bool IsInCombat; // 0x1f34(0x01)
	bool IsProwling; // 0x1f35(0x01)
	enum class ENPCAnimStyle AnimStyle; // 0x1f36(0x01)
	bool bAnimatedStartIsBlend; // 0x1f37(0x01)
	struct UAnimSequence* StartSequence; // 0x1f38(0x08)
	struct UBlendSpaceBase* AnimatedStartBlendSpace; // 0x1f40(0x08)
	float StartSequenceAnimationPlayRate; // 0x1f48(0x04)
	float StartAnimationTargetSpeed; // 0x1f4c(0x04)
	enum class ELocomotionMovementSpeed StartMovementSpeed; // 0x1f50(0x01)
	enum class ELocomotionTurnDirection StartTurnDirection; // 0x1f51(0x01)
	char pad_1F52[0x2]; // 0x1f52(0x02)
	float ActualStartDeltaYaw; // 0x1f54(0x04)
	bool ShouldPlayAnimatedStart; // 0x1f58(0x01)
	char pad_1F59[0x8]; // 0x1f59(0x08)
	bool bAnimatedStopIsBlendSpace; // 0x1f61(0x01)
	char pad_1F62[0x6]; // 0x1f62(0x06)
	struct UAnimSequence* StopSequence; // 0x1f68(0x08)
	struct UBlendSpaceBase* AnimatedStopBlendSpace; // 0x1f70(0x08)
	enum class ELocomotionMovementSpeed StopMovementSpeed; // 0x1f78(0x01)
	enum class ELocomotionTurnDirection StopTurnDirection; // 0x1f79(0x01)
	char pad_1F7A[0x2]; // 0x1f7a(0x02)
	float StopSequenceAnimationPlayRate; // 0x1f7c(0x04)
	float StopSequenceAnimationStartTime; // 0x1f80(0x04)
	bool ShouldPlayAnimatedStop; // 0x1f84(0x01)
	char pad_1F85[0x1b]; // 0x1f85(0x1b)
	bool FoundStateMachineStuff; // 0x1fa0(0x01)
	char pad_1FA1[0x3]; // 0x1fa1(0x03)
	int32_t LocomotionStateMachineIndex; // 0x1fa4(0x04)
	int32_t StateIndexForStarts; // 0x1fa8(0x04)
	int32_t StateIndexForStops; // 0x1fac(0x04)
	float LocomotionBlendValue; // 0x1fb0(0x04)
	float StartBlendValue; // 0x1fb4(0x04)
	float StopBlendValue; // 0x1fb8(0x04)
	bool IsPlayingStartle; // 0x1fbc(0x01)
	bool IsPlayingStartleSequence; // 0x1fbd(0x01)
	bool IsPlayingStartleReaction; // 0x1fbe(0x01)
	char pad_1FBF[0x1]; // 0x1fbf(0x01)
	struct UAnimSequence* StartleSequence; // 0x1fc0(0x08)
	struct UAnimSequence* StartleReactionSequence; // 0x1fc8(0x08)
	char pad_1FD0[0x4]; // 0x1fd0(0x04)
	bool bStatusEffectIdleIsBlendSpace; // 0x1fd4(0x01)
	char pad_1FD5[0x3]; // 0x1fd5(0x03)
	struct UAnimSequence* StatusEffectIdleSequence; // 0x1fd8(0x08)
	struct UBlendSpaceBase* StatusEffectIdleBlendSpace; // 0x1fe0(0x08)
	bool bStatusEffectMovementIsBlendSpace; // 0x1fe8(0x01)
	char pad_1FE9[0x7]; // 0x1fe9(0x07)
	struct UAnimSequence* StatusEffectMovementSequence; // 0x1ff0(0x08)
	struct UBlendSpaceBase* StatusEffectMovementBlendSpace; // 0x1ff8(0x08)
	bool AffectedByStatusEffect; // 0x2000(0x01)
	bool AffectedByBlind; // 0x2001(0x01)
	bool LeaveBlindRequested; // 0x2002(0x01)
	bool BlindStateMachineSwitch; // 0x2003(0x01)
	bool BlindAgitated; // 0x2004(0x01)
	char pad_2005[0x3]; // 0x2005(0x03)
	struct UAnimSequence* BlindSequence_A; // 0x2008(0x08)
	struct UAnimSequence* BlindSequence_B; // 0x2010(0x08)
	struct UAnimMontage* MainIdleBreaker; // 0x2018(0x08)
	bool bPlayingFullBodyIdleBreaker; // 0x2020(0x01)
	char pad_2021[0x77]; // 0x2021(0x77)
	struct UAnimSequence* ForcedAttackSequence; // 0x2098(0x08)
	char pad_20A0[0x20]; // 0x20a0(0x20)

	bool IsPlayingSpecialAnimState(); // Function OPP.RBAnimInstanceNPC.IsPlayingSpecialAnimState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d003c4
	void Event_OnInDarknessChanged(); // Function OPP.RBAnimInstanceNPC.Event_OnInDarknessChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBAnimInstanceNPCBig
// Size: 0x20e0 (Inherited: 0x20c0)
struct URBAnimInstanceNPCBig : URBAnimInstanceNPC {
	bool bDetectsCeiling; // 0x20c0(0x01)
	char pad_20C1[0x3]; // 0x20c1(0x03)
	struct FRotator CeilingBendRotation; // 0x20c4(0x0c)
	struct FVector CeilingMoveDown; // 0x20d0(0x0c)
	char pad_20DC[0x4]; // 0x20dc(0x04)
};

// Class OPP.RBAnimInstancePlayer
// Size: 0xf80 (Inherited: 0x900)
struct URBAnimInstancePlayer : URBAnimInstance {
	float MinimumSpectreDistance; // 0x900(0x04)
	float MaximumSpectreDistance; // 0x904(0x04)
	float MinimumSpectreLookatDot; // 0x908(0x04)
	float MaximumSpectreLookatDot; // 0x90c(0x04)
	struct UBlendSpaceBase* GrabReaction; // 0x910(0x08)
	float GrabReactionLength; // 0x918(0x04)
	char pad_91C[0x4]; // 0x91c(0x04)
	struct FTurningOnSpotData TurningDataStanding; // 0x920(0x60)
	struct FTurningOnSpotData TurningDataCrouched; // 0x980(0x60)
	struct FTurningOnSpotData TurningDataDowned; // 0x9e0(0x60)
	struct UAimOffsetBlendSpace1D* CurrentTurnOnSpotLookAimSpace; // 0xa40(0x08)
	float LookAtInterpolationSpeed; // 0xa48(0x04)
	char pad_A4C[0x4]; // 0xa4c(0x04)
	struct UAnimSequence* StartKnockdownSlidingSequence; // 0xa50(0x08)
	struct UAnimSequence* StopKnockdownSlidingSequence; // 0xa58(0x08)
	struct UAnimSequence* EmoteTemporaryHelloAnimation; // 0xa60(0x08)
	float HorizontalPeekingAnimationLength; // 0xa68(0x04)
	char pad_A6C[0x14]; // 0xa6c(0x14)
	struct ARBPlayer* RBPlayer; // 0xa80(0x08)
	bool IsFirstPerson; // 0xa88(0x01)
	bool bIsLocallyControlled; // 0xa89(0x01)
	bool IsBeingChased; // 0xa8a(0x01)
	bool IsCrawling; // 0xa8b(0x01)
	bool IsPushing; // 0xa8c(0x01)
	bool IsPushingOnRails; // 0xa8d(0x01)
	bool IsPushingHard; // 0xa8e(0x01)
	char pad_A8F[0x1]; // 0xa8f(0x01)
	struct USceneComponent* PushableIKTarget; // 0xa90(0x08)
	bool bUsingIK; // 0xa98(0x01)
	char pad_A99[0x3]; // 0xa99(0x03)
	struct FVector IKTargetPosition; // 0xa9c(0x0c)
	struct FRotator IKTargetRotation; // 0xaa8(0x0c)
	char pad_AB4[0xc]; // 0xab4(0x0c)
	struct FTransform IKTargetTransform; // 0xac0(0x30)
	float HandIKInterpolationSpeed; // 0xaf0(0x04)
	float ShouldMoveHandIKRoot; // 0xaf4(0x04)
	float UseHandIK; // 0xaf8(0x04)
	bool bIsJumping; // 0xafc(0x01)
	enum class ELocomotionMode nextLocomotionMode; // 0xafd(0x01)
	char pad_AFE[0x2]; // 0xafe(0x02)
	float JumpAngle; // 0xb00(0x04)
	enum class EJumpType JumpType; // 0xb04(0x01)
	char pad_B05[0x3]; // 0xb05(0x03)
	float JumpTimestamp; // 0xb08(0x04)
	bool IsLookingAtWatch; // 0xb0c(0x01)
	char pad_B0D[0x3]; // 0xb0d(0x03)
	struct FTransform CameraTransformRelativeToTheCameraBoneOnThePreviousFrame; // 0xb10(0x30)
	float ViewPitchSmoothSpeed; // 0xb40(0x04)
	float ViewPitchSmoothed; // 0xb44(0x04)
	float BodyAwarenessArmBlend; // 0xb48(0x04)
	float BodyAwarenessLeftArmBlend; // 0xb4c(0x04)
	float BodyAwarenessIKHandsChestBlend; // 0xb50(0x04)
	float BodyAwarenessRightArmBlend; // 0xb54(0x04)
	float InverseBodyAwarenessArmBlend; // 0xb58(0x04)
	bool IsHallucinating; // 0xb5c(0x01)
	char pad_B5D[0x3]; // 0xb5d(0x03)
	float HallucinationEffectIntensity; // 0xb60(0x04)
	char pad_B64[0x4]; // 0xb64(0x04)
	struct UAnimMontage* ItemIdleBreaker; // 0xb68(0x08)
	struct FItemSequences ItemAnimData; // 0xb70(0xa8)
	struct FItemSequences ItemAnimDataDown; // 0xc18(0xa8)
	bool ItemHolstered; // 0xcc0(0x01)
	char pad_CC1[0x3]; // 0xcc1(0x03)
	float ItemConsumePlayRate; // 0xcc4(0x04)
	bool IsInItemGraph; // 0xcc8(0x01)
	char pad_CC9[0x3]; // 0xcc9(0x03)
	float ShouldCradleLargeObject; // 0xccc(0x04)
	float ShouldCradleLargeObjectInterpolationSpeed; // 0xcd0(0x04)
	bool ShouldSwapItem; // 0xcd4(0x01)
	bool ShouldDropItem; // 0xcd5(0x01)
	bool bLastIsItemTemporarelyHidden; // 0xcd6(0x01)
	char pad_CD7[0x1]; // 0xcd7(0x01)
	struct ARBPickup* LastSelectedItem; // 0xcd8(0x08)
	struct TArray<struct ARBPickup*> ItemsToSwap; // 0xce0(0x10)
	struct FItemSequences NextItemAnimData; // 0xcf0(0xa8)
	struct FItemSequences NextItemAnimDataDown; // 0xd98(0xa8)
	struct UAnimSequence* ItemHandInteractReadyStart; // 0xe40(0x08)
	struct UAnimSequence* ItemHandInteractReadyPose; // 0xe48(0x08)
	struct UAnimSequence* ItemHandInteractReadyStop; // 0xe50(0x08)
	struct UAnimSequence* ItemHandPose; // 0xe58(0x08)
	struct UAnimSequence* ItemHandBreaker; // 0xe60(0x08)
	bool IsGivingItem; // 0xe68(0x01)
	bool ShouldPlayEquipAnim; // 0xe69(0x01)
	bool ShouldSkipUnequipAnim; // 0xe6a(0x01)
	bool IsHoldingItemSpecificallyRequiredForInteraction; // 0xe6b(0x01)
	bool IsPreparingToThrowItem; // 0xe6c(0x01)
	bool IsConsumingItem; // 0xe6d(0x01)
	char pad_E6E[0x7]; // 0xe6e(0x07)
	bool IsPlayingNightVisionAnimation; // 0xe75(0x01)
	char pad_E76[0x2]; // 0xe76(0x02)
	float NVAnimationTime; // 0xe78(0x04)
	char pad_E7C[0x4]; // 0xe7c(0x04)
	struct UAnimSequence* ArmNVAnimation; // 0xe80(0x08)
	struct UBlendSpaceBase* ArmNVAnimationBlend; // 0xe88(0x08)
	bool IsOpeningDoorSlowly; // 0xe90(0x01)
	bool IsOpeningDoorSlowlyOnTheLeftSide; // 0xe91(0x01)
	char pad_E92[0x2]; // 0xe92(0x02)
	float DoorOpeningRatio; // 0xe94(0x04)
	bool IsDoingCoopMove; // 0xe98(0x01)
	bool IsHailingForCoopMove; // 0xe99(0x01)
	bool IsHailingSpecific; // 0xe9a(0x01)
	bool IsHailingGeneric; // 0xe9b(0x01)
	bool IsHailingForLegUp; // 0xe9c(0x01)
	bool IsHailingForLedgePull; // 0xe9d(0x01)
	bool IsHailingForLongJump_Catch; // 0xe9e(0x01)
	bool IsHailingForLongJump_Toss_Right; // 0xe9f(0x01)
	bool IsHailingForLongJump_Toss_Left; // 0xea0(0x01)
	bool IsHailingForCoopBash; // 0xea1(0x01)
	bool IsHailingForCoopBashOnRightSide; // 0xea2(0x01)
	bool IsDoingDoorLift; // 0xea3(0x01)
	bool IsDoingLedgeCatch; // 0xea4(0x01)
	char pad_EA5[0x3]; // 0xea5(0x03)
	float PeekingHorizontal; // 0xea8(0x04)
	float PeekingVertical; // 0xeac(0x04)
	bool IsPeeking; // 0xeb0(0x01)
	char pad_EB1[0x3]; // 0xeb1(0x03)
	float InitialStoppedYaw; // 0xeb4(0x04)
	float CurrentOffsetFromStoppedYaw; // 0xeb8(0x04)
	float TargetTurnYaw; // 0xebc(0x04)
	float StoppedLookOffset; // 0xec0(0x04)
	float StoppedLookOffsetTarget; // 0xec4(0x04)
	float TimeStartedTurning; // 0xec8(0x04)
	float TimeStoppedTurning; // 0xecc(0x04)
	struct FRotator StoppedLookOffsetRotator; // 0xed0(0x0c)
	float DesireToTurn; // 0xedc(0x04)
	float LookDirectionHorizontal; // 0xee0(0x04)
	float LookDirectionVertical; // 0xee4(0x04)
	float HailingLookDirectionHorizontal; // 0xee8(0x04)
	float HailingLookDirectionVertical; // 0xeec(0x04)
	char pad_EF0[0x4]; // 0xef0(0x04)
	bool RightArm_Locomotion_To_Combined; // 0xef4(0x01)
	bool RightArm_Combined_To_Locomotion; // 0xef5(0x01)
	char pad_EF6[0x2]; // 0xef6(0x02)
	int32_t LocomotionStateMachine; // 0xef8(0x04)
	int32_t LocomotionStateMachine_Jumping; // 0xefc(0x04)
	int32_t AliveStateMachine; // 0xf00(0x04)
	int32_t AliveStateMachine_StopSlideUnder; // 0xf04(0x04)
	int32_t AliveStateMachine_SlideHitWallExit; // 0xf08(0x04)
	bool Locomotion_Jumping_To_Alive; // 0xf0c(0x01)
	bool LeftArm_Locomotion_To_Combined; // 0xf0d(0x01)
	bool LeftArm_Combined_To_Locomotion; // 0xf0e(0x01)
	bool Alive_StopSlideUnder_To_Stand; // 0xf0f(0x01)
	bool Alive_StopSlideUnder_To_Crouch; // 0xf10(0x01)
	bool Alive_SlideHitWallExit_To_Stand; // 0xf11(0x01)
	bool Alive_SlideHitWallExit_To_Crouch; // 0xf12(0x01)
	bool IsPlayingRandomIdle; // 0xf13(0x01)
	float PlayerStand_LargeObject_1P_PlaySpeed; // 0xf14(0x04)
	float Item_Items_Item_Normal_Hold_Blend; // 0xf18(0x04)
	float Item_Items_Item_Down_Hold_Blend; // 0xf1c(0x04)
	float HidingSpotPeeking_CameraRelative_RightArm; // 0xf20(0x04)
	float HidingSpotPeeking_CameraRelative_LeftArm; // 0xf24(0x04)
	bool IsPeekingAtAll; // 0xf28(0x01)
	char pad_F29[0x3]; // 0xf29(0x03)
	float IsPeekingAtAllAsFloat; // 0xf2c(0x04)
	float PeekWalkingPlayRate; // 0xf30(0x04)
	bool IsPeekingLeft; // 0xf34(0x01)
	bool IsPeekingFullyLeft; // 0xf35(0x01)
	bool IsPeekingFullyRight; // 0xf36(0x01)
	char pad_F37[0x1]; // 0xf37(0x01)
	float AbsolutePeeking; // 0xf38(0x04)
	float AbsoluteHorizontalPeekingValue; // 0xf3c(0x04)
	bool NotInAirOrLanding; // 0xf40(0x01)
	bool IsLandingFastEnoughToBeIntense; // 0xf41(0x01)
	bool IsLandingFromJumpOver; // 0xf42(0x01)
	bool IsPlayingNormalIdle; // 0xf43(0x01)
	bool bIsInHidingSpotAndNotGrabbed; // 0xf44(0x01)
	char pad_F45[0x3]; // 0xf45(0x03)
	float NormalWalkingPlayRateForBlendspaces; // 0xf48(0x04)
	float ChaseWalkingPlayRateForBlendspaces; // 0xf4c(0x04)
	float DownedLocomotionPlaybackSpeed; // 0xf50(0x04)
	float IsHoldingLargeItemAsFloat; // 0xf54(0x04)
	bool IsStationaryAndOnStairs; // 0xf58(0x01)
	bool IsKnockedDownAndSliding; // 0xf59(0x01)
	char pad_F5A[0x1e]; // 0xf5a(0x1e)
	struct UAnimMontage* TurnAnimMontage; // 0xf78(0x08)

	void UpdateItemAnimData(); // Function OPP.RBAnimInstancePlayer.UpdateItemAnimData // (Final|Native|Public|BlueprintCallable) // @ game+0x1d06520
	void SwapInventoryItemAnimationsToNextItem(); // Function OPP.RBAnimInstancePlayer.SwapInventoryItemAnimationsToNextItem // (Final|Native|Public|BlueprintCallable) // @ game+0x1d0650c
	void SetNextInventoryMontageTime(); // Function OPP.RBAnimInstancePlayer.SetNextInventoryMontageTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1d064f8
	void OnWantsNightVisionChanged(bool bOn); // Function OPP.RBAnimInstancePlayer.OnWantsNightVisionChanged // (Final|Native|Public) // @ game+0x1d0647c
	void HideSwappedItems(); // Function OPP.RBAnimInstancePlayer.HideSwappedItems // (Final|Native|Public|BlueprintCallable) // @ game+0x1d06468
	struct ARBPickup* GetItemHeld(); // Function OPP.RBAnimInstancePlayer.GetItemHeld // (Final|Native|Public|BlueprintCallable) // @ game+0x1d06444
	void ClearNightVisionAnimation(); // Function OPP.RBAnimInstancePlayer.ClearNightVisionAnimation // (Final|Native|Public) // @ game+0x1d0642c
	void ClearItemAnimData(); // Function OPP.RBAnimInstancePlayer.ClearItemAnimData // (Final|Native|Public|BlueprintCallable) // @ game+0x1d06408
};

// Class OPP.RBAnimInstancePlayer3P
// Size: 0xfc0 (Inherited: 0xf80)
struct URBAnimInstancePlayer3P : URBAnimInstancePlayer {
	int32_t RightHandBoneIndex; // 0xf80(0x04)
	struct FVector RightHandBoneLocation; // 0xf84(0x0c)
	struct FRotator RightHandBoneRotation; // 0xf90(0x0c)
	int32_t LeftHandBoneIndex; // 0xf9c(0x04)
	struct FVector LeftHandBoneLocation; // 0xfa0(0x0c)
	struct FRotator LeftHandBoneRotation; // 0xfac(0x0c)
	struct USkeletalMeshComponent* FirstPersonMesh; // 0xfb8(0x08)
};

// Class OPP.RBAnimManager
// Size: 0x1e0 (Inherited: 0x28)
struct URBAnimManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TMap<struct UAnimSequence*, struct FTransform> CachedSequenceRootMotion; // 0x30(0x50)
	struct TMap<struct UAnimSequence*, struct FTransform> CachedAnchors; // 0x80(0x50)
	struct TMap<struct UAnimSequence*, float> GlobalAnimLastPlayTime; // 0xd0(0x50)
	struct TArray<struct FWorldDisturbanceData> DisturbanceData; // 0x120(0x10)
	struct TArray<struct FPawnAnimOptimData> PawnAnimOptimData; // 0x130(0x10)
	struct TArray<struct FSkelMeshActorOptimData> SkelMeshActorOptimData; // 0x140(0x10)
	struct FAnimCategoryStats AnimStats[0x9]; // 0x150(0x90)
};

// Class OPP.RBAnimNotify_Traversal
// Size: 0x50 (Inherited: 0x38)
struct URBAnimNotify_Traversal : UAnimNotify {
	enum class ETraversalNotifyType notifyType; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FVector Value; // 0x3c(0x0c)
	float blendTime; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class OPP.RBAnimNotify_SpecialMove
// Size: 0x40 (Inherited: 0x38)
struct URBAnimNotify_SpecialMove : UAnimNotify {
	enum class ESpecialMoveNotifyType notifyType; // 0x38(0x01)
	enum class ESpecialMoveNotifyTriggerType NotifyTriggerType; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
};

// Class OPP.RBAnimNotify_Footstep
// Size: 0x40 (Inherited: 0x38)
struct URBAnimNotify_Footstep : UAnimNotify {
	bool bLeftFoot; // 0x38(0x01)
	bool bPreviewAsRun; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
};

// Class OPP.RBAnimNotify_FootDown
// Size: 0x38 (Inherited: 0x30)
struct URBAnimNotify_FootDown : UAnimNotifyState {
	bool bLeftFoot; // 0x30(0x01)
	bool bPlayFootstep; // 0x31(0x01)
	bool bPreviewAsRun; // 0x32(0x01)
	char pad_33[0x5]; // 0x33(0x05)
};

// Class OPP.RBAnimNotify_AttackDamage
// Size: 0x40 (Inherited: 0x38)
struct URBAnimNotify_AttackDamage : UAnimNotify {
	bool bSplitDamageAcrossHits; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class OPP.RBAnimNotifyState_ContinuousAttackDamage
// Size: 0x38 (Inherited: 0x30)
struct URBAnimNotifyState_ContinuousAttackDamage : UAnimNotifyState {
	bool bSplitDamageAcrossHits; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class OPP.RBAnimNotify_PlayWeaponAnim
// Size: 0x38 (Inherited: 0x38)
struct URBAnimNotify_PlayWeaponAnim : UAnimNotify {
};

// Class OPP.RBAnimNotify_DamageWindow
// Size: 0x48 (Inherited: 0x30)
struct URBAnimNotify_DamageWindow : UAnimNotifyState {
	bool IsWeaponHit; // 0x30(0x01)
	enum class EDamageValue DamageValue; // 0x31(0x01)
	enum class EKnockbackValue Knockback; // 0x32(0x01)
	enum class EDamageVolumeType VolumeType; // 0x33(0x01)
	char pad_34[0x4]; // 0x34(0x04)
	struct FString SpecificVolumeName; // 0x38(0x10)
};

// Class OPP.RBAnimNotify_GrabWindow
// Size: 0x38 (Inherited: 0x30)
struct URBAnimNotify_GrabWindow : UAnimNotifyState {
	enum class EDamageVolumeType VolumeType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class OPP.RBAnimNotify_SpecialAttackWindow
// Size: 0x30 (Inherited: 0x30)
struct URBAnimNotify_SpecialAttackWindow : UAnimNotifyState {
};

// Class OPP.RBAnimNotify_ThirdPersonView
// Size: 0x40 (Inherited: 0x38)
struct URBAnimNotify_ThirdPersonView : UAnimNotify {
	bool bThirdPersonView; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class OPP.RBAnimNotify_ThirdPersonViewWindow
// Size: 0x30 (Inherited: 0x30)
struct URBAnimNotify_ThirdPersonViewWindow : UAnimNotifyState {
};

// Class OPP.RBAnimNotify_AttachInteractionComponent
// Size: 0x48 (Inherited: 0x30)
struct URBAnimNotify_AttachInteractionComponent : UAnimNotifyState {
	struct FName ComponentTag; // 0x30(0x08)
	struct FName SocketName; // 0x38(0x08)
	bool SnapToSocket; // 0x40(0x01)
	bool ReturnTransformToOriginalLocation; // 0x41(0x01)
	char pad_42[0x6]; // 0x42(0x06)
};

// Class OPP.RBAnimNotify_DrugTarget
// Size: 0x38 (Inherited: 0x30)
struct URBAnimNotify_DrugTarget : UAnimNotifyState {
	bool bInterruptible; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class OPP.RBAnimNotify_FoleySound
// Size: 0x40 (Inherited: 0x38)
struct URBAnimNotify_FoleySound : UAnimNotify {
	enum class ERBFoleyType notifyType; // 0x38(0x01)
	bool bLocalPlayerOnly; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
};

// Class OPP.RBAnimNotify_AkEvent
// Size: 0x48 (Inherited: 0x38)
struct URBAnimNotify_AkEvent : UAnimNotify {
	struct UAkAudioEvent* Event; // 0x38(0x08)
	bool bLocalPlayerOnly; // 0x40(0x01)
	bool bUpdateFloorMaterial; // 0x41(0x01)
	char pad_42[0x6]; // 0x42(0x06)
};

// Class OPP.RBAnimNotify_InteractionSoundEvent
// Size: 0x50 (Inherited: 0x48)
struct URBAnimNotify_InteractionSoundEvent : URBAnimNotify_AkEvent {
	bool bPlayOnInteractionActor; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class OPP.RBAnimNotify_VO
// Size: 0x48 (Inherited: 0x38)
struct URBAnimNotify_VO : UAnimNotify {
	struct UAkAudioEvent* Event; // 0x38(0x08)
	bool bLocalPlayerOnly; // 0x40(0x01)
	bool bPlayOnWatch; // 0x41(0x01)
	enum class EVOPriority VOPriority; // 0x42(0x01)
	char pad_43[0x5]; // 0x43(0x05)
};

// Class OPP.RBAnimNotifyState_AttachNewObject
// Size: 0x90 (Inherited: 0x30)
struct URBAnimNotifyState_AttachNewObject : UAnimNotifyState {
	struct AActor* ActorClass; // 0x30(0x08)
	struct UStaticMesh* StaticMesh; // 0x38(0x08)
	struct USkeletalMesh* SkeletalMesh; // 0x40(0x08)
	struct FName SocketName; // 0x48(0x08)
	struct FTransform RelativeTransform; // 0x50(0x30)
	struct UObject* SpawnedEditorObject; // 0x80(0x08)
	char pad_88[0x8]; // 0x88(0x08)
};

// Class OPP.RBAnimNotify_AttachObject
// Size: 0x48 (Inherited: 0x38)
struct URBAnimNotify_AttachObject : UAnimNotify {
	struct FName SocketName; // 0x38(0x08)
	float blendTime; // 0x40(0x04)
	bool bDetach; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
};

// Class OPP.RBAnimNotify_DetachPairedPawnCollision
// Size: 0x38 (Inherited: 0x38)
struct URBAnimNotify_DetachPairedPawnCollision : UAnimNotify {
};

// Class OPP.RBAnimNotify_PlayLargeObjectSequence
// Size: 0x40 (Inherited: 0x38)
struct URBAnimNotify_PlayLargeObjectSequence : UAnimNotify {
	struct UAnimSequence* Sequence; // 0x38(0x08)
};

// Class OPP.RBAnimNotify_SwapItem
// Size: 0x38 (Inherited: 0x38)
struct URBAnimNotify_SwapItem : UAnimNotify {
};

// Class OPP.RBAnimNotifyState_HideItemInHand
// Size: 0x38 (Inherited: 0x30)
struct URBAnimNotifyState_HideItemInHand : UAnimNotifyState {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class OPP.RBAnimNotifyState_PlayerDepthRenderOverride
// Size: 0x38 (Inherited: 0x30)
struct URBAnimNotifyState_PlayerDepthRenderOverride : UAnimNotifyState {
	bool bRenderInForeground; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class OPP.RBAnimNotify_BlendOutControlState
// Size: 0x48 (Inherited: 0x30)
struct URBAnimNotify_BlendOutControlState : UAnimNotifyState {
	float blendOutDuration; // 0x30(0x04)
	bool bPlayerInputBlendOut; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)
	struct TArray<enum class ESpecialMove> AllowedSpecialMove; // 0x38(0x10)
};

// Class OPP.RBAnimNotify_NPCBlendOut
// Size: 0x48 (Inherited: 0x38)
struct URBAnimNotify_NPCBlendOut : UAnimNotify {
	enum class NPCBlendOutCondition Conditon; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	float blendOutDuration; // 0x3c(0x04)
	float EndVelocityRatio; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class OPP.RBAnimNotify_NPCCompleteSpecialMove
// Size: 0x38 (Inherited: 0x38)
struct URBAnimNotify_NPCCompleteSpecialMove : UAnimNotify {
};

// Class OPP.RBAnimNotifyState_ProceduralAdjustment
// Size: 0x30 (Inherited: 0x30)
struct URBAnimNotifyState_ProceduralAdjustment : UAnimNotifyState {
};

// Class OPP.RBAnimNotifyState_EyeClosedEffect
// Size: 0x30 (Inherited: 0x30)
struct URBAnimNotifyState_EyeClosedEffect : UAnimNotifyState {
};

// Class OPP.RBAnimNotifyState_WeaponVFXControl
// Size: 0x40 (Inherited: 0x30)
struct URBAnimNotifyState_WeaponVFXControl : UAnimNotifyState {
	float DesiredIntensity; // 0x30(0x04)
	float RampUpRate; // 0x34(0x04)
	float RampDownRate; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class OPP.RBAnimNotify_DoorAction
// Size: 0x40 (Inherited: 0x38)
struct URBAnimNotify_DoorAction : UAnimNotify {
	enum class EDoorActionType actionType; // 0x38(0x01)
	bool bDriveDoorRotation; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
};

// Class OPP.RBAnimNotify_DamagePlayer
// Size: 0x48 (Inherited: 0x38)
struct URBAnimNotify_DamagePlayer : UAnimNotify {
	enum class EPlayerDamageSetting DamageSetting; // 0x38(0x01)
	bool bSplitDamageAcrossHits; // 0x39(0x01)
	bool bBloodParticles; // 0x3a(0x01)
	bool bScreenBloodColumns; // 0x3b(0x01)
	float SpecificDamageAmount; // 0x3c(0x04)
	enum class EHurtVOType HurtVOType; // 0x40(0x01)
	enum class EDamageType DamageType; // 0x41(0x01)
	enum class EDamageSoundMaterial DamageSoundMaterialOverride; // 0x42(0x01)
	char bOverride_DamageSoundMaterial : 1; // 0x43(0x01)
	char pad_43_1 : 7; // 0x43(0x01)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class OPP.RBAnimNotify_DisablePlayerMovement
// Size: 0x38 (Inherited: 0x30)
struct URBAnimNotify_DisablePlayerMovement : UAnimNotifyState {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class OPP.RBAnimNotify_AttackDistanceMeasureFrame
// Size: 0x38 (Inherited: 0x38)
struct URBAnimNotify_AttackDistanceMeasureFrame : UAnimNotify {
};

// Class OPP.RBAnimNotify_ImportantRootMotionDone
// Size: 0x38 (Inherited: 0x38)
struct URBAnimNotify_ImportantRootMotionDone : UAnimNotify {
};

// Class OPP.RBAnimNotify_MinimumStopDistance
// Size: 0x38 (Inherited: 0x38)
struct URBAnimNotify_MinimumStopDistance : UAnimNotify {
};

// Class OPP.RBAnimNotify_AdjustmentLimit
// Size: 0x38 (Inherited: 0x38)
struct URBAnimNotify_AdjustmentLimit : UAnimNotify {
};

// Class OPP.RBAnimNotify_StartleFailsafe
// Size: 0x38 (Inherited: 0x38)
struct URBAnimNotify_StartleFailsafe : UAnimNotify {
};

// Class OPP.RBAnimNotify_StartleInterruptible
// Size: 0x30 (Inherited: 0x30)
struct URBAnimNotify_StartleInterruptible : UAnimNotifyState {
};

// Class OPP.RBAnimNotify_BranchPoint
// Size: 0x48 (Inherited: 0x38)
struct URBAnimNotify_BranchPoint : UAnimNotify {
	struct FString BranchName; // 0x38(0x10)
};

// Class OPP.RBAnimNotify_PlayItemSequence
// Size: 0x40 (Inherited: 0x38)
struct URBAnimNotify_PlayItemSequence : UAnimNotify {
	struct UAnimSequenceBase* ObjectSequence; // 0x38(0x08)
};

// Class OPP.RBAnimNotify_PlayRigSequence
// Size: 0x40 (Inherited: 0x38)
struct URBAnimNotify_PlayRigSequence : UAnimNotify {
	struct UAnimSequenceBase* ObjectSequence; // 0x38(0x08)
};

// Class OPP.RBAnimNotify_HideWeapon
// Size: 0x38 (Inherited: 0x38)
struct URBAnimNotify_HideWeapon : UAnimNotify {
};

// Class OPP.RBAnimNotify_UnhideWeapon
// Size: 0x38 (Inherited: 0x38)
struct URBAnimNotify_UnhideWeapon : UAnimNotify {
};

// Class OPP.RBAnimNotify_ActivateWeaponEffects
// Size: 0x38 (Inherited: 0x38)
struct URBAnimNotify_ActivateWeaponEffects : UAnimNotify {
};

// Class OPP.RBAnimNotify_DeactivateWeaponEffects
// Size: 0x38 (Inherited: 0x38)
struct URBAnimNotify_DeactivateWeaponEffects : UAnimNotify {
};

// Class OPP.RBAnimNotify_GhostEvent
// Size: 0x48 (Inherited: 0x38)
struct URBAnimNotify_GhostEvent : UAnimNotify {
	enum class EGhostAnimEvent GhostAnimEvent; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FName GhostAnimEventName; // 0x3c(0x08)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class OPP.RBAnimNotify_PlayerCamera
// Size: 0x40 (Inherited: 0x30)
struct URBAnimNotify_PlayerCamera : UAnimNotifyState {
	enum class EPlayerCameraTargetBehavior TargetBehavior; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float ManualPitchValue; // 0x34(0x04)
	bool bForceEvenIfPlayerChangedPitch; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class OPP.RBAnimNotify_LoopingAkEvent
// Size: 0x58 (Inherited: 0x38)
struct URBAnimNotify_LoopingAkEvent : UAnimNotify {
	bool bVO; // 0x38(0x01)
	bool bStart; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
	struct UAkAudioEvent* StartEvent; // 0x40(0x08)
	struct UAkAudioEvent* StopEvent; // 0x48(0x08)
	bool bLocalPlayerOnly; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class OPP.RBAnimNotify_StingerAkEvent
// Size: 0x48 (Inherited: 0x38)
struct URBAnimNotify_StingerAkEvent : UAnimNotify {
	struct UAkAudioEvent* StingerEvent; // 0x38(0x08)
	float StingerDistance; // 0x40(0x04)
	bool bForceOnAssociatedPlayer; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
};

// Class OPP.RBAnimNotify_NightVision
// Size: 0x40 (Inherited: 0x38)
struct URBAnimNotify_NightVision : UAnimNotify {
	enum class ENightVisionAnimNotifyType Type; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class OPP.RBAnimNotify_Stamina
// Size: 0x40 (Inherited: 0x38)
struct URBAnimNotify_Stamina : UAnimNotify {
	struct UAkAudioEvent* EffortVoiceEvent; // 0x38(0x08)
};

// Class OPP.RBAnimNotify_ScrubbingAkEvent
// Size: 0x48 (Inherited: 0x30)
struct URBAnimNotify_ScrubbingAkEvent : UAnimNotifyState {
	struct UAkAudioEvent* ForwardEvent; // 0x30(0x08)
	struct UAkAudioEvent* BackwardEvent; // 0x38(0x08)
	bool bLocalPlayerOnly; // 0x40(0x01)
	bool bVO; // 0x41(0x01)
	enum class EVOPriority VOPriority; // 0x42(0x01)
	char pad_43[0x1]; // 0x43(0x01)
	float MinimumInterval; // 0x44(0x04)
};

// Class OPP.RBAnimNotify_PlayUnderwaterEffect
// Size: 0xa0 (Inherited: 0x90)
struct URBAnimNotify_PlayUnderwaterEffect : UAnimNotify_PlayNiagaraEffect {
	bool bTestEffect; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
	struct UAkAudioEvent* AudioEvent; // 0x98(0x08)
};

// Class OPP.RBAnimNotify_InterruptibleState
// Size: 0x38 (Inherited: 0x30)
struct URBAnimNotify_InterruptibleState : UAnimNotifyState {
	enum class EInterruptibilityState State; // 0x30(0x01)
	bool bShoveable; // 0x31(0x01)
	char pad_32[0x6]; // 0x32(0x06)
};

// Class OPP.RBAnimNotify_HitReactionState
// Size: 0x38 (Inherited: 0x30)
struct URBAnimNotify_HitReactionState : UAnimNotifyState {
	enum class EHitReactionState State; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class OPP.RBAnimNotify_Death
// Size: 0xa0 (Inherited: 0x90)
struct URBAnimNotify_Death : UAnimNotify_PlayNiagaraEffect {
	struct UAkAudioEvent* DeathVOOverride; // 0x90(0x08)
	char pad_98[0x8]; // 0x98(0x08)
};

// Class OPP.ItemAnimRef
// Size: 0xd8 (Inherited: 0x30)
struct UItemAnimRef : UDataAsset {
	struct FItemSequences Sequences; // 0x30(0xa8)
};

// Class OPP.RBAnimReferences
// Size: 0x3400 (Inherited: 0x28)
struct URBAnimReferences : UObject {
	struct FRBAnimReferencesData AnimRefs; // 0x28(0x33c8)
	struct URBAnimReferences* Parent; // 0x33f0(0x08)
	bool bAutoFlagReplacements; // 0x33f8(0x01)
	char pad_33F9[0x7]; // 0x33f9(0x07)
};

// Class OPP.RBAnnouncer
// Size: 0x248 (Inherited: 0x248)
struct ARBAnnouncer : AActor {

	void Multicast_PlayVO(struct UAkAudioEvent* akEvent, enum class EVOBehavior Behavior, float prePlayQueueDelay, uint32_t RandomSeed); // Function OPP.RBAnnouncer.Multicast_PlayVO // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d0c644
};

// Class OPP.RBInteractionZoneComponent
// Size: 0x5f0 (Inherited: 0x4c0)
struct URBInteractionZoneComponent : UBoxComponent {
	char pad_4C0[0x60]; // 0x4c0(0x60)
	float MaxEyeInteractionDistance2D; // 0x520(0x04)
	float MaxEyeInteractionDistanceZ; // 0x524(0x04)
	float MinEyeInteractionDistanceZ; // 0x528(0x04)
	float MaxInteractionAngle; // 0x52c(0x04)
	float FarExtraForwardExtent; // 0x530(0x04)
	float FarExtraBackwardExtent; // 0x534(0x04)
	float FarExtraRightExtent; // 0x538(0x04)
	float FarExtraLeftExtent; // 0x53c(0x04)
	float FarExtraUpExtent; // 0x540(0x04)
	float FarExtraDownExtent; // 0x544(0x04)
	bool bEnabled; // 0x548(0x01)
	char pad_549[0x7]; // 0x549(0x07)
	struct TArray<struct URBInteractionRequirement*> Requirements; // 0x550(0x10)
	bool bLinkToParentInteractible; // 0x560(0x01)
	enum class EInteractionPriority InteractionPriority; // 0x561(0x01)
	enum class EInteractionPriority UnmetRequirementsInteractionPriority; // 0x562(0x01)
	char pad_563[0x5]; // 0x563(0x05)
	struct FText InteractionText; // 0x568(0x18)
	struct FText DenyInteractionText; // 0x580(0x18)
	struct FVector PingIconOffset; // 0x598(0x0c)
	char pad_5A4[0x4]; // 0x5a4(0x04)
	struct FMulticastInlineDelegate OnEnabledChanged; // 0x5a8(0x10)
	char pad_5B8[0x20]; // 0x5b8(0x20)
	bool bCurrentlyEnabled; // 0x5d8(0x01)
	char pad_5D9[0x7]; // 0x5d9(0x07)
	struct UObject* Interactable; // 0x5e0(0x08)
	char pad_5E8[0x8]; // 0x5e8(0x08)

	void OnRep_CurrentlyEnabled(); // Function OPP.RBInteractionZoneComponent.OnRep_CurrentlyEnabled // (Native|Protected) // @ game+0x1d88f24
	void NotifySpecialMoveCompleted(struct ARBPawn* Pawn, enum class ESpecialMove completedMove, bool bInterrupted); // Function OPP.RBInteractionZoneComponent.NotifySpecialMoveCompleted // (Native|Event|Public|BlueprintEvent) // @ game+0x1d88b60
	bool MeetRequirements(struct ARBPlayer* interactor); // Function OPP.RBInteractionZoneComponent.MeetRequirements // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d88ad0
	bool IsEnabled(); // Function OPP.RBInteractionZoneComponent.IsEnabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d88aa8
	struct UObject* GetInteractableSafe(); // Function OPP.RBInteractionZoneComponent.GetInteractableSafe // (Final|Native|Public|BlueprintCallable) // @ game+0x1d888a0
	void Event_OnEnabledChanged(); // Function OPP.RBInteractionZoneComponent.Event_OnEnabledChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_SetEnabled(bool bInteractible); // Function OPP.RBInteractionZoneComponent.BP_SetEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d885e4
};

// Class OPP.RBInteractibleComponent
// Size: 0x600 (Inherited: 0x5f0)
struct URBInteractibleComponent : URBInteractionZoneComponent {
	float EquippedItemHideDelayOverride; // 0x5f0(0x04)
	float EquippedItemUnhideDelayOverride; // 0x5f4(0x04)
	char pad_5F8[0x8]; // 0x5f8(0x08)
};

// Class OPP.RBInteractiblePanelComponent
// Size: 0x7a0 (Inherited: 0x600)
struct URBInteractiblePanelComponent : URBInteractibleComponent {
	struct FVector AnchorOffset; // 0x5f8(0x0c)
	bool bCanInteractWhileHoldingLargeObject; // 0x604(0x01)
	bool bDoClearanceCheck; // 0x605(0x01)
	bool bFull360Interaction; // 0x606(0x01)
	bool bPlayAnimAfterAdjustPosition; // 0x607(0x01)
	bool bCancelOnFailedAdjustment; // 0x608(0x01)
	bool bIgnoreSelfCollision; // 0x609(0x01)
	bool bDisableCollisionsWhenInteracting; // 0x60a(0x01)
	bool bDisablePawnCollisionsWhenInteracting; // 0x60b(0x01)
	bool bManageActorOwnerTick; // 0x60c(0x01)
	struct FText OperatingText; // 0x610(0x18)
	struct FText OperatingTextGamepad; // 0x628(0x18)
	struct FVector2D CameraYawLimit; // 0x640(0x08)
	struct FVector2D CameraPitchLimit; // 0x648(0x08)
	bool bAllowLookBack; // 0x650(0x01)
	struct FVector LookBackOffset; // 0x654(0x0c)
	struct FVector AnimatedLookBackOffset; // 0x660(0x0c)
	bool bAllowPsychosisGasEffect; // 0x66c(0x01)
	bool bAllowPlayerDithering; // 0x66d(0x01)
	struct FMulticastInlineDelegate OnPanelActiveChanged; // 0x670(0x10)
	struct FMulticastInlineDelegate OnPawnInteractingChanged; // 0x680(0x10)
	struct FMulticastInlineDelegate OnPanelStarted; // 0x690(0x10)
	struct FMulticastInlineDelegate OnTickEnabledChanged; // 0x6a0(0x10)
	struct FMulticastInlineDelegate OnInProgressSpectatingStarted; // 0x6b0(0x10)
	struct FMulticastInlineDelegate OnInProgressSpectatingStopped; // 0x6c0(0x10)
	struct FMulticastInlineDelegate OnPawnSoftOperatingStarted; // 0x6d0(0x10)
	struct FMulticastInlineDelegate OnPawnSoftOperatingStopped; // 0x6e0(0x10)
	struct FMulticastInlineDelegate OnPawnPlaySpecialMoveAnimation; // 0x6f0(0x10)
	bool bPanelStarted; // 0x700(0x01)
	bool bPanelInUse; // 0x701(0x01)
	char pad_702[0x6]; // 0x702(0x06)
	struct URBGhostAnimInstance* GhostAnimationInstanceClass; // 0x708(0x08)
	bool bPanelActive; // 0x710(0x01)
	char pad_711[0x7]; // 0x711(0x07)
	struct FScheduledUObject pawnInteracting; // 0x718(0x88)

	void TryNotifyInteractorReady(struct ARBPlayer* interactor); // Function OPP.RBInteractiblePanelComponent.TryNotifyInteractorReady // (Final|Native|Public|BlueprintCallable) // @ game+0x1d8457c
	bool ShouldBPTick(); // Function OPP.RBInteractiblePanelComponent.ShouldBPTick // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1d8451c
	void SetPanelInUse_Server(bool bInPanelInUse); // Function OPP.RBInteractiblePanelComponent.SetPanelInUse_Server // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d843f8
	void OnRep_PawnInteracting(); // Function OPP.RBInteractiblePanelComponent.OnRep_PawnInteracting // (Native|Protected) // @ game+0x1d843cc
	void OnRep_PanelStarted(); // Function OPP.RBInteractiblePanelComponent.OnRep_PanelStarted // (Final|Native|Protected) // @ game+0x1d8439c
	void OnRep_PanelActive(); // Function OPP.RBInteractiblePanelComponent.OnRep_PanelActive // (Native|Protected) // @ game+0x1d84384
	void OnPawnInteractingChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBInteractiblePanelComponent.OnPawnInteractingChangedCallback // (Native|Public) // @ game+0x1d8429c
	void NotifyInteractorReady_Server(struct ARBPlayer* interactor); // Function OPP.RBInteractiblePanelComponent.NotifyInteractorReady_Server // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d840ac
	bool IsPanelActive(); // Function OPP.RBInteractiblePanelComponent.IsPanelActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d83f8c
	struct ARBPawn* GetPawnInteracting(); // Function OPP.RBInteractiblePanelComponent.GetPawnInteracting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d83dc4
	float GetInteractionProgressRatio(struct ARBPlayer* Player); // Function OPP.RBInteractiblePanelComponent.GetInteractionProgressRatio // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d83d18
	void BP_PanelGameplayDone(); // Function OPP.RBInteractiblePanelComponent.BP_PanelGameplayDone // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d83a30
	void BP_OnPawnInteractingChanged(struct ARBPawn* newPawnInteracting); // Function OPP.RBInteractiblePanelComponent.BP_OnPawnInteractingChanged // (Event|Protected|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBArmWreslingPanelComponent
// Size: 0x8a0 (Inherited: 0x7a0)
struct URBArmWreslingPanelComponent : URBInteractiblePanelComponent {
	char pad_7A0[0x8]; // 0x7a0(0x08)
	struct FText MashInteractionText; // 0x7a8(0x18)
	int32_t MaxConsecutiveHitsForZoneSize; // 0x7c0(0x04)
	float HitSuccessPushAmount; // 0x7c4(0x04)
	float HitFailPenalty; // 0x7c8(0x04)
	int32_t NumScoringSteps; // 0x7cc(0x04)
	struct TArray<float> HitZoneMultipliers; // 0x7d0(0x10)
	int32_t CursorRevolutionCount; // 0x7e0(0x04)
	float SuccessZoneSize; // 0x7e4(0x04)
	float SuccessZoneSizeMin; // 0x7e8(0x04)
	float SuccessZoneSizeMax; // 0x7ec(0x04)
	float SuccessZoneOffset; // 0x7f0(0x04)
	int32_t HitZoneIndex; // 0x7f4(0x04)
	int32_t MaxRevolutions; // 0x7f8(0x04)
	float CursorStartSpeed; // 0x7fc(0x04)
	float CursorMaxSpeed; // 0x800(0x04)
	float CursorSpeedIncreasePerRevolution; // 0x804(0x04)
	int32_t NumRevolutionsUntilMaxSpeed; // 0x808(0x04)
	float CursorWidth; // 0x80c(0x04)
	float InitialRevolutionCursorSpeed; // 0x810(0x04)
	float FakePlayerSuccessRate; // 0x814(0x04)
	struct FVector2D GameTimeCameraYawLimit; // 0x818(0x08)
	struct FVector2D GameTimeCameraPitchLimit; // 0x820(0x08)
	struct FVector2D WaitingCameraYawLimit; // 0x828(0x08)
	struct FVector2D WaitingCameraPitchLimit; // 0x830(0x08)
	float TauntMinimumInterval; // 0x838(0x04)
	char pad_83C[0x4]; // 0x83c(0x04)
	struct ARBArmWreslingTable* LinkedTable; // 0x840(0x08)
	float MatchStartPawnTime; // 0x848(0x04)
	float MatchStartServerTime; // 0x84c(0x04)
	struct FMulticastInlineDelegate InputSuccessCallback; // 0x850(0x10)
	struct FMulticastInlineDelegate InputFailCallback; // 0x860(0x10)
	struct FMulticastInlineDelegate UpdateEndZoneCallback; // 0x870(0x10)
	struct FMulticastInlineDelegate TauntCallback; // 0x880(0x10)
	char pad_890[0x10]; // 0x890(0x10)

	void UpdatePlayerCameraLimits(struct ARBArmWreslingTable* Table); // Function OPP.RBArmWreslingPanelComponent.UpdatePlayerCameraLimits // (Final|Native|Public) // @ game+0x1d0c8e0
	void UpdateEndZone(); // Function OPP.RBArmWreslingPanelComponent.UpdateEndZone // (Final|Native|Public) // @ game+0x1d0c8cc
	void OnRep_SuccessZoneOffset(); // Function OPP.RBArmWreslingPanelComponent.OnRep_SuccessZoneOffset // (Final|Native|Public) // @ game+0x1d0c8cc
	void OnRep_HitZoneIndex(); // Function OPP.RBArmWreslingPanelComponent.OnRep_HitZoneIndex // (Final|Native|Public) // @ game+0x1d0c8cc
	void OnLinkedTableChange(); // Function OPP.RBArmWreslingPanelComponent.OnLinkedTableChange // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Multicast_TauntEvent(struct ARBPawn* Pawn); // Function OPP.RBArmWreslingPanelComponent.Multicast_TauntEvent // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d0c848
	bool IsPredictedPlayer(); // Function OPP.RBArmWreslingPanelComponent.IsPredictedPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d0c30c
	bool IsPlayer1(); // Function OPP.RBArmWreslingPanelComponent.IsPlayer1 // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d0c2ec
	bool IsArmWreslingTableCompleted(); // Function OPP.RBArmWreslingPanelComponent.IsArmWreslingTableCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d0c280
	bool IsArmWreslingRoundInProgress(); // Function OPP.RBArmWreslingPanelComponent.IsArmWreslingRoundInProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d0c260
	bool GetIsInputInProgress(); // Function OPP.RBArmWreslingPanelComponent.GetIsInputInProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d0c140
	float GetInputStartPosition(); // Function OPP.RBArmWreslingPanelComponent.GetInputStartPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d0c128
	float GetElapsedMatchTime(); // Function OPP.RBArmWreslingPanelComponent.GetElapsedMatchTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d0c0d8
	float GetCursorPosition(); // Function OPP.RBArmWreslingPanelComponent.GetCursorPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d0c09c
	void Debug_ForcePlayerExit(); // Function OPP.RBArmWreslingPanelComponent.Debug_ForcePlayerExit // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1521dbc
};

// Class OPP.RBArmWreslingTable
// Size: 0x3e0 (Inherited: 0x248)
struct ARBArmWreslingTable : AActor {
	float SuccessZoneOffsetMin; // 0x248(0x04)
	float SuccessZoneOffsetMax; // 0x24c(0x04)
	struct FArmWreslingPlayerRoundData player1RoundData; // 0x250(0x38)
	struct FArmWreslingPlayerRoundData player2RoundData; // 0x288(0x38)
	struct TArray<float> SuccessZoneOffsets; // 0x2c0(0x10)
	struct TSoftObjectPtr<AActor> Player1PanelActor; // 0x2d0(0x28)
	struct TSoftObjectPtr<AActor> Player2PanelActor; // 0x2f8(0x28)
	float MatchIntroTime; // 0x320(0x04)
	float MatchOutroTime; // 0x324(0x04)
	struct URBArmWreslingPanelComponent* Player1Panel; // 0x328(0x08)
	struct URBArmWreslingPanelComponent* Player2Panel; // 0x330(0x08)
	float MatchStartTimestamp; // 0x338(0x04)
	float MatchEndTimestamp; // 0x33c(0x04)
	struct ARBPlayer* Winner; // 0x340(0x08)
	struct ARBPlayer* Loser; // 0x348(0x08)
	struct ARBPlayer* Player1; // 0x350(0x08)
	struct ARBPlayer* Player2; // 0x358(0x08)
	float Player1WinRatio; // 0x360(0x04)
	bool bRoundCompleted; // 0x364(0x01)
	bool bGameTied; // 0x365(0x01)
	char pad_366[0x12]; // 0x366(0x12)
	struct FMulticastInlineDelegate OnPlayerInputCallback; // 0x378(0x10)
	struct FMulticastInlineDelegate OnTableStateChanged; // 0x388(0x10)
	struct FMulticastInlineDelegate OnWinningRatioPerPointChanged; // 0x398(0x10)
	struct FMulticastInlineDelegate OnPlayerConnectedCallback; // 0x3a8(0x10)
	struct FMulticastInlineDelegate OnPlayerDisconnectedCallback; // 0x3b8(0x10)
	struct FMulticastInlineDelegate OnRoundEndedCallback; // 0x3c8(0x10)
	char pad_3D8[0x8]; // 0x3d8(0x08)

	void Multicast_PlayerInputEvent(struct FArmWreslingPlayerRoundData PlayerData); // Function OPP.RBArmWreslingTable.Multicast_PlayerInputEvent // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d0c788
	void Multicast_OnRoundEnded(struct FArmWreslingPlayerRoundData player1Data, struct FArmWreslingPlayerRoundData player2Data); // Function OPP.RBArmWreslingTable.Multicast_OnRoundEnded // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d0c510
	void Multicast_OnResetMatch(); // Function OPP.RBArmWreslingTable.Multicast_OnResetMatch // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d0c4f8
	void Multicast_BroadcastMatchStartMessage(struct ARBPlayer* player1Ptr, struct ARBPlayer* player2Ptr); // Function OPP.RBArmWreslingTable.Multicast_BroadcastMatchStartMessage // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d0c430
	void Multicast_BroadcastMatchEndMessage(struct ARBPlayer* winnerPlayer, struct ARBPlayer* loserPlayer, bool gameTied_value); // Function OPP.RBArmWreslingTable.Multicast_BroadcastMatchEndMessage // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d0c330
	bool IsMatchStartedOrCompleted(); // Function OPP.RBArmWreslingTable.IsMatchStartedOrCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d0c2cc
	bool IsMatchInProgress(); // Function OPP.RBArmWreslingTable.IsMatchInProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d0c2b0
	enum class EArmWreslingTableState GetTableState(); // Function OPP.RBArmWreslingTable.GetTableState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d0c248
	struct URBArmWreslingPanelComponent* GetOpposingWatchedPanel(); // Function OPP.RBArmWreslingTable.GetOpposingWatchedPanel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d0c1d4
	struct URBArmWreslingPanelComponent* GetLocallyWatchedPanel(); // Function OPP.RBArmWreslingTable.GetLocallyWatchedPanel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d0c160
	float GetElapsedRoundTime(); // Function OPP.RBArmWreslingTable.GetElapsedRoundTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d0c100
	void Event_OnWinningRatioPerPointChanged(); // Function OPP.RBArmWreslingTable.Event_OnWinningRatioPerPointChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnTableStateChanged(); // Function OPP.RBArmWreslingTable.Event_OnTableStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnRoundEnded(struct FArmWreslingPlayerRoundData& player1Data, struct FArmWreslingPlayerRoundData& player2Data); // Function OPP.RBArmWreslingTable.Event_OnRoundEnded // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnPlayerDisconnected(struct URBArmWreslingPanelComponent* panelComponent, struct ARBPlayer* Player); // Function OPP.RBArmWreslingTable.Event_OnPlayerDisconnected // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnPlayerConnected(struct URBArmWreslingPanelComponent* panelComponent, struct ARBPlayer* Player); // Function OPP.RBArmWreslingTable.Event_OnPlayerConnected // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBAttackDummy
// Size: 0x268 (Inherited: 0x248)
struct ARBAttackDummy : AActor {
	bool bStepBackOnAttackStart; // 0x248(0x01)
	char pad_249[0x3]; // 0x249(0x03)
	float StepBackSpeed; // 0x24c(0x04)
	int32_t NumHits; // 0x250(0x04)
	bool bAttackStarted; // 0x254(0x01)
	char pad_255[0x13]; // 0x255(0x13)

	void Event_OnHit(); // Function OPP.RBAttackDummy.Event_OnHit // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_SetLocationFromTimeline(struct FVector& NewLocation); // Function OPP.RBAttackDummy.BP_SetLocationFromTimeline // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d0bfe0
	void BP_ResetAttackDummy(); // Function OPP.RBAttackDummy.BP_ResetAttackDummy // (Final|Native|Public|BlueprintCallable) // @ game+0x1d0bfc0
};

// Class OPP.RBAudioManager
// Size: 0x3d0 (Inherited: 0x28)
struct URBAudioManager : UObject {
	struct TArray<struct FSoundTriggerEvent> CurrentSoundVolumeEvents; // 0x28(0x10)
	struct TArray<struct ARBSoundVolume*> ListenerVolumes; // 0x38(0x10)
	struct TArray<struct FMultiPositionGroup> ActiveGroups; // 0x48(0x10)
	char pad_58[0x8]; // 0x58(0x08)
	struct TArray<struct URBSoundComponent*> RangeOptimizedSources; // 0x60(0x10)
	struct TArray<struct URBSoundComponent*> ActiveSources; // 0x70(0x10)
	struct TWeakObjectPtr<struct URBSoundComponent> Listener; // 0x80(0x08)
	struct URBVOManager* VOManager; // 0x88(0x08)
	char pad_90[0x98]; // 0x90(0x98)
	struct TSet<struct ARBSoundVolume*> DeferredVolumesToAdd; // 0x128(0x50)
	struct TSet<struct ARBSoundVolume*> UninitializedVolumes; // 0x178(0x50)
	struct TSet<struct URBSoundConnectorComponent*> ConnectorsRequiringUpdate; // 0x1c8(0x50)
	struct TArray<struct FAudioPathNode> AudioPathNodes; // 0x218(0x10)
	char pad_228[0x8]; // 0x228(0x08)
	struct TArray<struct UAkAudioEvent*> LevelMusicStartEvents; // 0x230(0x10)
	struct TArray<struct UAkAudioEvent*> LevelMusicStopEvents; // 0x240(0x10)
	struct TArray<struct UAkAudioEvent*> MusicTrackStartEvents; // 0x250(0x10)
	struct TArray<struct UAkAudioEvent*> MusicTrackStopEvents; // 0x260(0x10)
	struct FNarrativeSoundEventsInfo ServerNarrativeSoundEvents; // 0x270(0x20)
	struct FNarrativeSoundEventsInfo ClientNarrativeSoundEvents; // 0x290(0x20)
	char pad_2B0[0x8]; // 0x2b0(0x08)
	struct TArray<struct FMusicEventInfo> MusicEventLog; // 0x2b8(0x10)
	char pad_2C8[0x60]; // 0x2c8(0x60)
	struct TArray<struct FSoundEmitterTransaction> SoundEmittersTransactions; // 0x328(0x10)
	struct TArray<struct FDualSidedEmitterTransaction> DualSidedEmitterTransactions; // 0x338(0x10)
	char pad_348[0x28]; // 0x348(0x28)
	struct TArray<struct URBSoundComponent*> ComponentStopTransactions; // 0x370(0x10)
	char pad_380[0x28]; // 0x380(0x28)
	struct TArray<struct FRBMurkoffAnnouncentAudioData> PendingMurkoffAnnouncementLinesLeft; // 0x3a8(0x10)
	char pad_3B8[0x18]; // 0x3b8(0x18)

	void ExitAllVolumes(); // Function OPP.RBAudioManager.ExitAllVolumes // (Final|Native|Public|BlueprintCallable) // @ game+0x1d0c088
};

// Class OPP.RBMenuWidget
// Size: 0x308 (Inherited: 0x268)
struct URBMenuWidget : URBUserWidget {
	struct UAkAudioEvent* MenuOpenSoundOverride; // 0x268(0x08)
	char bOverride_MenuOpenSound : 1; // 0x270(0x01)
	char pad_270_1 : 7; // 0x270(0x01)
	char pad_271[0x7]; // 0x271(0x07)
	struct UAkAudioEvent* MenuExitSoundOverride; // 0x278(0x08)
	char bOverride_MenuExitSound : 1; // 0x280(0x01)
	char pad_280_1 : 7; // 0x280(0x01)
	enum class EMuffleLevel MuffleLevel; // 0x281(0x01)
	bool bPopPageOnPadCancel; // 0x282(0x01)
	bool bUseTransitionOnPush; // 0x283(0x01)
	bool bUseTransitionOnPop; // 0x284(0x01)
	bool bHideWhenUnfocused; // 0x285(0x01)
	bool bHidePageUnderWhenPushed; // 0x286(0x01)
	bool bPushOnBottom; // 0x287(0x01)
	bool bIsUsingCursor; // 0x288(0x01)
	char pad_289[0x7]; // 0x289(0x07)
	struct UWidget* FirstFocusedWidget; // 0x290(0x08)
	struct UWidget* CurrentlyFocusedWidget; // 0x298(0x08)
	bool bPushInErrorPageStack; // 0x2a0(0x01)
	char pad_2A1[0x7]; // 0x2a1(0x07)
	struct FMulticastInlineDelegate OnMenuPushed; // 0x2a8(0x10)
	struct FMulticastInlineDelegate OnMenuPop; // 0x2b8(0x10)
	struct FMulticastInlineDelegate OnMenuFocused; // 0x2c8(0x10)
	struct FMulticastInlineDelegate OnMenuUnfocused; // 0x2d8(0x10)
	char pad_2E8[0x18]; // 0x2e8(0x18)
	enum class ESlateVisibility DefaultVisibility; // 0x300(0x01)
	char pad_301[0x7]; // 0x301(0x07)

	void Event_OnUnfocusMenu(bool bShouldHide); // Function OPP.RBMenuWidget.Event_OnUnfocusMenu // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnPush(); // Function OPP.RBMenuWidget.Event_OnPush // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnPop(); // Function OPP.RBMenuWidget.Event_OnPop // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnMenuTutorialSeen(); // Function OPP.RBMenuWidget.Event_OnMenuTutorialSeen // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnMenuSettingsModified(); // Function OPP.RBMenuWidget.Event_OnMenuSettingsModified // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnHide(); // Function OPP.RBMenuWidget.Event_OnHide // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnFocusMenu(); // Function OPP.RBMenuWidget.Event_OnFocusMenu // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_MenuTabRight_Released(); // Function OPP.RBMenuWidget.Event_MenuTabRight_Released // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_MenuTabLeft_Released(); // Function OPP.RBMenuWidget.Event_MenuTabLeft_Released // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_MenuRightPage_Released(); // Function OPP.RBMenuWidget.Event_MenuRightPage_Released // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_MenuLeftPage_Released(); // Function OPP.RBMenuWidget.Event_MenuLeftPage_Released // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_MenuConfirm_Released(); // Function OPP.RBMenuWidget.Event_MenuConfirm_Released // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_MenuCancel_Pressed(); // Function OPP.RBMenuWidget.Event_MenuCancel_Pressed // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_SetFocusedWidget(struct UWidget* WidgetToFocus); // Function OPP.RBMenuWidget.BP_SetFocusedWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d954
	void BP_PushAndClearTransitionStack(bool bDoTransition); // Function OPP.RBMenuWidget.BP_PushAndClearTransitionStack // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d818
	void BP_Push(); // Function OPP.RBMenuWidget.BP_Push // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d804
	void BP_Pop(); // Function OPP.RBMenuWidget.BP_Pop // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d7f0
	void BP_MenuHidden(); // Function OPP.RBMenuWidget.BP_MenuHidden // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d7d4
	struct UWidget* BP_GetFocusedWidget(); // Function OPP.RBMenuWidget.BP_GetFocusedWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d44c
};

// Class OPP.RBAudioSettingsWidget
// Size: 0x308 (Inherited: 0x308)
struct URBAudioSettingsWidget : URBMenuWidget {

	void Event_Refresh(); // Function OPP.RBAudioSettingsWidget.Event_Refresh // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBFunctionalTestAgent
// Size: 0x40 (Inherited: 0x28)
struct URBFunctionalTestAgent : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct URBFunctionalTestManager* FunctionalTestManager; // 0x38(0x08)
};

// Class OPP.RBAutoCompleteStageTestAgent
// Size: 0x70 (Inherited: 0x40)
struct URBAutoCompleteStageTestAgent : URBFunctionalTestAgent {
	char pad_40[0x18]; // 0x40(0x18)
	struct URBGameInstance* Owner; // 0x58(0x08)
	char pad_60[0x10]; // 0x60(0x10)

	void OnStageReady(struct FRBStageID& StageID, struct FRBMissionID& MissionID); // Function OPP.RBAutoCompleteStageTestAgent.OnStageReady // (Final|Native|Private|HasOutParms) // @ game+0x1d1138c
	void OnStageEnded(struct FRBStageID& StageID, struct FRBMissionID& MissionID, bool bIsReset); // Function OPP.RBAutoCompleteStageTestAgent.OnStageEnded // (Final|Native|Private|HasOutParms) // @ game+0x1d11140
	void OnMatchReady(); // Function OPP.RBAutoCompleteStageTestAgent.OnMatchReady // (Final|Native|Private) // @ game+0x1d11014
	void OnGamePhaseUpdated(enum class EGamePhase gamePhase); // Function OPP.RBAutoCompleteStageTestAgent.OnGamePhaseUpdated // (Final|Native|Private) // @ game+0x1d10f00
	void OnFindHubCompleted(bool bPending, bool bSucceeded); // Function OPP.RBAutoCompleteStageTestAgent.OnFindHubCompleted // (Final|Native|Private) // @ game+0x1d10e3c
};

// Class OPP.RBInteractible
// Size: 0x4c0 (Inherited: 0x248)
struct ARBInteractible : AActor {
	char pad_248[0x8]; // 0x248(0x08)
	struct FScheduledBool IsInteractible; // 0x250(0x70)
	bool bInteractionActionCollisionCheck; // 0x2c0(0x01)
	bool bCanBlockSelfInteraction; // 0x2c1(0x01)
	char pad_2C2[0x6]; // 0x2c2(0x06)
	struct URBInteractionZoneComponent* InteractionZoneBox; // 0x2c8(0x08)
	struct TArray<struct UBoxComponent*> AdditionalInteractZoneBox; // 0x2d0(0x10)
	struct UStaticMeshComponent* InteractionMesh; // 0x2e0(0x08)
	bool bNPCInteractOnInvestigation; // 0x2e8(0x01)
	char pad_2E9[0x3]; // 0x2e9(0x03)
	int32_t MaxNumberOfInteractors; // 0x2ec(0x04)
	bool bInteruptOnInteractRelease; // 0x2f0(0x01)
	bool bIgnoreCollisionWhileInteracting; // 0x2f1(0x01)
	bool bIgnoreCollisionWithThisActorWhileInteracting; // 0x2f2(0x01)
	bool bCanInteractWhileLookingBack; // 0x2f3(0x01)
	bool bCanBeInteractedWhileMovingLargeObject; // 0x2f4(0x01)
	bool bDropLargeObjectOnInteraction; // 0x2f5(0x01)
	bool bCradleLargeObjectOnInteraction; // 0x2f6(0x01)
	bool bCanBeInteractedWhileInPsychosis; // 0x2f7(0x01)
	float MinDelayBetweenInteractions; // 0x2f8(0x04)
	float MaxPositionningTime; // 0x2fc(0x04)
	struct FText InteractionText; // 0x300(0x18)
	struct FInteractionData PlayerInteractionData; // 0x318(0x50)
	struct FInteractionData NPCInteractionData; // 0x368(0x50)
	struct FVector2D CameraYawLimit; // 0x3b8(0x08)
	struct FVector2D CameraPitchLimit; // 0x3c0(0x08)
	bool bCanLookBack; // 0x3c8(0x01)
	char pad_3C9[0x7]; // 0x3c9(0x07)
	struct FInteractionSoundEvent StartInteractionSoundEvent; // 0x3d0(0x20)
	struct FInteractionSoundEvent ActionInteractionSoundEvent; // 0x3f0(0x20)
	struct FInteractionSoundEvent EndInteractionSoundEvent; // 0x410(0x20)
	struct FMulticastInlineDelegate OnInteractorChangedEvent; // 0x430(0x10)
	struct FMulticastInlineDelegate OnDoAction; // 0x440(0x10)
	struct FMulticastInlineDelegate OnInteractibilityStateChanged; // 0x450(0x10)
	struct ARBInteractible* ParentInteractible; // 0x460(0x08)
	struct USceneComponent* InteractibleRootComponent; // 0x468(0x08)
	int32_t RandomSeed; // 0x470(0x04)
	int32_t OverseerColorIndex; // 0x474(0x04)
	float AnimBlendInTime; // 0x478(0x04)
	float AnimBlendOutTime; // 0x47c(0x04)
	float EquippedItemHideDelayOverride; // 0x480(0x04)
	float EquipedItemUnhideDelayOverride; // 0x484(0x04)
	char pad_488[0x8]; // 0x488(0x08)
	int32_t NumberOfInteract; // 0x490(0x04)
	bool bHasDeprecated; // 0x494(0x01)
	bool bStartsInteractible; // 0x495(0x01)
	char pad_496[0x2]; // 0x496(0x02)
	struct TArray<struct ARBPawn*> DesiredInteractorPawns; // 0x498(0x10)
	struct TArray<struct ARBPawn*> InteractorPawns; // 0x4a8(0x10)
	float DesiredInteractorPawnTime; // 0x4b8(0x04)
	float LastTimeWithInteractorsServerTimeStamp; // 0x4bc(0x04)

	void SnapToState_Implementation(); // Function OPP.RBInteractible.SnapToState_Implementation // (Final|Native|Public) // @ game+0x1d84544
	bool ShouldAlignToGround(struct ARBPawn* interactorPawn); // Function OPP.RBInteractible.ShouldAlignToGround // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d84488
	void OnRep_IsInteractive(); // Function OPP.RBInteractible.OnRep_IsInteractive // (Final|Native|Public) // @ game+0x1d84338
	void OnRep_DesiredInteractorPawnTime(); // Function OPP.RBInteractible.OnRep_DesiredInteractorPawnTime // (Final|Native|Private) // @ game+0x1d84320
	void OnRep_DesiredInteractorPawns(); // Function OPP.RBInteractible.OnRep_DesiredInteractorPawns // (Final|Native|Private) // @ game+0x1d84320
	void NotifySpecialMoveStartedEvent(struct ARBPawn* Pawn, enum class ESpecialMove specialMove); // Function OPP.RBInteractible.NotifySpecialMoveStartedEvent // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void NotifySpecialMoveCompletedEvent(struct ARBPawn* Pawn, enum class ESpecialMove specialMove, bool bInterrupted); // Function OPP.RBInteractible.NotifySpecialMoveCompletedEvent // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Multicast_OnStopInteract(struct ARBPawn* Pawn); // Function OPP.RBInteractible.Multicast_OnStopInteract // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d84028
	void Multicast_OnStartInteract(struct ARBPawn* Pawn); // Function OPP.RBInteractible.Multicast_OnStartInteract // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d83fa4
	void IsInteractiveChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBInteractible.IsInteractiveChangedCallback // (Native|Public) // @ game+0x1d83e88
	void IncrementNumberOfInteract(); // Function OPP.RBInteractible.IncrementNumberOfInteract // (Final|Native|Public|BlueprintCallable) // @ game+0x1d83e74
	bool GetStartsInteractible(); // Function OPP.RBInteractible.GetStartsInteractible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16a8200
	int32_t GetNumberOfInteract(); // Function OPP.RBInteractible.GetNumberOfInteract // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d83dac
	bool GetInteractionActionCollisionCheck(); // Function OPP.RBInteractible.GetInteractionActionCollisionCheck // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x107c030
	struct FVector GetAnimLocation(struct ARBPawn* interactorPawn, enum class ESpecialMove specialMove); // Function OPP.RBInteractible.GetAnimLocation // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d83c3c
	struct FVector GetAnimForward(struct ARBPawn* interactorPawn, enum class ESpecialMove specialMove); // Function OPP.RBInteractible.GetAnimForward // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d83b60
	void Event_SnapToState(); // Function OPP.RBInteractible.Event_SnapToState // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnInteractorsChangedEvent(); // Function OPP.RBInteractible.Event_OnInteractorsChangedEvent // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnInteract(struct ARBPawn* Pawn); // Function OPP.RBInteractible.Event_OnInteract // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_DoAction(struct ARBPawn* interactor); // Function OPP.RBInteractible.Event_DoAction // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_StopAllCurrentInteractions(); // Function OPP.RBInteractible.BP_StopAllCurrentInteractions // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d83b4c
	void BP_SetShowInDebug(bool bShowInDebugValue); // Function OPP.RBInteractible.BP_SetShowInDebug // (Final|Native|Public|BlueprintCallable) // @ game+0x1d83acc
	void BP_SetIsInteractible(bool bInteractibleValue); // Function OPP.RBInteractible.BP_SetIsInteractible // (Final|Native|Public|BlueprintCallable) // @ game+0x1d83a4c
	void BP_OnIsInteractibleChanged(bool bInteractibleValue); // Function OPP.RBInteractible.BP_OnIsInteractibleChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	bool BP_IsInteractible(); // Function OPP.RBInteractible.BP_IsInteractible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d83a18
	struct TArray<struct ARBPawn*> BP_GetInteractorPawns(); // Function OPP.RBInteractible.BP_GetInteractorPawns // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d839fc
	struct FTransform BP_GetInteractionMeshRelativeTransform(struct ARBInteractible* interactibleClass); // Function OPP.RBInteractible.BP_GetInteractionMeshRelativeTransform // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1d838f0
	void ApplyDesiredInteractorPawns(); // Function OPP.RBInteractible.ApplyDesiredInteractorPawns // (Final|Native|Private) // @ game+0x1d838dc
};

// Class OPP.RBOperatable
// Size: 0x658 (Inherited: 0x4c0)
struct ARBOperatable : ARBInteractible {
	char pad_4C0[0x8]; // 0x4c0(0x08)
	bool Client_bStateOn; // 0x4c8(0x01)
	bool Server_bStateOn; // 0x4c9(0x01)
	bool bCanBeInteractedAfterCompletion; // 0x4ca(0x01)
	bool bCanBeInteractedWhileCrouched; // 0x4cb(0x01)
	float OperateTime; // 0x4cc(0x04)
	float ReturnRatio; // 0x4d0(0x04)
	bool bInstantReturnRatio; // 0x4d4(0x01)
	bool bNeverFinishes; // 0x4d5(0x01)
	char pad_4D6[0x2]; // 0x4d6(0x02)
	float TimeBeforeReset; // 0x4d8(0x04)
	bool bDisableOnceLinkedActorTriggered; // 0x4dc(0x01)
	bool bCanBeOperatedByInteraction; // 0x4dd(0x01)
	bool bAutoStopWhenCompleted; // 0x4de(0x01)
	enum class ETriggerableActionBehavior TriggerActionBehavior; // 0x4df(0x01)
	struct TArray<float> TimeMultiplierPerInteractor; // 0x4e0(0x10)
	bool bMashOperatable; // 0x4f0(0x01)
	bool bUsePlayerHoldMultiplier; // 0x4f1(0x01)
	char pad_4F2[0x2]; // 0x4f2(0x02)
	float MashAmount; // 0x4f4(0x04)
	bool bConsumeRequiredItemOnFinish; // 0x4f8(0x01)
	char pad_4F9[0x7]; // 0x4f9(0x07)
	struct URBGhostAnimInstance* GhostAnimationInstanceClass; // 0x500(0x08)
	struct UAnimSequenceBase* InverseAnimSequence; // 0x508(0x08)
	float AnimationLoopPercentage; // 0x510(0x04)
	float InverseAnimSequencePlayRate; // 0x514(0x04)
	int32_t InverseAnimSequenceLoopCount; // 0x518(0x04)
	char pad_51C[0x4]; // 0x51c(0x04)
	struct FInteractionSoundEvent StartInverseInteractionSoundEvent; // 0x520(0x20)
	struct FInteractionSoundEvent ActionInverseInteractionSoundEvent; // 0x540(0x20)
	struct FInteractionSoundEvent EndInverseInteractionSoundEvent; // 0x560(0x20)
	bool bAlwaysTickOperatable; // 0x580(0x01)
	char pad_581[0x7]; // 0x581(0x07)
	struct FText DenyInteractionText; // 0x588(0x18)
	struct FText InverseInteractionText; // 0x5a0(0x18)
	struct FText CannotStopInteractionText; // 0x5b8(0x18)
	char pad_5D0[0x8]; // 0x5d0(0x08)
	struct FMulticastInlineDelegate OnCompletedEvent; // 0x5d8(0x10)
	struct FMulticastInlineDelegate OnStartOperatingEvent; // 0x5e8(0x10)
	struct FMulticastInlineDelegate OnStopOperatingEvent; // 0x5f8(0x10)
	struct FMulticastInlineDelegate OnStateChangedEvent; // 0x608(0x10)
	float Client_CurrentOperateTime; // 0x618(0x04)
	float Server_CurrentOperateTime; // 0x61c(0x04)
	float Server_OldOperateTime; // 0x620(0x04)
	bool bIsDenyInteraction; // 0x624(0x01)
	bool Server_bCompleted; // 0x625(0x01)
	bool Client_bCompleted; // 0x626(0x01)
	bool Client_bWaitingForComplete; // 0x627(0x01)
	char pad_628[0x10]; // 0x628(0x10)
	struct TArray<struct ARBPawn*> CompletedByPawnList; // 0x638(0x10)
	float Server_ForceDesiredOperateTime; // 0x648(0x04)
	float ForceProgressSpeed; // 0x64c(0x04)
	char pad_650[0x8]; // 0x650(0x08)

	void OnRep_IsDenyInteraction(); // Function OPP.RBOperatable.OnRep_IsDenyInteraction // (Final|Native|Public) // @ game+0x1daee7c
	void OnRep_ForceDesiredOperateTime(); // Function OPP.RBOperatable.OnRep_ForceDesiredOperateTime // (Final|Native|Private) // @ game+0x1daee68
	void OnRep_CurrentOperateTime_Callback(); // Function OPP.RBOperatable.OnRep_CurrentOperateTime_Callback // (Final|Native|Public) // @ game+0x1daee54
	void OnRep_CurrentOperateTime(); // Function OPP.RBOperatable.OnRep_CurrentOperateTime // (Final|Native|Public) // @ game+0x1daee40
	void OnRep_Completed_Callback(); // Function OPP.RBOperatable.OnRep_Completed_Callback // (Final|Native|Public) // @ game+0x1daee2c
	void OnRep_Completed(); // Function OPP.RBOperatable.OnRep_Completed // (Final|Native|Public) // @ game+0x1daee18
	void OnRep_bStateOn_Callback(); // Function OPP.RBOperatable.OnRep_bStateOn_Callback // (Final|Native|Public) // @ game+0x1daeea4
	void OnRep_bStateOn(); // Function OPP.RBOperatable.OnRep_bStateOn // (Final|Native|Public) // @ game+0x1daee90
	void Multicast_ResetCompletedState(float oldProgression); // Function OPP.RBOperatable.Multicast_ResetCompletedState // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1daea60
	void Multicast_OnTimedReset(); // Function OPP.RBOperatable.Multicast_OnTimedReset // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d34618
	void Multicast_OnStopInteractOperatable(struct ARBPawn* Pawn, float Server_CurrentOperateOnStop); // Function OPP.RBOperatable.Multicast_OnStopInteractOperatable // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dae994
	void Multicast_OnCompletedOperation(float oldProgression, struct TArray<struct ARBPawn*> completedByPawnListValue); // Function OPP.RBOperatable.Multicast_OnCompletedOperation // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dae8b4
	void Multicast_ForceState(float oldProgression, bool bForcedState); // Function OPP.RBOperatable.Multicast_ForceState // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dae7e4
	void Multicast_ForceCompletion(); // Function OPP.RBOperatable.Multicast_ForceCompletion // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dae7cc
	bool IsCurrentlyBeingOperated(); // Function OPP.RBOperatable.IsCurrentlyBeingOperated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dae7a8
	void Event_OnTriggerableDeactivated(struct ARBTriggerable* triggerable); // Function OPP.RBOperatable.Event_OnTriggerableDeactivated // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnTriggerableActivated(struct ARBTriggerable* triggerable); // Function OPP.RBOperatable.Event_OnTriggerableActivated // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnTimedReset(); // Function OPP.RBOperatable.Event_OnTimedReset // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnStopOperating(struct ARBPawn* Pawn); // Function OPP.RBOperatable.Event_OnStopOperating // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnStateOnChanged(bool bStateOn); // Function OPP.RBOperatable.Event_OnStateOnChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnStartOperating(struct ARBPawn* Pawn); // Function OPP.RBOperatable.Event_OnStartOperating // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnResetCompletedState(float oldProgression); // Function OPP.RBOperatable.Event_OnResetCompletedState // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnOperationProgressChanged(float currentProgressRatio); // Function OPP.RBOperatable.Event_OnOperationProgressChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnIsDenyInteractionChanged(); // Function OPP.RBOperatable.Event_OnIsDenyInteractionChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnCompletedOperation(struct TArray<struct ARBPawn*>& pawns); // Function OPP.RBOperatable.Event_OnCompletedOperation // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	bool DefaultTestPhysicsClearance(struct ARBPawn* interactorPawn); // Function OPP.RBOperatable.DefaultTestPhysicsClearance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dae5d0
	void BP_SetIsDenyInteraction(bool bDeny); // Function OPP.RBOperatable.BP_SetIsDenyInteraction // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dae51c
	void BP_ResetCompletedState(); // Function OPP.RBOperatable.BP_ResetCompletedState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dae508
	float BP_GetCurrentProgressionRatio(); // Function OPP.RBOperatable.BP_GetCurrentProgressionRatio // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dae1dc
	void BP_ForceState(bool bForcedState); // Function OPP.RBOperatable.BP_ForceState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dae060
	void BP_ForceInteraction(bool bBypassCompletion); // Function OPP.RBOperatable.BP_ForceInteraction // (Final|Native|Public|BlueprintCallable) // @ game+0x1dadfc0
	void BP_ForceDesiredProgression(float desiredProgression, float progressionSpeed); // Function OPP.RBOperatable.BP_ForceDesiredProgression // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dadee4
	bool BP_CanOperateWith(struct ARBPawn* Pawn); // Function OPP.RBOperatable.BP_CanOperateWith // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dadd74
	void BP_CancelTimedReset(); // Function OPP.RBOperatable.BP_CancelTimedReset // (Final|Native|Public|BlueprintCallable) // @ game+0x1dade0c
};

// Class OPP.RBDoor
// Size: 0xc40 (Inherited: 0x658)
struct ARBDoor : ARBOperatable {
	char pad_658[0x98]; // 0x658(0x98)
	struct USceneComponent* LeftHinge; // 0x6f0(0x08)
	struct USceneComponent* RightHinge; // 0x6f8(0x08)
	struct UStaticMeshComponent* ShadowCaster; // 0x700(0x08)
	struct AActor* LockingPanelClass; // 0x708(0x08)
	struct ARBSlidingLock* SingleDoorSlidingLockClass; // 0x710(0x08)
	struct ARBSlidingLock* DoubleDoorLockClass; // 0x718(0x08)
	struct USceneComponent* FrontPadLockRef; // 0x720(0x08)
	struct USceneComponent* BackPadLockRef; // 0x728(0x08)
	struct USceneComponent* FrontSlidingLockRef; // 0x730(0x08)
	struct USceneComponent* BackSlidingLockRef; // 0x738(0x08)
	struct URBRepulsionComponent* repulsionComponent; // 0x740(0x08)
	struct USceneComponent* EditorTrapFrontRef; // 0x748(0x08)
	struct USceneComponent* EditorTrapBackRef; // 0x750(0x08)
	struct FVector BarScale; // 0x758(0x0c)
	float BarUnlockedOffset; // 0x764(0x04)
	float BarLockedOffset; // 0x768(0x04)
	float BarExtensionLockedOffset; // 0x76c(0x04)
	float DoubleBarLockedOffset; // 0x770(0x04)
	float DoubleDoorBarExtensionLockedOffset; // 0x774(0x04)
	float DoorFrameFrontOffset; // 0x778(0x04)
	float DoorFrameBackOffset; // 0x77c(0x04)
	struct UStaticMeshComponent* DoorFrame; // 0x780(0x08)
	struct AStaticMeshActor* LinkedDoubleDoorFrame; // 0x788(0x08)
	bool bHasDoorFrame; // 0x790(0x01)
	bool bHasDoorFrameTopBar; // 0x791(0x01)
	char pad_792[0x6]; // 0x792(0x06)
	struct UStaticMeshComponent* DoorBarExtensionLeft1; // 0x798(0x08)
	struct UStaticMeshComponent* DoorBarLeft1; // 0x7a0(0x08)
	struct UStaticMeshComponent* DoorBarExtensionRight1; // 0x7a8(0x08)
	struct UStaticMeshComponent* DoorBarRight1; // 0x7b0(0x08)
	bool bOpen; // 0x7b8(0x01)
	bool bOpenInFront; // 0x7b9(0x01)
	bool bCanOpenSlowly; // 0x7ba(0x01)
	bool bLockedFront; // 0x7bb(0x01)
	bool bLockedBack; // 0x7bc(0x01)
	bool bSlidingLockFront; // 0x7bd(0x01)
	bool bSlidingLockFrontLocked; // 0x7be(0x01)
	bool bSlidingLockBack; // 0x7bf(0x01)
	bool bSlidingLockBackLocked; // 0x7c0(0x01)
	char pad_7C1[0x3]; // 0x7c1(0x03)
	int32_t RandomFlags; // 0x7c4(0x04)
	bool bForceBlocked; // 0x7c8(0x01)
	bool bForceRemovedState; // 0x7c9(0x01)
	bool bForcePlankedState; // 0x7ca(0x01)
	bool bForceTrappedState; // 0x7cb(0x01)
	bool bForceOpenState; // 0x7cc(0x01)
	char pad_7CD[0x3]; // 0x7cd(0x03)
	struct TArray<struct FBlockableLink> BlockableLinks; // 0x7d0(0x10)
	struct TArray<struct TSoftObjectPtr<AActor>> ActorsToDisableIfImpassable; // 0x7e0(0x10)
	struct TArray<struct TSoftObjectPtr<ADecalActor>> LinkedRewardDecals; // 0x7f0(0x10)
	struct TArray<struct TSoftObjectPtr<ATextRenderActor>> LinkedRewardTexts; // 0x800(0x10)
	struct TArray<struct TSoftObjectPtr<AActor>> LinkedRewardButtons; // 0x810(0x10)
	bool bCanBeAutomaticallyBlockedBySection; // 0x820(0x01)
	bool bStuckedFront; // 0x821(0x01)
	bool bStuckedBack; // 0x822(0x01)
	char pad_823[0x1]; // 0x823(0x01)
	float WalkingMaxDoorInteractionOpenDoorOpenDistance2D; // 0x824(0x04)
	float MaxFrontDoorAngle; // 0x828(0x04)
	float MaxBackDoorAngle; // 0x82c(0x04)
	bool bCanBeUsedByBot; // 0x830(0x01)
	enum class EBotDoorPassBehavior BotPassBehavior; // 0x831(0x01)
	char pad_832[0x6]; // 0x832(0x06)
	struct FGameplayTagContainer EnableOnlyForNPCTags; // 0x838(0x20)
	struct FGameplayTagContainer DisableForNPCTags; // 0x858(0x20)
	bool bRefreshNavigationDynamicaly; // 0x878(0x01)
	bool bCutsNavMeshAcrossFrameWhenClosed; // 0x879(0x01)
	bool bNoNavMeshCutWhenOpenInFront; // 0x87a(0x01)
	bool bNoNavMeshCutWhenOpenInBack; // 0x87b(0x01)
	bool bAlwaysCutsNavMeshOpen; // 0x87c(0x01)
	bool bCanUnlockableForCartObj; // 0x87d(0x01)
	char pad_87E[0x2]; // 0x87e(0x02)
	struct URBSoundConnectorComponent* SoundConnectorComp; // 0x880(0x08)
	struct URBRoomConnectorComponent* RoomConnectorComp; // 0x888(0x08)
	struct URBNavLinkComponent* NavLinkCompFront; // 0x890(0x08)
	struct URBNavLinkComponent* NavLinkCompBack; // 0x898(0x08)
	struct FMulticastInlineDelegate OnDoorInteractionStarted; // 0x8a0(0x10)
	struct FText LockedCoopBreakableWithLargeObjectInteractionText; // 0x8b0(0x18)
	struct FText LockedCoopBreakableInteractionText; // 0x8c8(0x18)
	struct FText LockedBreakableInteractionText; // 0x8e0(0x18)
	struct FText LockedUnbreakableInteractionText; // 0x8f8(0x18)
	bool bAllowChunkToDetach; // 0x910(0x01)
	bool bCanStillInteractAfterDestroyed; // 0x911(0x01)
	char pad_912[0x6]; // 0x912(0x06)
	struct URBInvestigationComponent* InvestigationComponent; // 0x918(0x08)
	struct URBNPCInterestPointComponent* InterestPoint; // 0x920(0x08)
	struct URBInteractionZoneComponent* DoorFrameInteractZoneBox; // 0x928(0x08)
	struct FLightingChannels LightingChannelsOverride; // 0x930(0x01)
	enum class EDoorCollisionType CollisionType; // 0x931(0x01)
	char pad_932[0x2]; // 0x932(0x02)
	struct FName DoorSwitchType; // 0x934(0x08)
	enum class EAudioDoorType AudioDoorType; // 0x93c(0x01)
	char pad_93D[0x3]; // 0x93d(0x03)
	struct UAkAudioEvent* DoorMovementStartSoundEvent; // 0x940(0x08)
	struct UAkAudioEvent* DoorMovementStopSoundEvent; // 0x948(0x08)
	struct UAkAudioEvent* DoorSlamSoundEvent; // 0x950(0x08)
	float DoorMovementRTPCMaxAngleSpeed; // 0x958(0x04)
	bool bRewardRoomInFront; // 0x95c(0x01)
	char pad_95D[0x3]; // 0x95d(0x03)
	struct TArray<struct URBCoopOperatableComponent*> RewardLockingOperatables; // 0x960(0x10)
	struct FMulticastInlineDelegate OnDoorDestroyedEvent; // 0x970(0x10)
	struct FMulticastInlineDelegate OnDoorClosingEvent; // 0x980(0x10)
	struct FMulticastInlineDelegate OnDoorOpeningEvent; // 0x990(0x10)
	struct FMulticastInlineDelegate OnDoorClosedEvent; // 0x9a0(0x10)
	struct FMulticastInlineDelegate OnDoorUnlockedEvent; // 0x9b0(0x10)
	struct FMulticastInlineDelegate OnRepulsionScheduled; // 0x9c0(0x10)
	struct FMulticastInlineDelegate OnDoorAction; // 0x9d0(0x10)
	struct FMulticastInlineDelegate OnDoorBarsFullyUnlocked; // 0x9e0(0x10)
	struct FMulticastInlineDelegate OnDoorBarsFullyLocked; // 0x9f0(0x10)
	struct ARBDoor* LinkedDoubleDoor; // 0xa00(0x08)
	float CurrentDoorAngle; // 0xa08(0x04)
	char pad_A0C[0x4]; // 0xa0c(0x04)
	struct FScheduledFloat DesiredDoorAngle; // 0xa10(0x78)
	char pad_A88[0x8]; // 0xa88(0x08)
	struct AActor* LinkedLockingPanelFront; // 0xa90(0x08)
	struct AActor* LinkedLockingPanelBack; // 0xa98(0x08)
	struct AActor* RandomStaticBlockingActor; // 0xaa0(0x08)
	bool bDynamicallyReplaced; // 0xaa8(0x01)
	bool bDynamicalyRemoveDoorFrame; // 0xaa9(0x01)
	char pad_AAA[0x6]; // 0xaaa(0x06)
	struct AActor* DynamicReplacementActor; // 0xab0(0x08)
	struct ARBWireTriggerTrap* RandomSpawnedTrapTrigger; // 0xab8(0x08)
	struct ARBTrapTriggerable* RandomSpawnedTrapActor; // 0xac0(0x08)
	struct ARBPawn* LastDoorInteractor; // 0xac8(0x08)
	bool bUnhingedFront; // 0xad0(0x01)
	bool bUnhingedBack; // 0xad1(0x01)
	char pad_AD2[0xe]; // 0xad2(0x0e)
	struct FTransform UnhingedDoorTransform_Server; // 0xae0(0x30)
	char pad_B10[0xc]; // 0xb10(0x0c)
	float DoorInteractionTimestamp; // 0xb1c(0x04)
	float BotDoorPathServerTimestamp; // 0xb20(0x04)
	float BotLockPathServerTimestamp; // 0xb24(0x04)
	float BotRepulsedServerTimestamp; // 0xb28(0x04)
	char pad_B2C[0xc]; // 0xb2c(0x0c)
	struct ARBWireTriggerTrap* LinkedTrap; // 0xb38(0x08)
	struct TArray<struct AActor*> BlockingActorsFront; // 0xb40(0x10)
	struct TArray<struct AActor*> BlockingActorsBack; // 0xb50(0x10)
	char pad_B60[0x1]; // 0xb60(0x01)
	struct FDoorInvestigationData InvestigationData; // 0xb61(0x04)
	char pad_B65[0x13]; // 0xb65(0x13)
	struct URBPuzzleRoomComponent* UsedByPuzzleRoom; // 0xb78(0x08)
	char bBarBlocked : 1; // 0xb80(0x01)
	char pad_B80_1 : 7; // 0xb80(0x01)
	char pad_B81[0x7]; // 0xb81(0x07)
	struct TArray<struct UStaticMeshComponent*> LeftExtensionBars; // 0xb88(0x10)
	struct TArray<struct UStaticMeshComponent*> LeftBars; // 0xb98(0x10)
	struct TArray<struct UStaticMeshComponent*> RightExtensionBars; // 0xba8(0x10)
	struct TArray<struct UStaticMeshComponent*> RightBars; // 0xbb8(0x10)
	bool bEnableExclusiveInteractors; // 0xbc8(0x01)
	char pad_BC9[0x7]; // 0xbc9(0x07)
	struct TArray<struct ARBPawn*> ExclusiveAllowedInteractors; // 0xbd0(0x10)
	bool bSlowOpenTutorial; // 0xbe0(0x01)
	char pad_BE1[0x7]; // 0xbe1(0x07)
	struct URBSoundComponent* SoundComponent; // 0xbe8(0x08)
	char pad_BF0[0x8]; // 0xbf0(0x08)
	struct TArray<struct URBRoomConnectorComponent*> RoomDetourPath; // 0xbf8(0x10)
	bool bRoomDetourValid; // 0xc08(0x01)
	char pad_C09[0x3]; // 0xc09(0x03)
	int32_t numberOfRewardUnlockActive; // 0xc0c(0x04)
	char pad_C10[0x8]; // 0xc10(0x08)
	struct TArray<struct FDoorInteractionAudioEvent> InteractionSoundEvents; // 0xc18(0x10)
	char pad_C28[0x8]; // 0xc28(0x08)
	struct UAnimSequence* DoorInteractionAnim; // 0xc30(0x08)
	char pad_C38[0x8]; // 0xc38(0x08)

	void SlamClosedRepulsionDone(struct URBRepulsionComponent* repulsionComponentDone); // Function OPP.RBDoor.SlamClosedRepulsionDone // (Final|Native|Public) // @ game+0x1d520f0
	void SlamClosed_Server(enum class ERepulsionDirectionFlags Direction, struct TArray<struct ARBPawn*>& specificPawnsPushed); // Function OPP.RBDoor.SlamClosed_Server // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d52170
	void SetupDynamicComponentVisibilityId(struct USceneComponent* Component); // Function OPP.RBDoor.SetupDynamicComponentVisibilityId // (Final|Native|Public|BlueprintCallable) // @ game+0x1d52070
	void SetupDynamicActorVisibilityId(struct AActor* Actor); // Function OPP.RBDoor.SetupDynamicActorVisibilityId // (Final|Native|Public|BlueprintCallable) // @ game+0x1d51ff0
	void SetLinkedDoubleDoor(struct ARBDoor* linkedDoor); // Function OPP.RBDoor.SetLinkedDoubleDoor // (Final|Native|Public|BlueprintCallable) // @ game+0x1d51f68
	void OnRep_Unhinged(); // Function OPP.RBDoor.OnRep_Unhinged // (Final|Native|Private) // @ game+0x1d51e9c
	void OnRep_SpawnedTrap(); // Function OPP.RBDoor.OnRep_SpawnedTrap // (Final|Native|Private) // @ game+0x1d51e88
	void OnRep_RewardLockingOperatables(); // Function OPP.RBDoor.OnRep_RewardLockingOperatables // (Final|Native|Private) // @ game+0x1d51e74
	void OnRep_RandomStaticBlockingActor(struct AActor* oldActor); // Function OPP.RBDoor.OnRep_RandomStaticBlockingActor // (Final|Native|Private) // @ game+0x1d51df4
	void OnRep_NumberOfRewardUnlockActive(); // Function OPP.RBDoor.OnRep_NumberOfRewardUnlockActive // (Final|Native|Private) // @ game+0x1d51de0
	void OnRep_LockPanel(); // Function OPP.RBDoor.OnRep_LockPanel // (Final|Native|Private) // @ game+0x1d51dcc
	void OnRep_DynamicallyReplaced(); // Function OPP.RBDoor.OnRep_DynamicallyReplaced // (Final|Native|Private) // @ game+0x1d51db8
	void OnRep_DesiredDoorAngle(); // Function OPP.RBDoor.OnRep_DesiredDoorAngle // (Final|Native|Private) // @ game+0x1d51d74
	void OnRep_BlockingActors(); // Function OPP.RBDoor.OnRep_BlockingActors // (Final|Native|Private) // @ game+0x1d51d4c
	void OnRep_BarLocked(); // Function OPP.RBDoor.OnRep_BarLocked // (Final|Native|Private) // @ game+0x1d51d38
	void OnLockPanelUnlocked(struct URBInteractiblePanelComponent* lockPanel, struct ARBPawn* Pawn); // Function OPP.RBDoor.OnLockPanelUnlocked // (Final|Native|Private) // @ game+0x1d51c74
	void OnDoorRepulsionDone(struct URBRepulsionComponent* repulsionComponentDone); // Function OPP.RBDoor.OnDoorRepulsionDone // (Final|Native|Public) // @ game+0x1d51a28
	void OnDesiredDoorAngleChangedCallback(enum class EScheduledPropertyValueChangedType changeType); // Function OPP.RBDoor.OnDesiredDoorAngleChangedCallback // (Final|Native|Private) // @ game+0x1d519a8
	void OnCoopOperatableOperatingStartedEvent(struct URBOperatableComponent* Component, struct ARBPawn* Pawn); // Function OPP.RBDoor.OnCoopOperatableOperatingStartedEvent // (Final|Native|Private) // @ game+0x1d518ec
	void Multicast_OnRewardDoorUnlocked(); // Function OPP.RBDoor.Multicast_OnRewardDoorUnlocked // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d518d4
	void Multicast_OnDoorInteract(float newDoorDesiredAngle, float newDoorAngleSpeedRatio, struct ARBPawn* Pawn); // Function OPP.RBDoor.Multicast_OnDoorInteract // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d517d4
	void LockingPanelActiveChanged(struct URBInteractiblePanelComponent* panel, struct ARBPawn* pawnInteracting); // Function OPP.RBDoor.LockingPanelActiveChanged // (Final|Native|Private) // @ game+0x1d5169c
	void LockBars_Server(bool bLocked); // Function OPP.RBDoor.LockBars_Server // (Final|Native|Public) // @ game+0x1d5161c
	struct URBSoundComponent* GetSoundComponent(); // Function OPP.RBDoor.GetSoundComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x1d515b8
	enum class EBlockableState GetBlockableState(); // Function OPP.RBDoor.GetBlockableState // (Native|Public|Const) // @ game+0x1d5158c
	void Flip(); // Function OPP.RBDoor.Flip // (Final|Native|Public) // @ game+0x1521dbc
	void Editor_OnSelected(); // Function OPP.RBDoor.Editor_OnSelected // (Final|Native|Private) // @ game+0x1521dbc
	void Editor_OnDeselected(); // Function OPP.RBDoor.Editor_OnDeselected // (Final|Native|Private) // @ game+0x1521dbc
	struct AActor* BP_SetDynamicReplacement(struct AActor* replacementClass, bool bShouldRemoveDoorFrame, int32_t randomID); // Function OPP.RBDoor.BP_SetDynamicReplacement // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d51400
	void BP_Server_Unlock(); // Function OPP.RBDoor.BP_Server_Unlock // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d513ec
	void BP_Server_Lock(); // Function OPP.RBDoor.BP_Server_Lock // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d513d8
	void BP_Reset(bool bApplyForceRandomization); // Function OPP.RBDoor.BP_Reset // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d51348
	void BP_RebuildInternalData(); // Function OPP.RBDoor.BP_RebuildInternalData // (Final|Native|Private|BlueprintCallable) // @ game+0x1d51334
	void BP_Open(bool bFrontSide, float speedRatio); // Function OPP.RBDoor.BP_Open // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d51250
	void BP_OnRewardDoorInitialization(); // Function OPP.RBDoor.BP_OnRewardDoorInitialization // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnNumberOfRewardUnlockActiveChanged(int32_t numberOfRewardUnlockActive); // Function OPP.RBDoor.BP_OnNumberOfRewardUnlockActiveChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnLockPanelUnlocked(struct URBInteractiblePanelComponent* lockPanel, struct ARBPawn* Pawn); // Function OPP.RBDoor.BP_OnLockPanelUnlocked // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnLockPanelsReplicated(); // Function OPP.RBDoor.BP_OnLockPanelsReplicated // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnDoorUnhingeEvent(struct ARBPawn* Pawn); // Function OPP.RBDoor.BP_OnDoorUnhingeEvent // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnDoorTrappedStateChanged(bool bTrapped, bool bFromFront); // Function OPP.RBDoor.BP_OnDoorTrappedStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnDoorTrapDisarmed(); // Function OPP.RBDoor.BP_OnDoorTrapDisarmed // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnDoorTrapActivated(); // Function OPP.RBDoor.BP_OnDoorTrapActivated // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnDoorInteract(struct ARBPawn* interactor); // Function OPP.RBDoor.BP_OnDoorInteract // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnDoorBashEvent(struct ARBPawn* Pawn, bool bSuccess, bool bApplyVisualDoorDamage, enum class EBashDoorType bashType); // Function OPP.RBDoor.BP_OnDoorBashEvent // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnDoorBarsLockingEvent(bool bLocking); // Function OPP.RBDoor.BP_OnDoorBarsLockingEvent // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnActorAttachedToDoor(struct AActor* Actor); // Function OPP.RBDoor.BP_OnActorAttachedToDoor // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	bool BP_IsOpening(); // Function OPP.RBDoor.BP_IsOpening // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d51230
	bool BP_IsOpen(); // Function OPP.RBDoor.BP_IsOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d51210
	bool BP_IsMoving(); // Function OPP.RBDoor.BP_IsMoving // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d511f0
	bool BP_IsLinkedTrapTriggered(); // Function OPP.RBDoor.BP_IsLinkedTrapTriggered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d511c8
	bool BP_IsLinkedTrapArmed(); // Function OPP.RBDoor.BP_IsLinkedTrapArmed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d511a0
	bool BP_IsIdle(); // Function OPP.RBDoor.BP_IsIdle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d51180
	bool BP_IsFullyOpenInFront(); // Function OPP.RBDoor.BP_IsFullyOpenInFront // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d51154
	bool BP_IsFullyOpenInBack(); // Function OPP.RBDoor.BP_IsFullyOpenInBack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d51128
	bool BP_IsFullyOpen(); // Function OPP.RBDoor.BP_IsFullyOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d51108
	bool BP_IsClosing(); // Function OPP.RBDoor.BP_IsClosing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d510e8
	bool BP_IsClosed(); // Function OPP.RBDoor.BP_IsClosed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d510c8
	bool BP_IsBlockedOnAnySide(); // Function OPP.RBDoor.BP_IsBlockedOnAnySide // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d510a0
	bool BP_IsActorInFront(struct AActor* Actor); // Function OPP.RBDoor.BP_IsActorInFront // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d51010
	void BP_DeactivateBars(); // Function OPP.RBDoor.BP_DeactivateBars // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d50fd8
	void BP_Close(); // Function OPP.RBDoor.BP_Close // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d50fc4
	void BP_ActivateSlowOpenTutorial(); // Function OPP.RBDoor.BP_ActivateSlowOpenTutorial // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d50fa8
	void BP_ActivateBars(); // Function OPP.RBDoor.BP_ActivateBars // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d50f70
	struct FTransform ApplyDoorframeOffsetToTransform(struct FTransform& Transform, bool isAddonInFront, struct FVector& offsetDirection); // Function OPP.RBDoor.ApplyDoorframeOffsetToTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1d50dec
};

// Class OPP.RBAutomaticDoor
// Size: 0xce0 (Inherited: 0xc40)
struct ARBAutomaticDoor : ARBDoor {
	struct UBoxComponent* FrontDetector; // 0xc38(0x08)
	struct UBoxComponent* BackDetector; // 0xc40(0x08)
	struct TArray<struct AActor*> DetectorOpenValidClasses; // 0xc48(0x10)
	struct TArray<struct AActor*> DetectorWarningValidClasses; // 0xc58(0x10)
	struct TArray<struct ARBTriggerable*> WarningTriggerables; // 0xc68(0x10)
	float StayOpenDuration; // 0xc78(0x04)
	struct TArray<struct AActor*> DetectedActors; // 0xc80(0x10)
	struct TArray<struct AActor*> DetectedFrontActors; // 0xc90(0x10)
	struct TArray<struct AActor*> DetectedBackActors; // 0xca0(0x10)
	struct TArray<struct AActor*> DetectedWarningFrontActors; // 0xcb0(0x10)
	struct TArray<struct AActor*> DetectedWarningBackActors; // 0xcc0(0x10)
	char pad_CD4[0xc]; // 0xcd4(0x0c)

	void FrontEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function OPP.RBAutomaticDoor.FrontEndOverlap // (Final|Native|Public) // @ game+0x1d106a4
	void FrontBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBAutomaticDoor.FrontBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0x1d104b8
	void BackEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function OPP.RBAutomaticDoor.BackEndOverlap // (Final|Native|Public) // @ game+0x1d10214
	void BackBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBAutomaticDoor.BackBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0x1d10028
};

// Class OPP.RBContainer
// Size: 0x300 (Inherited: 0x248)
struct ARBContainer : AActor {
	char pad_248[0x18]; // 0x248(0x18)
	struct UStaticMeshComponent* InteractionMesh; // 0x260(0x08)
	struct USceneComponent* InteractibleRootComponent; // 0x268(0x08)
	bool bAllowMultipleSpawnInContainer; // 0x270(0x01)
	bool bSelectableBySpawningManager; // 0x271(0x01)
	enum class EContainerSpawningType SpawningType; // 0x272(0x01)
	char pad_273[0x1]; // 0x273(0x01)
	int32_t ContainerPriorityWeight; // 0x274(0x04)
	bool bCanBeUsedByTrickster; // 0x278(0x01)
	bool bUseFromTopAnimation; // 0x279(0x01)
	bool bHideIfEmpty; // 0x27a(0x01)
	bool bHideIfDisabledByRandom; // 0x27b(0x01)
	bool bBoostItemDynamicShadowBounds; // 0x27c(0x01)
	bool bAutoSpawnForcedItems; // 0x27d(0x01)
	char pad_27E[0x2]; // 0x27e(0x02)
	struct TArray<struct ARBPickup*> ForcedContentItems; // 0x280(0x10)
	struct TArray<struct FContainerForcedContentSettings> RandomizedForcedContentSettings; // 0x290(0x10)
	struct TArray<struct TSoftObjectPtr<AActor>> ActorsToInverseMatchState; // 0x2a0(0x10)
	struct UTexture2D* LockedPingIconOverride; // 0x2b0(0x08)
	struct UTexture2D* PingIconOverride; // 0x2b8(0x08)
	struct TArray<struct URBContainerSpawnLocationComponent*> SpawnLocationComponents; // 0x2c0(0x10)
	struct URBRoomAssociationComponent* RoomAssociation; // 0x2d0(0x08)
	char pad_2D8[0x1]; // 0x2d8(0x01)
	bool bIsDisabledByRandom; // 0x2d9(0x01)
	enum class EContainerPopulatedState PopulatedState; // 0x2da(0x01)
	char pad_2DB[0x5]; // 0x2db(0x05)
	struct TArray<struct ARBPickup*> InvalidSpawnItems; // 0x2e0(0x10)
	struct TArray<struct FContainerSpawnedItemInfo> SpawnedItemInfos; // 0x2f0(0x10)

	void OnSpawnedItemInfosChanged(); // Function OPP.RBContainer.OnSpawnedItemInfosChanged // (Event|Protected|BlueprintEvent) // @ game+0x201e6d4
	void OnRep_SpawnedItemInfos(); // Function OPP.RBContainer.OnRep_SpawnedItemInfos // (Final|Native|Protected) // @ game+0x1d3adc8
	void OnRep_PopulatedState(); // Function OPP.RBContainer.OnRep_PopulatedState // (Native|Protected) // @ game+0x1d3adb0
	void Multicast_ItemPickedUp(struct ARBPawn* Pawn, struct ARBPickup* Item); // Function OPP.RBContainer.Multicast_ItemPickedUp // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d3aaa4
	bool IsOpen(); // Function OPP.RBContainer.IsOpen // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d3aa7c
	bool IsLocked(); // Function OPP.RBContainer.IsLocked // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d3aa54
	bool IsContainerEmpty(); // Function OPP.RBContainer.IsContainerEmpty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d3aa38
	bool IsClosableContainer(); // Function OPP.RBContainer.IsClosableContainer // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d3aa10
	void InsideItemPickedUp(struct ARBPawn* Pawn, struct ARBPickup* Item); // Function OPP.RBContainer.InsideItemPickedUp // (Final|Native|Public) // @ game+0x1d3a94c
	enum class EContainerPopulatedState GetPopulatedState(); // Function OPP.RBContainer.GetPopulatedState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d3a934
	bool GetPickupInteractionLocation(struct ARBPawn* Pawn, struct URBContainerSpawnLocationComponent* spawnComponent, struct FVector& out_location, struct FVector& out_direction); // Function OPP.RBContainer.GetPickupInteractionLocation // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1d3a7d4
	int32_t GetNumberOfSpawnedItems(); // Function OPP.RBContainer.GetNumberOfSpawnedItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d3a7bc
	struct URBContainerSpawnLocationComponent* GetItemSpawnLocationComponent(struct ARBPickup* itemInContainer); // Function OPP.RBContainer.GetItemSpawnLocationComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d3a72c
	struct ARBPickup* GetItemFromSpawnLocation(struct URBContainerSpawnLocationComponent* spawnLocationComponent); // Function OPP.RBContainer.GetItemFromSpawnLocation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d3a69c
	void Event_SnapToState(); // Function OPP.RBContainer.Event_SnapToState // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_PostWorldPopulated_Server(); // Function OPP.RBContainer.Event_PostWorldPopulated_Server // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_ItemRemoved(struct ARBPickup* Item, int32_t Index, struct URBContainerSpawnLocationComponent* Location); // Function OPP.RBContainer.Event_ItemRemoved // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_ItemPickedUp(struct ARBPawn* Pawn, struct ARBPickup* Item); // Function OPP.RBContainer.Event_ItemPickedUp // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_ItemAdded(struct ARBPickup* Item, int32_t Index, struct URBContainerSpawnLocationComponent* Location); // Function OPP.RBContainer.Event_ItemAdded // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Editor_CreateAllItemDisplayMeshes(); // Function OPP.RBContainer.Editor_CreateAllItemDisplayMeshes // (Final|Native|Public) // @ game+0x1521dbc
	void Editor_ClearForcedItems(); // Function OPP.RBContainer.Editor_ClearForcedItems // (Final|Native|Public) // @ game+0x1521dbc
	void Editor_AddValidForcedItems(); // Function OPP.RBContainer.Editor_AddValidForcedItems // (Final|Native|Public) // @ game+0x1521dbc
	void Editor_AddEditorForcedItems(); // Function OPP.RBContainer.Editor_AddEditorForcedItems // (Final|Native|Public) // @ game+0x1521dbc
	void BP_ForceSpawnForcedContent(int32_t RandomSeed); // Function OPP.RBContainer.BP_ForceSpawnForcedContent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d3a1d0
	void BP_ForceReset(); // Function OPP.RBContainer.BP_ForceReset // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d3a1b8
	void BP_DestroyItemsInside(); // Function OPP.RBContainer.BP_DestroyItemsInside // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d3a1a4
};

// Class OPP.RBAutoRespawnContainer
// Size: 0x640 (Inherited: 0x300)
struct ARBAutoRespawnContainer : ARBContainer {
	bool bAutoRespawnForcedItems; // 0x300(0x01)
	bool bAutoSpawnBatchAsGroup; // 0x301(0x01)
	char pad_302[0x6]; // 0x302(0x06)
	struct FConfigurableInt SpawnsPerBatchCount; // 0x308(0xc8)
	struct FConfigurableFloat TimeBetweenSpawnsInBatch; // 0x3d0(0xc8)
	struct FConfigurableFloat MinTimeBetweenBatch; // 0x498(0xc8)
	struct FConfigurableFloat MaxTimeBetweenBatch; // 0x560(0xc8)
	int32_t SpawnsInBatchRemaining; // 0x628(0x04)
	bool bAutoRespawnForcedItemsEnabled; // 0x62c(0x01)
	char pad_62D[0x3]; // 0x62d(0x03)
	int32_t SpawnCount; // 0x630(0x04)
	char pad_634[0xc]; // 0x634(0x0c)

	void OnRep_SpawnsInBatchRemaining(); // Function OPP.RBAutoRespawnContainer.OnRep_SpawnsInBatchRemaining // (Final|Native|Private) // @ game+0x1d11118
	void OnRep_AutoRespawnForcedItemsEnabled(); // Function OPP.RBAutoRespawnContainer.OnRep_AutoRespawnForcedItemsEnabled // (Final|Native|Private) // @ game+0x1d11028
	void Event_OnSpawnsInBatchRemainingChanged(); // Function OPP.RBAutoRespawnContainer.Event_OnSpawnsInBatchRemainingChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnAutoRespawnItemsEnabledChanged(bool bEnabled); // Function OPP.RBAutoRespawnContainer.Event_OnAutoRespawnItemsEnabledChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_SetAutoRespawnForcedItemsEnabled(bool bEnabled, bool bSpawnRightNow); // Function OPP.RBAutoRespawnContainer.BP_SetAutoRespawnForcedItemsEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d0ff3c
};

// Class OPP.RBAvailableTaskListWidget
// Size: 0x290 (Inherited: 0x278)
struct URBAvailableTaskListWidget : URBTaskMenuWidgetBase {
	char pad_278[0x18]; // 0x278(0x18)

	void SetMetaNpcType(enum class EMetaNPCType metaNPCType); // Function OPP.RBAvailableTaskListWidget.SetMetaNpcType // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1150c
	struct TArray<struct FUINPCTask> GetAvailableTasks(); // Function OPP.RBAvailableTaskListWidget.GetAvailableTasks // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d107e0
};

// Class OPP.RBBackgroundCharacter
// Size: 0x630 (Inherited: 0x248)
struct ARBBackgroundCharacter : AActor {
	struct USkeletalMeshComponent* Mesh; // 0x248(0x08)
	struct URBSoundComponent* SoundComponent; // 0x250(0x08)
	struct URBBackgroundCharacterStation* DefaultStation; // 0x258(0x08)
	struct FBackgroundCharacterLocomotionSet WalkLocomotionSet; // 0x260(0xa8)
	struct FBackgroundCharacterLocomotionSet AlternateLocomotionSet; // 0x308(0xa8)
	struct TArray<struct URBVOMapping*> VOMappingOptions; // 0x3b0(0x10)
	struct FName FoleyType_Switch; // 0x3c0(0x08)
	struct UAkAudioEvent* FootstepWalk; // 0x3c8(0x08)
	struct UAkAudioEvent* FootstepRun; // 0x3d0(0x08)
	float WalkMovementSpeed; // 0x3d8(0x04)
	float MinTravelDistanceForStartAnim; // 0x3dc(0x04)
	struct FRandomMovementParams RandomMovementCfg; // 0x3e0(0x18)
	bool bAlwaysUseAlternateLocomotion; // 0x3f8(0x01)
	bool bCanLookAround; // 0x3f9(0x01)
	bool bUpdateLocomotionAnimData; // 0x3fa(0x01)
	char pad_3FB[0x5]; // 0x3fb(0x05)
	struct FRandomStationData Station; // 0x400(0x10)
	char pad_410[0x30]; // 0x410(0x30)
	struct ARBPawn* FocusPawn; // 0x440(0x08)
	char pad_448[0x48]; // 0x448(0x48)
	struct FBCAnimatedStartData AnimatedStart; // 0x490(0x30)
	struct FBCAnimatedStopData AnimatedStop; // 0x4c0(0x50)
	struct FRailSlider RailSlider; // 0x510(0x40)
	struct UAnimationAsset* PlayingAnim; // 0x550(0x08)
	char pad_558[0x30]; // 0x558(0x30)
	struct URBAnimInstanceBackgroundCharacter* AnimInst; // 0x588(0x08)
	char pad_590[0x50]; // 0x590(0x50)
	struct FFootstepData LastFootStepData; // 0x5e0(0x28)
	struct URBVOMapping* VOMappingAsset; // 0x608(0x08)
	struct FString VoiceType; // 0x610(0x10)
	char pad_620[0x10]; // 0x620(0x10)

	void SnapToStartPosition(); // Function OPP.RBBackgroundCharacter.SnapToStartPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x1d11590
};

// Class OPP.RBBackgroundCharacterStation
// Size: 0x98 (Inherited: 0x28)
struct URBBackgroundCharacterStation : UObject {
	struct FRBBackgroundCharacterStationParams StationConfig; // 0x28(0x60)
	struct UAnimSequence* PreviewAnimSeq; // 0x88(0x08)
	float PreviewTime; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
};

// Class OPP.RBBackgroundDoor
// Size: 0x260 (Inherited: 0x248)
struct ARBBackgroundDoor : AActor {
	float AutomaticOpenDistance; // 0x248(0x04)
	float MinOpenDuration; // 0x24c(0x04)
	char pad_250[0x10]; // 0x250(0x10)

	void Event_OpenDoor(); // Function OPP.RBBackgroundDoor.Event_OpenDoor // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_CloseDoor(); // Function OPP.RBBackgroundDoor.Event_CloseDoor // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBBackToLobbyMenu
// Size: 0x350 (Inherited: 0x308)
struct URBBackToLobbyMenu : URBMenuWidget {
	char pad_308[0x48]; // 0x308(0x48)

	bool LeavingWillLeaveParty(); // Function OPP.RBBackToLobbyMenu.LeavingWillLeaveParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d10aac
	bool IsOperationPending(); // Function OPP.RBBackToLobbyMenu.IsOperationPending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d10a40
	bool IsLeaving(); // Function OPP.RBBackToLobbyMenu.IsLeaving // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d10a1c
	void Event_Refresh(); // Function OPP.RBBackToLobbyMenu.Event_Refresh // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	bool CanReturnWithParty(); // Function OPP.RBBackToLobbyMenu.CanReturnWithParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d103d0
	void BackToLobby(bool bWithParty); // Function OPP.RBBackToLobbyMenu.BackToLobby // (Final|Native|Public|BlueprintCallable) // @ game+0x1d10350
};

// Class OPP.RBBareBonesInteractionComponent
// Size: 0x660 (Inherited: 0x600)
struct URBBareBonesInteractionComponent : URBInteractibleComponent {
	struct FMulticastInlineDelegate OnInteractionStarted; // 0x5f8(0x10)
	struct FMulticastInlineDelegate OnDoAction; // 0x608(0x10)
	struct FMulticastInlineDelegate OnInteractionCompleted; // 0x618(0x10)
	struct FMulticastInlineDelegate OnInteractionInterrupted; // 0x628(0x10)
	struct FMulticastInlineDelegate OnPawnInteractingChanged; // 0x638(0x10)
	int32_t RandomSeed; // 0x648(0x04)
	int32_t NumberOfInteract; // 0x64c(0x04)
	struct ARBPawn* pawnInteracting; // 0x650(0x08)

	void OnRep_PawnInteracting(); // Function OPP.RBBareBonesInteractionComponent.OnRep_PawnInteracting // (Native|Public) // @ game+0x1d110e8
};

// Class OPP.RBBaseObjectiveCoordinator
// Size: 0xba8 (Inherited: 0x248)
struct ARBBaseObjectiveCoordinator : AActor {
	char pad_248[0x8]; // 0x248(0x08)
	struct USceneComponent* ObjectiveCoordinatorRoot; // 0x250(0x08)
	struct UBillboardComponent* CoordinatorSprite; // 0x258(0x08)
	struct TArray<struct TSoftObjectPtr<ARBBaseObjectiveCoordinator>> NextObjectiveCoordinators; // 0x260(0x10)
	struct TSoftObjectPtr<ARBBaseObjectiveCoordinator> NextObjectiveCoordinator; // 0x270(0x28)
	bool bAutoStartOnStageStarted; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)
	struct TArray<struct FRBMissionID> ExclusiveMissionIds; // 0x2a0(0x10)
	struct FName OptionalNameID; // 0x2b0(0x08)
	struct TArray<struct AActor*> ObjectiveActorClasses; // 0x2b8(0x10)
	struct TArray<struct TSoftObjectPtr<AActor>> ObjectiveActors; // 0x2c8(0x10)
	bool bUseFixedMaxCount; // 0x2d8(0x01)
	char pad_2D9[0x7]; // 0x2d9(0x07)
	struct FConfigurableInt FixedMaxCount; // 0x2e0(0xc8)
	bool bIsMainObjective; // 0x3a8(0x01)
	bool bHideCompletionMessage; // 0x3a9(0x01)
	char pad_3AA[0x2]; // 0x3aa(0x02)
	float StartDelay; // 0x3ac(0x04)
	bool bEnabledByDefault; // 0x3b0(0x01)
	bool bDisablePlayerRespawnInStage; // 0x3b1(0x01)
	bool bSkipRandomStateCheckForPrimaryActorValidity; // 0x3b2(0x01)
	bool bPopulateSecondaryActorsFirst; // 0x3b3(0x01)
	bool bDontChangeIgnoredRandomActors; // 0x3b4(0x01)
	char pad_3B5[0x3]; // 0x3b5(0x03)
	struct TArray<struct TSoftObjectPtr<AActor>> ExcludedObjectiveActors; // 0x3b8(0x10)
	bool bAlwaysSendInAnalytics; // 0x3c8(0x01)
	char pad_3C9[0x7]; // 0x3c9(0x07)
	struct TArray<struct TSoftObjectPtr<ARBBaseObjectiveCoordinator>> LinkedCoordinatorsToCompleteOnCompletion; // 0x3d0(0x10)
	bool bRestoresHealthOnCompleteWithPerk; // 0x3e0(0x01)
	char pad_3E1[0x3]; // 0x3e1(0x03)
	int32_t ObjectiveMissionIndex; // 0x3e4(0x04)
	bool bIsConcurrentObjective; // 0x3e8(0x01)
	bool bUseHUDIcons; // 0x3e9(0x01)
	enum class EGameObjectiveType gameObjectiveType; // 0x3ea(0x01)
	bool bShowObjectiveIconDistance; // 0x3eb(0x01)
	char pad_3EC[0x4]; // 0x3ec(0x04)
	struct FText ObjectiveLevelText; // 0x3f0(0x18)
	struct FText CompletionInProgressText; // 0x408(0x18)
	struct FText CompletionInProgressTutorialText; // 0x420(0x18)
	struct FName CustomCompletionInProgressTutorialID; // 0x438(0x08)
	struct FText ObjectiveTitle; // 0x440(0x18)
	struct TArray<struct FTutorialTextData> CustomTutorialOnStartSequence; // 0x458(0x10)
	struct FNarrativeScreenAnimationData NarrativeScreenAnimationData; // 0x468(0x18)
	bool bPlayObjectiveIntroAnimation; // 0x480(0x01)
	char bUseObjectiveActorsRandomization : 1; // 0x481(0x01)
	char pad_481_1 : 7; // 0x481(0x01)
	char pad_482[0x6]; // 0x482(0x06)
	struct FObjectiveRandomizationSetupData PrimaryActorsRandomizationSetup; // 0x488(0x4e8)
	char bOverride_MaxWatchDistance : 1; // 0x970(0x01)
	char pad_970_1 : 7; // 0x970(0x01)
	char pad_971[0x7]; // 0x971(0x07)
	struct FConfigurableFloat MaxWatchDistanceOverride; // 0x978(0xc8)
	struct UAkAudioEvent* ObjectiveStartedSoundOverride; // 0xa40(0x08)
	char bOverride_ObjectiveStartedSound : 1; // 0xa48(0x01)
	char pad_A48_1 : 7; // 0xa48(0x01)
	char pad_A49[0x7]; // 0xa49(0x07)
	struct UAkAudioEvent* ObjectiveStartedVoice; // 0xa50(0x08)
	struct UAkAudioEvent* ObjectiveCompletedSoundOverride; // 0xa58(0x08)
	char bOverride_ObjectiveCompletedSound : 1; // 0xa60(0x01)
	char pad_A60_1 : 7; // 0xa60(0x01)
	char pad_A61[0x7]; // 0xa61(0x07)
	struct UAkAudioEvent* ObjectiveStepCompletedSoundOverride; // 0xa68(0x08)
	char bOverride_ObjectiveStepCompletedSound : 1; // 0xa70(0x01)
	char pad_A70_1 : 7; // 0xa70(0x01)
	char pad_A71[0x7]; // 0xa71(0x07)
	struct UAkAudioEvent* ObjectiveCompletedStepRevertedSoundOverride; // 0xa78(0x08)
	char bOverride_ObjectiveCompletedStepRevertedSound : 1; // 0xa80(0x01)
	char pad_A80_1 : 7; // 0xa80(0x01)
	char pad_A81[0x3]; // 0xa81(0x03)
	float PercentageOfStageXPForCompletion; // 0xa84(0x04)
	float PercentageOfStageXPForSteps; // 0xa88(0x04)
	bool bHasTimeLimit; // 0xa8c(0x01)
	char pad_A8D[0x3]; // 0xa8d(0x03)
	float TimeLimit; // 0xa90(0x04)
	bool bFailOnEndOfStage; // 0xa94(0x01)
	enum class EObjectiveCoordinatorState CoordinatorState; // 0xa95(0x01)
	char pad_A96[0x2]; // 0xa96(0x02)
	struct FMulticastInlineDelegate OnObjectiveCoordinatorStateChanged; // 0xa98(0x10)
	struct FMulticastInlineDelegate OnProgressChangedEvent; // 0xaa8(0x10)
	struct FMulticastInlineDelegate OnObjectiveCoordinatorCompleted; // 0xab8(0x10)
	struct FMulticastInlineDelegate OnObjectiveCoordinatorStarted; // 0xac8(0x10)
	struct FMulticastInlineDelegate OnSingleObjectiveCompleted; // 0xad8(0x10)
	struct FMulticastInlineDelegate OnSingleCompletedObjectiveReverted; // 0xae8(0x10)
	struct FMulticastInlineDelegate OnCompletionInProgressChanged; // 0xaf8(0x10)
	struct TArray<struct TSoftObjectPtr<ARBPlayer>> SpecificPlayers; // 0xb08(0x10)
	float StartedTime; // 0xb18(0x04)
	float EndedTime; // 0xb1c(0x04)
	float CurrentObjectiveStepProgressRatio; // 0xb20(0x04)
	float progressRatio; // 0xb24(0x04)
	struct TArray<struct AActor*> RemainingObjectives; // 0xb28(0x10)
	int32_t CurrentObjectiveCount; // 0xb38(0x04)
	int32_t ObjectiveMaxCount; // 0xb3c(0x04)
	struct FText TutorialText; // 0xb40(0x18)
	struct FName TutorialId; // 0xb58(0x08)
	char pad_B60[0x8]; // 0xb60(0x08)
	struct TArray<struct AActor*> ObjectiveActorsInitialized; // 0xb68(0x10)
	char pad_B78[0x30]; // 0xb78(0x30)

	void StopCoordinator(); // Function OPP.RBBaseObjectiveCoordinator.StopCoordinator // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d115b8
	void StartCoordinator(); // Function OPP.RBBaseObjectiveCoordinator.StartCoordinator // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d115a4
	void SetEnabled(bool Enabled); // Function OPP.RBBaseObjectiveCoordinator.SetEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d1148c
	void OnStageReady(struct FRBStageID& StageID, struct FRBMissionID& MissionID); // Function OPP.RBBaseObjectiveCoordinator.OnStageReady // (Native|Protected|HasOutParms) // @ game+0x1d11288
	void OnRep_StartedTime(); // Function OPP.RBBaseObjectiveCoordinator.OnRep_StartedTime // (Final|Native|Protected) // @ game+0x1d1112c
	void OnRep_RemainingObjectives(); // Function OPP.RBBaseObjectiveCoordinator.OnRep_RemainingObjectives // (Native|Protected) // @ game+0x1d11100
	void OnRep_ObjectiveMaxCount(); // Function OPP.RBBaseObjectiveCoordinator.OnRep_ObjectiveMaxCount // (Final|Native|Protected) // @ game+0x1d110d4
	void OnRep_CurrentObjectiveCount(); // Function OPP.RBBaseObjectiveCoordinator.OnRep_CurrentObjectiveCount // (Final|Native|Protected) // @ game+0x1d110c0
	void OnRep_CoordinatorState(enum class EObjectiveCoordinatorState oldState); // Function OPP.RBBaseObjectiveCoordinator.OnRep_CoordinatorState // (Native|Protected) // @ game+0x1d1103c
	void OnFailConditionTimerElapsed(); // Function OPP.RBBaseObjectiveCoordinator.OnFailConditionTimerElapsed // (Final|Native|Protected) // @ game+0x1d104a4
	void OnEndOfStage(struct FRBStageID& StageID, struct FRBMissionID& MissionID, bool isRestart); // Function OPP.RBBaseObjectiveCoordinator.OnEndOfStage // (Native|Protected|HasOutParms) // @ game+0x1d10cf0
	void Multicast_OnSingleObjectiveCompleted(struct AActor* Player, struct AActor* objectiveActor, bool IsFinalObjective, bool bRemoveFromRemainingList); // Function OPP.RBBaseObjectiveCoordinator.Multicast_OnSingleObjectiveCompleted // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x1d10bac
	void Multicast_OnSingleCompletedObjectiveReverted(struct AActor* objectiveActor, bool bReaddToRemainingList); // Function OPP.RBBaseObjectiveCoordinator.Multicast_OnSingleCompletedObjectiveReverted // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x1d10ae0
	bool IsUserFacing(); // Function OPP.RBBaseObjectiveCoordinator.IsUserFacing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d10a88
	bool IsStarted(); // Function OPP.RBBaseObjectiveCoordinator.IsStarted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d10a6c
	bool IsFinalObjective(); // Function OPP.RBBaseObjectiveCoordinator.IsFinalObjective // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d109f4
	bool IsCompleted(); // Function OPP.RBBaseObjectiveCoordinator.IsCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d109d8
	bool HasIntermediateObjectiveText(); // Function OPP.RBBaseObjectiveCoordinator.HasIntermediateObjectiveText // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d109b0
	int32_t GetMaxCount(); // Function OPP.RBBaseObjectiveCoordinator.GetMaxCount // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d10988
	enum class EMainObjectiveType GetMainObjectiveType(); // Function OPP.RBBaseObjectiveCoordinator.GetMainObjectiveType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x150d484
	struct TArray<struct FIntermediateObjectiveData> GetIntermediateObjectivesData(); // Function OPP.RBBaseObjectiveCoordinator.GetIntermediateObjectivesData // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d108e4
	enum class EGameObjectiveType GetGameObjectiveType(); // Function OPP.RBBaseObjectiveCoordinator.GetGameObjectiveType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d108bc
	int32_t GetCurrentCompletedCount(); // Function OPP.RBBaseObjectiveCoordinator.GetCurrentCompletedCount // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d10894
	struct FString GetCoordinatorName(); // Function OPP.RBBaseObjectiveCoordinator.GetCoordinatorName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d10858
	void ForceRefreshObjectiveText(); // Function OPP.RBBaseObjectiveCoordinator.ForceRefreshObjectiveText // (Native|Public|BlueprintCallable) // @ game+0x13b1e38
	void FailCoordinator(); // Function OPP.RBBaseObjectiveCoordinator.FailCoordinator // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d104a4
	void Event_OnSetupSingleObjectiveActor(struct AActor* objectiveActor); // Function OPP.RBBaseObjectiveCoordinator.Event_OnSetupSingleObjectiveActor // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnCoordinatorStateChanged(enum class EObjectiveCoordinatorState oldState, enum class EObjectiveCoordinatorState newState); // Function OPP.RBBaseObjectiveCoordinator.Event_OnCoordinatorStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnCleanSingleObjectiveActor(struct AActor* objectiveActor); // Function OPP.RBBaseObjectiveCoordinator.Event_OnCleanSingleObjectiveActor // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Editor_RebuildMissionObjectiveIndexes(); // Function OPP.RBBaseObjectiveCoordinator.Editor_RebuildMissionObjectiveIndexes // (Final|Native|Public) // @ game+0x1521dbc
	void CompleteCoordinator(bool forceCompletion); // Function OPP.RBBaseObjectiveCoordinator.CompleteCoordinator // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d10424
	bool BP_ShouldShowObjectiveInHUD(); // Function OPP.RBBaseObjectiveCoordinator.BP_ShouldShowObjectiveInHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d10000
	bool BP_HasContinuousProgress(); // Function OPP.RBBaseObjectiveCoordinator.BP_HasContinuousProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d0ff14
	int32_t BP_GetRemainingObjectiveCount(); // Function OPP.RBBaseObjectiveCoordinator.BP_GetRemainingObjectiveCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d0feec
	struct TArray<struct AActor*> BP_GetRemainingObjectiveActors(); // Function OPP.RBBaseObjectiveCoordinator.BP_GetRemainingObjectiveActors // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d0fe90
	int32_t BP_GetObjectiveMaxCount(); // Function OPP.RBBaseObjectiveCoordinator.BP_GetObjectiveMaxCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d0fe78
	struct FText BP_GetObjectiveLevelText(); // Function OPP.RBBaseObjectiveCoordinator.BP_GetObjectiveLevelText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d0fe34
	struct UAkAudioEvent* BP_GetFailedSound(); // Function OPP.RBBaseObjectiveCoordinator.BP_GetFailedSound // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1521c28
	struct TArray<struct AActor*> BP_GetAllValidPrimaryObjectiveActors(); // Function OPP.RBBaseObjectiveCoordinator.BP_GetAllValidPrimaryObjectiveActors // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d0fdf8
	void BP_CompleteSingleObjective(struct ARBPawn* Player, struct AActor* objectiveActor); // Function OPP.RBBaseObjectiveCoordinator.BP_CompleteSingleObjective // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d0fd2c
};

// Class OPP.RBBasePushable
// Size: 0x540 (Inherited: 0x248)
struct ARBBasePushable : AActor {
	bool bCanBePushedStartingValue; // 0x248(0x01)
	bool bAlwaysTick; // 0x249(0x01)
	char pad_24A[0x2]; // 0x24a(0x02)
	float WalkPushSpeed; // 0x24c(0x04)
	float RunPushSpeed; // 0x250(0x04)
	char pad_254[0x4]; // 0x254(0x04)
	struct FConfigurableFloat BaseSpeedMultiplier; // 0x258(0xc8)
	bool bMajorDisturbance; // 0x320(0x01)
	char pad_321[0x3]; // 0x321(0x03)
	float MajorDisturbanceStimulusDistance; // 0x324(0x04)
	float MajorDisturbanceTriggerDistance; // 0x328(0x04)
	bool bTestClient; // 0x32c(0x01)
	char pad_32D[0x3]; // 0x32d(0x03)
	struct UAkAudioEvent* StartPushingSoundEvent; // 0x330(0x08)
	struct UAkAudioEvent* StopPushingSoundEvent; // 0x338(0x08)
	struct UAkAudioEvent* StuckSoundEvent; // 0x340(0x08)
	struct UAkAudioEvent* CollisionSoundEvent; // 0x348(0x08)
	struct FString PushingMovementSoundSwitchState; // 0x350(0x10)
	struct FString StuckSoundSwitchState; // 0x360(0x10)
	struct FString SpeedRTPCName; // 0x370(0x10)
	struct FVector2D SpeedRTPCMapping; // 0x380(0x08)
	bool SpeedRTPCAlsoAppliedToGlobal; // 0x388(0x01)
	char pad_389[0x3]; // 0x389(0x03)
	float CameraShakeIntensity; // 0x38c(0x04)
	struct UBoxComponent* NavCollision; // 0x390(0x08)
	float NavCollisionUpdateDistance; // 0x398(0x04)
	struct FVector NavCollisionIdleScale; // 0x39c(0x0c)
	struct FVector NavCollisionMovingScale; // 0x3a8(0x0c)
	bool bCanBePushed; // 0x3b4(0x01)
	bool bHasCustomUninteractableText; // 0x3b5(0x01)
	char pad_3B6[0x2]; // 0x3b6(0x02)
	struct FText CustomUninteractableText; // 0x3b8(0x18)
	float CustomWalkPushSpeed; // 0x3d0(0x04)
	float CustomRunPushSpeed; // 0x3d4(0x04)
	bool bHardToPush; // 0x3d8(0x01)
	char pad_3D9[0x1f]; // 0x3d9(0x1f)
	struct FMulticastInlineDelegate OnStartOrStopMoving; // 0x3f8(0x10)
	struct FMulticastInlineDelegate OnCanBePushedChanged; // 0x408(0x10)
	struct FMulticastInlineDelegate OnPushEvent; // 0x418(0x10)
	struct FMulticastInlineDelegate OnPawnPushingChangedEvent; // 0x428(0x10)
	bool bAllowBotsToJumpOver; // 0x438(0x01)
	char pad_439[0x7]; // 0x439(0x07)
	struct URBNavLinkComponent* ForwardNavLinkComp; // 0x440(0x08)
	float ForwardNavLinkDepth; // 0x448(0x04)
	char pad_44C[0x4]; // 0x44c(0x04)
	struct URBNavLinkComponent* SideNavLinkComp; // 0x450(0x08)
	float SideNavLinkDepth; // 0x458(0x04)
	char pad_45C[0x4]; // 0x45c(0x04)
	struct URBSoundComponent* SoundComponent; // 0x460(0x08)
	bool bPushableInitialReplication; // 0x468(0x01)
	char pad_469[0x7]; // 0x469(0x07)
	struct TArray<struct URBPushableComponent*> PushableComponents; // 0x470(0x10)
	struct TArray<struct UPrimitiveComponent*> PushableCollisions; // 0x480(0x10)
	bool bIsInteractible_Server; // 0x490(0x01)
	char pad_491[0xf]; // 0x491(0x0f)
	struct FVector MovementLastFrame; // 0x4a0(0x0c)
	struct FVector MovementThisFrame; // 0x4ac(0x0c)
	char pad_4B8[0x68]; // 0x4b8(0x68)
	struct ARBBot* BotTraversing; // 0x520(0x08)
	bool bKeepTickingWithNoPushingPawns; // 0x528(0x01)
	bool Client_bKeepTickingWithNoPushingPawns; // 0x529(0x01)
	char pad_52A[0x6]; // 0x52a(0x06)
	struct TArray<struct AActor*> IgnoredWhenMovingActors; // 0x530(0x10)

	void Tick_Pushable(float DeltaTime); // Function OPP.RBBasePushable.Tick_Pushable // (Native|Event|Public|BlueprintEvent) // @ game+0x1d25750
	void Tick_NonPushable(float DeltaTime); // Function OPP.RBBasePushable.Tick_NonPushable // (Native|Event|Public|BlueprintEvent) // @ game+0x1d256c8
	void SetIsHardToPush(bool bHardToPushValue); // Function OPP.RBBasePushable.SetIsHardToPush // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d233f8
	void SetInteractionsEnabled_Server(bool bEnabled); // Function OPP.RBBasePushable.SetInteractionsEnabled_Server // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d23370
	void OnRep_PushableInitialReplication(); // Function OPP.RBBasePushable.OnRep_PushableInitialReplication // (Final|Native|Private) // @ game+0x13b1f70
	void OnRep_KeepTickingWithNoPushingPawns(); // Function OPP.RBBasePushable.OnRep_KeepTickingWithNoPushingPawns // (Final|Native|Private) // @ game+0x1d2173c
	void OnRep_CanBePushed(); // Function OPP.RBBasePushable.OnRep_CanBePushed // (Final|Native|Private) // @ game+0x1d21728
	void Multicast_ShakePushable(); // Function OPP.RBBasePushable.Multicast_ShakePushable // (Net|Native|Event|NetMulticast|Public) // @ game+0x1d21684
	void Multicast_PushableStuck(bool bFromCollision); // Function OPP.RBBasePushable.Multicast_PushableStuck // (Net|Native|Event|NetMulticast|Public) // @ game+0x1d21600
	bool IsMoving(); // Function OPP.RBBasePushable.IsMoving // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d20860
	bool IsConsideredMoving(); // Function OPP.RBBasePushable.IsConsideredMoving // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d200c0
	struct ARBLedgeMarker* GetLedgeMarkerClosestTo(struct FVector& Location); // Function OPP.RBBasePushable.GetLedgeMarkerClosestTo // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent|Const) // @ game+0x1d1d028
	void Event_ShakePushable(); // Function OPP.RBBasePushable.Event_ShakePushable // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnPawnPushingChanged(struct URBPushableComponent* pushableComponent, struct ARBPawn* Pawn); // Function OPP.RBBasePushable.Event_OnPawnPushingChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnCanBePushedChanged(bool canBePushed); // Function OPP.RBBasePushable.Event_OnCanBePushedChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_SetKeepTickingWithNoPushingPawns(bool bKeepTicking); // Function OPP.RBBasePushable.BP_SetKeepTickingWithNoPushingPawns // (Final|Native|Public|BlueprintCallable) // @ game+0x1d17aec
	void BP_SetCustomUninteractableText_Server(struct FText Text); // Function OPP.RBBasePushable.BP_SetCustomUninteractableText_Server // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d17a30
	void BP_SetCustomPushSpeed_Server(float walkSpeed, float runSpeed); // Function OPP.RBBasePushable.BP_SetCustomPushSpeed_Server // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d17964
	void BP_SetCanBePushed_Server(bool bValue); // Function OPP.RBBasePushable.BP_SetCanBePushed_Server // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d178e4
	void BP_PostMove(struct FVector DeltaLocation); // Function OPP.RBBasePushable.BP_PostMove // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x201e6d4
	struct TArray<struct ARBPawn*> BP_GetPawnsPushing(); // Function OPP.RBBasePushable.BP_GetPawnsPushing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d17754
	void BP_ClearCustomUninteractableText_Server(); // Function OPP.RBBasePushable.BP_ClearCustomUninteractableText_Server // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d17714
	void BP_ClearCustomPush_Server(); // Function OPP.RBBasePushable.BP_ClearCustomPush_Server // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d176f4
};

// Class OPP.RBInteractibleContainer
// Size: 0x4d0 (Inherited: 0x300)
struct ARBInteractibleContainer : ARBContainer {
	char pad_300[0x70]; // 0x300(0x70)
	bool bCanBeLocked; // 0x370(0x01)
	bool bForceLock; // 0x371(0x01)
	bool bForceTrap; // 0x372(0x01)
	bool bAutoOpenOnUnlock; // 0x373(0x01)
	char pad_374[0x4]; // 0x374(0x04)
	struct AActor* LockingPanelClass; // 0x378(0x08)
	struct ARBContainerTrapTriggerable* TrapClass; // 0x380(0x08)
	float MinTrapDelay; // 0x388(0x04)
	float MaxTrapDelay; // 0x38c(0x04)
	struct URBInteractionZoneComponent* InteractionZone; // 0x390(0x08)
	struct USceneComponent* TrapRef; // 0x398(0x08)
	struct USceneComponent* LockingPanelRef; // 0x3a0(0x08)
	struct ARBContainerTrapTriggerable* LinkedTrap; // 0x3a8(0x08)
	struct AActor* LinkedLockingPanel; // 0x3b0(0x08)
	struct FScheduledBool IsOpened; // 0x3b8(0x70)
	struct FString IntreractibleContainerSoundSwitch; // 0x428(0x10)
	struct FScheduledUObject InteractingPawn; // 0x438(0x88)
	struct URBHackPanelComponent* HackPanel; // 0x4c0(0x08)
	char pad_4C8[0x8]; // 0x4c8(0x08)

	void SnapToState_Implementation(); // Function OPP.RBInteractibleContainer.SnapToState_Implementation // (Native|Public) // @ game+0x1d84560
	void OpenContainer(); // Function OPP.RBInteractibleContainer.OpenContainer // (Final|Native|Public|BlueprintCallable) // @ game+0x1d843e4
	void OnRep_PawnInteracting(); // Function OPP.RBInteractibleContainer.OnRep_PawnInteracting // (Final|Native|Protected) // @ game+0x1d843b0
	void OnRep_LinkedLockingPanel(); // Function OPP.RBInteractibleContainer.OnRep_LinkedLockingPanel // (Final|Native|Protected) // @ game+0x1d84370
	void OnRep_IsOpened(); // Function OPP.RBInteractibleContainer.OnRep_IsOpened // (Final|Native|Protected) // @ game+0x1d84354
	void OnPawnInteractingChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBInteractibleContainer.OnPawnInteractingChangedCallback // (Final|Native|Protected) // @ game+0x1d8421c
	void OnPanelUnlocked(struct URBInteractiblePanelComponent* panel, struct ARBPawn* pawnInteracting); // Function OPP.RBInteractibleContainer.OnPanelUnlocked // (Final|Native|Public) // @ game+0x1d8412c
	void IsOpenedChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBInteractibleContainer.IsOpenedChangedCallback // (Final|Native|Protected) // @ game+0x1d83f0c
	struct URBInteractionZoneComponent* GivesFocusTo(struct ARBPawn* interactorPawn); // Function OPP.RBInteractibleContainer.GivesFocusTo // (Final|Native|Public) // @ game+0x1d83de8
	void Event_SpawnLock(); // Function OPP.RBInteractibleContainer.Event_SpawnLock // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnPanelUnlocked(); // Function OPP.RBInteractibleContainer.Event_OnPanelUnlocked // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnIsOpenedChanged(); // Function OPP.RBInteractibleContainer.Event_OnIsOpenedChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBBaseQuestItemContainer
// Size: 0x4f0 (Inherited: 0x4d0)
struct ARBBaseQuestItemContainer : ARBInteractibleContainer {
	char pad_4D0[0x8]; // 0x4d0(0x08)
	bool bUseForcedContentForQuest; // 0x4d8(0x01)
	char pad_4D9[0x7]; // 0x4d9(0x07)
	struct ARBPickup* QuestItemClass; // 0x4e0(0x08)
	char pad_4E8[0x8]; // 0x4e8(0x08)
};

// Class OPP.RBHidespotComponent
// Size: 0x910 (Inherited: 0x600)
struct URBHidespotComponent : URBInteractibleComponent {
	char pad_600[0x18]; // 0x600(0x18)
	enum class EHidespotCategory HidespotType; // 0x618(0x01)
	char VerticalAllowedDirection; // 0x619(0x01)
	bool bLargeClearance; // 0x61a(0x01)
	char pad_61B[0x1]; // 0x61b(0x01)
	float AnchorRotationAngle; // 0x61c(0x04)
	float MaxGameplayPeekRatio; // 0x620(0x04)
	bool bAllowExitWithMovement; // 0x624(0x01)
	char pad_625[0x3]; // 0x625(0x03)
	struct UBoxComponent* UsableSurfaceVolume; // 0x628(0x08)
	bool bSharedSpace; // 0x630(0x01)
	bool bIndependantHidespot; // 0x631(0x01)
	bool bSharedSpaceAlwaysFind; // 0x632(0x01)
	bool bGiveFocusToSharedSpaceIfOccupied; // 0x633(0x01)
	bool bSiblingsOverlap; // 0x634(0x01)
	char pad_635[0x3]; // 0x635(0x03)
	float FindHiddenPlayerProbability; // 0x638(0x04)
	struct FVector ClearanceTestOffset; // 0x63c(0x0c)
	struct FVector DarknessTestOffset; // 0x648(0x0c)
	char pad_654[0x4]; // 0x654(0x04)
	struct AActor* AdditionalCollisionActor; // 0x658(0x08)
	struct UAkAuxBus* Reverb; // 0x660(0x08)
	struct FName SwitchName; // 0x668(0x08)
	bool bUseCustomSoundSettings; // 0x670(0x01)
	char pad_671[0x3]; // 0x671(0x03)
	float ClosedOcclusion; // 0x674(0x04)
	float PeekingOcclusion; // 0x678(0x04)
	char pad_67C[0x4]; // 0x67c(0x04)
	struct UAkAudioEvent* DoorStartedMovingAudioEvent; // 0x680(0x08)
	struct UAkAudioEvent* DoorStoppedMovingAudioEvent; // 0x688(0x08)
	struct FHidespotCameraParams HiddenCameraParams; // 0x690(0x10)
	struct FHidespotCameraParams AnimatedPeekCameraParams; // 0x6a0(0x10)
	struct FGameplayTagContainer EnableOnlyForNPCTags; // 0x6b0(0x20)
	struct FGameplayTagContainer DisableForNPCTags; // 0x6d0(0x20)
	bool bCanBeDisabled; // 0x6f0(0x01)
	bool bForceDisabled; // 0x6f1(0x01)
	bool bWarnOnForceDisabled; // 0x6f2(0x01)
	bool bCanBeUsedByPouncer; // 0x6f3(0x01)
	struct FRotator PouncingPivotRotation; // 0x6f4(0x0c)
	float PouncerTriggerDistanceCrouchedHorz; // 0x700(0x04)
	float PouncerTriggerDistanceHorz; // 0x704(0x04)
	float PouncerTriggerDistanceDown; // 0x708(0x04)
	float PouncerTriggerDistanceUp; // 0x70c(0x04)
	float PouncerTriggerAngle; // 0x710(0x04)
	float PouncerShynessCloseRange; // 0x714(0x04)
	float PouncerShynessFarRange; // 0x718(0x04)
	float PouncerShynessMultiplier; // 0x71c(0x04)
	int32_t RandomSeed; // 0x720(0x04)
	char pad_724[0x4]; // 0x724(0x04)
	struct FMulticastInlineDelegate OnDoAction; // 0x728(0x10)
	struct FMulticastInlineDelegate OnDisabledChangedEvent; // 0x738(0x10)
	char pad_748[0xc]; // 0x748(0x0c)
	int32_t NumberOfInteract; // 0x754(0x04)
	struct FScheduledUObject PawnHiddenInside; // 0x758(0x88)
	struct FScheduledUObject pawnInteracting; // 0x7e0(0x88)
	struct TArray<struct URBHidespotComponent*> SiblingHidespots; // 0x868(0x10)
	struct TArray<struct UPrimitiveComponent*> InteractionIgnoreComponents; // 0x878(0x10)
	bool bPouncerEntered; // 0x888(0x01)
	char pad_889[0xb]; // 0x889(0x0b)
	bool bDisabled; // 0x894(0x01)
	char pad_895[0x3]; // 0x895(0x03)
	struct ARBNPC* LastHiddenPouncer; // 0x898(0x08)
	struct ARBNPC* PouncerReservation; // 0x8a0(0x08)
	struct USceneComponent* Anchor; // 0x8a8(0x08)
	struct USceneComponent* SoundLocationRef; // 0x8b0(0x08)
	struct USceneComponent* Pivot; // 0x8b8(0x08)
	struct URBRepulsionComponent* PawnHiddenRepulsion; // 0x8c0(0x08)
	struct URBRoomAssociationComponent* roomAssociationComponent; // 0x8c8(0x08)
	char pad_8D0[0x8]; // 0x8d0(0x08)
	struct URBSoundComponent* SoundComponent; // 0x8d8(0x08)
	char pad_8E0[0x8]; // 0x8e0(0x08)
	struct ARBPawn* LastPivotInteractor; // 0x8e8(0x08)
	char pad_8F0[0x20]; // 0x8f0(0x20)

	void OnRep_PouncerEntered(); // Function OPP.RBHidespotComponent.OnRep_PouncerEntered // (Final|Native|Public) // @ game+0x1d78a70
	void OnRep_PawnInteracting(); // Function OPP.RBHidespotComponent.OnRep_PawnInteracting // (Final|Native|Public) // @ game+0x1d78a54
	void OnRep_PawnHiddenInside(); // Function OPP.RBHidespotComponent.OnRep_PawnHiddenInside // (Final|Native|Public) // @ game+0x1d78a38
	void OnRep_Disabled(); // Function OPP.RBHidespotComponent.OnRep_Disabled // (Final|Native|Public) // @ game+0x1d7895c
	void OnPawnInteractingChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBHidespotComponent.OnPawnInteractingChangedCallback // (Final|Native|Public) // @ game+0x1d78784
	void OnPawnHiddenInsideChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBHidespotComponent.OnPawnHiddenInsideChangedCallback // (Final|Native|Public) // @ game+0x1d78704
	void InitializeClearanceBoxes(); // Function OPP.RBHidespotComponent.InitializeClearanceBoxes // (Final|Native|Public|BlueprintCallable) // @ game+0x1521dbc
	void FixUpPouncer(); // Function OPP.RBHidespotComponent.FixUpPouncer // (Final|Native|Public) // @ game+0x1d77b64
	void BP_DisableHidespot(); // Function OPP.RBHidespotComponent.BP_DisableHidespot // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d77b40
};

// Class OPP.RBBedHidespotComponent
// Size: 0x920 (Inherited: 0x910)
struct URBBedHidespotComponent : URBHidespotComponent {
	bool bRightSide; // 0x910(0x01)
	bool bPouncerVisibleFromFront; // 0x911(0x01)
	char pad_912[0x6]; // 0x912(0x06)
	struct URBBedHidespotComponent* SharedBedHidespotComponent; // 0x918(0x08)
};

// Class OPP.RBBlockable
// Size: 0x28 (Inherited: 0x28)
struct URBBlockable : UInterface {

	enum class EBlockableState GetBlockableState(); // Function OPP.RBBlockable.GetBlockableState // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1b664
};

// Class OPP.RBBlockingVolume
// Size: 0x2b8 (Inherited: 0x298)
struct ARBBlockingVolume : ANavModifierVolume {
	bool bEnabled; // 0x298(0x01)
	bool bBlockNPCs; // 0x299(0x01)
	bool bBlockPlayers; // 0x29a(0x01)
	bool bBlockInteractions; // 0x29b(0x01)
	bool bBlockVisibility; // 0x29c(0x01)
	enum class EPlayerCollisionType PlayerCollisionType; // 0x29d(0x01)
	bool bBlockPlayersCarryingLargeObjects; // 0x29e(0x01)
	enum class ECollisionChannel EffectiveCollisionChannel; // 0x29f(0x01)
	char bOverrideWalkableSlopeOnInstance : 1; // 0x2a0(0x01)
	char pad_2A0_1 : 7; // 0x2a0(0x01)
	char pad_2A1[0x3]; // 0x2a1(0x03)
	struct FWalkableSlopeOverride WalkableSlopeOverride; // 0x2a4(0x10)
	bool bCurrentlyEnabled; // 0x2b4(0x01)
	bool bCurrentlyBlockNPCs; // 0x2b5(0x01)
	bool bCurrentlyBlockPlayers; // 0x2b6(0x01)
	char pad_2B7[0x1]; // 0x2b7(0x01)

	void SetBlockingState(bool bNewBlockNPCs, bool bNewBlockPlayers); // Function OPP.RBBlockingVolume.SetBlockingState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d22ec8
	void OnRep_PropertyChanged(); // Function OPP.RBBlockingVolume.OnRep_PropertyChanged // (Final|Native|Private) // @ game+0x1d21750
	bool GetEnabled(); // Function OPP.RBBlockingVolume.GetEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1c940
	bool GetBlockVisibility(); // Function OPP.RBBlockingVolume.GetBlockVisibility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1b64c
	bool GetBlockPlayers(); // Function OPP.RBBlockingVolume.GetBlockPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1b62c
	bool GetBlockNPCs(); // Function OPP.RBBlockingVolume.GetBlockNPCs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1b60c
	bool GetBlockInteractions(); // Function OPP.RBBlockingVolume.GetBlockInteractions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1b5f4
	void EnableBlockingVolume(); // Function OPP.RBBlockingVolume.EnableBlockingVolume // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d19c7c
	void DisableBlockingVolume(); // Function OPP.RBBlockingVolume.DisableBlockingVolume // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d19074
};

// Class OPP.RBBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct URBBlueprintLibrary : UBlueprintFunctionLibrary {

	void Warning(struct FString warningText); // Function OPP.RBBlueprintLibrary.Warning // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d25dac
	void WaitForPlayerConditions(struct ARBPlayer* Player, struct FLatentActionInfo LatentInfo, struct FRBPlayerConditionSet& conditionSet); // Function OPP.RBBlueprintLibrary.WaitForPlayerConditions // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d25afc
	void UnblockPlayerRespawnInStage(struct UObject* blockOwner); // Function OPP.RBBlueprintLibrary.UnblockPlayerRespawnInStage // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d25a84
	struct FString ToString(struct FUniqueNetIdRepl& UniqueId); // Function OPP.RBBlueprintLibrary.ToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d257d8
	void ToggleLedgeMarkerOnActor(struct AActor* Actor, bool bEnabled); // Function OPP.RBBlueprintLibrary.ToggleLedgeMarkerOnActor // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d25958
	void ToggleDebugMenu(); // Function OPP.RBBlueprintLibrary.ToggleDebugMenu // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1521dbc
	void ToggleActor(struct AActor* Actor, bool bEnabled); // Function OPP.RBBlueprintLibrary.ToggleActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d258a0
	void TestPlayerConditions(struct ARBPlayer* Player, enum class EBoolCommandResult& operationResult, struct FRBPlayerConditionSet& conditionSet); // Function OPP.RBBlueprintLibrary.TestPlayerConditions // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d254bc
	void TeleportRelative(struct ARBPlayer* Player, struct AActor* sourceReference, struct AActor* TargetReference, bool bUseTransitionFX); // Function OPP.RBBlueprintLibrary.TeleportRelative // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d25380
	void TeleportPlayer(struct ARBPlayer* Player, struct AActor* targetLocation, bool bUseTransitionFX, bool bUseTargetForRotation, bool bInterruptAction); // Function OPP.RBBlueprintLibrary.TeleportPlayer // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d25014
	void SwitchLevelRandomN(int32_t RandomizerId, int32_t maxOptions, enum class ERandomSwitch10& randomSwitch); // Function OPP.RBBlueprintLibrary.SwitchLevelRandomN // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d24f18
	void SwitchLevelRandom5(int32_t RandomizerId, enum class ERandomSwitch5& randomSwitch); // Function OPP.RBBlueprintLibrary.SwitchLevelRandom5 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d24e4c
	void SwitchLevelRandom4(int32_t RandomizerId, enum class ERandomSwitch4& randomSwitch); // Function OPP.RBBlueprintLibrary.SwitchLevelRandom4 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d24d80
	void SwitchLevelRandom3(int32_t RandomizerId, enum class ERandomSwitch3& randomSwitch); // Function OPP.RBBlueprintLibrary.SwitchLevelRandom3 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d24cb4
	void SwitchLevelRandom2(int32_t RandomizerId, enum class ERandomSwitch2& randomSwitch); // Function OPP.RBBlueprintLibrary.SwitchLevelRandom2 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d24bf0
	void StopPsychosisOnAllPlayers(bool bFadeOut); // Function OPP.RBBlueprintLibrary.StopPsychosisOnAllPlayers // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d24b80
	void StopMusicTrack(struct UAkAudioEvent* StartEvent, struct UAkAudioEvent* StopEvent, bool bResumeLevelMusic); // Function OPP.RBBlueprintLibrary.StopMusicTrack // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d24838
	void StopLoopingSoundOnActor(struct UAkAudioEvent* StartAkEvent, struct UAkAudioEvent* StopAkEvent, struct UObject* Actor); // Function OPP.RBBlueprintLibrary.StopLoopingSoundOnActor // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1d246cc
	void StopAllTimersOnObject(struct UObject* timerOwner); // Function OPP.RBBlueprintLibrary.StopAllTimersOnObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d24444
	void StopAllMusic(); // Function OPP.RBBlueprintLibrary.StopAllMusic // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d2441c
	void StartPsychosisOnAllPlayers(struct URBHalluCfg_Psychosis* psychosisConfig, bool Force); // Function OPP.RBBlueprintLibrary.StartPsychosisOnAllPlayers // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d24368
	bool SortCompareString(struct FString stringA, struct FString stringB); // Function OPP.RBBlueprintLibrary.SortCompareString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d2425c
	bool SortCompareActorsByName(struct AActor* actorA, struct AActor* actorB); // Function OPP.RBBlueprintLibrary.SortCompareActorsByName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d24188
	struct TArray<struct UObject*> SortByName(struct TArray<struct UObject*> inObjects); // Function OPP.RBBlueprintLibrary.SortByName // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d24088
	void ShowObjectiveMessage(struct UObject* WorldContextObject, struct FText& Message, float duration, bool playSounds); // Function OPP.RBBlueprintLibrary.ShowObjectiveMessage // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d23f44
	void ShowInteractionMessageToAllPlayers(struct FText& Message, enum class EMessagePriority Priority, float duration); // Function OPP.RBBlueprintLibrary.ShowInteractionMessageToAllPlayers // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d23e34
	void ShowInteractionMessage(struct ARBPlayer* Player, struct FText& Message, enum class EMessagePriority Priority, float duration); // Function OPP.RBBlueprintLibrary.ShowInteractionMessage // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d23cd0
	void SetupMasterPose(struct USkeletalMeshComponent* MasterPoseComponent); // Function OPP.RBBlueprintLibrary.SetupMasterPose // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d23af8
	void SetNVBattery(struct ARBPlayer* Player, float Value); // Function OPP.RBBlueprintLibrary.SetNVBattery // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d23678
	void SetNetworkSyncState(struct AActor* Actor, bool bActive, bool bChain); // Function OPP.RBBlueprintLibrary.SetNetworkSyncState // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d23960
	void SetNarrativeMusicServer(struct FNarrativeSoundEventsInfo& NarrativeSoundEventsInfo, bool bPauseLevelMusic); // Function OPP.RBBlueprintLibrary.SetNarrativeMusicServer // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d23834
	void SetNarrativeMusicClient(struct FNarrativeSoundEventsInfo& NarrativeSoundEventsInfo, struct ARBPawn* Pawn); // Function OPP.RBBlueprintLibrary.SetNarrativeMusicClient // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d23730
	void SetListenAtPlayerLocation(struct UObject* requestOwner, bool bListenAtPlayerLocation); // Function OPP.RBBlueprintLibrary.SetListenAtPlayerLocation // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1d235a0
	void SetLevelMusic(struct TArray<struct UAkAudioEvent*>& StartEvents, struct TArray<struct UAkAudioEvent*>& StopEvents); // Function OPP.RBBlueprintLibrary.SetLevelMusic // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d23488
	void SetHasPlayedTutorialMap(); // Function OPP.RBBlueprintLibrary.SetHasPlayedTutorialMap // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d23344
	void SetForceNoVolumetricLightmapsOnHierarchy(struct USceneComponent* SceneComponent, bool bForceNoVolumetricLightMap); // Function OPP.RBBlueprintLibrary.SetForceNoVolumetricLightmapsOnHierarchy // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d23220
	void SetCollisionEnabledOnHierarchy(struct USceneComponent* SceneComponent, enum class ECollisionEnabled NewType); // Function OPP.RBBlueprintLibrary.SetCollisionEnabledOnHierarchy // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d23100
	void SetCanStepUpon(struct USceneComponent* SceneComponent, enum class ECanBeCharacterBase canStepUponValue, bool bPropagateToChildren); // Function OPP.RBBlueprintLibrary.SetCanStepUpon // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d22fac
	void SetActorTemporarilyHiddenInEditor(struct AActor* TargetActor, bool bIsHidden); // Function OPP.RBBlueprintLibrary.SetActorTemporarilyHiddenInEditor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d22e24
	void Set3DWidgetEnabled(struct AActor* Actor, struct FName PropertyName, bool bWidgetEnabled); // Function OPP.RBBlueprintLibrary.Set3DWidgetEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d22d40
	void SelectInEditor(struct AActor* TargetActor); // Function OPP.RBBlueprintLibrary.SelectInEditor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d228d0
	void SelectComponentsInEditor(struct TArray<struct UActorComponent*>& Components, bool bClearSelection); // Function OPP.RBBlueprintLibrary.SelectComponentsInEditor // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d22c8c
	void SelectActorsInEditor(struct TArray<struct AActor*>& Actors, bool bClearSelection); // Function OPP.RBBlueprintLibrary.SelectActorsInEditor // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d22c8c
	void Select3DWidget(struct FString PropertyName, int32_t PropertyIndex, bool bIsPropertyTransform); // Function OPP.RBBlueprintLibrary.Select3DWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d22b94
	void SeekOnEvent(struct FString in_EventName, struct UAkComponent* in_pComponent, float in_fPercent, bool in_bSeekToNearestMarker); // Function OPP.RBBlueprintLibrary.SeekOnEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d22948
	void SaveProfile(); // Function OPP.RBBlueprintLibrary.SaveProfile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d22934
	void RunConstructionScript(struct AActor* TargetActor); // Function OPP.RBBlueprintLibrary.RunConstructionScript // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d228d0
	void RemoveObjectiveIconForSpecificPlayer(struct ARBPlayer* Player, struct AActor* inActor); // Function OPP.RBBlueprintLibrary.RemoveObjectiveIconForSpecificPlayer // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d22794
	void RemoveObjectiveIcon(struct AActor* inActor); // Function OPP.RBBlueprintLibrary.RemoveObjectiveIcon // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d226e0
	struct TArray<struct AActor*> RandomizeActorArray(int32_t RandomizerId, struct TArray<struct AActor*>& inActors); // Function OPP.RBBlueprintLibrary.RandomizeActorArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d225ec
	void PrintScreenMessage(struct FString Message); // Function OPP.RBBlueprintLibrary.PrintScreenMessage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x161f0f8
	void PostAudioEventOnGroup_Client(struct UAkAudioEvent* akEvent, struct FName GroupName); // Function OPP.RBBlueprintLibrary.PostAudioEventOnGroup_Client // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1d22470
	void PlaySingleShotMusicTrack(struct UAkAudioEvent* musicTrack, bool bPauseLevelMusic); // Function OPP.RBBlueprintLibrary.PlaySingleShotMusicTrack // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d221c0
	void PlayScareStinger(struct AActor* scareActor, struct UAkAudioEvent* StingerEvent, struct FVector& Location, float Distance); // Function OPP.RBBlueprintLibrary.PlayScareStinger // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d22080
	void PlayObjectiveNarrativeScreenAnimation(struct FNarrativeScreenAnimationData& animData, bool bPlayerDefaultIntro); // Function OPP.RBBlueprintLibrary.PlayObjectiveNarrativeScreenAnimation // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d21f8c
	void PlayMurkoffAnnouncement(struct FRBMurkoffAnnouncentData& announcementData, struct UAkAudioEvent* StopEvent, float stopDelay); // Function OPP.RBBlueprintLibrary.PlayMurkoffAnnouncement // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d21df4
	int32_t PlayLoopingSoundOnActor(struct UAkAudioEvent* StartAkEvent, struct UAkAudioEvent* StopAkEvent, struct UObject* Actor); // Function OPP.RBBlueprintLibrary.PlayLoopingSoundOnActor // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1d21c2c
	void PlayLoopingMusicTrack(struct UAkAudioEvent* StartEvent, struct UAkAudioEvent* StopEvent, bool bStopLevelMusic); // Function OPP.RBBlueprintLibrary.PlayLoopingMusicTrack // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d218d4
	void PlayLobbyMurkoffAnnouncement(); // Function OPP.RBBlueprintLibrary.PlayLobbyMurkoffAnnouncement // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d218ac
	void PlayAnnouncerLine_Server(struct UAkAudioEvent* akEvent, enum class EVOBehavior voBehavior, float prePlayQueueDelay); // Function OPP.RBBlueprintLibrary.PlayAnnouncerLine_Server // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d21764
	float NormalizeRotationAngle(float& Current); // Function OPP.RBBlueprintLibrary.NormalizeRotationAngle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d2169c
	void MarkRenderStateDirty(struct UPrimitiveComponent* PrimitiveComponent); // Function OPP.RBBlueprintLibrary.MarkRenderStateDirty // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d21594
	void LogMovement(struct ARBPawn* Pawn, struct FString string); // Function OPP.RBBlueprintLibrary.LogMovement // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d214dc
	int32_t LevelRandomIntRange(int32_t RandomizerId, int32_t MinValue, int32_t MaxValue); // Function OPP.RBBlueprintLibrary.LevelRandomIntRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d213e8
	int32_t LevelRandomInt(int32_t RandomizerId, int32_t MaxValue); // Function OPP.RBBlueprintLibrary.LevelRandomInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d21328
	float LevelRandomFloatRange(int32_t RandomizerId, float MinValue, float MaxValue); // Function OPP.RBBlueprintLibrary.LevelRandomFloatRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d21230
	float LevelRandomFloat(int32_t RandomizerId); // Function OPP.RBBlueprintLibrary.LevelRandomFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d211b0
	bool LevelRandomBool(int32_t RandomizerId); // Function OPP.RBBlueprintLibrary.LevelRandomBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d21134
	float LerpAngle(float angleA, float angleB, float Alpha); // Function OPP.RBBlueprintLibrary.LerpAngle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d21038
	bool IsWorldPopulated(); // Function OPP.RBBlueprintLibrary.IsWorldPopulated // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d20ff4
	bool IsWaitingToStart(); // Function OPP.RBBlueprintLibrary.IsWaitingToStart // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d20fc0
	bool IsValidNPCForAuraVariator(struct ARBNPC* RBNPC); // Function OPP.RBBlueprintLibrary.IsValidNPCForAuraVariator // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d20f40
	bool IsValid(struct FUniqueNetIdRepl& UniqueId); // Function OPP.RBBlueprintLibrary.IsValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d20e98
	bool IsUniqueVariatorTypeActive(enum class EUniqueVariatorType Type); // Function OPP.RBBlueprintLibrary.IsUniqueVariatorTypeActive // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d20e18
	bool IsTransient(struct AActor* TargetActor); // Function OPP.RBBlueprintLibrary.IsTransient // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d20504
	bool IsTransactional(struct AActor* TargetActor); // Function OPP.RBBlueprintLibrary.IsTransactional // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d20504
	bool IsStageStarted(); // Function OPP.RBBlueprintLibrary.IsStageStarted // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d20de0
	bool IsStageReady(); // Function OPP.RBBlueprintLibrary.IsStageReady // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d20da0
	bool IsStagePrepared(); // Function OPP.RBBlueprintLibrary.IsStagePrepared // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d20d5c
	bool IsStageIDValid(struct FRBStageID& StageID); // Function OPP.RBBlueprintLibrary.IsStageIDValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d20cc4
	bool IsStageIDEqual(struct FRBStageID& stageID1, struct FRBStageID& stageID2); // Function OPP.RBBlueprintLibrary.IsStageIDEqual // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d20bbc
	bool IsRunningFunctionalTests(); // Function OPP.RBBlueprintLibrary.IsRunningFunctionalTests // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d20b98
	bool IsRecentServerEvent(float Time, float maxDelay); // Function OPP.RBBlueprintLibrary.IsRecentServerEvent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d20ad4
	bool IsRecentEvent(float Time, float maxDelay); // Function OPP.RBBlueprintLibrary.IsRecentEvent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d20a10
	bool IsPropertyWidgetSelected(struct AActor* inActor, struct FString InWidgetName, int32_t& outWidgetIndex); // Function OPP.RBBlueprintLibrary.IsPropertyWidgetSelected // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d20908
	bool IsPlayInEditor(struct UObject* WorldContextObject); // Function OPP.RBBlueprintLibrary.IsPlayInEditor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d20888
	bool IsMissionIDValid(struct FRBMissionID& MissionID); // Function OPP.RBBlueprintLibrary.IsMissionIDValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d207c8
	bool IsMissionIDEqual(struct FRBMissionID& missionID1, struct FRBMissionID& missionID2); // Function OPP.RBBlueprintLibrary.IsMissionIDEqual // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d206c8
	bool IsInTutorialStage(); // Function OPP.RBBlueprintLibrary.IsInTutorialStage // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d206a4
	bool IsInReagentReleaseTrial(); // Function OPP.RBBlueprintLibrary.IsInReagentReleaseTrial // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d20680
	bool IsInPIE(struct UObject* WorldContextObject); // Function OPP.RBBlueprintLibrary.IsInPIE // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d205e8
	bool IsInEditorOrCommandlet(struct UObject* WorldContextObject); // Function OPP.RBBlueprintLibrary.IsInEditorOrCommandlet // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d20570
	bool IsInEditor(struct UObject* WorldContextObject); // Function OPP.RBBlueprintLibrary.IsInEditor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d20504
	bool IsInBlueprintEditor(struct UObject* WorldContextObject); // Function OPP.RBBlueprintLibrary.IsInBlueprintEditor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d20504
	bool IsHiddenInEditor(struct AActor* inActor); // Function OPP.RBBlueprintLibrary.IsHiddenInEditor // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d20504
	bool IsExperimentStarted(); // Function OPP.RBBlueprintLibrary.IsExperimentStarted // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d204c0
	bool IsEqual(struct FUniqueNetIdRepl& uniqueID1, struct FUniqueNetIdRepl& uniqueID2); // Function OPP.RBBlueprintLibrary.IsEqual // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d203a0
	bool IsDifficultyLessThan(enum class EGameDifficulty Difficulty); // Function OPP.RBBlueprintLibrary.IsDifficultyLessThan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d2031c
	bool IsDifficultyGreaterThan(enum class EGameDifficulty Difficulty); // Function OPP.RBBlueprintLibrary.IsDifficultyGreaterThan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d20298
	bool IsDifficultyEqualTo(enum class EGameDifficulty Difficulty); // Function OPP.RBBlueprintLibrary.IsDifficultyEqualTo // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d20214
	bool IsDifficultyEqualOrLessThan(enum class EGameDifficulty Difficulty); // Function OPP.RBBlueprintLibrary.IsDifficultyEqualOrLessThan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d20190
	bool IsDifficultyEqualOrGreaterThan(enum class EGameDifficulty Difficulty); // Function OPP.RBBlueprintLibrary.IsDifficultyEqualOrGreaterThan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d2010c
	bool IsConsideredSoloGame(); // Function OPP.RBBlueprintLibrary.IsConsideredSoloGame // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d200e8
	bool IsClient(); // Function OPP.RBBlueprintLibrary.IsClient // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d200a8
	bool IsAxisMappingValid(struct FInputAxisKeyMapping& keyMapping); // Function OPP.RBBlueprintLibrary.IsAxisMappingValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d1ffe8
	bool IsActionMappingValid(struct FInputActionKeyMapping& keyMapping); // Function OPP.RBBlueprintLibrary.IsActionMappingValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d1ff24
	void HideInteractionMessageForAllPlayers(); // Function OPP.RBBlueprintLibrary.HideInteractionMessageForAllPlayers // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d1ff10
	void HideInteractionMessage(struct ARBPlayer* Player); // Function OPP.RBBlueprintLibrary.HideInteractionMessage // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d1fe7c
	bool HasPlayedTutorialMap(); // Function OPP.RBBlueprintLibrary.HasPlayedTutorialMap // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d1fd8c
	struct FString HashString(struct FString string); // Function OPP.RBBlueprintLibrary.HashString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d1fdc8
	bool HasActorBegunPlay(struct AActor* Actor); // Function OPP.RBBlueprintLibrary.HasActorBegunPlay // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1fd00
	void GetWorldTransformMatrixFromGhostAnimationAnchorByTransform(struct URBGhostAnimInstance* ghostAnimClass, struct FTransform& inTransformReference, struct FTransform& OutTransform); // Function OPP.RBBlueprintLibrary.GetWorldTransformMatrixFromGhostAnimationAnchorByTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d1fb5c
	void GetWorldTransformMatrixFromAnimationAnchorByTransformInMeshSpace(struct ARBPawn* Pawn, struct UAnimSequence* Sequence, struct FTransform& inTransformReference, bool bSnapToGround, struct FTransform& OutTransform, struct UObject* snapToGroundRequester); // Function OPP.RBBlueprintLibrary.GetWorldTransformMatrixFromAnimationAnchorByTransformInMeshSpace // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d1f8fc
	void GetWorldTransformMatrixFromAnimationAnchorByTransform(struct ARBPawn* Pawn, struct UAnimSequence* Sequence, struct FTransform& inTransformReference, bool bSnapToGround, struct FTransform& OutTransform, struct UObject* snapToGroundRequester); // Function OPP.RBBlueprintLibrary.GetWorldTransformMatrixFromAnimationAnchorByTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d1f69c
	void GetWorldTransformMatrixForBoneAtTimeRelativeToTransform(struct UAnimSequence* Sequence, struct FName BoneName, float evalTime, struct FTransform& inTransformReference, struct FTransform& OutTransform); // Function OPP.RBBlueprintLibrary.GetWorldTransformMatrixForBoneAtTimeRelativeToTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d1f488
	void GetWorldTransformMatrixForBoneAtTheEndOfTheSequenceRelativeToTransform(struct UAnimSequence* Sequence, struct FName BoneName, struct FTransform& inTransformReference, struct FTransform& OutTransform); // Function OPP.RBBlueprintLibrary.GetWorldTransformMatrixForBoneAtTheEndOfTheSequenceRelativeToTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d1f2b0
	void GetWorldTransformFromGhostAnimationAnchorByTransform(struct URBGhostAnimInstance* ghostAnimClass, struct FTransform& inTransformReference, struct FVector& OutLocation, struct FVector& outDirection); // Function OPP.RBBlueprintLibrary.GetWorldTransformFromGhostAnimationAnchorByTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d1f110
	void GetWorldTransformFromAnimationAnchorByTransform(struct ARBPawn* Pawn, struct UAnimSequence* Sequence, struct FTransform& inTransformReference, bool bSnapToGround, struct FVector& OutLocation, struct FVector& outDirection, struct UObject* snapToGroundRequester); // Function OPP.RBBlueprintLibrary.GetWorldTransformFromAnimationAnchorByTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d1ee98
	void GetWorldTransformFromAnimationAnchor(struct ARBPawn* Pawn, struct UAnimSequence* Sequence, struct USceneComponent* inSceneComponent, bool bSnapToGround, struct FVector& OutLocation, struct FVector& outDirection, struct UObject* snapToGroundRequester); // Function OPP.RBBlueprintLibrary.GetWorldTransformFromAnimationAnchor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d1ec5c
	struct ARBWorldSettings* GetWorldSettings(); // Function OPP.RBBlueprintLibrary.GetWorldSettings // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1ec38
	struct FTransform GetWorldAnchorTransformForGhostAnimation(struct URBGhostAnimInstance* ghostAnimClass, struct USceneComponent* inSceneComponent); // Function OPP.RBBlueprintLibrary.GetWorldAnchorTransformForGhostAnimation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1d1eb68
	struct FRotator GetViewRotation(struct UObject* WorldContextObject); // Function OPP.RBBlueprintLibrary.GetViewRotation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1d1ea9c
	void GetViewPoint(struct UObject* WorldContextObject, struct FVector& ViewLocation, struct FRotator& viewRotation); // Function OPP.RBBlueprintLibrary.GetViewPoint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d1e94c
	struct FVector GetViewLocation(struct UObject* WorldContextObject); // Function OPP.RBBlueprintLibrary.GetViewLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1d1e880
	struct FVector GetViewForward(struct UObject* WorldContextObject); // Function OPP.RBBlueprintLibrary.GetViewForward // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1d1e7a8
	struct ARBVariatorManager* GetVariatorManager(); // Function OPP.RBBlueprintLibrary.GetVariatorManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1e784
	struct URBCustomizationOption* GetValidCustomizationOption(struct FUICustomizationItem& Item); // Function OPP.RBBlueprintLibrary.GetValidCustomizationOption // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d1e6f8
	bool GetUniqueVariatorTypeValue(enum class EUniqueVariatorType Type, struct FName& Name, float& OutValue); // Function OPP.RBBlueprintLibrary.GetUniqueVariatorTypeValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d1e5ec
	struct TArray<struct UTexture*> GetTexturesFromMaterial(struct UMaterialInterface* Material); // Function OPP.RBBlueprintLibrary.GetTexturesFromMaterial // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1e4fc
	struct URBTasksConfig* GetTasksConfig(); // Function OPP.RBBlueprintLibrary.GetTasksConfig // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1e4d8
	bool GetStaticMeshLODGenerateLightmapUVs(struct UStaticMesh* StaticMesh, int32_t LODIndex); // Function OPP.RBBlueprintLibrary.GetStaticMeshLODGenerateLightmapUVs // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1e42c
	bool GetStaticMeshImportSettingsGenerateLightmapUVs(struct UStaticMesh* StaticMesh, int32_t LODIndex); // Function OPP.RBBlueprintLibrary.GetStaticMeshImportSettingsGenerateLightmapUVs // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1e42c
	float GetStageTime(); // Function OPP.RBBlueprintLibrary.GetStageTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1e404
	int32_t GetStageResetCount(); // Function OPP.RBBlueprintLibrary.GetStageResetCount // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1e3c8
	struct URBStageInfo* GetStageInfo(struct FRBStageID& StageID); // Function OPP.RBBlueprintLibrary.GetStageInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d1e330
	struct ARBSpectatorPawn* GetSpectatorPawn(); // Function OPP.RBBlueprintLibrary.GetSpectatorPawn // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1e30c
	struct ARBPlayer* GetSpectatedPlayer(); // Function OPP.RBBlueprintLibrary.GetSpectatedPlayer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1e2e8
	float GetServerTime(); // Function OPP.RBBlueprintLibrary.GetServerTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1e2c0
	struct URBScoringConfig* GetScoringConfig(); // Function OPP.RBBlueprintLibrary.GetScoringConfig // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1e29c
	float GetRoomPathedDistance(struct AActor* SourceActor, struct AActor* DestActor, bool& out_ValidPath, float MaxDistance, bool allowCoopRooms); // Function OPP.RBBlueprintLibrary.GetRoomPathedDistance // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d1e110
	struct ARBRoom* GetRoomForActor(struct AActor* Actor); // Function OPP.RBBlueprintLibrary.GetRoomForActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1e090
	struct FTransform GetRefPoseBoneComponentSpace(struct USkeletalMeshComponent* SkelMesh, struct FName BoneName); // Function OPP.RBBlueprintLibrary.GetRefPoseBoneComponentSpace // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1d1df94
	struct URBWorld* GetRBWorld(); // Function OPP.RBBlueprintLibrary.GetRBWorld // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1dd88
	struct ARBTaskManager* GetRBTaskManager(); // Function OPP.RBBlueprintLibrary.GetRBTaskManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1dd64
	struct ARBStreaming* GetRBStreaming(); // Function OPP.RBBlueprintLibrary.GetRBStreaming // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1dd40
	struct URBSettings_Gameplay* GetRBSettings_Gameplay(); // Function OPP.RBBlueprintLibrary.GetRBSettings_Gameplay // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1dd10
	struct URBSettings_Anim* GetRBSettings_Anim(); // Function OPP.RBBlueprintLibrary.GetRBSettings_Anim // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1dce0
	struct ARBPlayerLoadoutManager* GetRBPlayerLoadoutManager(); // Function OPP.RBBlueprintLibrary.GetRBPlayerLoadoutManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1dcbc
	struct URBObjectiveManager* GetRBObjectiveManager(); // Function OPP.RBBlueprintLibrary.GetRBObjectiveManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1dc98
	struct URBGameUserSettings* GetRBGameUserSettings(); // Function OPP.RBBlueprintLibrary.GetRBGameUserSettings // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1dc44
	struct ARBGameStateLobby* GetRBGameStateLobby(); // Function OPP.RBBlueprintLibrary.GetRBGameStateLobby // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1dc20
	struct ARBGameStateBase* GetRBGameStateBase(); // Function OPP.RBBlueprintLibrary.GetRBGameStateBase // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1dbfc
	struct ARBGameState* GetRBGameState(); // Function OPP.RBBlueprintLibrary.GetRBGameState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1dbd8
	struct ARBGameModeMainMenu* GetRBGameModeMainMenu(); // Function OPP.RBBlueprintLibrary.GetRBGameModeMainMenu // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1dbb4
	struct ARBGameModeLobby* GetRBGameModeLobby(); // Function OPP.RBBlueprintLibrary.GetRBGameModeLobby // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1db90
	struct ARBGameModeBase* GetRBGameModeBase(); // Function OPP.RBBlueprintLibrary.GetRBGameModeBase // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1db6c
	struct ARBGameMode* GetRBGameMode(); // Function OPP.RBBlueprintLibrary.GetRBGameMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1db48
	struct URBGameInstance* GetRBGameInstance(); // Function OPP.RBBlueprintLibrary.GetRBGameInstance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1db24
	int32_t GetRandomIndexForNPCCustomizationSlot(struct FGruntCustomizationMeshesConfig& customizationMeshesConfig, bool bFemale, enum class ENPCCustomizationSlot Slot, enum class ENPCFlavor flavor); // Function OPP.RBBlueprintLibrary.GetRandomIndexForNPCCustomizationSlot // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d1ddac
	struct URBLocalProfile* GetProfile(); // Function OPP.RBBlueprintLibrary.GetProfile // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1db00
	struct ARBPostProcessUpdateManager* GetPostProcessUpdateManager(); // Function OPP.RBBlueprintLibrary.GetPostProcessUpdateManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1dac4
	struct URBPlayerStatsConfig* GetPlayerStatsConfig(); // Function OPP.RBBlueprintLibrary.GetPlayerStatsConfig // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1daa0
	struct ARBPlayerState* GetPlayerStateByUniqueId(struct FUniqueNetIdRepl& UniqueId); // Function OPP.RBBlueprintLibrary.GetPlayerStateByUniqueId // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d1d9f8
	struct ARBPlayerState* GetPlayerStateByPlayerId(struct FRBPlayerId& PlayerId); // Function OPP.RBBlueprintLibrary.GetPlayerStateByPlayerId // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d1d960
	struct ARBPlayerState* GetPlayerStateByPlayer(struct ARBPlayer* Player); // Function OPP.RBBlueprintLibrary.GetPlayerStateByPlayer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1d8e0
	struct ARBPlayerProgressionManager* GetPlayerProgressionManager(); // Function OPP.RBBlueprintLibrary.GetPlayerProgressionManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1d8bc
	struct URBPlayerProgressionData* GetPlayerProgressionData(struct ARBPlayerState* RBPlayerState); // Function OPP.RBBlueprintLibrary.GetPlayerProgressionData // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1d838
	struct URBPlayerLoadoutConfig* GetPlayerLoadoutConfig(); // Function OPP.RBBlueprintLibrary.GetPlayerLoadoutConfig // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1d814
	struct URBPlayerGameSessionManager* GetPlayerGameSessionManager(); // Function OPP.RBBlueprintLibrary.GetPlayerGameSessionManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1d7f0
	struct URBPlayerCustomizationOption* GetPlayerCustomizationOptionForSlot(struct AActor* customizationOwner, enum class EPlayerCustomizationSlot Slot); // Function OPP.RBBlueprintLibrary.GetPlayerCustomizationOptionForSlot // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1d6c8
	struct URBPlayerCustomizationConfig* GetPlayerCustomizationConfig(); // Function OPP.RBBlueprintLibrary.GetPlayerCustomizationConfig // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1d6a4
	struct URBPlayerCellCustomizationConfig* GetPlayerCellCustomizationConfig(); // Function OPP.RBBlueprintLibrary.GetPlayerCellCustomizationConfig // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1d680
	struct ARBPlayer* GetPlayerByUniqueId(struct FUniqueNetIdRepl& UniqueId); // Function OPP.RBBlueprintLibrary.GetPlayerByUniqueId // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d1d5d8
	struct ARBPlayer* GetPlayerByPlayerId(struct FRBPlayerId& PlayerId); // Function OPP.RBBlueprintLibrary.GetPlayerByPlayerId // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d1d540
	struct URBPawnCustomizationManager* GetPawnCustomizationManager(); // Function OPP.RBBlueprintLibrary.GetPawnCustomizationManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1d51c
	int32_t GetNumberOfPlayer(); // Function OPP.RBBlueprintLibrary.GetNumberOfPlayer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1d4f8
	int32_t GetNumberOfAlivePlayer(); // Function OPP.RBBlueprintLibrary.GetNumberOfAlivePlayer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1d4d4
	struct AActor* GetNewRandomActor(struct TArray<struct AActor*> actorList, struct AActor* currentActor); // Function OPP.RBBlueprintLibrary.GetNewRandomActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1d3e4
	struct AActor* GetNarrator_ClientOnly(); // Function OPP.RBBlueprintLibrary.GetNarrator_ClientOnly // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1d3c0
	struct URBMissionInfo* GetMissionInfo(struct FRBMissionID& MissionID); // Function OPP.RBBlueprintLibrary.GetMissionInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d1d328
	struct URBMenuManager* GetMenuManager(); // Function OPP.RBBlueprintLibrary.GetMenuManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1d304
	struct ARBPlayerState* GetLocalPlayerState(); // Function OPP.RBBlueprintLibrary.GetLocalPlayerState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1d2e0
	struct URBPlayerProgressionData* GetLocalPlayerProgressionData(); // Function OPP.RBBlueprintLibrary.GetLocalPlayerProgressionData // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1d2bc
	struct ARBController* GetLocalPlayerController(); // Function OPP.RBBlueprintLibrary.GetLocalPlayerController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1d298
	struct ARBPlayer* GetLocalPawn(); // Function OPP.RBBlueprintLibrary.GetLocalPawn // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1d274
	struct ARBMenuPlayerController* GetLocalMenuController(); // Function OPP.RBBlueprintLibrary.GetLocalMenuController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1d250
	struct ARBMainMenuPlayerController* GetLocalMainMenuPlayerController(); // Function OPP.RBBlueprintLibrary.GetLocalMainMenuPlayerController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1d22c
	struct ARBLobbyPlayerController* GetLocalLobbyPlayerController(); // Function OPP.RBBlueprintLibrary.GetLocalLobbyPlayerController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1d208
	struct TArray<struct UActorComponent*> GetLoadedOnServerComponents(struct AActor* Actor); // Function OPP.RBBlueprintLibrary.GetLoadedOnServerComponents // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d1d0c0
	struct FName GetKeyFName(struct FKey& Key); // Function OPP.RBBlueprintLibrary.GetKeyFName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d1cf7c
	int32_t GetIntValue(struct FConfigurableInt& ConfigurableInt); // Function OPP.RBBlueprintLibrary.GetIntValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d1cedc
	struct FInputActionKeyMapping GetInputBinding(struct FName ActionName, int32_t Value, bool bForceGamepad, bool bForceKBM); // Function OPP.RBBlueprintLibrary.GetInputBinding // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d1cd48
	struct URBHUDWidget* GetHUDWidget(); // Function OPP.RBBlueprintLibrary.GetHUDWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d1cce8
	struct ARBHUD* GetHUD(); // Function OPP.RBBlueprintLibrary.GetHUD // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d1ccc4
	struct ARBHallucinationManager* GetHallucinationManager(); // Function OPP.RBBlueprintLibrary.GetHallucinationManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1cd24
	struct URBGlobalUIConfig* GetGlobalUIConfig(); // Function OPP.RBBlueprintLibrary.GetGlobalUIConfig // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1cca0
	struct URBGlobalAudioConfig* GetGlobalAudioConfig(); // Function OPP.RBBlueprintLibrary.GetGlobalAudioConfig // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1cc7c
	struct FString GetGameVersionString(); // Function OPP.RBBlueprintLibrary.GetGameVersionString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1cc3c
	float GetGameTime(); // Function OPP.RBBlueprintLibrary.GetGameTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1cc14
	struct URBGameStructureConfig* GetGameStructureConfig(); // Function OPP.RBBlueprintLibrary.GetGameStructureConfig // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1cbf0
	struct FRBGameStageInfo GetGameStageInfo(); // Function OPP.RBBlueprintLibrary.GetGameStageInfo // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1cbac
	enum class EGameDifficulty GetGameDifficulty(); // Function OPP.RBBlueprintLibrary.GetGameDifficulty // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1cb88
	struct URBFXManager* GetFXManager(); // Function OPP.RBBlueprintLibrary.GetFXManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1c968
	struct FName GetFoleySwitchOverrideFromGruntCustomization(struct FSelectedGruntCustomizationMeshesInfo& selectedMeshInfo, struct FGruntCustomizationMeshesConfig& meshesConfig); // Function OPP.RBBlueprintLibrary.GetFoleySwitchOverrideFromGruntCustomization // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d1ca74
	float GetFloatValue(struct FConfigurableFloat& ConfigurableFloat); // Function OPP.RBBlueprintLibrary.GetFloatValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d1c9d4
	struct ARBBasePushable* GetFirstPushableCart(); // Function OPP.RBBlueprintLibrary.GetFirstPushableCart // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1c98c
	float GetElapsedTime(float Time); // Function OPP.RBBlueprintLibrary.GetElapsedTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1c8b8
	float GetElapsedServerTime(float Time); // Function OPP.RBBlueprintLibrary.GetElapsedServerTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1c830
	enum class ESASVariatorType GetEffectiveSASVariatorType(); // Function OPP.RBBlueprintLibrary.GetEffectiveSASVariatorType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1c80c
	int32_t GetEffectivePlayerCountForConfiguration(); // Function OPP.RBBlueprintLibrary.GetEffectivePlayerCountForConfiguration // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1c7e8
	struct ARBWorldSettings* GetEditorWorldSettings(); // Function OPP.RBBlueprintLibrary.GetEditorWorldSettings // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1c78c
	struct UObject* GetDefaultObject(struct UObject* Object); // Function OPP.RBBlueprintLibrary.GetDefaultObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d1c6f8
	struct FNPCCustomizationMesh GetCustomizationMeshForGrunt(struct FGruntCustomizationMeshesConfig& customizationMeshesConfig, struct FSelectedGruntCustomizationMeshesInfo& customizationMeshesInfo, enum class ENPCCustomizationSlot Slot); // Function OPP.RBBlueprintLibrary.GetCustomizationMeshForGrunt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d1c538
	bool GetCurveValueFromAnimInstance(struct UAnimInstance* AnimInstance, struct FName& CurveName, float& out_value); // Function OPP.RBBlueprintLibrary.GetCurveValueFromAnimInstance // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d1c42c
	float GetCurveValueForAnimation(struct UAnimSequence* Sequence, struct FName CurveName, float evalTime); // Function OPP.RBBlueprintLibrary.GetCurveValueForAnimation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d1c29c
	struct ARBSAS* GetCurrentSAS(); // Function OPP.RBBlueprintLibrary.GetCurrentSAS // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1c260
	struct FRBMissionID GetCurrentMissionID(); // Function OPP.RBBlueprintLibrary.GetCurrentMissionID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1c208
	struct FVector GetCurrentEditorNormal(); // Function OPP.RBBlueprintLibrary.GetCurrentEditorNormal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1d1c1e0
	struct ARBPlayer* GetControlledPlayer(); // Function OPP.RBBlueprintLibrary.GetControlledPlayer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1c1bc
	struct APawn* GetControlledPawn(); // Function OPP.RBBlueprintLibrary.GetControlledPawn // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1c18c
	struct UActorComponent* GetComponentFromSelector(struct FRBComponentSelector& componentSelector, struct AActor* Owner); // Function OPP.RBBlueprintLibrary.GetComponentFromSelector // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d1c0a0
	void GetComponentByClass(struct AActor* Actor, struct UActorComponent* classOf, struct TArray<struct UActorComponent*>& OutComponents); // Function OPP.RBBlueprintLibrary.GetComponentByClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d1bf88
	struct URBCollectibleDocumentsConfig* GetCollectibleDocumentsConfig(); // Function OPP.RBBlueprintLibrary.GetCollectibleDocumentsConfig // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1bf64
	struct ARBPushCartGoalManager* GetClosestPushCartGoalManager(struct FVector& Position); // Function OPP.RBBlueprintLibrary.GetClosestPushCartGoalManager // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1d1bee0
	struct URBChunkInstallManager* GetChunkInstallManager(); // Function OPP.RBBlueprintLibrary.GetChunkInstallManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1bebc
	void GetChildComponentsByTag(struct USceneComponent* Component, struct FName ComponentTag, struct TArray<struct USceneComponent*>& OutComponents); // Function OPP.RBBlueprintLibrary.GetChildComponentsByTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d1bd24
	void GetChildComponentsByClass(struct USceneComponent* Component, struct USceneComponent* classOf, struct TArray<struct USceneComponent*>& OutComponents); // Function OPP.RBBlueprintLibrary.GetChildComponentsByClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d1bb68
	void GetChildComponentByTag(struct USceneComponent* Component, struct FName ComponentTag, struct USceneComponent*& outComponent); // Function OPP.RBBlueprintLibrary.GetChildComponentByTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d1ba08
	struct USceneComponent* GetChildComponentByClass(struct USceneComponent* Component, struct USceneComponent* classOf); // Function OPP.RBBlueprintLibrary.GetChildComponentByClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d1b8c4
	bool GetBoolValue(struct FConfigurableBool& ConfigurableBool); // Function OPP.RBBlueprintLibrary.GetBoolValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d1b7f4
	struct FTransform GetBoneTransformForAnimation(struct UAnimSequence* Sequence, struct FName BoneName, float evalTime); // Function OPP.RBBlueprintLibrary.GetBoneTransformForAnimation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1d1b688
	int32_t GetBinariesVersion(); // Function OPP.RBBlueprintLibrary.GetBinariesVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1b5d0
	struct ARBPlayer* GetAnyPlayer(); // Function OPP.RBBlueprintLibrary.GetAnyPlayer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1b578
	struct ARBPlayer* GetAnyAlivePlayer(); // Function OPP.RBBlueprintLibrary.GetAnyAlivePlayer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1b51c
	float GetAnimPlayLength(struct UAnimSequence* animSeqence); // Function OPP.RBBlueprintLibrary.GetAnimPlayLength // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1b494
	struct FTransform GetAnimBoneTransform(struct USkeletalMeshComponent* SkeletalMesh, struct UAnimSequence* AnimAsset, struct FName BoneName, float Time); // Function OPP.RBBlueprintLibrary.GetAnimBoneTransform // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1d1b29c
	struct FTransform GetAnchorTransformForInteraction(struct UAnimSequence* Sequence, struct USceneComponent* inSceneComponent); // Function OPP.RBBlueprintLibrary.GetAnchorTransformForInteraction // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1d1b1cc
	struct FTransform GetAnchorOffsetTransformFromGhostAnimation(struct URBGhostAnimInstance* ghostAnimClass); // Function OPP.RBBlueprintLibrary.GetAnchorOffsetTransformFromGhostAnimation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1d1b130
	struct FTransform GetAnchorOffsetTransform(struct UAnimSequence* Sequence); // Function OPP.RBBlueprintLibrary.GetAnchorOffsetTransform // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1d1b094
	struct TArray<struct ARBBasePushable*> GetAllPushableCarts(); // Function OPP.RBBlueprintLibrary.GetAllPushableCarts // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1b028
	struct TArray<struct ARBPlayerState*> GetAllPlayerStates(); // Function OPP.RBBlueprintLibrary.GetAllPlayerStates // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d1afb0
	struct TArray<struct AActor*> GetActorSelectedInEditor(); // Function OPP.RBBlueprintLibrary.GetActorSelectedInEditor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d1af6c
	struct FActiveSkillCommonParams GetActiveSkillCommonParamsById(struct FName& ID); // Function OPP.RBBlueprintLibrary.GetActiveSkillCommonParamsById // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d1aebc
	struct FActiveSkillCommonParams GetActiveSkillCommonParams(enum class EActiveSkillType Type); // Function OPP.RBBlueprintLibrary.GetActiveSkillCommonParams // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1ae34
	struct ARBActiveSkill* GetActiveSkillClass(enum class EActiveSkillType Type); // Function OPP.RBBlueprintLibrary.GetActiveSkillClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1adb0
	struct URBAchievementsConfig* GetAchievementsConfig(); // Function OPP.RBBlueprintLibrary.GetAchievementsConfig // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1ad8c
	struct FString GenerateRandomString(int32_t nbOfCharactersNeeded); // Function OPP.RBBlueprintLibrary.GenerateRandomString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d1acf8
	int32_t GenerateRandomSeedNonDeterministic(struct UObject* randomSeedObject); // Function OPP.RBBlueprintLibrary.GenerateRandomSeedNonDeterministic // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1ab60
	int32_t GenerateRandomSeed(struct UObject* randomSeedObject); // Function OPP.RBBlueprintLibrary.GenerateRandomSeed // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1a9cc
	struct FDateTime FromUnixTimestamp(int64_t Timestamp); // Function OPP.RBBlueprintLibrary.FromUnixTimestamp // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1d1a940
	struct FString FormatTimeFromInt(int32_t Seconds); // Function OPP.RBBlueprintLibrary.FormatTimeFromInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1a8a4
	struct FString FormatTimeFromFloat(float Seconds); // Function OPP.RBBlueprintLibrary.FormatTimeFromFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1a808
	void ForceSpecificClosetPlayerRespawnPoint(struct ARBMonsterCloset* closet); // Function OPP.RBBlueprintLibrary.ForceSpecificClosetPlayerRespawnPoint // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d1a764
	void FlipRelativeLocation(struct USceneComponent* Component, bool bFlipX, bool bFlipY, bool bFlipZ); // Function OPP.RBBlueprintLibrary.FlipRelativeLocation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d1a440
	struct FQuat FindQuatBetweenVectors(struct FVector& vec1, struct FVector& vec2); // Function OPP.RBBlueprintLibrary.FindQuatBetweenVectors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1d1a35c
	bool FindCollisionUVFromHit(struct FHitResult& Hit, struct FVector2D& UV); // Function OPP.RBBlueprintLibrary.FindCollisionUVFromHit // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1d1a268
	struct UActorComponent* FindAssociatedComponent(struct USceneComponent* Component, struct UActorComponent* ComponentClass); // Function OPP.RBBlueprintLibrary.FindAssociatedComponent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d1a00c
	struct TArray<struct AActor*> FilterByRandomState(struct TArray<struct AActor*> inActors, bool bIsStateA); // Function OPP.RBBlueprintLibrary.FilterByRandomState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d19ef4
	float EvalRuntimeFloatCurve(struct FRuntimeFloatCurve& Curve, float Time, float DefaultValue); // Function OPP.RBBlueprintLibrary.EvalRuntimeFloatCurve // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d19da0
	void Error(struct FString ErrorText); // Function OPP.RBBlueprintLibrary.Error // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d19ce0
	void EndCurrentStage(); // Function OPP.RBBlueprintLibrary.EndCurrentStage // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d19cb8
	void Editor_SelectActors(struct TArray<struct AActor*>& Actors); // Function OPP.RBBlueprintLibrary.Editor_SelectActors // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d19c08
	void Dispatch_StopCameraShake(bool bInstantly, struct UObject* shakeOwner, bool bIgnoreOwnerCondition); // Function OPP.RBBlueprintLibrary.Dispatch_StopCameraShake // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d19ac8
	void Dispatch_PostAudioEventOnIntercom(struct UAkAudioEvent* akEvent); // Function OPP.RBBlueprintLibrary.Dispatch_PostAudioEventOnIntercom // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d19a4c
	void Dispatch_PostAudioEventOnGroup(struct UAkAudioEvent* akEvent, struct FName GroupName); // Function OPP.RBBlueprintLibrary.Dispatch_PostAudioEventOnGroup // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d1998c
	void Dispatch_PostAssociatedAKEvent(struct UAkComponent* AkComponent); // Function OPP.RBBlueprintLibrary.Dispatch_PostAssociatedAKEvent // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d1991c
	void Dispatch_PostAkEventOnActor(struct AActor* Actor, struct UAkAudioEvent* akEvent); // Function OPP.RBBlueprintLibrary.Dispatch_PostAkEventOnActor // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d19868
	void Dispatch_PostAkEventGlobal(struct UAkAudioEvent* akEvent); // Function OPP.RBBlueprintLibrary.Dispatch_PostAkEventGlobal // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d197f8
	void Dispatch_PostAkEvent(struct UAkComponent* AkComponent, struct UAkAudioEvent* akEvent); // Function OPP.RBBlueprintLibrary.Dispatch_PostAkEvent // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d19744
	void Dispatch_PlayVOOnWatch(struct UAkAudioEvent* akEvent); // Function OPP.RBBlueprintLibrary.Dispatch_PlayVOOnWatch // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d196d4
	void Dispatch_PlayVOOnNarrator(struct UAkAudioEvent* akEvent, enum class EVOPriority VOPriority); // Function OPP.RBBlueprintLibrary.Dispatch_PlayVOOnNarrator // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d19620
	void Dispatch_PlayVOOnActor(struct UAkAudioEvent* akEvent, struct AActor* Owner, enum class EVOPriority VOPriority, bool bPlayOnPlayersWatch); // Function OPP.RBBlueprintLibrary.Dispatch_PlayVOOnActor // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d194b4
	void Dispatch_PlaySingleShotMusicTrack(struct UAkAudioEvent* musicTrack, struct ARBPlayer* Player, bool bPauseLevelMusic); // Function OPP.RBBlueprintLibrary.Dispatch_PlaySingleShotMusicTrack // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d193b8
	void Dispatch_ActivateVFX(struct AActor* Actor); // Function OPP.RBBlueprintLibrary.Dispatch_ActivateVFX // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d19348
	void Dispatch_ActivateCameraShake(struct FCameraShakeData shakeData, struct FVector sourceLocation, struct UObject* shakeOwner); // Function OPP.RBBlueprintLibrary.Dispatch_ActivateCameraShake // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1d19168
	void DisablePawnAnimOptims(struct ARBPawn* RBPawn, bool bDisableOptims); // Function OPP.RBBlueprintLibrary.DisablePawnAnimOptims // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d190b0
	void DestroyComponentHierarchy(struct USceneComponent* Component); // Function OPP.RBBlueprintLibrary.DestroyComponentHierarchy // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d18f90
	struct FString ConfigurableIntToString(struct FConfigurableInt& ConfigurableInt); // Function OPP.RBBlueprintLibrary.ConfigurableIntToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d18ed8
	struct FString ConfigurableFloatToString(struct FConfigurableFloat& ConfigurableFloat); // Function OPP.RBBlueprintLibrary.ConfigurableFloatToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d18e20
	struct FString ConfigurableBoolToString(struct FConfigurableBool& ConfigurableBool); // Function OPP.RBBlueprintLibrary.ConfigurableBoolToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d18d38
	void CompleteSingleObjective(struct ARBPawn* playerCompleting, struct AActor* objectiveActor); // Function OPP.RBBlueprintLibrary.CompleteSingleObjective // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d18c6c
	void ClientOnly_QueueVOOnActor(struct UAkAudioEvent* akEvent, struct AActor* Owner, enum class EVOPriority VOPriority, float prePlayDelay, int32_t forcedRandomSeed); // Function OPP.RBBlueprintLibrary.ClientOnly_QueueVOOnActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d18830
	void ClientOnly_PlayVOOnActor(struct UAkAudioEvent* akEvent, struct AActor* Owner, enum class EVOPriority VOPriority, int32_t forcedRandomSeed); // Function OPP.RBBlueprintLibrary.ClientOnly_PlayVOOnActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d17e1c
	bool CanNPCBeFemale(struct FGruntCustomizationMeshesConfig& customizationMeshesConfig, enum class ENPCFlavor flavor); // Function OPP.RBBlueprintLibrary.CanNPCBeFemale // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d17cf4
	bool CanEditLoadouts(); // Function OPP.RBBlueprintLibrary.CanEditLoadouts // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d17ca4
	bool CanActorCollisionOverlapInEditor(struct AActor* baseActor, struct AActor* actorToCheck); // Function OPP.RBBlueprintLibrary.CanActorCollisionOverlapInEditor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d17bf4
	bool BP_IsRayTracingEnabled(); // Function OPP.RBBlueprintLibrary.BP_IsRayTracingEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d178b8
	bool BP_IsIndicatorOfObjectiveType(enum class EPlayerIndicatorType indicatorType); // Function OPP.RBBlueprintLibrary.BP_IsIndicatorOfObjectiveType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d17810
	bool BP_IsIndicatorOfIncapacitatedType(enum class EPlayerIndicatorType indicatorType); // Function OPP.RBBlueprintLibrary.BP_IsIndicatorOfIncapacitatedType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d17790
	void BlockPlayerRespawnInStage(struct UObject* blockOwner); // Function OPP.RBBlueprintLibrary.BlockPlayerRespawnInStage // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d17b7c
	bool AreSameProfileIds(struct FProfileId& firstProfileId, struct FProfileId& secondProfileId); // Function OPP.RBBlueprintLibrary.AreSameProfileIds // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d175f4
	bool AreCheatsEnabled(); // Function OPP.RBBlueprintLibrary.AreCheatsEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x150d484
	float Approach(float& Current, float& Target, float coeff, float DeltaTime); // Function OPP.RBBlueprintLibrary.Approach // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d17488
	float AInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed); // Function OPP.RBBlueprintLibrary.AInterpTo // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d16ebc
	void AddRandomizeRelativeLocation(struct USceneComponent* Component, int32_t RandomSeed, float rangeXMin, float rangeXMax, float rangeYMin, float rangeYMax, float rangeZMin, float rangeZMax); // Function OPP.RBBlueprintLibrary.AddRandomizeRelativeLocation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d17020
	void ActivateStageExitSAS(); // Function OPP.RBBlueprintLibrary.ActivateStageExitSAS // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1d16ff8
};

// Class OPP.RBBot
// Size: 0x6618 (Inherited: 0x350)
struct ARBBot : AAIController {
	struct FMulticastInlineDelegate OnAIEvent; // 0x350(0x10)
	struct FAIConfigData Config; // 0x360(0x11bc)
	char pad_151C[0x4]; // 0x151c(0x04)
	struct URBAIConfig* configAsset; // 0x1520(0x08)
	struct FAIConfigData DefaultConfig; // 0x1528(0x11bc)
	char pad_26E4[0x4]; // 0x26e4(0x04)
	struct FConditionalAIConfigData ConditionalConfig; // 0x26e8(0x11d8)
	enum class EAIActivity CurrentActivity; // 0x38c0(0x01)
	char pad_38C1[0x7]; // 0x38c1(0x07)
	struct URBAIActivity* CurrentAIActivity; // 0x38c8(0x08)
	struct URBAIPlayerManager* PlayerMgr; // 0x38d0(0x08)
	struct FBotMemory Memory; // 0x38d8(0x298)
	struct FBotDirectorData DirectorData; // 0x3b70(0x18)
	struct FPatrolConfig PatrolConfig; // 0x3b88(0x60)
	struct FPatrolData Patrol; // 0x3be8(0x50)
	struct FAIAmbushData Ambush; // 0x3c38(0x48)
	struct FAIImperativeActionData ImperativeAction; // 0x3c80(0x30)
	struct FAIGroundAndPoundData GroundAndPound; // 0x3cb0(0x18)
	struct URBAmbientStationComponent* AmbientStation; // 0x3cc8(0x08)
	struct FAIAmbientData Ambient; // 0x3cd0(0x28)
	struct FAIScriptedConfig ScriptedConfig; // 0x3cf8(0x80)
	struct FAIScriptedData Scripted; // 0x3d78(0x20)
	struct FBotRetirementConfig RetirementConfig; // 0x3d98(0x18)
	struct FAIRetirementData Retirement; // 0x3db0(0x38)
	struct FAISeekingHidingSpotData SeekingHidingSpot; // 0x3de8(0x28)
	struct FAIPlayerAvoidanceData PlayerAvoidance; // 0x3e10(0x58)
	struct FAISneakData Sneak; // 0x3e68(0x40)
	struct FInvestigationConfig InvestigationConfig; // 0x3ea8(0x60)
	struct FAIMonsterClosetData MonsterCloset; // 0x3f08(0x10)
	struct FAIAttackData Attack; // 0x3f18(0x70)
	struct FAIIdleFocusData IdleFocus; // 0x3f88(0x0c)
	struct FAIMolotovData Molotov; // 0x3f94(0x10)
	struct FAIStunGrenadeData StunGrenade; // 0x3fa4(0x01)
	char pad_3FA5[0x3]; // 0x3fa5(0x03)
	struct FAIBlindPaintData BlindPaint; // 0x3fa8(0x1c)
	char pad_3FC4[0x4]; // 0x3fc4(0x04)
	struct FLeashData Leash; // 0x3fc8(0x28)
	struct TArray<struct ARBSplineActor*> SnipingSplines; // 0x3ff0(0x10)
	struct TArray<struct ARBAmbientActivityMarker*> AvailableAmbientActivityMarkers; // 0x4000(0x10)
	struct TArray<struct ARBAISpawner*> AvailableAmbientActivitySpawners; // 0x4010(0x10)
	struct TArray<struct FAIReceivedDamageData> DelayedDamageReactions; // 0x4020(0x10)
	char pad_4030[0x50]; // 0x4030(0x50)
	struct FAICycleBreakerData CycleBreakers; // 0x4080(0x04)
	char pad_4084[0x54]; // 0x4084(0x54)
	struct FMovementData CurrentMove; // 0x40d8(0x48)
	enum class EMoveStatus MoveStatus; // 0x4120(0x01)
	enum class EMoveFailedReason LastMoveFailedReason; // 0x4121(0x01)
	char pad_4122[0x6]; // 0x4122(0x06)
	struct TArray<struct FAIEventLogItem> EventLog; // 0x4128(0x10)
	struct ARBLedgeMarker* QueuedLedgeForTraversal; // 0x4138(0x08)
	char pad_4140[0xc8]; // 0x4140(0xc8)
	struct ARBMonsterCloset* CustomNavExitMonsterCloset; // 0x4208(0x08)
	struct ARBPlayer* PlayerToForceExecute; // 0x4210(0x08)
	bool bForcedChase; // 0x4218(0x01)
	char pad_4219[0x7]; // 0x4219(0x07)
	struct FContinuousAttackDamage ContinuousAttackDamage; // 0x4220(0x28)
	struct FContinuousAttackDrug ContinuousAttackDrug; // 0x4248(0x20)
	struct TArray<struct URBPartialAIConfig*> DebugAdditionalConfigs; // 0x4268(0x10)
	struct FAIConfigData DebugAddedOverrides; // 0x4278(0x11bc)
	char pad_5434[0x4]; // 0x5434(0x04)
	struct URBAIConfig* DebugDefaultConfigAsset; // 0x5438(0x08)
	struct TArray<struct URBPartialAIConfig*> DebugDefaultAdditionalConfigs; // 0x5440(0x10)
	struct FAIConfigData DebugDefaultAddedOverrides; // 0x5450(0x11bc)
	char pad_660C[0x4]; // 0x660c(0x04)
	struct ARBNPC* NPC; // 0x6610(0x08)

	struct FString BP_GetDebugPawnName(); // Function OPP.RBBot.BP_GetDebugPawnName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d28f40
};

// Class OPP.RBBotVision
// Size: 0x48 (Inherited: 0x28)
struct URBBotVision : UObject {
	struct ARBNPC* NPC; // 0x28(0x08)
	struct ARBBot* bot; // 0x30(0x08)
	struct UProceduralMeshComponent* VisionVisualization; // 0x38(0x08)
	char pad_40[0x8]; // 0x40(0x08)
};

// Class OPP.RBBoxNavMeshBlockingComponent
// Size: 0x530 (Inherited: 0x4c0)
struct URBBoxNavMeshBlockingComponent : UBoxComponent {
	bool bBlocking; // 0x4c0(0x01)
	bool bAbsoluteTransform; // 0x4c1(0x01)
	bool bCurrentlyBlocking; // 0x4c2(0x01)
	char pad_4C3[0x6d]; // 0x4c3(0x6d)

	void SetBlocking(bool bBlockingValue); // Function OPP.RBBoxNavMeshBlockingComponent.SetBlocking // (Final|BlueprintAuthorityOnly|Native|Private|BlueprintCallable) // @ game+0x1d35434
	void RecomputeTransform(); // Function OPP.RBBoxNavMeshBlockingComponent.RecomputeTransform // (Final|Native|Public|BlueprintCallable) // @ game+0x1d34a98
	void OnRep_CurrentlyBlocking(); // Function OPP.RBBoxNavMeshBlockingComponent.OnRep_CurrentlyBlocking // (Final|Native|Private) // @ game+0x1d34604
};

// Class OPP.RBBreakableObstacle
// Size: 0x618 (Inherited: 0x4c0)
struct ARBBreakableObstacle : ARBInteractible {
	char pad_4C0[0x18]; // 0x4c0(0x18)
	struct URBDamageableComponent* DamageableComponent; // 0x4d8(0x08)
	enum class EBreakableObstacleAnimStyle AnimStyle; // 0x4e0(0x01)
	char pad_4E1[0x3]; // 0x4e1(0x03)
	struct FVector FromFrontAnimationOffset; // 0x4e4(0x0c)
	struct FVector FromBackAnimationOffset; // 0x4f0(0x0c)
	bool bCanBeUsedByBot; // 0x4fc(0x01)
	bool bBotOnlyUsableWhenChasing; // 0x4fd(0x01)
	char pad_4FE[0x2]; // 0x4fe(0x02)
	struct URBSoundConnectorComponent* SoundConnectorComp; // 0x500(0x08)
	bool bIsBlockingSound; // 0x508(0x01)
	char pad_509[0x7]; // 0x509(0x07)
	struct URBNavLinkComponent* NavLinkComp; // 0x510(0x08)
	struct FVector ObstacleNavOffset; // 0x518(0x0c)
	bool bStartsEnabled; // 0x524(0x01)
	enum class EDestructibleMaterialType MaterialType; // 0x525(0x01)
	enum class EBreakableLedgeMarkerBehavior LedgeMarkerBehavior; // 0x526(0x01)
	bool bCanBeHitByDamage; // 0x527(0x01)
	bool bIgnoreNavLinkOnBreak; // 0x528(0x01)
	char pad_529[0x7]; // 0x529(0x07)
	struct FInteractionSoundEvent BreakSoundEvent; // 0x530(0x20)
	struct FGameplayTagContainer EnableOnlyForNPCTags; // 0x550(0x20)
	struct FGameplayTagContainer DisableForNPCTags; // 0x570(0x20)
	struct URBRoomConnectorComponent* RoomConnectorComp; // 0x590(0x08)
	struct ARBPawn* BashingPawn; // 0x598(0x08)
	bool bCurrentlyEnabled; // 0x5a0(0x01)
	char pad_5A1[0x7]; // 0x5a1(0x07)
	struct FScheduledBool bBroken; // 0x5a8(0x70)

	void OnRep_CurrentlyEnabled(); // Function OPP.RBBreakableObstacle.OnRep_CurrentlyEnabled // (Final|Native|Protected) // @ game+0x1d34618
	void OnRep_Broken(); // Function OPP.RBBreakableObstacle.OnRep_Broken // (Final|Native|Public) // @ game+0x1d345c8
	void OnBreak(struct URBDamageableComponent* damageComponent); // Function OPP.RBBreakableObstacle.OnBreak // (Native|Protected) // @ game+0x1d34168
	bool IsBlocked(); // Function OPP.RBBreakableObstacle.IsBlocked // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d33b30
	void Event_OnStateChanged(); // Function OPP.RBBreakableObstacle.Event_OnStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnBreakObject(); // Function OPP.RBBreakableObstacle.Event_OnBreakObject // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BrokenChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBBreakableObstacle.BrokenChangedCallback // (Final|Native|Public) // @ game+0x1d31c30
	bool BP_IsBroken(); // Function OPP.RBBreakableObstacle.BP_IsBroken // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d31aec
	bool BP_IsActive(); // Function OPP.RBBreakableObstacle.BP_IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d31acc
};

// Class OPP.RBBreakableWindowReplaceableClass
// Size: 0x28 (Inherited: 0x28)
struct URBBreakableWindowReplaceableClass : UInterface {

	void OnReplacedWindow(struct ARBBreakableWindow* Window); // Function OPP.RBBreakableWindowReplaceableClass.OnReplacedWindow // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d346ec
};

// Class OPP.RBBreakableWindow
// Size: 0x680 (Inherited: 0x618)
struct ARBBreakableWindow : ARBBreakableObstacle {
	char pad_618[0x18]; // 0x618(0x18)
	struct URBNPCInterestPointComponent* InterestPoint; // 0x630(0x08)
	bool bCanBeBlocked; // 0x638(0x01)
	bool bCanBeAutomaticallyBlockedBySection; // 0x639(0x01)
	char pad_63A[0x2]; // 0x63a(0x02)
	float GroundDetectionDistanceOffset; // 0x63c(0x04)
	char bForceGroundInFrontValues : 1; // 0x640(0x01)
	char pad_640_1 : 7; // 0x640(0x01)
	bool bForcedGroundInFront; // 0x641(0x01)
	char bForceGroundInBackValues : 1; // 0x642(0x01)
	char pad_642_1 : 7; // 0x642(0x01)
	bool bForcedGroundInBack; // 0x643(0x01)
	bool bHasGroundInFront; // 0x644(0x01)
	bool bHasGroundInBack; // 0x645(0x01)
	enum class EBlockableState BlockableState; // 0x646(0x01)
	char pad_647[0x1]; // 0x647(0x01)
	struct AActor* DynamicReplacementActor; // 0x648(0x08)
	bool bDynamicallyReplaced; // 0x650(0x01)
	bool bIsToggled; // 0x651(0x01)
	char pad_652[0x6]; // 0x652(0x06)
	struct TArray<struct ARBLedgeMarker*> MainLedgeMarkers; // 0x658(0x10)
	struct TArray<struct URBRoomConnectorComponent*> RoomDetourPath; // 0x668(0x10)
	bool bRoomDetourValid; // 0x678(0x01)
	bool bShutterClosed; // 0x679(0x01)
	char pad_67A[0x6]; // 0x67a(0x06)

	void OnRep_ShutterClosed(); // Function OPP.RBBreakableWindow.OnRep_ShutterClosed // (Final|Native|Protected) // @ game+0x1d346d8
	void OnRep_DynamicallyReplaced(); // Function OPP.RBBreakableWindow.OnRep_DynamicallyReplaced // (Final|Native|Public) // @ game+0x1d346b0
	void OnRep_BlockableState(); // Function OPP.RBBreakableWindow.OnRep_BlockableState // (Final|Native|Protected) // @ game+0x1d345b4
	void OnLinkedShutterStateChanged(bool IsOn, struct ARBTriggerable* triggerable); // Function OPP.RBBreakableWindow.OnLinkedShutterStateChanged // (Final|Native|Protected) // @ game+0x1d34450
	enum class EBlockableState GetBlockableState(); // Function OPP.RBBreakableWindow.GetBlockableState // (Native|Public|Const) // @ game+0x1d3322c
	void Event_OnShutterStateChanged(); // Function OPP.RBBreakableWindow.Event_OnShutterStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnBlockableStateChanged(); // Function OPP.RBBreakableWindow.Event_OnBlockableStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Editor_RefreshGroundDetection(); // Function OPP.RBBreakableWindow.Editor_RefreshGroundDetection // (Final|Native|Public) // @ game+0x1521dbc
	void BP_ForceBlockableState(enum class EBlockableState inBlockableState); // Function OPP.RBBreakableWindow.BP_ForceBlockableState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d31724
};

// Class OPP.RBCameraManager
// Size: 0x2a30 (Inherited: 0x2a30)
struct ARBCameraManager : APlayerCameraManager {
};

// Class OPP.RBSwitchPanel
// Size: 0x728 (Inherited: 0x658)
struct ARBSwitchPanel : ARBOperatable {
	int32_t GridWidth; // 0x658(0x04)
	int32_t GridHeight; // 0x65c(0x04)
	struct FVector GridOffset; // 0x660(0x0c)
	float GridStepSize; // 0x66c(0x04)
	struct TArray<struct ARBSwitchPanelPart*> ConfigTypeOfParts; // 0x670(0x10)
	struct TArray<struct AActor*> ConfigTypeOfEmptyParts; // 0x680(0x10)
	struct USpotLightComponent* PanelLightComponent; // 0x690(0x08)
	struct FLinearColor InactiveLightColor; // 0x698(0x10)
	float InactiveLightIntensity; // 0x6a8(0x04)
	struct FLinearColor FarLightColor; // 0x6ac(0x10)
	float FarLightIntensity; // 0x6bc(0x04)
	struct FLinearColor CloseLightColor; // 0x6c0(0x10)
	float CloseLightIntensity; // 0x6d0(0x04)
	struct FLinearColor ActiveLightColor; // 0x6d4(0x10)
	float ActiveLightIntensity; // 0x6e4(0x04)
	float LightAfterInteractionDelayDuration; // 0x6e8(0x04)
	bool bDisablePanelAfterAllActive; // 0x6ec(0x01)
	char pad_6ED[0x13]; // 0x6ed(0x13)
	bool bPanelEnabled; // 0x700(0x01)
	char pad_701[0x3]; // 0x701(0x03)
	int32_t StatusValue; // 0x704(0x04)
	struct TArray<struct ARBSwitchPanelPart*> PanelParts; // 0x708(0x10)
	struct ARBSwitchPanelPart* LastInteractedPart; // 0x718(0x08)
	char pad_720[0x8]; // 0x720(0x08)

	void RefreshLightStatus(); // Function OPP.RBSwitchPanel.RefreshLightStatus // (Final|Native|Public) // @ game+0x1e17e5c
	void OnRep_StatusValue(); // Function OPP.RBSwitchPanel.OnRep_StatusValue // (Final|Native|Public) // @ game+0x1e17cfc
	void OnRep_PanelParts(); // Function OPP.RBSwitchPanel.OnRep_PanelParts // (Final|Native|Public) // @ game+0x1d518d4
	void OnRep_PanelEnabled(); // Function OPP.RBSwitchPanel.OnRep_PanelEnabled // (Final|Native|Public) // @ game+0x1e17c00
	struct URBInteractionZoneComponent* GivesFocusTo(struct ARBPawn* interactorPawn); // Function OPP.RBSwitchPanel.GivesFocusTo // (Final|Native|Public) // @ game+0x1e1760c
	void Event_PanelEnabledChanged(bool bEnabledValue); // Function OPP.RBSwitchPanel.Event_PanelEnabledChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_StopShake(); // Function OPP.RBSwitchPanel.BP_StopShake // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_StartShake(); // Function OPP.RBSwitchPanel.BP_StartShake // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_SetPanelEnabled(bool bEnabledValue); // Function OPP.RBSwitchPanel.BP_SetPanelEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e17140
	void BP_ResetAllPartsValues(bool bKeepCurrentValues); // Function OPP.RBSwitchPanel.BP_ResetAllPartsValues // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e17008
	void BP_OnStoppedInteraction(struct ARBPawn* Pawn, struct ARBSwitchPanelPart* panelPart); // Function OPP.RBSwitchPanel.BP_OnStoppedInteraction // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnStatusUpdated(); // Function OPP.RBSwitchPanel.BP_OnStatusUpdated // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnStartedInteraction(struct ARBPawn* Pawn, struct ARBSwitchPanelPart* panelPart); // Function OPP.RBSwitchPanel.BP_OnStartedInteraction // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBCameraPanel
// Size: 0x790 (Inherited: 0x728)
struct ARBCameraPanel : ARBSwitchPanel {
	struct FString DestructionRatioRTPCName; // 0x728(0x10)
	struct TArray<struct FCameraDestructionSoundState> CameraDestructionStates; // 0x738(0x10)
	struct URBSoundComponent* SoundComponent; // 0x748(0x08)
	struct UAkAudioEvent* WarningStartAudioEvent; // 0x750(0x08)
	struct UAkAudioEvent* WarningStopAudioEvent; // 0x758(0x08)
	float StopWarningAudioDelay; // 0x760(0x04)
	float StopInteractionSoundDelay; // 0x764(0x04)
	struct ARBSwitchPanelPart* CameraPowerButton; // 0x768(0x08)
	int32_t DestructionStage; // 0x770(0x04)
	bool bPowerButtonActivated; // 0x774(0x01)
	char pad_775[0x1b]; // 0x775(0x1b)

	void OnRep_PowerButtonActivated(); // Function OPP.RBCameraPanel.OnRep_PowerButtonActivated // (Final|Native|Private) // @ game+0x1d346c4
	void OnRep_DestructionStage(int32_t oldDestructionStage); // Function OPP.RBCameraPanel.OnRep_DestructionStage // (Final|Native|Private) // @ game+0x1d34630
	void Event_PowerButtonActivatedChanged(bool bEnabledValue); // Function OPP.RBCameraPanel.Event_PowerButtonActivatedChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_SetCameraPowerButton(struct ARBSwitchPanelPart* part); // Function OPP.RBCameraPanel.BP_SetCameraPowerButton // (Final|Native|Public|BlueprintCallable) // @ game+0x1d31b0c
};

// Class OPP.RBMenuTabWidget
// Size: 0x280 (Inherited: 0x268)
struct URBMenuTabWidget : URBUserWidget {
	struct FMulticastInlineDelegate OnNavigationChangedEvent; // 0x268(0x10)
	struct URBMenuWithTabsWidget* MenuWithTabsParent; // 0x278(0x08)

	void RequestNavigationBack(); // Function OPP.RBMenuTabWidget.RequestNavigationBack // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99e94
	void OnNavigationChanged(); // Function OPP.RBMenuTabWidget.OnNavigationChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99a14
	void OnButtonReleased(struct UUserWidget* buttonClicked, struct FKey Key); // Function OPP.RBMenuTabWidget.OnButtonReleased // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d99748
	void OnButtonClicked(struct UUserWidget* buttonClicked, struct FKey Key); // Function OPP.RBMenuTabWidget.OnButtonClicked // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d99748
	void OnBackRequested(); // Function OPP.RBMenuTabWidget.OnBackRequested // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1521dbc
	bool IsReadyToClose(); // Function OPP.RBMenuTabWidget.IsReadyToClose // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x16c9874
	void GetPageSpecificButtons(struct TArray<struct UUserWidget*>& outButtons); // Function OPP.RBMenuTabWidget.GetPageSpecificButtons // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	struct URBMenuWithTabsWidget* GetMenuWithTabsParent(); // Function OPP.RBMenuTabWidget.GetMenuWithTabsParent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d995cc
	void Event_OnTabUnselected(); // Function OPP.RBMenuTabWidget.Event_OnTabUnselected // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnTabSelected(); // Function OPP.RBMenuTabWidget.Event_OnTabSelected // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnParentUnfocused(); // Function OPP.RBMenuTabWidget.Event_OnParentUnfocused // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnParentPopped(); // Function OPP.RBMenuTabWidget.Event_OnParentPopped // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnParentFocused(); // Function OPP.RBMenuTabWidget.Event_OnParentFocused // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBCharacterCustomizationContent
// Size: 0x448 (Inherited: 0x280)
struct URBCharacterCustomizationContent : URBMenuTabWidget {
	bool bIsTutorial; // 0x280(0x01)
	enum class ECustomizationMenuCategory CurrentCustomizationCategory; // 0x281(0x01)
	bool UpdateAllItems; // 0x282(0x01)
	char pad_283[0x35]; // 0x283(0x35)
	struct TArray<struct URBPlayerCustomizationOption*> EquippedOptions; // 0x2b8(0x10)
	struct FName EquippedHairColor; // 0x2c8(0x08)
	struct URBCustomizationOutfit* EquippedLegendaryOutfit; // 0x2d0(0x08)
	struct URBVoiceCustomizationOption* EquippedVoiceOption; // 0x2d8(0x08)
	struct URBPlayerCustomizationOption* EquippedHeadOption; // 0x2e0(0x08)
	struct URBPlayerIconCustomizationOption* EquippedPlayerIconOption; // 0x2e8(0x08)
	struct TArray<struct URBPlayerCustomizationOption*> LastBodySpecificOptions; // 0x2f0(0x10)
	char pad_300[0x148]; // 0x300(0x148)

	void OnPlayerCustomizationUpdated(struct FRBPlayerCustomizationInfo& customizationInfo); // Function OPP.RBCharacterCustomizationContent.OnPlayerCustomizationUpdated // (Final|Native|Private|HasOutParms) // @ game+0x1d34508
	void OnItemMouseUp(struct FUICustomizationItem& Item); // Function OPP.RBCharacterCustomizationContent.OnItemMouseUp // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x1d343dc
	void OnItemMouseDown(struct FUICustomizationItem& Item); // Function OPP.RBCharacterCustomizationContent.OnItemMouseDown // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x1d34350
	void OnItemClicked(struct FUICustomizationItem& Item, enum class ECustomizationMenuCategory Category); // Function OPP.RBCharacterCustomizationContent.OnItemClicked // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x1d34274
	void OnHairColorClicked(struct FName newHairColorId); // Function OPP.RBCharacterCustomizationContent.OnHairColorClicked // (Final|Native|Public|BlueprintCallable) // @ game+0x1d341ec
	void OnAcquiredItemsChanged(); // Function OPP.RBCharacterCustomizationContent.OnAcquiredItemsChanged // (Final|Native|Private) // @ game+0x1d34154
	int32_t GetItemCountForCategory(enum class ECustomizationMenuCategory Category, bool isCustomizingFemale); // Function OPP.RBCharacterCustomizationContent.GetItemCountForCategory // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d33328
	bool GetIsCustomizingFemale(); // Function OPP.RBCharacterCustomizationContent.GetIsCustomizingFemale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d33310
	struct FName GetEquippedHairColor(); // Function OPP.RBCharacterCustomizationContent.GetEquippedHairColor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d33258
	void Event_RefreshItemInfos(struct TArray<struct FUICustomizationItem>& Items); // Function OPP.RBCharacterCustomizationContent.Event_RefreshItemInfos // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void Event_PlayerCustomizationUpdated(); // Function OPP.RBCharacterCustomizationContent.Event_PlayerCustomizationUpdated // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_LoadingStarted(); // Function OPP.RBCharacterCustomizationContent.Event_LoadingStarted // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_ItemEquipped(struct FUICustomizationItem& Item); // Function OPP.RBCharacterCustomizationContent.Event_ItemEquipped // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void Event_ItemBought(struct FUICustomizationItem& Item); // Function OPP.RBCharacterCustomizationContent.Event_ItemBought // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void Event_AddVoiceOptions(struct TArray<struct URBVoiceCustomizationOption*>& voiceOptions); // Function OPP.RBCharacterCustomizationContent.Event_AddVoiceOptions // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void Event_AddPlayerIconOptions(struct TArray<struct URBPlayerIconCustomizationOption*>& playerIconOptions); // Function OPP.RBCharacterCustomizationContent.Event_AddPlayerIconOptions // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void Event_AddCustomizationSlotOptions(struct TArray<struct URBPlayerCustomizationOption*>& Options, bool selectSpecificIndex, int32_t selectedIndex); // Function OPP.RBCharacterCustomizationContent.Event_AddCustomizationSlotOptions // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void Event_AddCustomizationItems(struct TArray<struct FUICustomizationItem>& Items); // Function OPP.RBCharacterCustomizationContent.Event_AddCustomizationItems // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void EquipVoice(struct URBVoiceCustomizationOption* clickedVoice); // Function OPP.RBCharacterCustomizationContent.EquipVoice // (Final|Native|Public|BlueprintCallable) // @ game+0x1d32b48
	void EquipPlayerIcon(struct URBPlayerIconCustomizationOption* clickedPlayerIcon); // Function OPP.RBCharacterCustomizationContent.EquipPlayerIcon // (Final|Native|Public|BlueprintCallable) // @ game+0x1d32ac8
	void EquipOutfit(struct URBCustomizationOutfit* clickedOutfit); // Function OPP.RBCharacterCustomizationContent.EquipOutfit // (Final|Native|Public|BlueprintCallable) // @ game+0x1d32950
	void EquipItem(struct URBPlayerCustomizationOption* clickedOption); // Function OPP.RBCharacterCustomizationContent.EquipItem // (Final|Native|Public|BlueprintCallable) // @ game+0x1d328d0
	void CategoryClicked(enum class ECustomizationMenuCategory Category); // Function OPP.RBCharacterCustomizationContent.CategoryClicked // (Final|Native|Public|BlueprintCallable) // @ game+0x1d31cc4
	struct FRBPlayerCustomizationInfo BP_GetOptionsForPreview(struct URBPlayerCustomizationOption* optionToPreview, struct URBCustomizationOutfit* outfitToPreview); // Function OPP.RBCharacterCustomizationContent.BP_GetOptionsForPreview // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d317f4
	struct FRBPlayerCustomizationInfo BP_GetCurrentPreviewOptions(); // Function OPP.RBCharacterCustomizationContent.BP_GetCurrentPreviewOptions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d317b8
};

// Class OPP.RBCharacterCustomizationMenu
// Size: 0x310 (Inherited: 0x308)
struct URBCharacterCustomizationMenu : URBMenuWidget {
	struct URBCharacterCustomizationContent* CustomizationContent; // 0x308(0x08)

	void SaveCustomization(); // Function OPP.RBCharacterCustomizationMenu.SaveCustomization // (Final|Native|Public|BlueprintCallable) // @ game+0x1d3521c
	void Event_SetupPostRelease(); // Function OPP.RBCharacterCustomizationMenu.Event_SetupPostRelease // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBCharacterSheetMenuTabWidget
// Size: 0x280 (Inherited: 0x280)
struct URBCharacterSheetMenuTabWidget : URBMenuTabWidget {

	bool ShouldShowPageTitle(); // Function OPP.RBCharacterSheetMenuTabWidget.ShouldShowPageTitle // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d361e0
	bool ShouldShowNavigation(); // Function OPP.RBCharacterSheetMenuTabWidget.ShouldShowNavigation // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d361b8
	bool HandleMenuTabRight(); // Function OPP.RBCharacterSheetMenuTabWidget.HandleMenuTabRight // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d33528
	bool HandleMenuTabLeft(); // Function OPP.RBCharacterSheetMenuTabWidget.HandleMenuTabLeft // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d33500
	struct FText GetPageTitle(); // Function OPP.RBCharacterSheetMenuTabWidget.GetPageTitle // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d33470
	struct FText GetPageSubtitle(); // Function OPP.RBCharacterSheetMenuTabWidget.GetPageSubtitle // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d33430
};

// Class OPP.RBCheatManager
// Size: 0x400 (Inherited: 0x88)
struct URBCheatManager : UCheatManager {
	bool bCheatsEnabled; // 0x88(0x01)
	bool bPlaytestMode; // 0x89(0x01)
	bool bMarketingMode; // 0x8a(0x01)
	char pad_8B[0x5]; // 0x8b(0x05)
	struct ARBController* RBPC; // 0x90(0x08)
	char pad_98[0x68]; // 0x98(0x68)
	struct ARBNPC* NPCToDebug; // 0x100(0x08)
	struct ARBPlayer* PlayerToDebug; // 0x108(0x08)
	struct ARBPawn* PawnToDebug; // 0x110(0x08)
	struct ARBBackgroundCharacter* BackgroundCharacterToDebug; // 0x118(0x08)
	struct TArray<struct FGameEvent> GameEventLog; // 0x120(0x10)
	char pad_130[0x80]; // 0x130(0x80)
	struct TArray<struct FActorInViewDebugData> ActorsInViewToDebug; // 0x1b0(0x10)
	char pad_1C0[0x10]; // 0x1c0(0x10)
	struct TArray<struct AActor*> DebugShowActors; // 0x1d0(0x10)
	struct TArray<struct FString> DebugActorInViewFilters; // 0x1e0(0x10)
	char pad_1F0[0x58]; // 0x1f0(0x58)
	struct URBOverseer* Overseer; // 0x248(0x08)
	struct URBWhoWasWhere* WWW; // 0x250(0x08)
	char pad_258[0x148]; // 0x258(0x148)
	struct FRBBugItDataRequest_Server BugItDataRequest_Server; // 0x3a0(0x20)
	struct FRBBugItDataRequest_Client BugItDataRequest_Client; // 0x3c0(0x18)
	struct TArray<struct FQuickGraph> QuickGraphs; // 0x3d8(0x10)
	char pad_3E8[0x18]; // 0x3e8(0x18)

	void ViewMode_Wireframe(); // Function OPP.RBCheatManager.ViewMode_Wireframe // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ViewMode_Lit_DetailLighting(); // Function OPP.RBCheatManager.ViewMode_Lit_DetailLighting // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ViewMode_Lit(); // Function OPP.RBCheatManager.ViewMode_Lit // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ViewMode_Design(); // Function OPP.RBCheatManager.ViewMode_Design // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void UpdateStatistic(enum class EPlayerStat PlayerStat, float Value); // Function OPP.RBCheatManager.UpdateStatistic // (Final|Exec|Native|Public) // @ game+0x1d37540
	void UntriggerAll(); // Function OPP.RBCheatManager.UntriggerAll // (Final|Exec|Native|Public) // @ game+0x1d3752c
	void UnlockAllTrials(); // Function OPP.RBCheatManager.UnlockAllTrials // (Final|Exec|Native|Public) // @ game+0x1d374dc
	void UnlockAchievement(struct FName& AchievementID); // Function OPP.RBCheatManager.UnlockAchievement // (Final|Exec|Native|Public|HasOutParms) // @ game+0x1d37420
	void TurnInTasks(); // Function OPP.RBCheatManager.TurnInTasks // (Final|Exec|Native|Public) // @ game+0x1d373d0
	void TriggerAll(); // Function OPP.RBCheatManager.TriggerAll // (Final|Exec|Native|Public) // @ game+0x1d373bc
	void TriggerAIEvent(enum class EAIEvent AIEvent); // Function OPP.RBCheatManager.TriggerAIEvent // (Final|Exec|Native|Public) // @ game+0x1d3732c
	void ToggleWWWMode(); // Function OPP.RBCheatManager.ToggleWWWMode // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ToggleVOs(); // Function OPP.RBCheatManager.ToggleVOs // (Final|Exec|Native|Public) // @ game+0x1d37318
	void ToggleStatUnit(); // Function OPP.RBCheatManager.ToggleStatUnit // (Final|Exec|Native|Public) // @ game+0x1d37304
	void ToggleSpectator(); // Function OPP.RBCheatManager.ToggleSpectator // (Final|Exec|Native|Public) // @ game+0x1d372f0
	void ToggleSilentForBots(); // Function OPP.RBCheatManager.ToggleSilentForBots // (Final|Exec|Native|Public) // @ game+0x1d3726c
	void ToggleRespawnDeadPlayerInStage(); // Function OPP.RBCheatManager.ToggleRespawnDeadPlayerInStage // (Final|Exec|Native|Public) // @ game+0x1d3721c
	void ToggleResetStageWhenAllPlayersDead(); // Function OPP.RBCheatManager.ToggleResetStageWhenAllPlayersDead // (Final|Exec|Native|Public) // @ game+0x1d371cc
	void ToggleReplacementSound(struct FString& soundEventName); // Function OPP.RBCheatManager.ToggleReplacementSound // (Final|Exec|Native|Public|HasOutParms) // @ game+0x1d37134
	void TogglePsychosisDebugHud(); // Function OPP.RBCheatManager.TogglePsychosisDebugHud // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void TogglePlayerDetectionComponentsDebug(); // Function OPP.RBCheatManager.TogglePlayerDetectionComponentsDebug // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void TogglePause(); // Function OPP.RBCheatManager.TogglePause // (Final|Exec|Native|Public) // @ game+0x1d37120
	void ToggleOverseerMode(); // Function OPP.RBCheatManager.ToggleOverseerMode // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ToggleOverseerInfo(); // Function OPP.RBCheatManager.ToggleOverseerInfo // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ToggleOnlineDebug(); // Function OPP.RBCheatManager.ToggleOnlineDebug // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ToggleNPCDebugIcons(); // Function OPP.RBCheatManager.ToggleNPCDebugIcons // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ToggleNetMoveCorrection(); // Function OPP.RBCheatManager.ToggleNetMoveCorrection // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ToggleNavmesh(); // Function OPP.RBCheatManager.ToggleNavmesh // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ToggleMute(); // Function OPP.RBCheatManager.ToggleMute // (Final|Exec|Native|Public) // @ game+0x1d3710c
	void ToggleMusic(); // Function OPP.RBCheatManager.ToggleMusic // (Final|Exec|Native|Public) // @ game+0x1d370f8
	void ToggleMapWarnings(); // Function OPP.RBCheatManager.ToggleMapWarnings // (Final|Exec|Native|Public) // @ game+0x1d370cc
	void ToggleInvisibleToBots(); // Function OPP.RBCheatManager.ToggleInvisibleToBots // (Final|Exec|Native|Public) // @ game+0x1d370b8
	void ToggleInfiniteLives(); // Function OPP.RBCheatManager.ToggleInfiniteLives // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ToggleInfiniteActiveSkills(); // Function OPP.RBCheatManager.ToggleInfiniteActiveSkills // (Final|Exec|Native|Public) // @ game+0x1d370a4
	void ToggleGameplayPPS(); // Function OPP.RBCheatManager.ToggleGameplayPPS // (Final|Exec|Native|Public) // @ game+0x1d37090
	void ToggleFoleys(); // Function OPP.RBCheatManager.ToggleFoleys // (Final|Exec|Native|Public) // @ game+0x1d3707c
	void ToggleDumpWidgetHierarchyOnClick(); // Function OPP.RBCheatManager.ToggleDumpWidgetHierarchyOnClick // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ToggleDebugStreaming(); // Function OPP.RBCheatManager.ToggleDebugStreaming // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ToggleDebugSelectedActor(); // Function OPP.RBCheatManager.ToggleDebugSelectedActor // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ToggleDebugMenu(); // Function OPP.RBCheatManager.ToggleDebugMenu // (Final|Exec|Native|Public) // @ game+0x1d37068
	void ToggleDebugDarknessUpdate(); // Function OPP.RBCheatManager.ToggleDebugDarknessUpdate // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ToggleDarknessEffect(); // Function OPP.RBCheatManager.ToggleDarknessEffect // (Final|Exec|Native|Public) // @ game+0x1d37054
	void ToggleCoopTrap(); // Function OPP.RBCheatManager.ToggleCoopTrap // (Final|Exec|Native|Public) // @ game+0x1d36fec
	void ToggleConditionalDebugActorInViewServer(); // Function OPP.RBCheatManager.ToggleConditionalDebugActorInViewServer // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ToggleCheats(); // Function OPP.RBCheatManager.ToggleCheats // (Exec|Native|Public) // @ game+0x1d36fd4
	void ToggleCameraShake(); // Function OPP.RBCheatManager.ToggleCameraShake // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ToggleAlwaysKeepConsumables(); // Function OPP.RBCheatManager.ToggleAlwaysKeepConsumables // (Final|Exec|Native|Public) // @ game+0x1d36fc0
	void ToggleAll(struct FString searchQuery, bool bStateA); // Function OPP.RBCheatManager.ToggleAll // (Final|Exec|Native|Public) // @ game+0x1d36e88
	void TestRandomness(); // Function OPP.RBCheatManager.TestRandomness // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void TestIntercom(); // Function OPP.RBCheatManager.TestIntercom // (Final|Exec|Native|Public) // @ game+0x1d36e20
	void TeleportAtLocation(float X, float Y, float Z, float Pitch, float Yaw, float Roll); // Function OPP.RBCheatManager.TeleportAtLocation // (Exec|Native|Public|BlueprintCallable) // @ game+0x1d36c4c
	void StunSelf(); // Function OPP.RBCheatManager.StunSelf // (Final|Exec|Native|Public) // @ game+0x1d36be8
	void StopPsychosis(); // Function OPP.RBCheatManager.StopPsychosis // (Final|Exec|Native|Public) // @ game+0x1d36bd4
	void StatHLODMem(); // Function OPP.RBCheatManager.StatHLODMem // (Final|Exec|Native|Public) // @ game+0x1d36bc0
	void StartStageEnding(); // Function OPP.RBCheatManager.StartStageEnding // (Final|Exec|Native|Public) // @ game+0x1d36b6c
	void StartRelease(); // Function OPP.RBCheatManager.StartRelease // (Final|Exec|Native|Public) // @ game+0x1d36b1c
	void StartPsychosisSpook(); // Function OPP.RBCheatManager.StartPsychosisSpook // (Final|Exec|Native|Public) // @ game+0x1d36aa4
	void StartPsychosis(); // Function OPP.RBCheatManager.StartPsychosis // (Final|Exec|Native|Public) // @ game+0x1d36a90
	void StartObjectiveCoordinator(struct FString Name); // Function OPP.RBCheatManager.StartObjectiveCoordinator // (Final|Exec|Native|Public) // @ game+0x1d36990
	void StartExperiment(); // Function OPP.RBCheatManager.StartExperiment // (Final|Exec|Native|Public) // @ game+0x1d3697c
	void StartEndOfStageDamage(); // Function OPP.RBCheatManager.StartEndOfStageDamage // (Final|Exec|Native|Public) // @ game+0x1d3692c
	void SpawnScientist(struct FString Options); // Function OPP.RBCheatManager.SpawnScientist // (Final|Exec|Native|Public) // @ game+0x1d366c0
	void SpawnRandomPouncers(); // Function OPP.RBCheatManager.SpawnRandomPouncers // (Final|Exec|Native|Public) // @ game+0x1d368dc
	void SpawnMultipleLargePickups(struct FString ItemName, int32_t numberOfCopy); // Function OPP.RBCheatManager.SpawnMultipleLargePickups // (Final|Exec|Native|Public) // @ game+0x1d367f0
	void SpawnLargePickup(struct FString ItemName); // Function OPP.RBCheatManager.SpawnLargePickup // (Final|Exec|Native|Public) // @ game+0x1d36750
	void SpawnInteractingPlayer(); // Function OPP.RBCheatManager.SpawnInteractingPlayer // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void SpawnGuard(struct FString Options); // Function OPP.RBCheatManager.SpawnGuard // (Final|Exec|Native|Public) // @ game+0x1d366c0
	void SpawnDownedPlayer(); // Function OPP.RBCheatManager.SpawnDownedPlayer // (Final|Exec|Native|Public) // @ game+0x1d366ac
	void SpawnDeadPlayer(); // Function OPP.RBCheatManager.SpawnDeadPlayer // (Final|Exec|Native|Public) // @ game+0x1d36698
	void SpawnAI(struct FString cheatName); // Function OPP.RBCheatManager.SpawnAI // (Final|Exec|Native|Public) // @ game+0x1d36608
	void SingleFrame(); // Function OPP.RBCheatManager.SingleFrame // (Final|Exec|Native|Public) // @ game+0x1d365f4
	void SimulateRTADisconnection(); // Function OPP.RBCheatManager.SimulateRTADisconnection // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ShowWorldOctreeObjects(enum class EDebugWorldOctreeObjectType ObjectType, float Range); // Function OPP.RBCheatManager.ShowWorldOctreeObjects // (Final|Exec|Native|Public) // @ game+0x1d3652c
	void ShowStageIntro(); // Function OPP.RBCheatManager.ShowStageIntro // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ShowQuickGraph(struct FString Filter); // Function OPP.RBCheatManager.ShowQuickGraph // (Final|Exec|Native|Public) // @ game+0x161f0f8
	void ShowPartyInviteNotification(); // Function OPP.RBCheatManager.ShowPartyInviteNotification // (Final|Exec|Native|Public) // @ game+0x1d36518
	void ShowMatchAcceptanceNotification(); // Function OPP.RBCheatManager.ShowMatchAcceptanceNotification // (Final|Exec|Native|Public) // @ game+0x1d36504
	void ShowFriendInviteNotification(); // Function OPP.RBCheatManager.ShowFriendInviteNotification // (Final|Exec|Native|Public) // @ game+0x1d364f0
	void ShowError(struct FString Message, int32_t facility, int32_t code); // Function OPP.RBCheatManager.ShowError // (Final|Exec|Native|Public) // @ game+0x1d363bc
	void ShowEndOfStageScreen(bool bSuccess); // Function OPP.RBCheatManager.ShowEndOfStageScreen // (Final|Exec|Native|Public) // @ game+0x1d36318
	void ShowAllItems(enum class EItemType ItemType); // Function OPP.RBCheatManager.ShowAllItems // (Final|Exec|Native|Public) // @ game+0x1d36298
	void ShowAll(struct FString searchQuery); // Function OPP.RBCheatManager.ShowAll // (Final|Exec|Native|Public) // @ game+0x1d36208
	void SetVOSwitch(struct FString SwitchGroup, struct FString SwitchState); // Function OPP.RBCheatManager.SetVOSwitch // (Final|Exec|Native|Public) // @ game+0x1d360d8
	void SetTutorialSize(enum class EUIFontSize Size); // Function OPP.RBCheatManager.SetTutorialSize // (Final|Exec|Native|Public) // @ game+0x1d32d30
	void SetTriggerableNetCullDistanceSquared(float NetCullDistanceSquared); // Function OPP.RBCheatManager.SetTriggerableNetCullDistanceSquared // (Final|Exec|Native|Public) // @ game+0x1d36044
	void SetTrialCompleted(struct FName& TrialId); // Function OPP.RBCheatManager.SetTrialCompleted // (Final|Exec|Native|Public|HasOutParms) // @ game+0x1d35f88
	void SetSubtitleSize(enum class EUIFontSize Size); // Function OPP.RBCheatManager.SetSubtitleSize // (Final|Exec|Native|Public) // @ game+0x1d32d30
	void SetServerAnimTickOptimsEnabled(bool bEnabled); // Function OPP.RBCheatManager.SetServerAnimTickOptimsEnabled // (Final|Exec|Native|Public) // @ game+0x1d35ee4
	void SetPressureAccumulator(int32_t PressureAccumulator); // Function OPP.RBCheatManager.SetPressureAccumulator // (Final|Exec|Native|Public) // @ game+0x1d35e74
	void SetPlayerLoadout(struct FString loadoutCode); // Function OPP.RBCheatManager.SetPlayerLoadout // (Final|Exec|Native|Public) // @ game+0x1d35df4
	void SetNVBattery(float Value); // Function OPP.RBCheatManager.SetNVBattery // (Final|Exec|Native|Public) // @ game+0x1d35cd0
	void SetNoConnectionTimeout(bool noTimeout); // Function OPP.RBCheatManager.SetNoConnectionTimeout // (Final|Exec|Native|Public) // @ game+0x1d35d44
	void SetMaxReservedPlayerSlotsOverride(int32_t maxReservedPlayerSlotsOverride); // Function OPP.RBCheatManager.SetMaxReservedPlayerSlotsOverride // (Final|Exec|Native|Public) // @ game+0x17ed724
	void SetMaxNumberOfPlayers(int32_t maxNumberOfPlayers); // Function OPP.RBCheatManager.SetMaxNumberOfPlayers // (Final|Exec|Native|Public) // @ game+0x1d35c50
	void SetMarketingMode(bool bEnable); // Function OPP.RBCheatManager.SetMarketingMode // (Final|Exec|Native|Public) // @ game+0x1d35bc8
	void SetLevelSeed(uint32_t initSeed); // Function OPP.RBCheatManager.SetLevelSeed // (Final|Exec|Native|Public) // @ game+0x1d35b48
	void SetInteractibleNetCullDistanceSquared(float NetCullDistanceSquared); // Function OPP.RBCheatManager.SetInteractibleNetCullDistanceSquared // (Final|Exec|Native|Public) // @ game+0x1d35ad4
	void SetGameDifficulty(struct FString difficultyStr); // Function OPP.RBCheatManager.SetGameDifficulty // (Final|Exec|Native|Public) // @ game+0x1d35a54
	void SetFreeCamPos(float X, float Y, float Z, float Roll, float Pitch, float Yaw); // Function OPP.RBCheatManager.SetFreeCamPos // (Final|Exec|Native|Public) // @ game+0x1d358bc
	void SetFreeCamMoveSpeed(float MovementSpeed); // Function OPP.RBCheatManager.SetFreeCamMoveSpeed // (Final|Exec|Native|Public) // @ game+0x1d35828
	void SetFreeCamMouseSensitivity(float Sensitivity); // Function OPP.RBCheatManager.SetFreeCamMouseSensitivity // (Final|Exec|Native|Public) // @ game+0x1d35794
	void SetFreeCamGamepadLookSensitivity(float Sensitivity); // Function OPP.RBCheatManager.SetFreeCamGamepadLookSensitivity // (Final|Exec|Native|Public) // @ game+0x1d35700
	void SetDebugCameraRotationRatio(float ratio); // Function OPP.RBCheatManager.SetDebugCameraRotationRatio // (Final|Exec|Native|Public) // @ game+0x1d3567c
	void SetCrossplayPartition(struct FString partition); // Function OPP.RBCheatManager.SetCrossplayPartition // (Final|Exec|Native|Public) // @ game+0x161f0f8
	void SetCpulimit(int32_t Limit); // Function OPP.RBCheatManager.SetCpulimit // (Final|Exec|Native|Public) // @ game+0x1d35610
	void SetCharacterLevel(int32_t Level); // Function OPP.RBCheatManager.SetCharacterLevel // (Final|Exec|Native|Public) // @ game+0x1d35570
	void SetCharacterIcon(struct FName& iconId); // Function OPP.RBCheatManager.SetCharacterIcon // (Final|Exec|Native|Public|HasOutParms) // @ game+0x1d354b4
	void SetBreadcrumbsLogsEnabled(bool bEnabled); // Function OPP.RBCheatManager.SetBreadcrumbsLogsEnabled // (Final|Exec|Native|Public) // @ game+0x12e20c0
	void SetActiveSkill(struct FString skillDisplayName); // Function OPP.RBCheatManager.SetActiveSkill // (Final|Exec|Native|Public) // @ game+0x1d353a4
	void ServerComponentsReport(); // Function OPP.RBCheatManager.ServerComponentsReport // (Final|Exec|Native|Public) // @ game+0x1d35390
	void ServerCmd(struct FString ServerCmd); // Function OPP.RBCheatManager.ServerCmd // (Final|Exec|Native|Public) // @ game+0x1d35300
	void SendXPEvent(enum class EPlayerEvent EventType); // Function OPP.RBCheatManager.SendXPEvent // (Final|Exec|Native|Public) // @ game+0x1d35260
	void SCE(struct FString serverConsoleEvent); // Function OPP.RBCheatManager.SCE // (Final|Exec|Native|Public) // @ game+0x1d3518c
	void SaveWWW(struct FString Filename); // Function OPP.RBCheatManager.SaveWWW // (Final|Exec|Native|Public) // @ game+0x161f0f8
	void SaveProfile(); // Function OPP.RBCheatManager.SaveProfile // (Final|Exec|Native|Public) // @ game+0x1d35230
	void RevalidateLedgeMarkers(); // Function OPP.RBCheatManager.RevalidateLedgeMarkers // (Final|Exec|Native|Public) // @ game+0x1d35178
	void RestartExperiment(); // Function OPP.RBCheatManager.RestartExperiment // (Final|Exec|Native|Public) // @ game+0x1d35164
	void RespawnDeadPlayers(bool Force); // Function OPP.RBCheatManager.RespawnDeadPlayers // (Final|Exec|Native|Public) // @ game+0x1d350c0
	void RespawnAllPlayers(); // Function OPP.RBCheatManager.RespawnAllPlayers // (Final|Exec|Native|Public) // @ game+0x1d35070
	void ReshuffleNPCs(); // Function OPP.RBCheatManager.ReshuffleNPCs // (Final|Exec|Native|Public) // @ game+0x1d35020
	void ResetWorldStateWithSeed(int32_t RandomSeed); // Function OPP.RBCheatManager.ResetWorldStateWithSeed // (Final|Exec|Native|Public) // @ game+0x17ed724
	void ResetWorldState_Input(); // Function OPP.RBCheatManager.ResetWorldState_Input // (Final|Native|Public) // @ game+0x1521dbc
	void ResetWorldState(); // Function OPP.RBCheatManager.ResetWorldState // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ResetStageWithSeed(int32_t RandomSeed); // Function OPP.RBCheatManager.ResetStageWithSeed // (Final|Exec|Native|Public) // @ game+0x1d34f90
	void ResetStage(); // Function OPP.RBCheatManager.ResetStage // (Final|Exec|Native|Public) // @ game+0x1d34f64
	void ResetPlayer(); // Function OPP.RBCheatManager.ResetPlayer // (Final|Exec|Native|Public) // @ game+0x1d34f50
	void ResetLoadouts(); // Function OPP.RBCheatManager.ResetLoadouts // (Final|Exec|Native|Public) // @ game+0x1d34f00
	void ResetDoors(); // Function OPP.RBCheatManager.ResetDoors // (Final|Exec|Native|Public) // @ game+0x1d34e7c
	void ResetCustomization(); // Function OPP.RBCheatManager.ResetCustomization // (Final|Exec|Native|Public) // @ game+0x1d34dfc
	void ResetCharacterProgression(); // Function OPP.RBCheatManager.ResetCharacterProgression // (Final|Exec|Native|Public) // @ game+0x1d34de8
	void ResetAchievements(); // Function OPP.RBCheatManager.ResetAchievements // (Final|Exec|Native|Public) // @ game+0x1d34d98
	void ResetAccountProgression(); // Function OPP.RBCheatManager.ResetAccountProgression // (Final|Exec|Native|Public) // @ game+0x1d34d84
	void ResetAccount(); // Function OPP.RBCheatManager.ResetAccount // (Final|Exec|Native|Public) // @ game+0x1d34d60
	void ReregisterInteractionZonesWithRBWorld(); // Function OPP.RBCheatManager.ReregisterInteractionZonesWithRBWorld // (Final|Exec|Native|Public) // @ game+0x1d34ce0
	void RequestReleaseCurrentCharacter(); // Function OPP.RBCheatManager.RequestReleaseCurrentCharacter // (Final|Exec|Native|Public) // @ game+0x1d34cb8
	void RemoveVariator(struct FString Name); // Function OPP.RBCheatManager.RemoveVariator // (Final|Exec|Native|Public) // @ game+0x1d34be0
	void RemoveDebugActorInViewFilter(struct FString Filter); // Function OPP.RBCheatManager.RemoveDebugActorInViewFilter // (Final|Exec|Native|Public) // @ game+0x1d34b2c
	void RefreshPathfindingCosts(); // Function OPP.RBCheatManager.RefreshPathfindingCosts // (Final|Exec|Native|Public) // @ game+0x1d34aac
	void ReactivateBenchmarkOnNextBoot(); // Function OPP.RBCheatManager.ReactivateBenchmarkOnNextBoot // (Final|Exec|Native|Public) // @ game+0x1d34a84
	void RBSlomoSlower(); // Function OPP.RBCheatManager.RBSlomoSlower // (Final|Exec|Native|Public) // @ game+0x1d34a10
	void RBSlomoFaster(); // Function OPP.RBCheatManager.RBSlomoFaster // (Final|Exec|Native|Public) // @ game+0x1d349fc
	void RandomizeCustomization(); // Function OPP.RBCheatManager.RandomizeCustomization // (Final|Exec|Native|Public) // @ game+0x1d34a24
	void QuickTestServer(); // Function OPP.RBCheatManager.QuickTestServer // (Final|Exec|Native|Public) // @ game+0x1d349e8
	void QuickTest(); // Function OPP.RBCheatManager.QuickTest // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void Profiling_NextCamera(); // Function OPP.RBCheatManager.Profiling_NextCamera // (Final|Exec|Native|Public) // @ game+0x1d349d4
	void PreviousDebugActorInView(); // Function OPP.RBCheatManager.PreviousDebugActorInView // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void PlayVO(struct FString soundEventName, struct FString SwitchGroup, struct FString SwitchState, int32_t forcedRandomSeed); // Function OPP.RBCheatManager.PlayVO // (Final|Exec|Native|Public) // @ game+0x1d347d0
	void PlaytestMode(); // Function OPP.RBCheatManager.PlaytestMode // (Final|Exec|Native|Public) // @ game+0x1d349c0
	void PersistPlayerProgression(); // Function OPP.RBCheatManager.PersistPlayerProgression // (Final|Exec|Native|Public) // @ game+0x1d34780
	void PasteCameraLocation(); // Function OPP.RBCheatManager.PasteCameraLocation // (Final|Exec|Native|Public) // @ game+0x1d3476c
	void NextDebugActorInView(); // Function OPP.RBCheatManager.NextDebugActorInView // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void MulticastCommand(struct FString InMulticastCommand); // Function OPP.RBCheatManager.MulticastCommand // (Final|Exec|Native|Public) // @ game+0x1d340d4
	void MarketingMode(); // Function OPP.RBCheatManager.MarketingMode // (Final|Exec|Native|Public) // @ game+0x1d340c0
	void MakeNoise(); // Function OPP.RBCheatManager.MakeNoise // (Final|Exec|Native|Public) // @ game+0x1d340ac
	void LogStreamingDebug(); // Function OPP.RBCheatManager.LogStreamingDebug // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void Local_SetTriggerableNetCullDistanceSquared(float NetCullDistanceSquared); // Function OPP.RBCheatManager.Local_SetTriggerableNetCullDistanceSquared // (Final|Exec|Native|Public) // @ game+0x1d34038
	void Local_SetInteractibleNetCullDistanceSquared(float NetCullDistanceSquared); // Function OPP.RBCheatManager.Local_SetInteractibleNetCullDistanceSquared // (Final|Exec|Native|Public) // @ game+0x1d33fc4
	void LoadWWW(struct FString Filename); // Function OPP.RBCheatManager.LoadWWW // (Final|Exec|Native|Public) // @ game+0x161f0f8
	void LoadProfile(); // Function OPP.RBCheatManager.LoadProfile // (Final|Exec|Native|Public) // @ game+0x1d33f94
	void LoadHeatmap(struct FString FilePath); // Function OPP.RBCheatManager.LoadHeatmap // (Final|Exec|Native|Public) // @ game+0x1d33f04
	void LoadAllVOSwitchGroups(); // Function OPP.RBCheatManager.LoadAllVOSwitchGroups // (Final|Exec|Native|Public) // @ game+0x1d33ef0
	void ListTickingSkelComp(struct FString Filter); // Function OPP.RBCheatManager.ListTickingSkelComp // (Final|Exec|Native|Public) // @ game+0x1d33e54
	void ListNews(); // Function OPP.RBCheatManager.ListNews // (Final|Exec|Native|Public) // @ game+0x1d33e40
	void ListItems(); // Function OPP.RBCheatManager.ListItems // (Final|Exec|Native|Public) // @ game+0x1d33e2c
	void ListContainers(); // Function OPP.RBCheatManager.ListContainers // (Final|Exec|Native|Public) // @ game+0x1d33e18
	void ListAllTickingActors(struct FString Filter); // Function OPP.RBCheatManager.ListAllTickingActors // (Final|Exec|Native|Public) // @ game+0x1d33d7c
	void ListAllActiveSoundsInGroup(struct FName GroupName); // Function OPP.RBCheatManager.ListAllActiveSoundsInGroup // (Final|Exec|Native|Public) // @ game+0x1d33d0c
	void ListAllActiveSounds(); // Function OPP.RBCheatManager.ListAllActiveSounds // (Final|Exec|Native|Public) // @ game+0x1d33cf8
	void KillSelfInstant(); // Function OPP.RBCheatManager.KillSelfInstant // (Final|Exec|Native|Public) // @ game+0x1d33cb8
	void KillSelf(); // Function OPP.RBCheatManager.KillSelf // (Final|Exec|Native|Public) // @ game+0x1d33c44
	void KillSelectedBot(); // Function OPP.RBCheatManager.KillSelectedBot // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void KillOtherBots(); // Function OPP.RBCheatManager.KillOtherBots // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void KillFakePlayers(); // Function OPP.RBCheatManager.KillFakePlayers // (Final|Exec|Native|Public) // @ game+0x1d33bec
	void KillBots(); // Function OPP.RBCheatManager.KillBots // (Final|Exec|Native|Public) // @ game+0x1d33bd8
	void keOnDebugActorInViewOnServer(struct FString Command); // Function OPP.RBCheatManager.keOnDebugActorInViewOnServer // (Final|Exec|Native|Public) // @ game+0x161f0f8
	void keOnDebugActorInView(struct FString Command); // Function OPP.RBCheatManager.keOnDebugActorInView // (Final|Exec|Native|Public) // @ game+0x161f0f8
	void JoinParty(struct FString ProfileId); // Function OPP.RBCheatManager.JoinParty // (Final|Exec|Native|Public) // @ game+0x1d33b58
	void InfiniteThrowables(); // Function OPP.RBCheatManager.InfiniteThrowables // (Final|Exec|Native|Public) // @ game+0x1d33b1c
	void InfiniteMasterKey(); // Function OPP.RBCheatManager.InfiniteMasterKey // (Final|Exec|Native|Public) // @ game+0x1d33aa0
	void InfiniteLockpick(); // Function OPP.RBCheatManager.InfiniteLockpick // (Final|Exec|Native|Public) // @ game+0x1d33a24
	void InfiniteGibs(); // Function OPP.RBCheatManager.InfiniteGibs // (Final|Exec|Native|Public) // @ game+0x1d33a10
	void InfiniteBricks(); // Function OPP.RBCheatManager.InfiniteBricks // (Final|Exec|Native|Public) // @ game+0x1d339fc
	void InfiniteBottles(); // Function OPP.RBCheatManager.InfiniteBottles // (Final|Exec|Native|Public) // @ game+0x1d339e8
	void IncapacitateSelf(); // Function OPP.RBCheatManager.IncapacitateSelf // (Final|Exec|Native|Public) // @ game+0x1d339d4
	void HurtSelf(float amount, bool bHitReaction, int32_t hurtType); // Function OPP.RBCheatManager.HurtSelf // (Final|Exec|Native|Public) // @ game+0x1d338c4
	void HitReaction_Medium(float relativeAngle); // Function OPP.RBCheatManager.HitReaction_Medium // (Final|Exec|Native|Public) // @ game+0x1d3384c
	void HitReaction_Light(float relativeAngle); // Function OPP.RBCheatManager.HitReaction_Light // (Final|Exec|Native|Public) // @ game+0x1d337d4
	void HitReaction_Knockdown(float relativeAngle); // Function OPP.RBCheatManager.HitReaction_Knockdown // (Final|Exec|Native|Public) // @ game+0x1d3375c
	void HitReaction_Heavy(float relativeAngle); // Function OPP.RBCheatManager.HitReaction_Heavy // (Final|Exec|Native|Public) // @ game+0x1d336e4
	void HitReaction_Flinch(float relativeAngle); // Function OPP.RBCheatManager.HitReaction_Flinch // (Final|Exec|Native|Public) // @ game+0x107bac0
	void HitReaction_Dead(float relativeAngle); // Function OPP.RBCheatManager.HitReaction_Dead // (Final|Exec|Native|Public) // @ game+0x1d3366c
	void HeatmapLowpass(); // Function OPP.RBCheatManager.HeatmapLowpass // (Final|Exec|Native|Public) // @ game+0x1d33658
	void HeatmapClampMin(float Min); // Function OPP.RBCheatManager.HeatmapClampMin // (Final|Exec|Native|Public) // @ game+0x1d335d4
	void HeatmapClampMax(float Max); // Function OPP.RBCheatManager.HeatmapClampMax // (Final|Exec|Native|Public) // @ game+0x1d33550
	void GotoTargetAI(); // Function OPP.RBCheatManager.GotoTargetAI // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void GetRich(); // Function OPP.RBCheatManager.GetRich // (Final|Exec|Native|Public) // @ game+0x1d334b0
	void GetLevelSeed(); // Function OPP.RBCheatManager.GetLevelSeed // (Final|Exec|Native|Public) // @ game+0x1d333ec
	void GetGoodCharacter(int32_t Level); // Function OPP.RBCheatManager.GetGoodCharacter // (Final|Exec|Native|Public) // @ game+0x1d33270
	void FreeCamClean(); // Function OPP.RBCheatManager.FreeCamClean // (Exec|Native|Public) // @ game+0x1d33214
	void FreeCam(); // Function OPP.RBCheatManager.FreeCam // (Exec|Native|Public) // @ game+0x1d331fc
	void ForceUseClientOnlyLevels(); // Function OPP.RBCheatManager.ForceUseClientOnlyLevels // (Final|Exec|Native|Public) // @ game+0x1d331ac
	void ForceUseAllTraps(); // Function OPP.RBCheatManager.ForceUseAllTraps // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ForceUseAllRewardRooms(); // Function OPP.RBCheatManager.ForceUseAllRewardRooms // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ForceUseAllPuzzleRooms(); // Function OPP.RBCheatManager.ForceUseAllPuzzleRooms // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ForceUseAllObjectiveActors(); // Function OPP.RBCheatManager.ForceUseAllObjectiveActors // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ForceSnapToStateForAllActors(); // Function OPP.RBCheatManager.ForceSnapToStateForAllActors // (Final|Exec|Native|Public) // @ game+0x1d3315c
	void ForceShowLoadingScreen(); // Function OPP.RBCheatManager.ForceShowLoadingScreen // (Final|Exec|Native|Public) // @ game+0x1d33128
	void ForceRandomState(struct FString searchQuery, bool bStateA); // Function OPP.RBCheatManager.ForceRandomState // (Final|Exec|Native|Public) // @ game+0x1d32ff0
	void ForceRandomSoundsCycle(struct FString Filter); // Function OPP.RBCheatManager.ForceRandomSoundsCycle // (Final|Exec|Native|Public) // @ game+0x1d32f54
	void ForcePreLoginError(struct FString Error, int32_t amount); // Function OPP.RBCheatManager.ForcePreLoginError // (Final|Exec|Native|Public) // @ game+0x1d32e9c
	void ForcePawnAnimOptimLevel(int32_t forcedLevel); // Function OPP.RBCheatManager.ForcePawnAnimOptimLevel // (Final|Exec|Native|Public) // @ game+0x1d32e1c
	void ForceMovementDesynch(float desyncSize); // Function OPP.RBCheatManager.ForceMovementDesynch // (Final|Exec|Native|Public) // @ game+0x1d32d94
	void ForceJumpOverOnFakePlayer(); // Function OPP.RBCheatManager.ForceJumpOverOnFakePlayer // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ForceJoinPlayerSessionErrors(int32_t amount); // Function OPP.RBCheatManager.ForceJoinPlayerSessionErrors // (Final|Exec|Native|Public) // @ game+0x17ed724
	void ForceHudMode(enum class EHudMode hudMode); // Function OPP.RBCheatManager.ForceHudMode // (Final|Exec|Native|Public) // @ game+0x1d32d30
	void ForceHideLoadingScreen(); // Function OPP.RBCheatManager.ForceHideLoadingScreen // (Final|Exec|Native|Public) // @ game+0x1d32cf4
	void ForceGrabs(); // Function OPP.RBCheatManager.ForceGrabs // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ForceAssignPlayerCell(); // Function OPP.RBCheatManager.ForceAssignPlayerCell // (Final|Exec|Native|Public) // @ game+0x1d32ca4
	void ForceAdversityMeter(float newAdversity); // Function OPP.RBCheatManager.ForceAdversityMeter // (Final|Exec|Native|Public) // @ game+0x1d32c30
	void FlushNetDormancyActorInView(); // Function OPP.RBCheatManager.FlushNetDormancyActorInView // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void FixedCam(); // Function OPP.RBCheatManager.FixedCam // (Exec|Native|Public) // @ game+0x1d32c18
	void FailStage(); // Function OPP.RBCheatManager.FailStage // (Final|Exec|Native|Public) // @ game+0x1d32bc8
	void EquipOutfit(struct FString outfitId); // Function OPP.RBCheatManager.EquipOutfit // (Final|Exec|Native|Public) // @ game+0x1d32a38
	void EndExperiment(); // Function OPP.RBCheatManager.EndExperiment // (Final|Exec|Native|Public) // @ game+0x1d3287c
	void EnableAutoBackfill(); // Function OPP.RBCheatManager.EnableAutoBackfill // (Final|Exec|Native|Public) // @ game+0x1d3282c
	void DumpWWWStats(struct FString Filename); // Function OPP.RBCheatManager.DumpWWWStats // (Final|Exec|Native|Public) // @ game+0x161f0f8
	void DumpSoundVolumes(); // Function OPP.RBCheatManager.DumpSoundVolumes // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DumpServerLog(); // Function OPP.RBCheatManager.DumpServerLog // (Final|Exec|Native|Public) // @ game+0x1d327dc
	void DumpReplicatedLevelActors(); // Function OPP.RBCheatManager.DumpReplicatedLevelActors // (Final|Exec|Native|Public) // @ game+0x1d327c8
	void DumpPlayerMeshesDebugInfo(); // Function OPP.RBCheatManager.DumpPlayerMeshesDebugInfo // (Final|Exec|Native|Public) // @ game+0x1d327b4
	void DumpPersistentLevelActors(); // Function OPP.RBCheatManager.DumpPersistentLevelActors // (Final|Exec|Native|Public) // @ game+0x1d327a0
	void DumpNavMeshContinuousRequests(); // Function OPP.RBCheatManager.DumpNavMeshContinuousRequests // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DumpGameEventLog(); // Function OPP.RBCheatManager.DumpGameEventLog // (Final|Exec|Native|Public) // @ game+0x1d3278c
	void DumpDebugInfoInViewOnServer(); // Function OPP.RBCheatManager.DumpDebugInfoInViewOnServer // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DumpDebugInfoInViewOnClient(); // Function OPP.RBCheatManager.DumpDebugInfoInViewOnClient // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DrawLocXYZ(float X, float Y, float Z); // Function OPP.RBCheatManager.DrawLocXYZ // (Final|Exec|Native|Public) // @ game+0x1d326a0
	void DownSelf(); // Function OPP.RBCheatManager.DownSelf // (Final|Exec|Native|Public) // @ game+0x1d3263c
	void DisplayMenuManagerDebugInfo(); // Function OPP.RBCheatManager.DisplayMenuManagerDebugInfo // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DisconnectOnlineModule(struct FString Name); // Function OPP.RBCheatManager.DisconnectOnlineModule // (Final|Exec|Native|Public) // @ game+0x1d325bc
	void DisableStageEnding(); // Function OPP.RBCheatManager.DisableStageEnding // (Final|Exec|Native|Public) // @ game+0x1d3256c
	void DisableSkelCompTick(struct FString Filter); // Function OPP.RBCheatManager.DisableSkelCompTick // (Final|Exec|Native|Public) // @ game+0x1d324dc
	void DisableAutoBackfill(); // Function OPP.RBCheatManager.DisableAutoBackfill // (Final|Exec|Native|Public) // @ game+0x1d3248c
	void DeleteProfile(); // Function OPP.RBCheatManager.DeleteProfile // (Final|Exec|Native|Public) // @ game+0x1d32478
	void DelayedBugIt(float delayInSeconds, struct FString Description); // Function OPP.RBCheatManager.DelayedBugIt // (Final|Exec|Native|Public) // @ game+0x1d323bc
	void DebugVoiceChat(); // Function OPP.RBCheatManager.DebugVoiceChat // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugVO(); // Function OPP.RBCheatManager.DebugVO // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugVariators(); // Function OPP.RBCheatManager.DebugVariators // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugUINoise(); // Function OPP.RBCheatManager.DebugUINoise // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugUI(); // Function OPP.RBCheatManager.DebugUI // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugTraps(bool bShowDisabled); // Function OPP.RBCheatManager.DebugTraps // (Final|Exec|Native|Public) // @ game+0x12e20c0
	void DebugTq(); // Function OPP.RBCheatManager.DebugTq // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugThrow(); // Function OPP.RBCheatManager.DebugThrow // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugTargetAI(); // Function OPP.RBCheatManager.DebugTargetAI // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugTalkWheel(); // Function OPP.RBCheatManager.DebugTalkWheel // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugSwitchMatch(); // Function OPP.RBCheatManager.DebugSwitchMatch // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugSubtitles(); // Function OPP.RBCheatManager.DebugSubtitles // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugSpecialRooms(); // Function OPP.RBCheatManager.DebugSpecialRooms // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugSpatialReasoning(); // Function OPP.RBCheatManager.DebugSpatialReasoning // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugSoundEnvironmentOnPlayer(struct FString Filter); // Function OPP.RBCheatManager.DebugSoundEnvironmentOnPlayer // (Final|Exec|Native|Public) // @ game+0x161f0f8
	void DebugSoundEnvironmentForCloneGroups(struct FString Filter); // Function OPP.RBCheatManager.DebugSoundEnvironmentForCloneGroups // (Final|Exec|Native|Public) // @ game+0x161f0f8
	void DebugSoundEnvironment(struct FString Filter); // Function OPP.RBCheatManager.DebugSoundEnvironment // (Final|Exec|Native|Public) // @ game+0x161f0f8
	void DebugSimultaneousJumpForward(); // Function OPP.RBCheatManager.DebugSimultaneousJumpForward // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugSimultaneousInteraction(); // Function OPP.RBCheatManager.DebugSimultaneousInteraction // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugScheduledSpecialMoveLate(float Time); // Function OPP.RBCheatManager.DebugScheduledSpecialMoveLate // (Final|Exec|Native|Public) // @ game+0x1d32350
	void DebugScheduledProperties(); // Function OPP.RBCheatManager.DebugScheduledProperties // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugRTPC(struct FString Filter); // Function OPP.RBCheatManager.DebugRTPC // (Final|Exec|Native|Public) // @ game+0x161f0f8
	void DebugRooms(); // Function OPP.RBCheatManager.DebugRooms // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugRoomPathing(); // Function OPP.RBCheatManager.DebugRoomPathing // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugRepulsion(); // Function OPP.RBCheatManager.DebugRepulsion // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugRB(); // Function OPP.RBCheatManager.DebugRB // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugRandomSounds(); // Function OPP.RBCheatManager.DebugRandomSounds // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugProximity(); // Function OPP.RBCheatManager.DebugProximity // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugPrevPage(); // Function OPP.RBCheatManager.DebugPrevPage // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugPlayerStats(); // Function OPP.RBCheatManager.DebugPlayerStats // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugPlayerCustomization(); // Function OPP.RBCheatManager.DebugPlayerCustomization // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugPhysics(); // Function OPP.RBCheatManager.DebugPhysics // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugPerception(); // Function OPP.RBCheatManager.DebugPerception // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugPasscodeDecals(); // Function OPP.RBCheatManager.DebugPasscodeDecals // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugObjectives(); // Function OPP.RBCheatManager.DebugObjectives // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugNPCRandomization(); // Function OPP.RBCheatManager.DebugNPCRandomization // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugNPCLocomotion(); // Function OPP.RBCheatManager.DebugNPCLocomotion // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugNPCAttacks(); // Function OPP.RBCheatManager.DebugNPCAttacks // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugNextPage(); // Function OPP.RBCheatManager.DebugNextPage // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugMusic(); // Function OPP.RBCheatManager.DebugMusic // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugMovementNetwork(); // Function OPP.RBCheatManager.DebugMovementNetwork // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugMovementDesync(); // Function OPP.RBCheatManager.DebugMovementDesync // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugMovementAlwaysDesync_Server(); // Function OPP.RBCheatManager.DebugMovementAlwaysDesync_Server // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugLowPawnAnimOptimLevel(); // Function OPP.RBCheatManager.DebugLowPawnAnimOptimLevel // (Final|Exec|Native|Public) // @ game+0x1d3233c
	void DebugJumpScare(); // Function OPP.RBCheatManager.DebugJumpScare // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugItemSpawning(); // Function OPP.RBCheatManager.DebugItemSpawning // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugInvestigateInteraction(); // Function OPP.RBCheatManager.DebugInvestigateInteraction // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugInventory(); // Function OPP.RBCheatManager.DebugInventory // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugInteractionResync_Local(); // Function OPP.RBCheatManager.DebugInteractionResync_Local // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugInteractionDesync_Server(); // Function OPP.RBCheatManager.DebugInteractionDesync_Server // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugInteractionDesync_Local(); // Function OPP.RBCheatManager.DebugInteractionDesync_Local // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugInteraction(); // Function OPP.RBCheatManager.DebugInteraction // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugHidingSpots(); // Function OPP.RBCheatManager.DebugHidingSpots // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugHidespots(); // Function OPP.RBCheatManager.DebugHidespots // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugHidespotPeek(); // Function OPP.RBCheatManager.DebugHidespotPeek // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugGameplayRandom(); // Function OPP.RBCheatManager.DebugGameplayRandom // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugGameplayAttributes(); // Function OPP.RBCheatManager.DebugGameplayAttributes // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugGameplay(); // Function OPP.RBCheatManager.DebugGameplay // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugGameMode(); // Function OPP.RBCheatManager.DebugGameMode // (Final|Exec|Native|Public) // @ game+0x1d322ec
	void DebugFootsteps(bool bShowGrid); // Function OPP.RBCheatManager.DebugFootsteps // (Final|Exec|Native|Public) // @ game+0x12e20c0
	void DebugFirstPerson(); // Function OPP.RBCheatManager.DebugFirstPerson // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugFatalitiesForceIndex(int32_t Index); // Function OPP.RBCheatManager.DebugFatalitiesForceIndex // (Final|Exec|Native|Public) // @ game+0x17ed724
	void DebugFatalities(int32_t Option); // Function OPP.RBCheatManager.DebugFatalities // (Final|Exec|Native|Public) // @ game+0x17ed724
	void DebugFailedAdjustment(); // Function OPP.RBCheatManager.DebugFailedAdjustment // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugEyesClosed(); // Function OPP.RBCheatManager.DebugEyesClosed // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugEvalCorridor(); // Function OPP.RBCheatManager.DebugEvalCorridor // (Final|Exec|Native|Public) // @ game+0x1d3229c
	void DebugEncroachment(); // Function OPP.RBCheatManager.DebugEncroachment // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugDoors(); // Function OPP.RBCheatManager.DebugDoors // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugDoorRepulsion(bool bSlam); // Function OPP.RBCheatManager.DebugDoorRepulsion // (Final|Exec|Native|Public) // @ game+0x12e20c0
	void DebugDisplayMessages(); // Function OPP.RBCheatManager.DebugDisplayMessages // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugDarkness(); // Function OPP.RBCheatManager.DebugDarkness // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugCoopMove(bool bExceptLocal); // Function OPP.RBCheatManager.DebugCoopMove // (Final|Exec|Native|Public) // @ game+0x12e20c0
	void DebugClearance(bool bForceShowValid); // Function OPP.RBCheatManager.DebugClearance // (Final|Exec|Native|Public) // @ game+0x12e20c0
	void DebugChunkInstall(); // Function OPP.RBCheatManager.DebugChunkInstall // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugChase(); // Function OPP.RBCheatManager.DebugChase // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugBlockables(); // Function OPP.RBCheatManager.DebugBlockables // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugBleedOut(); // Function OPP.RBCheatManager.DebugBleedOut // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugBackgroundCharacters(); // Function OPP.RBCheatManager.DebugBackgroundCharacters // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugAudioEvents(int32_t playingIDFilter); // Function OPP.RBCheatManager.DebugAudioEvents // (Final|Exec|Native|Public) // @ game+0x17ed724
	void DebugAnimUsage(); // Function OPP.RBCheatManager.DebugAnimUsage // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugAlertedStance(int32_t Option); // Function OPP.RBCheatManager.DebugAlertedStance // (Final|Exec|Native|Public) // @ game+0x17ed724
	void DebugAIPointSelection(); // Function OPP.RBCheatManager.DebugAIPointSelection // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugAI(); // Function OPP.RBCheatManager.DebugAI // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugActorInView(); // Function OPP.RBCheatManager.DebugActorInView // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void DebugActiveSkills(); // Function OPP.RBCheatManager.DebugActiveSkills // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void CyclePlayerDebug(); // Function OPP.RBCheatManager.CyclePlayerDebug // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void CycleDebugPerceptionDarkness(); // Function OPP.RBCheatManager.CycleDebugPerceptionDarkness // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void CycleCollisionDebug(); // Function OPP.RBCheatManager.CycleCollisionDebug // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void CycleAIDebug(); // Function OPP.RBCheatManager.CycleAIDebug // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void Crash(); // Function OPP.RBCheatManager.Crash // (Final|Exec|Native|Public) // @ game+0x1d32288
	void CopyCameraLocation(); // Function OPP.RBCheatManager.CopyCameraLocation // (Final|Exec|Native|Public) // @ game+0x1d32274
	void CompleteTasks(); // Function OPP.RBCheatManager.CompleteTasks // (Final|Exec|Native|Public) // @ game+0x1d32224
	void CompleteObjectiveCoordinator(struct FString Name); // Function OPP.RBCheatManager.CompleteObjectiveCoordinator // (Final|Exec|Native|Public) // @ game+0x1d32124
	void CompleteMainObjectivesToIndex(int32_t Index); // Function OPP.RBCheatManager.CompleteMainObjectivesToIndex // (Final|Exec|Native|Public) // @ game+0x1d320a4
	void CompleteMainObjectivesTo(struct FString Name); // Function OPP.RBCheatManager.CompleteMainObjectivesTo // (Final|Exec|Native|Public) // @ game+0x1d32008
	void CompleteMainObjective(); // Function OPP.RBCheatManager.CompleteMainObjective // (Final|Exec|Native|Public) // @ game+0x1d31fe0
	void CompleteCurrentStage(); // Function OPP.RBCheatManager.CompleteCurrentStage // (Final|Exec|Native|Public) // @ game+0x1d31fb8
	void CollisionReport(); // Function OPP.RBCheatManager.CollisionReport // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void ClearVisitedNPCs(); // Function OPP.RBCheatManager.ClearVisitedNPCs // (Final|Exec|Native|Public) // @ game+0x1d31f88
	void ClearTasks(); // Function OPP.RBCheatManager.ClearTasks // (Final|Exec|Native|Public) // @ game+0x1d31f74
	void ClearShowAll(); // Function OPP.RBCheatManager.ClearShowAll // (Final|Exec|Native|Public) // @ game+0x1d31f60
	void ClearRandomState(struct FString searchQuery); // Function OPP.RBCheatManager.ClearRandomState // (Final|Exec|Native|Public) // @ game+0x1d31e80
	void ClearPsychosis(); // Function OPP.RBCheatManager.ClearPsychosis // (Final|Exec|Native|Public) // @ game+0x1d31e08
	void ClearMenuTutorials(); // Function OPP.RBCheatManager.ClearMenuTutorials // (Final|Exec|Native|Public) // @ game+0x1d31dc8
	void ClearItemsDisplayedInMenu(); // Function OPP.RBCheatManager.ClearItemsDisplayedInMenu // (Final|Exec|Native|Public) // @ game+0x1d31d88
	void ClearHeatmap(); // Function OPP.RBCheatManager.ClearHeatmap // (Final|Exec|Native|Public) // @ game+0x1d31d74
	void ClearForcedLevelSeed(); // Function OPP.RBCheatManager.ClearForcedLevelSeed // (Final|Exec|Native|Public) // @ game+0x1d31d60
	void ClearDebugActorInViewFilters(); // Function OPP.RBCheatManager.ClearDebugActorInViewFilters // (Final|Exec|Native|Public) // @ game+0x1d31d44
	void CheatCameraLocation(); // Function OPP.RBCheatManager.CheatCameraLocation // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void BugIt_TextEnteredCallback(struct FString Text); // Function OPP.RBCheatManager.BugIt_TextEnteredCallback // (Final|Native|Public) // @ game+0x161f0f8
	void BugIt_Input(); // Function OPP.RBCheatManager.BugIt_Input // (Final|Native|Public) // @ game+0x1d31cb0
	void BigLag(); // Function OPP.RBCheatManager.BigLag // (Final|Exec|Native|Public) // @ game+0x1d31c1c
	void BadFPS(); // Function OPP.RBCheatManager.BadFPS // (Final|Exec|Native|Public) // @ game+0x1d31bfc
	void Assert(); // Function OPP.RBCheatManager.Assert // (Final|Exec|Native|Public) // @ game+0x1521dbc
	void AILog(); // Function OPP.RBCheatManager.AILog // (Final|Exec|Native|Public) // @ game+0x1d30a5c
	void AddXp(int32_t amount); // Function OPP.RBCheatManager.AddXp // (Final|Exec|Native|Public) // @ game+0x1d31684
	void AddVariator(struct FString Name); // Function OPP.RBCheatManager.AddVariator // (Final|Exec|Native|Public) // @ game+0x1d315ac
	void AddTQ(int32_t amount); // Function OPP.RBCheatManager.AddTQ // (Final|Exec|Native|Public) // @ game+0x1d31414
	void AddTaskByID(struct FName& taskId); // Function OPP.RBCheatManager.AddTaskByID // (Final|Exec|Native|Public|HasOutParms) // @ game+0x1d31534
	void AddTask(struct FString taskTitle); // Function OPP.RBCheatManager.AddTask // (Final|Exec|Native|Public) // @ game+0x1d314b4
	void AddStageXp(int32_t amount); // Function OPP.RBCheatManager.AddStageXp // (Final|Exec|Native|Public) // @ game+0x1d31374
	void AddPsychosis(int32_t amount, bool bGas); // Function OPP.RBCheatManager.AddPsychosis // (Final|Exec|Native|Public) // @ game+0x1d312b0
	void AddOnlineItemWithID(struct FName& upgradeOnlineItemId, bool bIsPersistentItem); // Function OPP.RBCheatManager.AddOnlineItemWithID // (Final|Exec|Native|Public|HasOutParms) // @ game+0x1d311e4
	void AddMurkoffPoints(int32_t amount); // Function OPP.RBCheatManager.AddMurkoffPoints // (Final|Exec|Native|Public) // @ game+0x1d31144
	void AddMurkoffDollars(int32_t amount); // Function OPP.RBCheatManager.AddMurkoffDollars // (Final|Exec|Native|Public) // @ game+0x1d310a4
	void AddMultipleItems(struct FString ItemName, int32_t numberOfCopy); // Function OPP.RBCheatManager.AddMultipleItems // (Final|Exec|Native|Public) // @ game+0x1d30fb8
	void AddItem(struct FString ItemName); // Function OPP.RBCheatManager.AddItem // (Final|Exec|Native|Public) // @ game+0x1d30f28
	void AddDebugActorInViewFilter(struct FString Filter); // Function OPP.RBCheatManager.AddDebugActorInViewFilter // (Final|Exec|Native|Public) // @ game+0x1d30e44
	void AddCurrency(enum class ECurrencyType currencyType, int32_t amount); // Function OPP.RBCheatManager.AddCurrency // (Final|Exec|Native|Public) // @ game+0x1d30d50
	void ActivateAllMines(); // Function OPP.RBCheatManager.ActivateAllMines // (Final|Exec|Native|Public) // @ game+0x1d30cd8
	void AcquireRewardPoolItem(struct FName& RewardPoolId); // Function OPP.RBCheatManager.AcquireRewardPoolItem // (Final|Exec|Native|Public|HasOutParms) // @ game+0x1d30c1c
	void AcquireFullRewardPool(struct FName& RewardPoolId); // Function OPP.RBCheatManager.AcquireFullRewardPool // (Final|Exec|Native|Public|HasOutParms) // @ game+0x1d30b60
	void AcquireAllDocuments(); // Function OPP.RBCheatManager.AcquireAllDocuments // (Final|Exec|Native|Public) // @ game+0x1d30b10
	void AcquireAllCustomization(); // Function OPP.RBCheatManager.AcquireAllCustomization // (Final|Exec|Native|Public) // @ game+0x1d30ac0
	void AcquireAllCellCustomization(); // Function OPP.RBCheatManager.AcquireAllCellCustomization // (Final|Exec|Native|Public) // @ game+0x1d30a70
};

// Class OPP.RBChunkInstallManager
// Size: 0x40 (Inherited: 0x28)
struct URBChunkInstallManager : UObject {
	char pad_28[0x18]; // 0x28(0x18)

	bool GetChunkInstallationStatus(float& Percent); // Function OPP.RBChunkInstallManager.GetChunkInstallationStatus // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d3a278
};

// Class OPP.RBCinematicZoneComponent
// Size: 0x4d0 (Inherited: 0x4c0)
struct URBCinematicZoneComponent : UBoxComponent {
	bool bStartsEnabled; // 0x4b8(0x01)
	bool bIgnoreLocalPlayer; // 0x4b9(0x01)
	bool bHideNPCs; // 0x4ba(0x01)
	bool bEnabled; // 0x4bb(0x01)
	struct TArray<struct FHiddenActorInfo> HiddenActors; // 0x4c0(0x10)

	void SetEnabled(bool Enabled); // Function OPP.RBCinematicZoneComponent.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1d3ae64
	void OnPlayerCustomizationChanged(struct ARBPlayer* RBPlayer); // Function OPP.RBCinematicZoneComponent.OnPlayerCustomizationChanged // (Final|Native|Private) // @ game+0x1d3ad1c
	void OnActiveSkillActorChanged(struct ARBActiveSkill* activeSkillActor); // Function OPP.RBCinematicZoneComponent.OnActiveSkillActorChanged // (Final|Native|Private) // @ game+0x1d3ac6c
};

// Class OPP.RBClientOnlyActor
// Size: 0x248 (Inherited: 0x248)
struct ARBClientOnlyActor : AActor {
};

// Class OPP.RBClueable
// Size: 0x28 (Inherited: 0x28)
struct URBClueable : UInterface {

	void SetClue(struct FClueData& ClueData); // Function OPP.RBClueable.SetClue // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1d3addc
	struct FClueData GetClue(); // Function OPP.RBClueable.GetClue // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d3a314
	struct URBPlayerInvestigationZoneComponent* GetAssociatedInvestigationComponent(); // Function OPP.RBClueable.GetAssociatedInvestigationComponent // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d3a250
};

// Class OPP.RBCollectibleDisplay
// Size: 0x248 (Inherited: 0x248)
struct ARBCollectibleDisplay : AActor {
};

// Class OPP.RBCollectibleDocumentsConfig
// Size: 0x80 (Inherited: 0x28)
struct URBCollectibleDocumentsConfig : UObject {
	struct UDataTable* DocumentsDataTable; // 0x28(0x08)
	struct UDataTable* GroupsDataTable; // 0x30(0x08)
	struct FText SelfPickupText; // 0x38(0x18)
	struct FText SelfPickupAlreadyAcquiredText; // 0x50(0x18)
	struct FText PickupText; // 0x68(0x18)

	struct TArray<struct FRBCollectibleDocumentGroupRow> GetDocumentGroups(); // Function OPP.RBCollectibleDocumentsConfig.GetDocumentGroups // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d3a5e4
	struct TArray<struct FRBCollectibleDocumentDefinitionRow> GetDocumentGroupDocuments(struct FName& ID); // Function OPP.RBCollectibleDocumentsConfig.GetDocumentGroupDocuments // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d3a4e8
	struct FRBCollectibleDocumentGroupRow GetDocumentGroup(struct FName& ID); // Function OPP.RBCollectibleDocumentsConfig.GetDocumentGroup // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d3a3e4
	struct FRBCollectibleDocumentDefinitionRow GetCollectibleDocumentDefinition(struct FName& ID); // Function OPP.RBCollectibleDocumentsConfig.GetCollectibleDocumentDefinition // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d3a344
};

// Class OPP.RBCollectibleDocumentPickup
// Size: 0x9f0 (Inherited: 0x9d0)
struct ARBCollectibleDocumentPickup : ARBPickup {
	struct UAkAudioEvent* PickedUpSoundEvent; // 0x9d0(0x08)
	struct FName DocumentId; // 0x9d8(0x08)
	struct TArray<struct FProfileId> ProfileIdsInteracted; // 0x9e0(0x10)

	void OnRep_ProfileIdsInteracted(); // Function OPP.RBCollectibleDocumentPickup.OnRep_ProfileIdsInteracted // (Final|Native|Private) // @ game+0x13b1f58
	void Multicast_OnDocumentPickedUp(struct ARBPlayer* RBPlayer, bool bFirstInteraction, bool bWasAcquired); // Function OPP.RBCollectibleDocumentPickup.Multicast_OnDocumentPickedUp // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d3ab6c
	struct FName GetDocumentId(); // Function OPP.RBCollectibleDocumentPickup.GetDocumentId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d3a684
};

// Class OPP.RBRandomManager
// Size: 0x350 (Inherited: 0x248)
struct ARBRandomManager : AActor {
	bool bAutoRandomize; // 0x248(0x01)
	enum class ERandomManagerExecutionOrder ExecutionOrder; // 0x249(0x01)
	enum class ERandomManagerPopulatingOrder WorldPopulatingStep; // 0x24a(0x01)
	char pad_24B[0x5]; // 0x24b(0x05)
	struct TArray<struct FRandomDoorLot> DoorLots; // 0x250(0x10)
	struct TArray<struct FRandomizationGroup> RandomGroups; // 0x260(0x10)
	struct TArray<struct FRandomizationLot> RandomLots; // 0x270(0x10)
	struct TArray<struct FConditionalScenarioSetup> RandomConditionalSetups; // 0x280(0x10)
	struct TArray<struct FRandomAISetup> AISetups; // 0x290(0x10)
	struct FSoloPlayLot SoloPlayLot; // 0x2a0(0x10)
	struct TArray<struct TSoftObjectPtr<ARBRoomGroup>> RestrictedSections; // 0x2b0(0x10)
	struct USceneComponent* RandomManagerRoot; // 0x2c0(0x08)
	struct FMulticastInlineDelegate OnRandomizationCompleted; // 0x2c8(0x10)
	char pad_2D8[0x58]; // 0x2d8(0x58)
	struct TArray<struct FPendingRandomState> PendingRandomStates; // 0x330(0x10)
	char pad_340[0x10]; // 0x340(0x10)

	void BP_Randomize(); // Function OPP.RBRandomManager.BP_Randomize // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1def154
	void BP_ForceRandomization(); // Function OPP.RBRandomManager.BP_ForceRandomization // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1def084
};

// Class OPP.RBConditionalRandomManager
// Size: 0x390 (Inherited: 0x350)
struct ARBConditionalRandomManager : ARBRandomManager {
	struct TSoftObjectPtr<ARBRandomManager> ExecuteAfterRandomManager; // 0x350(0x28)
	struct TArray<struct TSoftObjectPtr<AActor>> ConditionalActors; // 0x378(0x10)
	enum class ERandomStateSetup ConditionalState; // 0x388(0x01)
	char pad_389[0x7]; // 0x389(0x07)

	void OnRandomManagerRandomizationDone(); // Function OPP.RBConditionalRandomManager.OnRandomManagerRandomizationDone // (Final|Native|Public) // @ game+0x1d3ad9c
};

// Class OPP.RBPickupVisualizerHelper
// Size: 0x250 (Inherited: 0x248)
struct ARBPickupVisualizerHelper : AActor {
	struct UStaticMeshComponent* InWorldMeshComponent; // 0x248(0x08)
};

// Class OPP.RBContainerSpawnLocationComponent
// Size: 0x2e0 (Inherited: 0x220)
struct URBContainerSpawnLocationComponent : USceneComponent {
	struct TArray<enum class EItemCategory> SpecificItemCategories; // 0x220(0x10)
	struct TArray<enum class EItemType> SpecificItemTypes; // 0x230(0x10)
	struct TArray<struct ARBPickup*> SpecificItems; // 0x240(0x10)
	bool bUseItemSpawnPointOffset; // 0x250(0x01)
	enum class EContainerSpawnLocationPriority Priority; // 0x251(0x01)
	bool bCanSwapInPlace; // 0x252(0x01)
	bool bNeedItemMatchForSwap; // 0x253(0x01)
	char pad_254[0x4]; // 0x254(0x04)
	struct FCustomContainerPickupAnimationSettings CustomPickupAnimationSettings; // 0x258(0x38)
	struct USceneComponent* PickupAnimationAnchor; // 0x290(0x08)
	struct FMulticastInlineDelegate OnPickupInteractionStartedCallback; // 0x298(0x10)
	struct FMulticastInlineDelegate OnPickupInteractionPlayAnimCallback; // 0x2a8(0x10)
	struct FMulticastInlineDelegate OnPickupInteractionDoActionCallback; // 0x2b8(0x10)
	struct FMulticastInlineDelegate OnPickupInteractionCompletedCallback; // 0x2c8(0x10)
	char pad_2D8[0x8]; // 0x2d8(0x08)

	void Editor_CreateAllItemDisplayMeshes(); // Function OPP.RBContainerSpawnLocationComponent.Editor_CreateAllItemDisplayMeshes // (Final|Native|Public) // @ game+0x1521dbc
};

// Class OPP.RBContainerInteractibleZoneComponent
// Size: 0x600 (Inherited: 0x600)
struct URBContainerInteractibleZoneComponent : URBInteractibleComponent {
	struct ARBContainer* OwnerContainer; // 0x5f8(0x08)
};

// Class OPP.RBTriggerable
// Size: 0x420 (Inherited: 0x248)
struct ARBTriggerable : AActor {
	char pad_248[0x68]; // 0x248(0x68)
	struct TArray<struct FTriggerableSetting> OperatablesToComplete; // 0x2b0(0x10)
	char LinkedLedgeMarkerActivation; // 0x2c0(0x01)
	char pad_2C1[0x7]; // 0x2c1(0x07)
	struct TArray<struct TSoftObjectPtr<ARBLedgeMarker>> LinkedLedgeMarkers; // 0x2c8(0x10)
	char LinkedCrouchUnderMarkerActivation; // 0x2d8(0x01)
	char pad_2D9[0x7]; // 0x2d9(0x07)
	struct TArray<struct ARBCrouchUnderMarker*> LinkedCrouchUnderMarkers; // 0x2e0(0x10)
	struct TArray<struct FTriggerableSettingGroup> GroupedOperatablesToComplete; // 0x2f0(0x10)
	bool bAlwaysTickable; // 0x300(0x01)
	bool bTriggerableOnlyOnce; // 0x301(0x01)
	bool bHasTriggerSequence; // 0x302(0x01)
	bool bHasUntriggerSequence; // 0x303(0x01)
	char pad_304[0x4]; // 0x304(0x04)
	struct UObject* OverrideOperatable; // 0x308(0x08)
	struct FInteractionSoundEvent OnTriggeredSoundEvent; // 0x310(0x20)
	struct FInteractionSoundEvent OnUntriggeredSoundEvent; // 0x330(0x20)
	struct FInteractionSoundEvent OnProgressUpStartedSoundEvent; // 0x350(0x20)
	struct FInteractionSoundEvent OnProgressUpStoppedSoundEvent; // 0x370(0x20)
	struct FInteractionSoundEvent OnProgressDownStartedSoundEvent; // 0x390(0x20)
	struct FInteractionSoundEvent OnProgressDownStoppedSoundEvent; // 0x3b0(0x20)
	struct FMulticastInlineDelegate OnTriggerEvent; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnOperatableCompletionStateChanged; // 0x3e0(0x10)
	bool Server_bTriggered; // 0x3f0(0x01)
	bool Server_bTriggered_Replicated; // 0x3f1(0x01)
	bool Client_bTriggered; // 0x3f2(0x01)
	char pad_3F3[0x5]; // 0x3f3(0x05)
	struct TArray<struct UObject*> OperatablesDone; // 0x3f8(0x10)
	char pad_408[0x18]; // 0x408(0x18)

	void SnapToState(); // Function OPP.RBTriggerable.SnapToState // (Final|Native|Public) // @ game+0x1e2014c
	bool ShouldBPTick(); // Function OPP.RBTriggerable.ShouldBPTick // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1e20124
	void RebuildGroupedOperatable(); // Function OPP.RBTriggerable.RebuildGroupedOperatable // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1febc
	void OnRep_TriggeredCallback(); // Function OPP.RBTriggerable.OnRep_TriggeredCallback // (Final|Native|Private) // @ game+0x1e1fe2c
	void OnRep_Triggered(); // Function OPP.RBTriggerable.OnRep_Triggered // (Final|Native|Private) // @ game+0x1e1fe18
	void Multicast_StartUntriggerSequence(); // Function OPP.RBTriggerable.Multicast_StartUntriggerSequence // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d21684
	void Multicast_StartTriggerSequence(); // Function OPP.RBTriggerable.Multicast_StartTriggerSequence // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1e1f664
	void Event_SnapToState(); // Function OPP.RBTriggerable.Event_SnapToState // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnUntriggerSequenceStarted(); // Function OPP.RBTriggerable.Event_OnUntriggerSequenceStarted // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnUntriggered(); // Function OPP.RBTriggerable.Event_OnUntriggered // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnTriggerSequenceStarted(); // Function OPP.RBTriggerable.Event_OnTriggerSequenceStarted // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnTriggered(); // Function OPP.RBTriggerable.Event_OnTriggered // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnOperatableUncompleted(struct UObject* operatable); // Function OPP.RBTriggerable.Event_OnOperatableUncompleted // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnOperatableProgressChanged(struct UObject* operatable, float oldProgress, float currentProgress, bool bSnap); // Function OPP.RBTriggerable.Event_OnOperatableProgressChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnOperatableCompleted(struct UObject* operatable); // Function OPP.RBTriggerable.Event_OnOperatableCompleted // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_SnapToTriggeredState(bool triggered); // Function OPP.RBTriggerable.BP_SnapToTriggeredState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e1eca8
	void BP_SetStartsTriggered(bool bTriggered); // Function OPP.RBTriggerable.BP_SetStartsTriggered // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1ec28
	void BP_SetShowInDebug(bool bShowInDebugValue); // Function OPP.RBTriggerable.BP_SetShowInDebug // (Final|Native|Protected|BlueprintCallable) // @ game+0x1e1eba8
	void BP_SetOverrideOperatable(struct ARBOperatable* operatable); // Function OPP.RBTriggerable.BP_SetOverrideOperatable // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1eb28
	void BP_RemoveOperatableToComplete(struct UObject* operatable); // Function OPP.RBTriggerable.BP_RemoveOperatableToComplete // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1eaa8
	void BP_RefreshLinkedLedges(); // Function OPP.RBTriggerable.BP_RefreshLinkedLedges // (Final|Native|Protected|BlueprintCallable) // @ game+0x1e1ea94
	void BP_OnUntriggerSequenceCompleted(); // Function OPP.RBTriggerable.BP_OnUntriggerSequenceCompleted // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e1ea80
	void BP_OnTriggerSequenceCompleted(); // Function OPP.RBTriggerable.BP_OnTriggerSequenceCompleted // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1ea6c
	void BP_ForceUntrigger(); // Function OPP.RBTriggerable.BP_ForceUntrigger // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e1ea58
	void BP_ForceTrigger(); // Function OPP.RBTriggerable.BP_ForceTrigger // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e1ea44
	void BP_ForceState(bool bTrigger); // Function OPP.RBTriggerable.BP_ForceState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e1e9bc
	bool BP_AreAllOperatablesCompleted(); // Function OPP.RBTriggerable.BP_AreAllOperatablesCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1e924
	void BP_AddOperatableToComplete(struct FTriggerableSetting& triggerSetting); // Function OPP.RBTriggerable.BP_AddOperatableToComplete // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1e1e83c
};

// Class OPP.RBContainerTrapTriggerable
// Size: 0x420 (Inherited: 0x420)
struct ARBContainerTrapTriggerable : ARBTriggerable {
};

// Class OPP.RBSoundComponent
// Size: 0x580 (Inherited: 0x3a0)
struct URBSoundComponent : UAkComponent {
	bool bAutoPost; // 0x398(0x01)
	bool bFixedObstruction; // 0x399(0x01)
	float FixedObstruction; // 0x39c(0x04)
	struct TArray<struct TSoftObjectPtr<AActor>> ActorsIgnoredByObstruction; // 0x3a0(0x10)
	bool bIgnoreAttachParentActorForObstruction; // 0x3b0(0x01)
	bool bFixedOcclusion; // 0x3b1(0x01)
	float FixedOcclusion; // 0x3b4(0x04)
	float MaxPathingDistance; // 0x3b8(0x04)
	int32_t MaxConnectorJump; // 0x3bc(0x04)
	bool bAllowVirtualization; // 0x3c0(0x01)
	bool bMovable; // 0x3c1(0x01)
	bool bForceDynamicUpdate; // 0x3c2(0x01)
	bool Experimental_IgnoreSoundVolumeOcclusion; // 0x3c3(0x01)
	bool bStopLoopingSoundWhenDestroyed; // 0x3c4(0x01)
	bool bEnableRangeOptimization; // 0x3c5(0x01)
	bool bForceGroupMaster; // 0x3c6(0x01)
	struct FName CloneGroupName; // 0x3c8(0x08)
	bool bAutoClone; // 0x3d0(0x01)
	float AutoCloneMaxDistance; // 0x3d4(0x04)
	bool bAllowCloneToAnotherVolume; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)
	struct UAkAudioEvent* LoopStopAudioEvent; // 0x3e0(0x08)
	bool bDualSided; // 0x3e8(0x01)
	char pad_3E9[0x3]; // 0x3e9(0x03)
	float DynamicCreationTime; // 0x3ec(0x04)
	struct URBSoundConnectorComponent* BoundDualSidedConnector; // 0x3f0(0x08)
	char pad_3F8[0x10]; // 0x3f8(0x10)
	struct TArray<struct FSoundVolumeData> SoundVolumeData; // 0x408(0x10)
	char pad_418[0x48]; // 0x418(0x48)
	struct FVirtualizationNode CachedVirtualizationNode; // 0x460(0x18)
	struct FVirtualizationNode CachedBackupVirtNode; // 0x478(0x18)
	char pad_490[0x8]; // 0x490(0x08)
	enum class EEmitterUpdateDetail UpdateDetail; // 0x498(0x01)
	char pad_499[0x7]; // 0x499(0x07)
	struct TArray<struct FAuxBusInfo> ReverbBusInfos; // 0x4a0(0x10)
	bool bEnableReverb; // 0x4b0(0x01)
	bool bInMultiPositionGroup; // 0x4b1(0x01)
	bool bGroupMaster; // 0x4b2(0x01)
	char pad_4B3[0x5]; // 0x4b3(0x05)
	struct FName GroupEventName; // 0x4b8(0x08)
	struct URBSoundComponent* MasterComponent; // 0x4c0(0x08)
	struct URBSoundComponent* SlaveComponent; // 0x4c8(0x08)
	char pad_4D0[0xb0]; // 0x4d0(0xb0)

	void StopLoopingSoundFromID(int32_t LoopingSoundID); // Function OPP.RBSoundComponent.StopLoopingSoundFromID // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x1e0b234
	int32_t StopLoopingSound(struct UAkAudioEvent* LoopStartEvent, struct UAkAudioEvent* LoopStopEvent); // Function OPP.RBSoundComponent.StopLoopingSound // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x1e0b170
	int32_t StopAssociatedAkEvent(); // Function OPP.RBSoundComponent.StopAssociatedAkEvent // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x1e0b14c
	void StopAllLoopingSounds(); // Function OPP.RBSoundComponent.StopAllLoopingSounds // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x1e0b138
	void SetBillboardVisibility(bool bBillboardVisibleValue); // Function OPP.RBSoundComponent.SetBillboardVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x12e20c0
	int32_t PlayLoopingSound(struct UAkAudioEvent* LoopStartEvent, struct UAkAudioEvent* LoopStopEvent, bool bAllowMultipleIdenticalLoops); // Function OPP.RBSoundComponent.PlayLoopingSound // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x1e0abf0
	bool IsPlayingLoopingSound(struct UAkAudioEvent* LoopStartEvent, struct UAkAudioEvent* LoopStopEvent); // Function OPP.RBSoundComponent.IsPlayingLoopingSound // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0a390
	void BP_RegisterToAudioManager(); // Function OPP.RBSoundComponent.BP_RegisterToAudioManager // (Final|Native|Public|BlueprintCallable) // @ game+0x1e09ec0
	bool BP_IsPlaying(); // Function OPP.RBSoundComponent.BP_IsPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e09ea8
};

// Class OPP.RBContinuousMovementSoundComponent
// Size: 0x5e0 (Inherited: 0x580)
struct URBContinuousMovementSoundComponent : URBSoundComponent {
	struct TArray<struct UAkAudioEvent*> MovementStartedEvents; // 0x580(0x10)
	struct TArray<struct UAkAudioEvent*> MovementStoppedEvents; // 0x590(0x10)
	float MovementSmoothFactor; // 0x5a0(0x04)
	struct FVector2D LocationDeltaRTPCMapping; // 0x5a4(0x08)
	char pad_5AC[0x4]; // 0x5ac(0x04)
	struct FString ContinuousMovement_RTPC; // 0x5b0(0x10)
	char pad_5C0[0x20]; // 0x5c0(0x20)

	void ResetMovementDelta(); // Function OPP.RBContinuousMovementSoundComponent.ResetMovementDelta // (Final|Native|Public|BlueprintCallable) // @ game+0x1d40b60
};

// Class OPP.RBMenuPlayerController
// Size: 0x890 (Inherited: 0x598)
struct ARBMenuPlayerController : APlayerController {
	struct FMulticastInlineDelegate OnClientInitReplicated; // 0x598(0x10)
	struct FMulticastInlineDelegate OnPlayerLeaving; // 0x5a8(0x10)
	struct FMulticastInlineDelegate OnInputKey; // 0x5b8(0x10)
	struct FMulticastInlineDelegate OnPartyMemberPlayerSlotsReservationProcessed; // 0x5c8(0x10)
	struct FMulticastInlineDelegate OnMenuActionProgressChanged; // 0x5d8(0x10)
	struct FMulticastInlineDelegate OnSkipCutsceneRequested; // 0x5e8(0x10)
	struct FMulticastInlineDelegate OnPlayerStatsDataAvailable; // 0x5f8(0x10)
	char pad_608[0x5]; // 0x608(0x05)
	bool bIsInLoadingScreen_Server; // 0x60d(0x01)
	char pad_60E[0x1f2]; // 0x60e(0x1f2)
	struct TArray<struct URBNotificationUserWidget*> PendingPartyInviteNotifications; // 0x800(0x10)
	char pad_810[0x60]; // 0x810(0x60)
	struct AActor* PlayerViewTarget; // 0x870(0x08)
	struct AActor* MenuViewTarget; // 0x878(0x08)
	char pad_880[0x10]; // 0x880(0x10)

	void SetMenuViewTargetWithBlend(struct AActor* NewViewTarget, float blendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing); // Function OPP.RBMenuPlayerController.SetMenuViewTargetWithBlend // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9a7fc
	void SetAllowLookInMenu(bool bValue); // Function OPP.RBMenuPlayerController.SetAllowLookInMenu // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9a6f4
	void Server_SetVoiceChatState(bool bEnabled); // Function OPP.RBMenuPlayerController.Server_SetVoiceChatState // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1d9a670
	void Server_SetRegionLatency(struct TArray<struct FRegionLatency> RegionLatency); // Function OPP.RBMenuPlayerController.Server_SetRegionLatency // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1d9a5e0
	void Server_SetPresenceInfo(struct FString partyId, int32_t playerCount, bool bJoinable, bool bFriendRequiresInvite, bool bPublicRequiresInvite); // Function OPP.RBMenuPlayerController.Server_SetPresenceInfo // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1d9a3fc
	void Server_SetIsLeaving(enum class EPlayerLeaveTarget Target); // Function OPP.RBMenuPlayerController.Server_SetIsLeaving // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d9a378
	void Server_SetIsInLoadingScreen(bool bValue); // Function OPP.RBMenuPlayerController.Server_SetIsInLoadingScreen // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d9a2f4
	void Server_SetBlockedProfileIds(struct TArray<struct FProfileId> profileIds); // Function OPP.RBMenuPlayerController.Server_SetBlockedProfileIds // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1d9a260
	void Server_ReservePartyMemberPlayerSlots(struct TArray<struct FProfileId> members); // Function OPP.RBMenuPlayerController.Server_ReservePartyMemberPlayerSlots // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d9a1cc
	void Server_RequestPlayerStatsData(); // Function OPP.RBMenuPlayerController.Server_RequestPlayerStatsData // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d9a1b4
	void Server_Report(struct FProfileId targetProfileId, enum class EPlayerReportReason Reason, struct FString reasonText); // Function OPP.RBMenuPlayerController.Server_Report // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d9a094
	void Server_KeepAlive(); // Function OPP.RBMenuPlayerController.Server_KeepAlive // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1d9a07c
	void RestorePlayerViewTarget(struct AActor* oldMenuViewTarget, float blendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing); // Function OPP.RBMenuPlayerController.RestorePlayerViewTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99ea8
	void OnSaveGameLoaded(); // Function OPP.RBMenuPlayerController.OnSaveGameLoaded // (Native|Protected) // @ game+0x1d99dac
	void OnExpectedPlayerCountUpdated(int32_t expectedPlayerCount); // Function OPP.RBMenuPlayerController.OnExpectedPlayerCountUpdated // (Final|Native|Private) // @ game+0x1d998d4
	bool IsUsingGamePad(); // Function OPP.RBMenuPlayerController.IsUsingGamePad // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d99730
	bool IsLeaving(); // Function OPP.RBMenuPlayerController.IsLeaving // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d996b4
	bool IsInMenu(); // Function OPP.RBMenuPlayerController.IsInMenu // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d9969c
	bool IsInLoadingScreen(); // Function OPP.RBMenuPlayerController.IsInLoadingScreen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d9967c
	enum class EPlayerLeaveTarget GetLeaveTarget(); // Function OPP.RBMenuPlayerController.GetLeaveTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d995b4
	enum class EGamepadType GetCurrentGamepadType(); // Function OPP.RBMenuPlayerController.GetCurrentGamepadType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d9959c
	bool GetAllowLookInMenu(); // Function OPP.RBMenuPlayerController.GetAllowLookInMenu // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d99510
	void ExitToMainMenu(); // Function OPP.RBMenuPlayerController.ExitToMainMenu // (Native|Public|BlueprintCallable) // @ game+0x1d994f8
	void ExitGame(); // Function OPP.RBMenuPlayerController.ExitGame // (Final|Native|Public|BlueprintCallable) // @ game+0x1d994e4
	void Client_SetPlayerStatsData(struct TArray<struct FRBStatContext> stats, struct TArray<struct FRBUIReleasedCharacterDetails> releasedCharacterDetailsList); // Function OPP.RBMenuPlayerController.Client_SetPlayerStatsData // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d993e4
	void Client_PartyMemberPlayerSlotsReservationProcessed(struct TArray<struct FProfileId> members, bool bAccepted); // Function OPP.RBMenuPlayerController.Client_PartyMemberPlayerSlotsReservationProcessed // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d99308
	void Client_KickedFromServer(struct FText Message, struct FText errorCauseMessage, int32_t errorFacility, int32_t ErrorCode); // Function OPP.RBMenuPlayerController.Client_KickedFromServer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d991a8
};

// Class OPP.RBController
// Size: 0xa48 (Inherited: 0x890)
struct ARBController : ARBMenuPlayerController {
	struct URBSoundComponent* WatchVoiceAKComponent; // 0x890(0x08)
	struct FMulticastInlineDelegate OnStartSpectatorMode; // 0x898(0x10)
	struct FMulticastInlineDelegate OnStopSpectatorMode; // 0x8a8(0x10)
	struct FMulticastInlineDelegate OnStartSpectatingPlayer; // 0x8b8(0x10)
	struct FMulticastInlineDelegate OnStopSpectatingPlayer; // 0x8c8(0x10)
	struct FMulticastInlineDelegate OnPlayerScoringEventRecordedDelegate; // 0x8d8(0x10)
	struct FMulticastInlineDelegate OnLobbyGameSessionAvailable; // 0x8e8(0x10)
	struct ARBPlayer* RBPlayer; // 0x8f8(0x08)
	struct URBRemoteDebuggingComponent* RemoteDebugging; // 0x900(0x08)
	struct ARBHUD* RBHUD; // 0x908(0x08)
	struct AActor* PlayerStart; // 0x910(0x08)
	char pad_918[0x7]; // 0x918(0x07)
	bool bWantsToRespawn; // 0x91f(0x01)
	char pad_920[0x8]; // 0x920(0x08)
	struct ARBSpectatorPawn* RBSpectatorPawn; // 0x928(0x08)
	bool bSpectator; // 0x930(0x01)
	char pad_931[0x7]; // 0x931(0x07)
	struct FSpectatorData SpectatorData; // 0x938(0x18)
	float DeadSpectatorModeAvailableServerTime; // 0x950(0x04)
	char pad_954[0x8]; // 0x954(0x08)
	enum class EAIMusicState DesiredMusicState; // 0x95c(0x01)
	char pad_95D[0x3]; // 0x95d(0x03)
	struct FThreatLevelInfo ThreatLevel; // 0x960(0x18)
	char pad_978[0x10]; // 0x978(0x10)
	struct TArray<struct FMusicStateChangeEvent> MusicChangeEvents; // 0x988(0x10)
	struct FPlayerBreathData PlayerBreath; // 0x998(0x20)
	struct TArray<struct FPawnInsideCameraInfo> PawnsInsideCameraInfos; // 0x9b8(0x10)
	char pad_9C8[0x38]; // 0x9c8(0x38)
	struct ARBPawn* NPCToDebug; // 0xa00(0x08)
	char pad_A08[0x30]; // 0xa08(0x30)
	struct TArray<struct UObject*> ListenAtPlayerLocationRequestOwners; // 0xa38(0x10)

	void ViewPrevPlayer(); // Function OPP.RBController.ViewPrevPlayer // (Final|Exec|Native|Public) // @ game+0x1d45874
	void ViewNextPlayer(); // Function OPP.RBController.ViewNextPlayer // (Final|Exec|Native|Public) // @ game+0x1d45860
	bool TryShowCharacterSheet(); // Function OPP.RBController.TryShowCharacterSheet // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d45810
	void TravelToLobby(); // Function OPP.RBController.TravelToLobby // (Final|Native|Public|BlueprintCallable) // @ game+0x1d457fc
	void StartTransitionFeedback_Server(float TransitionDuration); // Function OPP.RBController.StartTransitionFeedback_Server // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d45778
	void SetForceHideObjectiveIcons(bool InBool); // Function OPP.RBController.SetForceHideObjectiveIcons // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d456f8
	void Server_VoiceChat_RequestLoginToken(); // Function OPP.RBController.Server_VoiceChat_RequestLoginToken // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d456e0
	void Server_VoiceChat_RequestEchoChannelToken(); // Function OPP.RBController.Server_VoiceChat_RequestEchoChannelToken // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d456c8
	void Server_VoiceChat_RequestChannelToken(struct FProfileId ProfileId); // Function OPP.RBController.Server_VoiceChat_RequestChannelToken // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d45640
	void Server_UpdatePlayerLoadout(struct FRBPlayerLoadout loadout); // Function OPP.RBController.Server_UpdatePlayerLoadout // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d455a8
	void Server_SpectatorCyclePlayer(bool bNext); // Function OPP.RBController.Server_SpectatorCyclePlayer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d454f8
	void Server_SetWorldPopulatingDone(bool bbWorldPopulatingDone); // Function OPP.RBController.Server_SetWorldPopulatingDone // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d45474
	void Server_SetWantsToRespawn(); // Function OPP.RBController.Server_SetWantsToRespawn // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d45428
	void Server_SetTemporarySpectatorMode(bool bSpectate); // Function OPP.RBController.Server_SetTemporarySpectatorMode // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d45378
	void Server_SetStreamingTargetStateReached(bool bStreamingTargetStateReached); // Function OPP.RBController.Server_SetStreamingTargetStateReached // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d452c8
	void Server_SetStreamingStable(bool bStreamingStable); // Function OPP.RBController.Server_SetStreamingStable // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d45218
	void Server_SetStreamingReadyToCommit(bool bStreamingReadyToCommit); // Function OPP.RBController.Server_SetStreamingReadyToCommit // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d45168
	void Server_SetReadyForStageReset(bool bReadyForStageReset); // Function OPP.RBController.Server_SetReadyForStageReset // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1d450e4
	void Server_SetProcessId(uint32_t ProcessId); // Function OPP.RBController.Server_SetProcessId // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d45048
	void Server_SetNoConnectionTimeout(bool noTimeout); // Function OPP.RBController.Server_SetNoConnectionTimeout // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d44f98
	void Server_SetNewPlayerCustomizationOptions(bool bIsFemale, struct TArray<struct URBPlayerCustomizationOption*> newCustomizationOptions, struct FName newHairColor, struct URBCustomizationOutfit* LegendaryOutfit, struct URBVoiceCustomizationOption* VoiceOption, struct URBPlayerIconCustomizationOption* PlayerIconOption); // Function OPP.RBController.Server_SetNewPlayerCustomizationOptions // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x1d44d6c
	void Server_SetIsRunningFunctionalTest(bool bValue); // Function OPP.RBController.Server_SetIsRunningFunctionalTest // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d44cbc
	void Server_SetIsPlayingWithFriend(bool bIsPlayingWithFriend); // Function OPP.RBController.Server_SetIsPlayingWithFriend // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1d44c38
	void Server_SetGameDownloadCompleted(); // Function OPP.RBController.Server_SetGameDownloadCompleted // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d44bec
	void Server_SetClientInitData(bool bVoiceChatEnabled, struct TArray<struct FRegionLatency> RegionLatency); // Function OPP.RBController.Server_SetClientInitData // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d44b04
	void Server_RequestBugItData(); // Function OPP.RBController.Server_RequestBugItData // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d44ab8
	void Server_ReportLobbyFound(); // Function OPP.RBController.Server_ReportLobbyFound // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d44aa0
	void Server_RandomizeCustomization(); // Function OPP.RBController.Server_RandomizeCustomization // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x1d44a54
	void Server_QuickTest(); // Function OPP.RBController.Server_QuickTest // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d44a08
	void Server_PurchaseOutfit(struct FName ItemId); // Function OPP.RBController.Server_PurchaseOutfit // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d44900
	void Server_PurchaseItem(struct FName itemOnlineUnlockId, enum class EPlayerCustomizationRarity Rarity); // Function OPP.RBController.Server_PurchaseItem // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d44838
	void Server_PurchasedMurkoffPoints(int32_t Quantity); // Function OPP.RBController.Server_PurchasedMurkoffPoints // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d44984
	void Server_OnCreditsDone(); // Function OPP.RBController.Server_OnCreditsDone // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d44820
	void Server_Multicast_Command(struct FString ServerMulticastCommand); // Function OPP.RBController.Server_Multicast_Command // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d44768
	void Server_LogStreamingDebug(); // Function OPP.RBController.Server_LogStreamingDebug // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d4471c
	void Server_KillFakePlayers(); // Function OPP.RBController.Server_KillFakePlayers // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d446d0
	void Server_GhostPawn(bool bGhost, struct FVector camLoc, struct FRotator camRot); // Function OPP.RBController.Server_GhostPawn // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0x1d44598
	void Server_EquipOutfit(struct URBCustomizationOutfit* Outfit); // Function OPP.RBController.Server_EquipOutfit // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x1d444f8
	void Server_DumpRecentServerLog(); // Function OPP.RBController.Server_DumpRecentServerLog // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d444ac
	void Server_DumpGameEventLog(); // Function OPP.RBController.Server_DumpGameEventLog // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d44460
	void Server_DumpAILog(struct ARBNPC* NPC, int32_t maxEvents); // Function OPP.RBController.Server_DumpAILog // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d44374
	void Server_Cmd(struct FString ServerCmd); // Function OPP.RBController.Server_Cmd // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d442bc
	void Server_ClearGameEventLog(); // Function OPP.RBController.Server_ClearGameEventLog // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d44270
	void Server_CheatTeleportAtLocation(struct FVector targetLoc, struct FRotator targetRot); // Function OPP.RBController.Server_CheatTeleportAtLocation // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0x1d41070
	void Server_CheatSpawnRandomPouncers(); // Function OPP.RBController.Server_CheatSpawnRandomPouncers // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d41024
	void Server_CheatSpawnBot(struct FVector spawnLoc, struct FRotator spawnRot, struct FString cheatName); // Function OPP.RBController.Server_CheatSpawnBot // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0x1d40ee4
	void Server_CheatSendXPEvent(enum class EPlayerEvent EventType); // Function OPP.RBController.Server_CheatSendXPEvent // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d40e48
	void Server_CheatRespawnDeadPlayers(bool Force); // Function OPP.RBController.Server_CheatRespawnDeadPlayers // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d40d98
	void Server_CheatRespawnAllPlayers(); // Function OPP.RBController.Server_CheatRespawnAllPlayers // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d40d4c
	void Server_CheatReshuffleNPCs(); // Function OPP.RBController.Server_CheatReshuffleNPCs // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d40d00
	void Server_CheatDestroyOtherNPC(struct ARBNPC* NPC); // Function OPP.RBController.Server_CheatDestroyOtherNPC // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d40c60
	void Server_CheatDestroyNPC(struct ARBNPC* NPC); // Function OPP.RBController.Server_CheatDestroyNPC // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d40bc0
	void Server_CheatDestroyAllNPCs(); // Function OPP.RBController.Server_CheatDestroyAllNPCs // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d40b74
	void Server_Cheat_UpdateStatistic(enum class EPlayerStat PlayerStat, float Value); // Function OPP.RBController.Server_Cheat_UpdateStatistic // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d44080
	void Server_Cheat_UnlockAllTrials(); // Function OPP.RBController.Server_Cheat_UnlockAllTrials // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d44034
	void Server_Cheat_UnlockAchievement(struct FName AchievementID); // Function OPP.RBController.Server_Cheat_UnlockAchievement // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43f90
	void Server_Cheat_TurnInTasks(); // Function OPP.RBController.Server_Cheat_TurnInTasks // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43f44
	void Server_Cheat_ToggleVariator(struct FName ID, bool bEnabled); // Function OPP.RBController.Server_Cheat_ToggleVariator // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43e48
	void Server_Cheat_ToggleRespawnDeadPlayerInStage(); // Function OPP.RBController.Server_Cheat_ToggleRespawnDeadPlayerInStage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43dfc
	void Server_Cheat_ToggleResetStageWhenAllPlayersDead(); // Function OPP.RBController.Server_Cheat_ToggleResetStageWhenAllPlayersDead // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43db0
	void Server_Cheat_ToggleInfiniteLives(); // Function OPP.RBController.Server_Cheat_ToggleInfiniteLives // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43d64
	void Server_Cheat_ToggleAll(struct FString Query, bool bStateA); // Function OPP.RBController.Server_Cheat_ToggleAll // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43c50
	void Server_Cheat_TeleportToSASExit(); // Function OPP.RBController.Server_Cheat_TeleportToSASExit // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43c04
	void Server_Cheat_TeleportToEndOfStage(); // Function OPP.RBController.Server_Cheat_TeleportToEndOfStage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43bb8
	void Server_Cheat_StopPsychosis(); // Function OPP.RBController.Server_Cheat_StopPsychosis // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43b6c
	void Server_Cheat_StartStageEnding(); // Function OPP.RBController.Server_Cheat_StartStageEnding // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43b20
	void Server_Cheat_StartPsychosisSpook(); // Function OPP.RBController.Server_Cheat_StartPsychosisSpook // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43ad4
	void Server_Cheat_StartPsychosis(); // Function OPP.RBController.Server_Cheat_StartPsychosis // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43a88
	void Server_Cheat_StartObjectiveCoordinator(struct FString Name); // Function OPP.RBController.Server_Cheat_StartObjectiveCoordinator // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d439d0
	void Server_Cheat_StartExperiment(); // Function OPP.RBController.Server_Cheat_StartExperiment // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43984
	void Server_Cheat_StartEndOfStageDamage(); // Function OPP.RBController.Server_Cheat_StartEndOfStageDamage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43938
	void Server_Cheat_SpawnLargePickup(struct ARBLargePickup* ItemClass); // Function OPP.RBController.Server_Cheat_SpawnLargePickup // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43898
	void Server_Cheat_ShowEndOfStageScreen(bool bSuccess); // Function OPP.RBController.Server_Cheat_ShowEndOfStageScreen // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d437e8
	void Server_Cheat_SetTrialCompleted(struct FName TrialId); // Function OPP.RBController.Server_Cheat_SetTrialCompleted // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43744
	void Server_Cheat_SetServerAnimTickOptimsEnabled(bool bEnabled); // Function OPP.RBController.Server_Cheat_SetServerAnimTickOptimsEnabled // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43694
	void Server_Cheat_SetPlayerLoadout(struct FRBPlayerLoadout loadout); // Function OPP.RBController.Server_Cheat_SetPlayerLoadout // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d435d8
	void Server_Cheat_SetNPCToDebug(struct ARBPawn* NPC); // Function OPP.RBController.Server_Cheat_SetNPCToDebug // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43538
	void Server_Cheat_SetMaxReservedPlayerSlotsOverride(int32_t maxReservedPlayerSlotsOverride); // Function OPP.RBController.Server_Cheat_SetMaxReservedPlayerSlotsOverride // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d4349c
	void Server_Cheat_SetLevelSeed(uint32_t Seed); // Function OPP.RBController.Server_Cheat_SetLevelSeed // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43400
	void Server_Cheat_SetInfiniteThrowables(bool bInfinite); // Function OPP.RBController.Server_Cheat_SetInfiniteThrowables // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43350
	void Server_Cheat_SetInfiniteActiveSkills(bool bInfinite); // Function OPP.RBController.Server_Cheat_SetInfiniteActiveSkills // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d432a0
	void Server_Cheat_SetForcedSASVariatorIndex(int32_t Index); // Function OPP.RBController.Server_Cheat_SetForcedSASVariatorIndex // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43204
	void Server_Cheat_SetForcedRollingGateVariatorIndex(int32_t Index); // Function OPP.RBController.Server_Cheat_SetForcedRollingGateVariatorIndex // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d43168
	void Server_Cheat_SetDebugFailedAdjustment(bool bNewDebugFailedAdjustment); // Function OPP.RBController.Server_Cheat_SetDebugFailedAdjustment // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d430b8
	void Server_Cheat_SetCharacterLevel(int32_t Level); // Function OPP.RBController.Server_Cheat_SetCharacterLevel // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d4301c
	void Server_Cheat_SetCharacterIcon(struct FName iconId); // Function OPP.RBController.Server_Cheat_SetCharacterIcon // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d42f78
	void Server_Cheat_SetAlwaysKeepConsumables(bool bEnabled); // Function OPP.RBController.Server_Cheat_SetAlwaysKeepConsumables // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d42ec8
	void Server_Cheat_SetActiveUpgrades(struct TArray<struct FName> coreUpgrades, enum class EActiveSkillType ActiveSkillType, struct TArray<struct FName> activeSkillUpgrades, struct TArray<struct FName> Perks); // Function OPP.RBController.Server_Cheat_SetActiveUpgrades // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x1d42d08
	void Server_Cheat_SetActiveSkill(enum class EActiveSkillType skillType); // Function OPP.RBController.Server_Cheat_SetActiveSkill // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d42c6c
	void Server_Cheat_ReturnToLobby(); // Function OPP.RBController.Server_Cheat_ReturnToLobby // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d42c20
	void Server_Cheat_RestartExperiment(); // Function OPP.RBController.Server_Cheat_RestartExperiment // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d42bd4
	void Server_Cheat_ResetWorldState(uint32_t RandomSeed); // Function OPP.RBController.Server_Cheat_ResetWorldState // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d42b38
	void Server_Cheat_ResetStage(uint32_t RandomSeed); // Function OPP.RBController.Server_Cheat_ResetStage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d42a9c
	void Server_Cheat_ResetLoadouts(); // Function OPP.RBController.Server_Cheat_ResetLoadouts // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d42a50
	void Server_Cheat_ResetCharacterProgression(); // Function OPP.RBController.Server_Cheat_ResetCharacterProgression // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d42a04
	void Server_Cheat_ResetAchievements(); // Function OPP.RBController.Server_Cheat_ResetAchievements // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d429b8
	void Server_Cheat_ResetAccountProgression(); // Function OPP.RBController.Server_Cheat_ResetAccountProgression // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d4296c
	void Server_Cheat_RequestEvalCorridorDebugInfo(); // Function OPP.RBController.Server_Cheat_RequestEvalCorridorDebugInfo // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d42920
	void Server_Cheat_MakeNoise(); // Function OPP.RBController.Server_Cheat_MakeNoise // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d428d4
	void Server_Cheat_keOnActor(struct AActor* Actor, struct FString Command); // Function OPP.RBController.Server_Cheat_keOnActor // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d4416c
	void Server_Cheat_GetRich(); // Function OPP.RBController.Server_Cheat_GetRich // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d42888
	void Server_Cheat_GetGoodCharacter(int32_t Level); // Function OPP.RBController.Server_Cheat_GetGoodCharacter // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d427ec
	void Server_Cheat_ForceUseClientOnlyLevels(); // Function OPP.RBController.Server_Cheat_ForceUseClientOnlyLevels // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d427a0
	void Server_Cheat_ForceUseAllTraps(); // Function OPP.RBController.Server_Cheat_ForceUseAllTraps // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d42754
	void Server_Cheat_ForceUseAllRewardRooms(); // Function OPP.RBController.Server_Cheat_ForceUseAllRewardRooms // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d42708
	void Server_Cheat_ForceUseAllPuzzleRooms(); // Function OPP.RBController.Server_Cheat_ForceUseAllPuzzleRooms // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d426bc
	void Server_Cheat_ForceUseAllObjectiveActors(); // Function OPP.RBController.Server_Cheat_ForceUseAllObjectiveActors // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d42670
	void Server_Cheat_ForceSnapToStateToAllActors(); // Function OPP.RBController.Server_Cheat_ForceSnapToStateToAllActors // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d42624
	void Server_Cheat_ForceSitInSASChair(); // Function OPP.RBController.Server_Cheat_ForceSitInSASChair // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d425d8
	void Server_Cheat_ForceRandomState(struct FString Query, bool bStateA); // Function OPP.RBController.Server_Cheat_ForceRandomState // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d424c4
	void Server_Cheat_ForcePreLoginError(struct FString Error, int32_t amount); // Function OPP.RBController.Server_Cheat_ForcePreLoginError // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d423c0
	void Server_Cheat_ForceMovementDesynch(float desyncSize); // Function OPP.RBController.Server_Cheat_ForceMovementDesynch // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d4231c
	void Server_Cheat_ForceDeath(); // Function OPP.RBController.Server_Cheat_ForceDeath // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d422d0
	void Server_Cheat_FailStage(); // Function OPP.RBController.Server_Cheat_FailStage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d42284
	void Server_Cheat_EndExperiment(); // Function OPP.RBController.Server_Cheat_EndExperiment // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d42238
	void Server_Cheat_DisableStageEnding(); // Function OPP.RBController.Server_Cheat_DisableStageEnding // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d421ec
	void Server_Cheat_DebugTalkWheel(); // Function OPP.RBController.Server_Cheat_DebugTalkWheel // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d421a0
	void Server_Cheat_DebugJumpScare(); // Function OPP.RBController.Server_Cheat_DebugJumpScare // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d42154
	void Server_Cheat_DebugInventory(bool bEnabled); // Function OPP.RBController.Server_Cheat_DebugInventory // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d420a4
	void Server_Cheat_DebugGameMode(); // Function OPP.RBController.Server_Cheat_DebugGameMode // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d42058
	void Server_Cheat_DebugDoorRepulsion(bool bSlam); // Function OPP.RBController.Server_Cheat_DebugDoorRepulsion // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d41fa8
	void Server_Cheat_DebugAlertedStance(int32_t debugOption); // Function OPP.RBController.Server_Cheat_DebugAlertedStance // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d41f0c
	void Server_Cheat_CompleteTasks(); // Function OPP.RBController.Server_Cheat_CompleteTasks // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d41ec0
	void Server_Cheat_CompleteStage(); // Function OPP.RBController.Server_Cheat_CompleteStage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d41e74
	void Server_Cheat_CompleteObjectiveCoordinator(struct FString Name); // Function OPP.RBController.Server_Cheat_CompleteObjectiveCoordinator // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d41dbc
	void Server_Cheat_CompleteMainObjectivesTo(int32_t Index); // Function OPP.RBController.Server_Cheat_CompleteMainObjectivesTo // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d41d20
	void Server_Cheat_CompleteMainObjectivesInStage(); // Function OPP.RBController.Server_Cheat_CompleteMainObjectivesInStage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d41cd4
	void Server_Cheat_CompleteCurrentObjectiveCoordinators(); // Function OPP.RBController.Server_Cheat_CompleteCurrentObjectiveCoordinators // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d41c88
	void Server_Cheat_ClearTasks(); // Function OPP.RBController.Server_Cheat_ClearTasks // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d41c3c
	void Server_Cheat_ClearRandomState(struct FString Query); // Function OPP.RBController.Server_Cheat_ClearRandomState // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d41b84
	void Server_Cheat_ClearProgressivePsychosis(); // Function OPP.RBController.Server_Cheat_ClearProgressivePsychosis // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d41b38
	void Server_Cheat_AddXp(int32_t amount); // Function OPP.RBController.Server_Cheat_AddXp // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d41a9c
	void Server_Cheat_AddTQ(int32_t amount); // Function OPP.RBController.Server_Cheat_AddTQ // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d4195c
	void Server_Cheat_AddTask(struct FName taskId); // Function OPP.RBController.Server_Cheat_AddTask // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d419f8
	void Server_Cheat_AddStageXp(int32_t amount); // Function OPP.RBController.Server_Cheat_AddStageXp // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d418c0
	void Server_Cheat_AddProgressivePsychosis(int32_t amount, bool bGas); // Function OPP.RBController.Server_Cheat_AddProgressivePsychosis // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d417c8
	void Server_Cheat_AddOnlineItem(struct FName onlineItemId, bool bIsPersistentItem); // Function OPP.RBController.Server_Cheat_AddOnlineItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d416cc
	void Server_Cheat_AddMurkoffPoints(int32_t amount); // Function OPP.RBController.Server_Cheat_AddMurkoffPoints // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d41630
	void Server_Cheat_AddMurkoffDollars(int32_t amount); // Function OPP.RBController.Server_Cheat_AddMurkoffDollars // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d41594
	void Server_Cheat_AddItem(struct ARBPickup* ItemClass); // Function OPP.RBController.Server_Cheat_AddItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d414f4
	void Server_Cheat_AddCurrency(enum class ECurrencyType currencyType, int32_t amount); // Function OPP.RBController.Server_Cheat_AddCurrency // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d4140c
	void Server_Cheat_ActivateAllMines(); // Function OPP.RBController.Server_Cheat_ActivateAllMines // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d413c0
	void Server_Cheat_AcquireRewardPoolItem(struct FName RewardPoolId); // Function OPP.RBController.Server_Cheat_AcquireRewardPoolItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d4131c
	void Server_Cheat_AcquireFullRewardPool(struct FName RewardPoolId); // Function OPP.RBController.Server_Cheat_AcquireFullRewardPool // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d41278
	void Server_Cheat_AcquireAllDocuments(); // Function OPP.RBController.Server_Cheat_AcquireAllDocuments // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d4122c
	void Server_Cheat_AcquireAllCustomization(); // Function OPP.RBController.Server_Cheat_AcquireAllCustomization // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d411e0
	void Server_Cheat_AcquireAllCellCustomization(); // Function OPP.RBController.Server_Cheat_AcquireAllCellCustomization // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d41194
	void OnRep_RBSpectatorPawn(); // Function OPP.RBController.OnRep_RBSpectatorPawn // (Final|Native|Protected) // @ game+0x1d40b38
	void OnRep_bSpectator(); // Function OPP.RBController.OnRep_bSpectator // (Final|Native|Public) // @ game+0x1d40b4c
	void OnPlayerLeftGame(struct FUniqueNetIdRepl UniqueId); // Function OPP.RBController.OnPlayerLeftGame // (Final|Native|Protected) // @ game+0x1d40a88
	void OnPlayerJoinedGame(struct FUniqueNetIdRepl UniqueId); // Function OPP.RBController.OnPlayerJoinedGame // (Final|Native|Protected) // @ game+0x1d409d8
	void OnPlayerInsideCameraCustomizationChanged(struct ARBPlayer* RBPlayer); // Function OPP.RBController.OnPlayerInsideCameraCustomizationChanged // (Final|Native|Public) // @ game+0x1d40958
	void OnPlayerInsideActiveSkillChanged(struct ARBActiveSkill* activeSkillActor); // Function OPP.RBController.OnPlayerInsideActiveSkillChanged // (Final|Native|Public) // @ game+0x1d408a0
	void OnGamePhaseUpdated(enum class EGamePhase gamePhase); // Function OPP.RBController.OnGamePhaseUpdated // (Final|Native|Protected) // @ game+0x1d40820
	void Multicast_StartTransitionFeedback(float TransitionDuration); // Function OPP.RBController.Multicast_StartTransitionFeedback // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d40798
	void Multicast_SetNoConnectionTimeout(bool noTimeout); // Function OPP.RBController.Multicast_SetNoConnectionTimeout // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d40714
	void Multicast_NotifyEndOfStage(struct FEndStageInfo endOfStageInfo, bool bShowEndOfMatchScreen); // Function OPP.RBController.Multicast_NotifyEndOfStage // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d4062c
	void Multicast_LogStreamingDebug(); // Function OPP.RBController.Multicast_LogStreamingDebug // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d40614
	void Multicast_Cheat_ForceSnapToStateToAllActors(); // Function OPP.RBController.Multicast_Cheat_ForceSnapToStateToAllActors // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d405fc
	void Multicast_Cheat_DebugTalkWheel(); // Function OPP.RBController.Multicast_Cheat_DebugTalkWheel // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d405e4
	bool IsPlaytestMode(); // Function OPP.RBController.IsPlaytestMode // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d405a0
	void Client_VoiceChat_SetLoginToken(struct FString Token); // Function OPP.RBController.Client_VoiceChat_SetLoginToken // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d4050c
	void Client_VoiceChat_SetEchoChannelToken(struct FString Token); // Function OPP.RBController.Client_VoiceChat_SetEchoChannelToken // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d40478
	void Client_VoiceChat_SetChannelToken(struct FProfileId ProfileId, struct FString Token); // Function OPP.RBController.Client_VoiceChat_SetChannelToken // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d4039c
	void Client_TryTravelToLobby(); // Function OPP.RBController.Client_TryTravelToLobby // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d40384
	void Client_TriggerGlobalAudioAnnouncement(struct UAkAudioEvent* announcementEvent); // Function OPP.RBController.Client_TriggerGlobalAudioAnnouncement // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d40300
	void Client_TravelToLobby(); // Function OPP.RBController.Client_TravelToLobby // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d402e8
	void Client_ShowGameMessage(struct FText objectiveText); // Function OPP.RBController.Client_ShowGameMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d40254
	void Client_SetIgnoreMoveInput(bool bNewMoveInput); // Function OPP.RBController.Client_SetIgnoreMoveInput // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d401d0
	void Client_SetIgnoreLookInput(bool bNewMoveInput); // Function OPP.RBController.Client_SetIgnoreLookInput // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d4014c
	void Client_ServerMsg(struct FString serverMsg, bool bDisplayOnScreen); // Function OPP.RBController.Client_ServerMsg // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d40070
	void Client_ServerError(struct FString serverError, bool bDisplayOnScreen); // Function OPP.RBController.Client_ServerError // (Net|Native|Event|Public|NetClient) // @ game+0x1d3ff94
	void Client_ReturningToLobby(struct FString TicketId, struct FString MatchmakingConfigurationName, struct TArray<struct FProfileId> groupMembers); // Function OPP.RBController.Client_ReturningToLobby // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3fe50
	void Client_ResolvePendingOrders(struct TArray<int64_t> pendingOrderIds); // Function OPP.RBController.Client_ResolvePendingOrders // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3fdbc
	void Client_PostAudioEventOnGroup(struct UAkAudioEvent* akEvent, struct FName GroupName); // Function OPP.RBController.Client_PostAudioEventOnGroup // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3fcf4
	void Client_PostAssociatedAKEvent(struct UAkComponent* AkComponent); // Function OPP.RBController.Client_PostAssociatedAKEvent // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3fc70
	void Client_PostAkEventOnActor(struct AActor* Actor, struct UAkAudioEvent* akEvent); // Function OPP.RBController.Client_PostAkEventOnActor // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3fba8
	void Client_PostAkEventGlobal(struct UAkAudioEvent* akEvent); // Function OPP.RBController.Client_PostAkEventGlobal // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3fb24
	void Client_PostAkEvent(struct UAkComponent* AkComponent, struct UAkAudioEvent* akEvent); // Function OPP.RBController.Client_PostAkEvent // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3fa5c
	void Client_PlayVOOnWatch(struct UAkAudioEvent* akEvent, uint32_t RandomSeed); // Function OPP.RBController.Client_PlayVOOnWatch // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3f994
	void Client_PlayVOOnNarrator(struct UAkAudioEvent* akEvent, enum class EVOPriority VOPriority, uint32_t RandomSeed); // Function OPP.RBController.Client_PlayVOOnNarrator // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3f898
	void Client_PlayVOOnActor(struct UAkAudioEvent* akEvent, struct AActor* voOwner, enum class EVOPriority VOPriority, uint32_t RandomSeed, bool bPlayOnPlayersWatch); // Function OPP.RBController.Client_PlayVOOnActor // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3f714
	void Client_PlaySingleShotMusicTrack(struct UAkAudioEvent* musicTrack, bool bPauseLevelMusic); // Function OPP.RBController.Client_PlaySingleShotMusicTrack // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3f648
	void Client_OnPlayerScoringEventRecorded(enum class EPlayerEvent EventType, struct FName ruleId, int32_t scoreValue); // Function OPP.RBController.Client_OnPlayerScoringEventRecorded // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3f54c
	void Client_LeaveSpectatorMode(bool bRestartingPlayer); // Function OPP.RBController.Client_LeaveSpectatorMode // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3f4c8
	void Client_KeepAlive(); // Function OPP.RBController.Client_KeepAlive // (Net|Native|Event|Public|NetClient) // @ game+0x1d3f4b0
	void Client_HideTutorial(); // Function OPP.RBController.Client_HideTutorial // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x1d3f498
	void Client_FinishBugItData(); // Function OPP.RBController.Client_FinishBugItData // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3f480
	void Client_EnterSpectatorMode(enum class ESpectatorMode Mode); // Function OPP.RBController.Client_EnterSpectatorMode // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3f3fc
	void Client_DumpRecentServerLog(struct FString serverLog); // Function OPP.RBController.Client_DumpRecentServerLog // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3f368
	void Client_DumpGameEventLog(struct TArray<struct FGameEvent> EventLog); // Function OPP.RBController.Client_DumpGameEventLog // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3f2d8
	void Client_DumpAILog(struct FString BotName, struct TArray<struct FAIEventLogItem> EventLog); // Function OPP.RBController.Client_DumpAILog // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3f1ec
	void Client_Cheat_DebugCorridorDebugInfo(struct FRBEvalCorridorDebugInfo serverDebugInfo); // Function OPP.RBController.Client_Cheat_DebugCorridorDebugInfo // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3f13c
	void Client_AddHudMessage(struct FName MessageId, struct FText Text, enum class EMessagePriority Priority, float duration, enum class EGameMessageCategory GameMessageCategory); // Function OPP.RBController.Client_AddHudMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3efa0
	void Client_ActivateVFX(struct AActor* Actor); // Function OPP.RBController.Client_ActivateVFX // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3ef1c
	void Client_AchievementUnlocked(struct FName AchievementID); // Function OPP.RBController.Client_AchievementUnlocked // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d3ee98
	bool CanTravelToLobby(); // Function OPP.RBController.CanTravelToLobby // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d3ee7c
	struct ARBPlayer* BP_GetRBSpectatedPawn(); // Function OPP.RBController.BP_GetRBSpectatedPawn // (Final|Native|Public|BlueprintCallable) // @ game+0x1d3ee54
	void BP_GetPlayerViewPoint(struct FVector& out_location, struct FRotator& out_Rotation); // Function OPP.RBController.BP_GetPlayerViewPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d3ed78
	void BP_Cheat_SetActiveSkill(enum class EActiveSkillType skillType); // Function OPP.RBController.BP_Cheat_SetActiveSkill // (Final|Native|Public|BlueprintCallable) // @ game+0x1d32d30
	void BP_Cheat_AddOnlineItem(struct FName onlineItemId, bool bIsPersistentItem); // Function OPP.RBController.BP_Cheat_AddOnlineItem // (Final|Native|Public|BlueprintCallable) // @ game+0x1d3ecd4
	bool BP_CanSpectatorRespawn(); // Function OPP.RBController.BP_CanSpectatorRespawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d3ec70
};

// Class OPP.RBOperatableComponent
// Size: 0x670 (Inherited: 0x600)
struct URBOperatableComponent : URBInteractibleComponent {
	struct FTransform OperationActionOffset; // 0x600(0x30)
	struct FText OperatingText; // 0x630(0x18)
	struct ARBPawn* PawnOperating; // 0x648(0x08)
	struct FMulticastInlineDelegate OnOperatingStartedCallback; // 0x650(0x10)
	struct FMulticastInlineDelegate OnOperatingFinishedCallback; // 0x660(0x10)

	struct UAnimSequence* GetOperatorStopAnimation(struct ARBPawn* Pawn, bool bFirstPerson); // Function OPP.RBOperatableComponent.GetOperatorStopAnimation // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1db2d28
	struct UAnimSequence* GetOperatorStartAnimation(struct ARBPawn* Pawn, bool bFirstPerson); // Function OPP.RBOperatableComponent.GetOperatorStartAnimation // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1db2c5c
	struct UAnimSequence* GetOperatorLoopAnimation(struct ARBPawn* Pawn, bool bFirstPerson); // Function OPP.RBOperatableComponent.GetOperatorLoopAnimation // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1db2b90
	struct FTransform GetOperateTransform(struct ARBPawn* Pawn); // Function OPP.RBOperatableComponent.GetOperateTransform // (Native|Event|Public|HasDefaults|BlueprintEvent|Const) // @ game+0x1db2ad4
	bool CanOperate(struct ARBPawn* Pawn); // Function OPP.RBOperatableComponent.CanOperate // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1db290c
};

// Class OPP.RBCoopOperatableComponent
// Size: 0x840 (Inherited: 0x670)
struct URBCoopOperatableComponent : URBOperatableComponent {
	struct FText SoloInteractionText; // 0x670(0x18)
	bool bForceDelayedRelease; // 0x688(0x01)
	bool bCanHoldInteractionWithDelayedReleased; // 0x689(0x01)
	char pad_68A[0x6]; // 0x68a(0x06)
	struct FConfigurableFloat DelayedReleasedActivatedTime; // 0x690(0xc8)
	struct FVector2D CameraYawLimit; // 0x758(0x08)
	struct FVector2D CameraPitchLimit; // 0x760(0x08)
	struct FRBComponentSelector LinkedCoopOperatableComponent; // 0x768(0x40)
	struct FMulticastInlineDelegate OnCoopOperatableActiveStateChanged; // 0x7a8(0x10)
	struct FMulticastInlineDelegate OnDelayedReleaseButtonServerTimestampChanged; // 0x7b8(0x10)
	struct FScheduledBool bCoopOperatableActive; // 0x7c8(0x70)
	float DelayedReleaseButtonServerTimestamp; // 0x838(0x04)
	char pad_83C[0x4]; // 0x83c(0x04)

	void SetLinkedCoopOperatableComponent(struct URBCoopOperatableComponent* cmp); // Function OPP.RBCoopOperatableComponent.SetLinkedCoopOperatableComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x1d49a48
	void OnRep_DelayedReleaseButtonServerTimestamp(); // Function OPP.RBCoopOperatableComponent.OnRep_DelayedReleaseButtonServerTimestamp // (Final|Native|Public) // @ game+0x1d496f8
	void OnRep_CoopOperatableActive(); // Function OPP.RBCoopOperatableComponent.OnRep_CoopOperatableActive // (Final|Native|Public) // @ game+0x1d496dc
	void OnCoopOperatableActiveChangedCallback(enum class EScheduledPropertyValueChangedType changeType); // Function OPP.RBCoopOperatableComponent.OnCoopOperatableActiveChangedCallback // (Final|Native|Public) // @ game+0x1d492e8
	struct URBCoopOperatableComponent* GetLinkedCoopOperatableComponent(); // Function OPP.RBCoopOperatableComponent.GetLinkedCoopOperatableComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d48d18
	float GetDelayedReleaseTimeLeftRatio(); // Function OPP.RBCoopOperatableComponent.GetDelayedReleaseTimeLeftRatio // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d48cd8
	float GetDelayedReleaseTimeLeft(); // Function OPP.RBCoopOperatableComponent.GetDelayedReleaseTimeLeft // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d48cb0
	void Event_OnCoopOperatableActiveStateChanged(); // Function OPP.RBCoopOperatableComponent.Event_OnCoopOperatableActiveStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_DelayedReleaseButtonServerTimestampChanged(); // Function OPP.RBCoopOperatableComponent.Event_DelayedReleaseButtonServerTimestampChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBUseQuestItemsObjectiveCoordinator
// Size: 0x3030 (Inherited: 0xba8)
struct ARBUseQuestItemsObjectiveCoordinator : ARBBaseObjectiveCoordinator {
	struct TArray<struct ARBPickup*> QuestItemClasses; // 0xba8(0x10)
	struct ARBPickup* ItemClassForAllContainers; // 0xbb8(0x08)
	struct AActor* ItemSpawnerClass; // 0xbc0(0x08)
	struct TArray<struct TSoftObjectPtr<AActor>> SpecificItemSpawners; // 0xbc8(0x10)
	bool bUseItemsForCompletionCount; // 0xbd8(0x01)
	bool bUseDestinationCountForItemCount; // 0xbd9(0x01)
	char bUseSpawnerActorsRandomization : 1; // 0xbda(0x01)
	char pad_BDA_1 : 7; // 0xbda(0x01)
	char pad_BDB[0x5]; // 0xbdb(0x05)
	struct FObjectiveRandomizationSetupData SpawnerActorsRandomizationSetup; // 0xbe0(0x4e8)
	struct FText GoToUsableDeviceText; // 0x10c8(0x18)
	int32_t MaxNumberOfQuestItems; // 0x10e0(0x04)
	char pad_10E4[0x4]; // 0x10e4(0x04)
	struct FObjectiveUISettings QuestItemSpawnerUISettings; // 0x10e8(0xa50)
	struct FObjectiveUISettings QuestItemPickupUISettings; // 0x1b38(0xa50)
	struct FObjectiveUISettings DestinationDeviceUISettings; // 0x2588(0xa50)
	struct TArray<struct FQuestItemRuntimeInfo> QuestItemRuntimeInfos; // 0x2fd8(0x10)
	char pad_2FE8[0x8]; // 0x2fe8(0x08)
	struct TArray<struct AActor*> ItemSpawners; // 0x2ff0(0x10)
	struct TArray<struct AActor*> QuestDestinations_Server; // 0x3000(0x10)
	struct TArray<struct AActor*> DestinationDeviceWithIcons_Client; // 0x3010(0x10)
	struct TArray<struct AActor*> ObjectiveActorsWithIcons_Client; // 0x3020(0x10)

	void OnRep_QuestItemRuntimeInfos(); // Function OPP.RBUseQuestItemsObjectiveCoordinator.OnRep_QuestItemRuntimeInfos // (Native|Protected) // @ game+0x1e31400
	void OnQuestItemPickedUp_Server(struct ARBPawn* Pawn, struct ARBPickup* Item); // Function OPP.RBUseQuestItemsObjectiveCoordinator.OnQuestItemPickedUp_Server // (Native|Protected) // @ game+0x1e312a0
	void OnQuestItemDropped_Server(struct ARBPawn* Pawn, struct ARBPickup* Item); // Function OPP.RBUseQuestItemsObjectiveCoordinator.OnQuestItemDropped_Server // (Native|Protected) // @ game+0x1e311d8
	void OnPlayerStoppedOperating(struct ARBPawn* Pawn, struct ARBOperatable* operatable); // Function OPP.RBUseQuestItemsObjectiveCoordinator.OnPlayerStoppedOperating // (Final|Native|Protected) // @ game+0x1e310e4
	void OnPlayerDoAction(struct ARBPawn* Player, struct URBInteractibleComponent* Component); // Function OPP.RBUseQuestItemsObjectiveCoordinator.OnPlayerDoAction // (Final|Native|Protected) // @ game+0x1df2eac
	void OnPlayerDisconnect(struct ARBPlayer* Player); // Function OPP.RBUseQuestItemsObjectiveCoordinator.OnPlayerDisconnect // (Final|Native|Public) // @ game+0x1d228d0
	void OnPawnKilled(struct ARBPawn* instigatorActor, struct ARBPawn* Subject); // Function OPP.RBUseQuestItemsObjectiveCoordinator.OnPawnKilled // (Final|Native|Public) // @ game+0x1e31034
	void OnPanelInteractionCompletedChanged(struct URBInteractiblePanelComponent* panel, struct ARBPawn* Pawn); // Function OPP.RBUseQuestItemsObjectiveCoordinator.OnPanelInteractionCompletedChanged // (Final|Native|Protected) // @ game+0x1e30f24
	void Event_OnSpawnObjectiveItem(struct AActor* spawner, struct ARBPickup* newObjectiveItem); // Function OPP.RBUseQuestItemsObjectiveCoordinator.Event_OnSpawnObjectiveItem // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnQuestItemRuntimeInfosChanged(); // Function OPP.RBUseQuestItemsObjectiveCoordinator.Event_OnQuestItemRuntimeInfosChanged // (Event|Protected|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBCorpseSearchObjectiveCoordinator
// Size: 0x3110 (Inherited: 0x3030)
struct ARBCorpseSearchObjectiveCoordinator : ARBUseQuestItemsObjectiveCoordinator {
	bool bAutoHideUnrelevantIconsWhenAllCluesGathered; // 0x3030(0x01)
	bool bShowClueIconEvenWhenClueNotDiscovered; // 0x3031(0x01)
	char pad_3032[0x6]; // 0x3032(0x06)
	struct TArray<struct FText> FindKeyLineTexts; // 0x3038(0x10)
	struct TArray<struct FText> OpenGateLineTexts; // 0x3048(0x10)
	struct TArray<struct FText> GateDoneLineTexts; // 0x3058(0x10)
	struct FText FoundKeyText; // 0x3068(0x18)
	struct FText UnknownClueText; // 0x3080(0x18)
	struct FText KnownClueText; // 0x3098(0x18)
	struct UTexture2D* InvestigatedIcon; // 0x30b0(0x08)
	struct UAkAudioEvent* KeyFoundInCorpseSoundOverride; // 0x30b8(0x08)
	char bOverride_KeyFoundInCorpseSound : 1; // 0x30c0(0x01)
	char pad_30C0_1 : 7; // 0x30c0(0x01)
	char pad_30C1[0x7]; // 0x30c1(0x07)
	struct FHUDTutorialTextData EmptyCorpseInteractionTutorialData; // 0x30c8(0x38)
	struct TArray<struct FClueData> CluesDiscovered; // 0x3100(0x10)

	void OnEmptyCorpseInteractionDone(struct URBInteractiblePanelComponent* panel, struct ARBPawn* pawnInteracting); // Function OPP.RBCorpseSearchObjectiveCoordinator.OnEmptyCorpseInteractionDone // (Final|Native|Public) // @ game+0x1d493e8
	void OnCorpseClueDiscovered(struct URBPlayerInvestigationZoneComponent* InvestigationComponent); // Function OPP.RBCorpseSearchObjectiveCoordinator.OnCorpseClueDiscovered // (Final|Native|Public) // @ game+0x1d49368
	void OnClueDiscovered(struct URBPlayerInvestigationZoneComponent* InvestigationComponent); // Function OPP.RBCorpseSearchObjectiveCoordinator.OnClueDiscovered // (Final|Native|Public) // @ game+0x1d4920c
	void Multicast_OnEmptyCorpseInteractionDone(struct ARBPawn* RBPawn); // Function OPP.RBCorpseSearchObjectiveCoordinator.Multicast_OnEmptyCorpseInteractionDone // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d49080
	void Multicast_KeyPickedUp(struct FClueData ClueData, bool bFirstTimePickedUp); // Function OPP.RBCorpseSearchObjectiveCoordinator.Multicast_KeyPickedUp // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d48fb4
	void Multicast_KeyDropped(); // Function OPP.RBCorpseSearchObjectiveCoordinator.Multicast_KeyDropped // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d48f9c
	void Multicast_GateUnlocked(); // Function OPP.RBCorpseSearchObjectiveCoordinator.Multicast_GateUnlocked // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d48f84
	void Multicast_CorpseClueGathered(struct URBPlayerInvestigationZoneComponent* InvestigationComponent); // Function OPP.RBCorpseSearchObjectiveCoordinator.Multicast_CorpseClueGathered // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d48f00
	void Multicast_ClueGathered(struct FClueData ClueData); // Function OPP.RBCorpseSearchObjectiveCoordinator.Multicast_ClueGathered // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d48e7c
	struct FText GetClueTextFromClueName(struct FName& clueName); // Function OPP.RBCorpseSearchObjectiveCoordinator.GetClueTextFromClueName // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x1d48b64
	struct FSlateBrush GetClueObjectiveIconFromClueName(struct FName& clueName); // Function OPP.RBCorpseSearchObjectiveCoordinator.GetClueObjectiveIconFromClueName // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x1d48aa4
};

// Class OPP.RBCounterInterface
// Size: 0x28 (Inherited: 0x28)
struct URBCounterInterface : UInterface {

	void SetCounter(int32_t Value); // Function OPP.RBCounterInterface.SetCounter // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d49940
	int32_t GetCounter(); // Function OPP.RBCounterInterface.GetCounter // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d48c14
};

// Class OPP.RBCreditsMenu
// Size: 0x308 (Inherited: 0x308)
struct URBCreditsMenu : URBMenuWidget {
};

// Class OPP.RBCrouchUnderMarker
// Size: 0x2d0 (Inherited: 0x248)
struct ARBCrouchUnderMarker : AActor {
	char pad_248[0x8]; // 0x248(0x08)
	bool bEnabled; // 0x250(0x01)
	bool bShortCrouchUnder; // 0x251(0x01)
	char pad_252[0x2]; // 0x252(0x02)
	float Depth; // 0x254(0x04)
	float Width; // 0x258(0x04)
	bool bCanBeUsedByBot; // 0x25c(0x01)
	bool bBlocksNavMesh; // 0x25d(0x01)
	char pad_25E[0x2]; // 0x25e(0x02)
	struct FGameplayTagContainer EnableOnlyForNPCTags; // 0x260(0x20)
	struct FGameplayTagContainer DisableForNPCTags; // 0x280(0x20)
	struct AActor* LinkedActor; // 0x2a0(0x08)
	struct URBNavLinkComponent* NavLinkComp; // 0x2a8(0x08)
	struct URBRepulsionComponent* repulsionComponent; // 0x2b0(0x08)
	struct URBBoxNavMeshBlockingComponent* NavMeshBlockingComponent; // 0x2b8(0x08)
	struct URBDeadRepulsionBoxComponent* DeadRepulsionComponent; // 0x2c0(0x08)
	bool bForceRunning; // 0x2c8(0x01)
	char pad_2C9[0x7]; // 0x2c9(0x07)

	void SetEnabled(bool bEnabledValue); // Function OPP.RBCrouchUnderMarker.SetEnabled // (Final|Native|Private|BlueprintCallable) // @ game+0x1d499c0
	void SetBlocksNavMesh(bool bBlocks); // Function OPP.RBCrouchUnderMarker.SetBlocksNavMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x1d498b0
};

// Class OPP.RBCurrencyItem
// Size: 0x9f0 (Inherited: 0x9d0)
struct ARBCurrencyItem : ARBPickup {
	int32_t CurrencyOnPickup; // 0x9d0(0x04)
	enum class ECurrencyType currencyType; // 0x9d4(0x01)
	bool ShareCurrencyGains; // 0x9d5(0x01)
	bool bDuplicateCurrencyPerClient; // 0x9d6(0x01)
	char pad_9D7[0x1]; // 0x9d7(0x01)
	struct TArray<struct FProfileId> ProfileIdsInteracted; // 0x9d8(0x10)
	char pad_9E8[0x8]; // 0x9e8(0x08)

	void OnSpectatingPlayerChanged(struct ARBPlayer* Player); // Function OPP.RBCurrencyItem.OnSpectatingPlayerChanged // (Final|Native|Private) // @ game+0x1d49764
	void OnRep_ProfileIdsInteracted(); // Function OPP.RBCurrencyItem.OnRep_ProfileIdsInteracted // (Final|Native|Private) // @ game+0x13b1f58
	void OnClientInitReplicated(); // Function OPP.RBCurrencyItem.OnClientInitReplicated // (Final|Native|Private) // @ game+0x13b1f58
};

// Class OPP.RBCurrencyPackMenu
// Size: 0x3b0 (Inherited: 0x308)
struct URBCurrencyPackMenu : URBMenuWidget {
	char pad_308[0xa8]; // 0x308(0xa8)

	void Purchase(struct FCurrencyPackMenuItem& Item); // Function OPP.RBCurrencyPackMenu.Purchase // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d497e4
	bool IsOperationPending(); // Function OPP.RBCurrencyPackMenu.IsOperationPending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d10a40
	bool IsDataPending(); // Function OPP.RBCurrencyPackMenu.IsDataPending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d48e44
	struct TArray<struct FCurrencyPackMenuItem> GetCurrencyPackItems(); // Function OPP.RBCurrencyPackMenu.GetCurrencyPackItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d48c38
	void Event_Refresh(); // Function OPP.RBCurrencyPackMenu.Event_Refresh // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_CompletedPurchase(struct FCurrencyPackMenuItem& Item); // Function OPP.RBCurrencyPackMenu.Event_CompletedPurchase // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBCustomActionAnimInstance
// Size: 0x2c0 (Inherited: 0x2c0)
struct URBCustomActionAnimInstance : UAnimInstance {

	void TriggerCustomAction(); // Function OPP.RBCustomActionAnimInstance.TriggerCustomAction // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void CustomActionDone(); // Function OPP.RBCustomActionAnimInstance.CustomActionDone // (Final|Native|Public|BlueprintCallable) // @ game+0x1d48a4c
};

// Class OPP.RBCustomizationInterface
// Size: 0x2c8 (Inherited: 0x2c0)
struct ARBCustomizationInterface : ARBCustomSpecialMoveInteractableActor {
	bool bIsPlayerCellCustomization; // 0x2c0(0x01)
	char pad_2C1[0x7]; // 0x2c1(0x07)
};

// Class OPP.RBCutsceneMenu
// Size: 0x308 (Inherited: 0x308)
struct URBCutsceneMenu : URBMenuWidget {

	void OnInputKey(struct FKey Key, enum class EInputEvent EventType, bool bGamepad); // Function OPP.RBCutsceneMenu.OnInputKey // (Final|Native|Public) // @ game+0x1d49578
	void Event_ShowSkipPrompt(bool bShouldStartHideTimer); // Function OPP.RBCutsceneMenu.Event_ShowSkipPrompt // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void Event_EndCutsceneRequested(); // Function OPP.RBCutsceneMenu.Event_EndCutsceneRequested // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void EndCutscene(); // Function OPP.RBCutsceneMenu.EndCutscene // (Final|Native|Public|BlueprintCallable) // @ game+0x1d48a90
};

// Class OPP.RBDamageableComponent
// Size: 0x240 (Inherited: 0xb8)
struct URBDamageableComponent : UActorComponent {
	float DurabilityConfig; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
	struct FConfigurableFloat ConfigurableDurability; // 0xc0(0xc8)
	bool bCanBeDamagedConfig; // 0x188(0x01)
	bool bInfiniteDurability; // 0x189(0x01)
	bool bCanBeDamagedByProjectiles; // 0x18a(0x01)
	char ThrowableGameplayMask; // 0x18b(0x01)
	bool bBlocksProjectiles; // 0x18c(0x01)
	char pad_18D[0x3]; // 0x18d(0x03)
	struct TArray<struct URBDamageableComponent*> DefaultSlaveDamageableComponents; // 0x190(0x10)
	struct FMulticastInlineDelegate OnCanBeDamagedStateChanged; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnDamageableReset; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnDamageableDestroyed; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnDamageableDamaged; // 0x1d0(0x10)
	struct FMulticastInlineDelegate OnNumberOfHitsChanged; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnNumberOfProjectileHitsChanged; // 0x1f0(0x10)
	struct FVector LastHitDirection; // 0x200(0x0c)
	struct FVector LastHitLocation; // 0x20c(0x0c)
	struct AActor* LastDamager; // 0x218(0x08)
	int32_t NumberOfProjectileHit; // 0x220(0x04)
	bool bCanBeDamaged; // 0x224(0x01)
	char pad_225[0x3]; // 0x225(0x03)
	float Durability; // 0x228(0x04)
	int32_t NumberOfHits; // 0x22c(0x04)
	struct TArray<struct URBDamageableComponent*> SlaveDamageableComponents; // 0x230(0x10)

	void OnRep_NumberOfProjectileHit(); // Function OPP.RBDamageableComponent.OnRep_NumberOfProjectileHit // (Final|Native|Private) // @ game+0x1d49750
	void OnRep_NumberOfHits(); // Function OPP.RBDamageableComponent.OnRep_NumberOfHits // (Final|Native|Private) // @ game+0x1d4973c
	void OnRep_Durability(); // Function OPP.RBDamageableComponent.OnRep_Durability // (Final|Native|Private) // @ game+0x1d4970c
	void OnRep_CanBeDamaged(); // Function OPP.RBDamageableComponent.OnRep_CanBeDamaged // (Final|Native|Private) // @ game+0x1d496c8
	bool IsDestroyed(); // Function OPP.RBDamageableComponent.IsDestroyed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d48e5c
	int32_t GetNumberOfHits(); // Function OPP.RBDamageableComponent.GetNumberOfHits // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d48d94
	float GetMaxDurability(); // Function OPP.RBDamageableComponent.GetMaxDurability // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d48d6c
	float GetDurability(); // Function OPP.RBDamageableComponent.GetDurability // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d48d00
	bool CanBeDamaged(); // Function OPP.RBDamageableComponent.CanBeDamaged // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d486bc
	void BP_SetCanBeDamaged(bool bCanBeDamagedValue); // Function OPP.RBDamageableComponent.BP_SetCanBeDamaged // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d4863c
	float BP_GetDurabilityRatio(); // Function OPP.RBDamageableComponent.BP_GetDurabilityRatio // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d48558
};

// Class OPP.RBDamageBoxComponent
// Size: 0x880 (Inherited: 0x4c0)
struct URBDamageBoxComponent : UBoxComponent {
	bool bStartsWithDamageEnabled; // 0x4c0(0x01)
	char pad_4C1[0x7]; // 0x4c1(0x07)
	struct FConfigurableFloat InitialDamage; // 0x4c8(0xc8)
	struct FConfigurableFloat DamagePerInterval; // 0x590(0xc8)
	float DamageInterval; // 0x658(0x04)
	float InitialDamageInterval; // 0x65c(0x04)
	bool bDamageOnce; // 0x660(0x01)
	bool bForceKill; // 0x661(0x01)
	bool bUseBoxCenterForDamage; // 0x662(0x01)
	enum class EDamageType DamageType; // 0x663(0x01)
	char pad_664[0x4]; // 0x664(0x04)
	struct FConfigurableBool bCanEverKnockdown; // 0x668(0x60)
	struct FConfigurableFloat KnockdownHealthThreshold; // 0x6c8(0xc8)
	struct FConfigurableBool bCanKill; // 0x790(0x60)
	bool bDamageWhileInAir; // 0x7f0(0x01)
	bool bLimitSpeed; // 0x7f1(0x01)
	char pad_7F2[0x2]; // 0x7f2(0x02)
	float DamageSpeedLimiter; // 0x7f4(0x04)
	float DamageSpeedMultiplier; // 0x7f8(0x04)
	char pad_7FC[0x4]; // 0x7fc(0x04)
	struct TArray<struct FPlayerDamagedData> HurtedPlayers; // 0x800(0x10)
	struct FScheduledBool bIsDamageEnabled; // 0x810(0x70)

	void OnRep_IsDamageEnabled(); // Function OPP.RBDamageBoxComponent.OnRep_IsDamageEnabled // (Final|Native|Public) // @ game+0x1d49720
	void IsDamageEnabledChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBDamageBoxComponent.IsDamageEnabledChangedCallback // (Final|Native|Public) // @ game+0x1d48dc4
	bool IsDamageEnabled(); // Function OPP.RBDamageBoxComponent.IsDamageEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d48dac
	void ComponentBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBDamageBoxComponent.ComponentBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0x1d4887c
	void BP_GetHurtingPlayers(struct TArray<struct ARBPlayer*>& outHurtingPlayers); // Function OPP.RBDamageBoxComponent.BP_GetHurtingPlayers // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d485a0
};

// Class OPP.RBDarknessVolume
// Size: 0x288 (Inherited: 0x280)
struct ARBDarknessVolume : AVolume {
	bool bEnabled; // 0x280(0x01)
	bool bDark; // 0x281(0x01)
	bool bOnlyDarkWhenCrouched; // 0x282(0x01)
	bool bCurrentlyEnabled; // 0x283(0x01)
	char pad_284[0x4]; // 0x284(0x04)

	void OnRep_CurrentlyEnabled(); // Function OPP.RBDarknessVolume.OnRep_CurrentlyEnabled // (Final|Native|Public) // @ game+0x1d4dba4
	bool IsEnabled(); // Function OPP.RBDarknessVolume.IsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4d788
	void EndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function OPP.RBDarknessVolume.EndOverlap // (Final|Native|Public) // @ game+0x1d4d5bc
	void BP_SetEnabled(bool bEnabledValue); // Function OPP.RBDarknessVolume.BP_SetEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d4d1a8
	void BeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBDarknessVolume.BeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0x1d4d2b8
};

// Class OPP.RBDeadBodySpawnLocationComponent
// Size: 0x300 (Inherited: 0x2e0)
struct URBDeadBodySpawnLocationComponent : URBContainerSpawnLocationComponent {
	struct UAnimSequenceBase* DefaultPickupDeadBodyAnimSequence; // 0x2d8(0x08)
	bool bDefaultPickupWillMoveBody; // 0x2e0(0x01)
	bool bJumpScareWillMoveBody; // 0x2e1(0x01)
	float JumpScareProbabilityPercent; // 0x2e4(0x04)
	struct TArray<struct FDeadBodyJumpScareSetting> DeadBodyJumpScareBucket; // 0x2e8(0x10)
	struct UAnimSequenceBase* MovedDeadBodySequence; // 0x2f8(0x08)

	bool BP_IsPlayingJumpScareAnim(); // Function OPP.RBDeadBodySpawnLocationComponent.BP_IsPlayingJumpScareAnim // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4d158
	struct UAnimSequenceBase* BP_GetCurrentDeadBodyAnimSequence(); // Function OPP.RBDeadBodySpawnLocationComponent.BP_GetCurrentDeadBodyAnimSequence // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4d108
};

// Class OPP.RBDeadBodyContainer
// Size: 0x358 (Inherited: 0x300)
struct ARBDeadBodyContainer : ARBContainer {
	struct USkeletalMeshComponent* MainMesh; // 0x300(0x08)
	bool bCanDisableItemsIfMovingBody; // 0x308(0x01)
	bool bAlwaysApplyRandomCustomization; // 0x309(0x01)
	char pad_30A[0x6]; // 0x30a(0x06)
	struct UAnimSequenceBase* MovedDeadBodySequence; // 0x310(0x08)
	struct FRBPlayerCustomizationInfo DeadBodyCustomizationInfo; // 0x318(0x38)
	char pad_350[0x8]; // 0x350(0x08)

	void SetSkeletalMeshTickEnabled(bool bEnabled); // Function OPP.RBDeadBodyContainer.SetSkeletalMeshTickEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4dc78
	void OnRep_MovedDeadBodySequence(); // Function OPP.RBDeadBodyContainer.OnRep_MovedDeadBodySequence // (Final|Native|Protected) // @ game+0x1d4dbe8
	void Event_OnNotifyPlayRigSequence(struct UAnimationAsset* AnimToPlay); // Function OPP.RBDeadBodyContainer.Event_OnNotifyPlayRigSequence // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnMovedDeadBodySequenceChanged(); // Function OPP.RBDeadBodyContainer.Event_OnMovedDeadBodySequenceChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnCustomizationChanged(); // Function OPP.RBDeadBodyContainer.Event_OnCustomizationChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_ApplyRandomCustomization(); // Function OPP.RBDeadBodyContainer.BP_ApplyRandomCustomization // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4c6d4
};

// Class OPP.RBDeadRepulsionBoxComponent
// Size: 0x2a0 (Inherited: 0x220)
struct URBDeadRepulsionBoxComponent : USceneComponent {
	char pad_220[0x60]; // 0x220(0x60)
	bool bStartsEnabled; // 0x280(0x01)
	enum class EDeadRepulsionType RepulsionType; // 0x281(0x01)
	char pad_282[0x2]; // 0x282(0x02)
	int32_t Priority; // 0x284(0x04)
	float RepulsionSpeed; // 0x288(0x04)
	struct FVector BoxExtent; // 0x28c(0x0c)
	char RepulsionDirection; // 0x298(0x01)
	bool bEnabled; // 0x299(0x01)
	char pad_29A[0x6]; // 0x29a(0x06)

	void BP_SetEnabled(bool bEnabledValue); // Function OPP.RBDeadRepulsionBoxComponent.BP_SetEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d4d228
};

// Class OPP.RBDelayObjectiveCoordinator
// Size: 0xbb0 (Inherited: 0xba8)
struct ARBDelayObjectiveCoordinator : ARBBaseObjectiveCoordinator {
	float duration; // 0xba8(0x04)
	char pad_BAC[0x4]; // 0xbac(0x04)
};

// Class OPP.RBDeployableSkillItem
// Size: 0xa90 (Inherited: 0x9d0)
struct ARBDeployableSkillItem : ARBPickup {
	enum class EActiveSkillType ActiveSkillType; // 0x9d0(0x01)
	char pad_9D1[0x3]; // 0x9d1(0x03)
	struct FVector DeployedTranslationOffset; // 0x9d4(0x0c)
	struct USkeletalMeshComponent* SkeletalDisplayMesh; // 0x9e0(0x08)
	float DefaultHoldInputDuration; // 0x9e8(0x04)
	char pad_9EC[0x4]; // 0x9ec(0x04)
	struct USphereComponent* SphereTrigger; // 0x9f0(0x08)
	struct FMulticastInlineDelegate OnItemDeployed; // 0x9f8(0x10)
	struct ARBItemActiveSkill* ActiveSkillOwner; // 0xa08(0x08)
	struct ARBPawn* TriggeringPawn; // 0xa10(0x08)
	struct ARBPlayer* deployer; // 0xa18(0x08)
	char pad_A20[0x30]; // 0xa20(0x30)
	enum class EActiveSkillState State; // 0xa50(0x01)
	char pad_A51[0x7]; // 0xa51(0x07)
	struct TArray<struct ARBPlayer*> AdrenalineAffectedPlayers_Server; // 0xa58(0x10)
	bool bWillReactivate; // 0xa68(0x01)
	char pad_A69[0x27]; // 0xa69(0x27)

	void OnRep_State(); // Function OPP.RBDeployableSkillItem.OnRep_State // (Final|Native|Protected) // @ game+0x1d4dc50
	void OnDeployDelayFinished_Server(); // Function OPP.RBDeployableSkillItem.OnDeployDelayFinished_Server // (Final|Native|Protected) // @ game+0x1d4db10
	void OnComponentBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBDeployableSkillItem.OnComponentBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x1d4d8b0
	void Multicast_OnDeploy(struct ARBPlayer* deployer, struct FTransform Transform); // Function OPP.RBDeployableSkillItem.Multicast_OnDeploy // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1d4d7a0
	float GetZoneDuration(); // Function OPP.RBDeployableSkillItem.GetZoneDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4d768
	float GetMinDeployTime(); // Function OPP.RBDeployableSkillItem.GetMinDeployTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4d748
	float GetImpactRadius(); // Function OPP.RBDeployableSkillItem.GetImpactRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4d720
	void Event_OnPlaced(); // Function OPP.RBDeployableSkillItem.Event_OnPlaced // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnExpiredUnactivated(); // Function OPP.RBDeployableSkillItem.Event_OnExpiredUnactivated // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnDeployed(); // Function OPP.RBDeployableSkillItem.Event_OnDeployed // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnActivate(); // Function OPP.RBDeployableSkillItem.Event_OnActivate // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_EffectFinished(); // Function OPP.RBDeployableSkillItem.Event_EffectFinished // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Deploy_Server(struct ARBPlayer* deployer, struct FTransform& Transform); // Function OPP.RBDeployableSkillItem.Deploy_Server // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d4d4a8
};

// Class OPP.RBHittableActor
// Size: 0x450 (Inherited: 0x420)
struct ARBHittableActor : ARBTriggerable {
	struct USceneComponent* SceneComponent; // 0x418(0x08)
	struct UBoxComponent* InteractZoneBox; // 0x420(0x08)
	struct URBDamageableComponent* DamageableComponent; // 0x428(0x08)
	enum class EDestructibleMaterialType DestructibleMaterialType; // 0x430(0x01)
	bool bIsHittable; // 0x431(0x01)
	float HittingRange; // 0x434(0x04)
	float StartingDurabilityRatio; // 0x438(0x04)
	struct UAkAudioEvent* StrikeSound; // 0x440(0x08)
	struct UAkAudioEvent* BreakSound; // 0x448(0x08)

	void OnDamaged(struct URBDamageableComponent* damageComponent, bool bIsDestroyed); // Function OPP.RBHittableActor.OnDamaged // (Native|Protected) // @ game+0x1d78044
	void OnBreak(struct URBDamageableComponent* damageComponent); // Function OPP.RBHittableActor.OnBreak // (Native|Protected) // @ game+0x1d77c98
};

// Class OPP.RBDestructibleActor
// Size: 0x460 (Inherited: 0x450)
struct ARBDestructibleActor : ARBHittableActor {
	bool bUseCustomBreakMethod; // 0x450(0x01)
	bool bDetachBeforeBreakInSphere; // 0x451(0x01)
	char pad_452[0x6]; // 0x452(0x06)
	struct URBDestructibleComponent* DestructibleComponent; // 0x458(0x08)

	void BP_DisplaceInSphere(struct FVector Origin, struct FVector Direction, float Radius, float strength, enum class ERadialImpulseFalloff Falloff, enum class EDamageSoundMaterial DamageSoundMaterial); // Function OPP.RBDestructibleActor.BP_DisplaceInSphere // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1d4cd88
	void BP_BreakInSphere(struct FVector Origin, struct FVector Direction, float Radius, float strength, enum class ERadialImpulseFalloff Falloff, enum class EDamageSoundMaterial DamageSoundMaterial, bool bPlayBreakSound); // Function OPP.RBDestructibleActor.BP_BreakInSphere // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1d4c828
};

// Class OPP.RBDestructibleComponent
// Size: 0x10f0 (Inherited: 0xfb0)
struct URBDestructibleComponent : USkeletalMeshComponent {
	bool bAllowDisplacementWithoutMaterial; // 0xfb0(0x01)
	char pad_FB1[0x3]; // 0xfb1(0x03)
	float DefaultDisplacement; // 0xfb4(0x04)
	bool bSeeThrough; // 0xfb8(0x01)
	bool bIsMovingDestructibleComponent; // 0xfb9(0x01)
	char pad_FBA[0x2]; // 0xfba(0x02)
	int32_t MaxNumberOfHit; // 0xfbc(0x04)
	struct FScheduledInt NumberOfHits; // 0xfc0(0x78)
	struct FMulticastInlineDelegate DestroyedEvent; // 0x1038(0x10)
	int32_t RandomSeed; // 0x1048(0x04)
	char pad_104C[0x4]; // 0x104c(0x04)
	struct TArray<struct FRBDestructibleAction> Actions; // 0x1050(0x10)
	struct TArray<struct FTransform> InitialBodyTransforms; // 0x1060(0x10)
	struct FTransform InitialRelativeTransform; // 0x1070(0x30)
	char pad_10A0[0x50]; // 0x10a0(0x50)

	void WakeComponent(bool bOneFrame); // Function OPP.RBDestructibleComponent.WakeComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4dd10
	void SnapToState(); // Function OPP.RBDestructibleComponent.SnapToState // (Native|Public|BlueprintCallable) // @ game+0x1d4dcf8
	void ScheduleSleepComponent(); // Function OPP.RBDestructibleComponent.ScheduleSleepComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4dc64
	void OnRep_NumberOfHits(); // Function OPP.RBDestructibleComponent.OnRep_NumberOfHits // (Final|Native|Private) // @ game+0x1d4dc34
	void OnRep_InitialTransforms(); // Function OPP.RBDestructibleComponent.OnRep_InitialTransforms // (Final|Native|Private) // @ game+0x1d4dbb8
	void OnNumberOfHitsChanged(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBDestructibleComponent.OnNumberOfHitsChanged // (Final|Native|Private) // @ game+0x1d4db24
	void BP_Displacement(struct FVector& Origin, struct FVector& Direction, float Radius, float strength, enum class ERadialImpulseFalloff Falloff); // Function OPP.RBDestructibleComponent.BP_Displacement // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d4cf6c
	void BP_BreakNearBone(struct FName BoneName, struct FVector Direction, float Radius, float strength, enum class ERadialImpulseFalloff Falloff); // Function OPP.RBDestructibleComponent.BP_BreakNearBone // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1d4cbf4
	void BP_BreakInSphere(struct FVector Origin, struct FVector Direction, float Radius, float strength, enum class ERadialImpulseFalloff Falloff); // Function OPP.RBDestructibleComponent.BP_BreakInSphere // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1d4ca50
	void BP_BreakBones(struct TArray<struct FName>& BoneNames, struct FVector Direction, float strength); // Function OPP.RBDestructibleComponent.BP_BreakBones // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d4c6e8
};

// Class OPP.RBDestructiblePhysicalMaterial
// Size: 0xc8 (Inherited: 0x80)
struct URBDestructiblePhysicalMaterial : UPhysicalMaterial {
	bool bDisplacable; // 0x80(0x01)
	char pad_81[0x3]; // 0x81(0x03)
	struct FVector DisplacementStep; // 0x84(0x0c)
	struct FVector DisplacementMax; // 0x90(0x0c)
	bool bRotatable; // 0x9c(0x01)
	char pad_9D[0x3]; // 0x9d(0x03)
	struct FRotator RotationStep; // 0xa0(0x0c)
	struct FRotator RotationMax; // 0xac(0x0c)
	bool bDetachable; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	struct FVector DetachVector; // 0xbc(0x0c)
};

// Class OPP.RBDestructibleWall
// Size: 0x6a8 (Inherited: 0x658)
struct ARBDestructibleWall : ARBOperatable {
	char pad_658[0x10]; // 0x658(0x10)
	bool bActive; // 0x668(0x01)
	bool bBotOnlyUsableWhenChasing; // 0x669(0x01)
	bool bSoundPassthrough; // 0x66a(0x01)
	char pad_66B[0x5]; // 0x66b(0x05)
	struct UNavArea* ObstacleNavAreaClass; // 0x670(0x08)
	struct FVector ObstacleExtent; // 0x678(0x0c)
	bool bCanBeDestroyedByBots; // 0x684(0x01)
	char pad_685[0x3]; // 0x685(0x03)
	struct URBSoundConnectorComponent* SoundConnectorComp; // 0x688(0x08)
	struct URBNavLinkComponent* NavLinkComp; // 0x690(0x08)
	struct FMulticastInlineDelegate OnWallStateChangedEvent; // 0x698(0x10)

	void SetActive(bool bNewActiveValue); // Function OPP.RBDestructibleWall.SetActive // (Final|Native|Public|BlueprintCallable) // @ game+0x1d51eb0
};

// Class OPP.RBDisplayMessageZoneComponent
// Size: 0x590 (Inherited: 0x4c0)
struct URBDisplayMessageZoneComponent : UBoxComponent {
	char pad_4C0[0x60]; // 0x4c0(0x60)
	enum class EDisplayMessageViewMode ViewMode; // 0x520(0x01)
	char pad_521[0x3]; // 0x521(0x03)
	float MaxEyeInteractionDistance2D; // 0x524(0x04)
	float MaxEyeInteractionDistanceZ; // 0x528(0x04)
	float MinEyeInteractionDistanceZ; // 0x52c(0x04)
	float MaxInteractionAngle; // 0x530(0x04)
	float FarExtraForwardExtent; // 0x534(0x04)
	float FarExtraBackwardExtent; // 0x538(0x04)
	float FarExtraRightExtent; // 0x53c(0x04)
	float FarExtraLeftExtent; // 0x540(0x04)
	float FarExtraUpExtent; // 0x544(0x04)
	float FarExtraDownExtent; // 0x548(0x04)
	bool bStartsEnabled; // 0x54c(0x01)
	bool bLinkToParentInteractible; // 0x54d(0x01)
	enum class EDisplayMessagePriority DisplayPriority; // 0x54e(0x01)
	char pad_54F[0x1]; // 0x54f(0x01)
	struct FText DisplayText; // 0x550(0x18)
	struct FMulticastInlineDelegate OnEnabledChanged; // 0x568(0x10)
	char pad_578[0x10]; // 0x578(0x10)
	bool bCurrentlyEnabled; // 0x588(0x01)
	char pad_589[0x7]; // 0x589(0x07)

	void OnRep_CurrentlyEnabled(); // Function OPP.RBDisplayMessageZoneComponent.OnRep_CurrentlyEnabled // (Final|Native|Protected) // @ game+0x1d51d60
	bool IsEnabled(); // Function OPP.RBDisplayMessageZoneComponent.IsEnabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d515f4
	void BP_SetEnabled(bool bInteractible); // Function OPP.RBDisplayMessageZoneComponent.BP_SetEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d5150c
};

// Class OPP.RBDizzinessConfig
// Size: 0x100 (Inherited: 0x28)
struct URBDizzinessConfig : UObject {
	struct FDizzinessConfig Config; // 0x28(0xd4)
	char pad_FC[0x4]; // 0xfc(0x04)
};

// Class OPP.RBDocumentsWidget
// Size: 0x280 (Inherited: 0x280)
struct URBDocumentsWidget : URBCharacterSheetMenuTabWidget {
};

// Class OPP.RBDoorReplaceClass
// Size: 0x28 (Inherited: 0x28)
struct URBDoorReplaceClass : UInterface {

	void OnReplacedDoor(struct ARBDoor* door); // Function OPP.RBDoorReplaceClass.OnReplacedDoor // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d346ec
};

// Class OPP.RBDoorLockerRandomActor
// Size: 0x260 (Inherited: 0x248)
struct ARBDoorLockerRandomActor : AActor {
	char pad_248[0x8]; // 0x248(0x08)
	struct ARBDoor* linkedDoor; // 0x250(0x08)
	enum class EDoorLockerRandomAction action; // 0x258(0x01)
	char pad_259[0x7]; // 0x259(0x07)
};

// Class OPP.RBDressablePipe
// Size: 0x28 (Inherited: 0x28)
struct URBDressablePipe : UInterface {

	void ApplyMaterial(struct UMaterialInterface* Material); // Function OPP.RBDressablePipe.ApplyMaterial // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d54f7c
};

// Class OPP.RBDynamicObstacle
// Size: 0x598 (Inherited: 0x4c0)
struct ARBDynamicObstacle : ARBInteractible {
	char pad_4C0[0x8]; // 0x4c0(0x08)
	bool bEnabled; // 0x4c8(0x01)
	char pad_4C9[0x7]; // 0x4c9(0x07)
	struct FScheduledBool IsActivated; // 0x4d0(0x70)
	bool bDynamicObstacleDestroyed; // 0x540(0x01)
	char pad_541[0x3]; // 0x541(0x03)
	struct FVector BashOffset; // 0x544(0x0c)
	struct UBoxComponent* KnockdownTrigger; // 0x550(0x08)
	struct UBoxComponent* ObstacleCollison; // 0x558(0x08)
	struct UArrowComponent* PassThroughArrow; // 0x560(0x08)
	struct URBDamageableComponent* DamageableComponent; // 0x568(0x08)
	struct URBNavLinkComponent* NavLinkComp; // 0x570(0x08)
	char pad_578[0x20]; // 0x578(0x20)

	void OnRep_IsActivated(); // Function OPP.RBDynamicObstacle.OnRep_IsActivated // (Final|Native|Private) // @ game+0x1d558c8
	void OnRep_Enabled(); // Function OPP.RBDynamicObstacle.OnRep_Enabled // (Final|Native|Public) // @ game+0x1d558b0
	void OnRep_DynamicObstacleDestroyed(); // Function OPP.RBDynamicObstacle.OnRep_DynamicObstacleDestroyed // (Final|Native|Public) // @ game+0x1d55880
	void Multicast_ForceActivateDynamicObstacle(); // Function OPP.RBDynamicObstacle.Multicast_ForceActivateDynamicObstacle // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d55674
	void IsActivatedChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBDynamicObstacle.IsActivatedChangedCallback // (Final|Native|Private) // @ game+0x1d555dc
	void Event_OnDynamicObstacleDestroyed(); // Function OPP.RBDynamicObstacle.Event_OnDynamicObstacleDestroyed // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_Reset(); // Function OPP.RBDynamicObstacle.BP_Reset // (Final|Native|Public|BlueprintCallable) // @ game+0x1d5514c
	void BP_ActivateDynamicObstacle(); // Function OPP.RBDynamicObstacle.BP_ActivateDynamicObstacle // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d54ffc
};

// Class OPP.RBEditorClearanceCollisionBoxComponent
// Size: 0x4e0 (Inherited: 0x4c0)
struct URBEditorClearanceCollisionBoxComponent : UBoxComponent {
	bool bBlocksClearance; // 0x4c0(0x01)
	bool bBlocksWorld; // 0x4c1(0x01)
	bool bBlocksPushable; // 0x4c2(0x01)
	bool bChecksClearance; // 0x4c3(0x01)
	bool bChecksDoor; // 0x4c4(0x01)
	bool bCapsuleCheck; // 0x4c5(0x01)
	char pad_4C6[0x2]; // 0x4c6(0x02)
	struct TArray<struct AActor*> ClearanceIgnoreList; // 0x4c8(0x10)
	char pad_4D8[0x8]; // 0x4d8(0x08)

	void OnEditorPostLoad(); // Function OPP.RBEditorClearanceCollisionBoxComponent.OnEditorPostLoad // (Final|Native|Public|BlueprintCallable) // @ game+0x1521dbc
	bool GetClearancePlayerLocation(struct ARBPawn* Pawn, struct FVector& OutLocation); // Function OPP.RBEditorClearanceCollisionBoxComponent.GetClearancePlayerLocation // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d55404
	struct FVector GetClearanceBottomLocation(); // Function OPP.RBEditorClearanceCollisionBoxComponent.GetClearanceBottomLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d553bc
	void Event_OnPostEditorLoad(); // Function OPP.RBEditorClearanceCollisionBoxComponent.Event_OnPostEditorLoad // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Editor_SetSettingFromPlayerLocation(float finalCapsuleGroundOffset); // Function OPP.RBEditorClearanceCollisionBoxComponent.Editor_SetSettingFromPlayerLocation // (Final|Native|Public|BlueprintCallable) // @ game+0x1d32350
	void Editor_SetSettingFromPlayerInteraction(struct UObject* Interactable, enum class ESpecialMove specialMove, float finalCapsuleGroundOffset); // Function OPP.RBEditorClearanceCollisionBoxComponent.Editor_SetSettingFromPlayerInteraction // (Final|Native|Public|BlueprintCallable) // @ game+0x1d55208
	void Editor_SetSettingFromCustomLocation(struct FVector& Location, float finalCapsuleGroundOffset); // Function OPP.RBEditorClearanceCollisionBoxComponent.Editor_SetSettingFromCustomLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d55164
};

// Class OPP.RBEditorMapCheckable
// Size: 0x28 (Inherited: 0x28)
struct URBEditorMapCheckable : UInterface {

	void BP_PrepareMapCheck(); // Function OPP.RBEditorMapCheckable.BP_PrepareMapCheck // (Native|Event|Public|BlueprintEvent) // @ game+0x16ad1bc
	bool BP_MapCheck(enum class EMapCheckType checkType, struct FString& outErrorMsg); // Function OPP.RBEditorMapCheckable.BP_MapCheck // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1d5505c
};

// Class OPP.RBEditorSelectedPreviewComponent
// Size: 0x530 (Inherited: 0x520)
struct URBEditorSelectedPreviewComponent : UStaticMeshComponent {
	bool bAlwaysConsideredSelected; // 0x520(0x01)
	char pad_521[0xf]; // 0x521(0x0f)
};

// Class OPP.RBEditorTickableActor
// Size: 0x248 (Inherited: 0x248)
struct ARBEditorTickableActor : AActor {
};

// Class OPP.RBEditorUtilityInterface
// Size: 0x28 (Inherited: 0x28)
struct URBEditorUtilityInterface : UInterface {

	void TickSelected(); // Function OPP.RBEditorUtilityInterface.TickSelected // (Native|Event|Public|BlueprintEvent) // @ game+0x16ad1bc
	void PostEditMove(bool bFinished); // Function OPP.RBEditorUtilityInterface.PostEditMove // (Native|Event|Public|BlueprintEvent) // @ game+0x1d559b4
	void PostEditChange(struct FName& PropertyName); // Function OPP.RBEditorUtilityInterface.PostEditChange // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1d3addc
	void PostDuplicated(struct AActor* duplicationParent); // Function OPP.RBEditorUtilityInterface.PostDuplicated // (Native|Event|Public|BlueprintEvent) // @ game+0x1d55934
	void PostAddedToLevel(); // Function OPP.RBEditorUtilityInterface.PostAddedToLevel // (Native|Event|Public|BlueprintEvent) // @ game+0x1d55920
	void OnPostActorsPasted(struct TArray<struct AActor*>& pastedActors); // Function OPP.RBEditorUtilityInterface.OnPostActorsPasted // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1d557d4
	void OnEditorPostLoad(); // Function OPP.RBEditorUtilityInterface.OnEditorPostLoad // (Native|Event|Public|BlueprintEvent) // @ game+0x1d5568c
	bool FixUp(); // Function OPP.RBEditorUtilityInterface.FixUp // (Native|Event|Public|BlueprintEvent) // @ game+0x1d55370
};

// Class OPP.RBElectricFloorTrapComponent
// Size: 0xd80 (Inherited: 0x880)
struct URBElectricFloorTrapComponent : URBDamageBoxComponent {
	char pad_880[0x70]; // 0x880(0x70)
	struct FConfigurableFloat ActiveOnDuration; // 0x8f0(0xc8)
	struct FConfigurableFloat ActiveOffDuration; // 0x9b8(0xc8)
	struct FConfigurableFloat ActiveWarningDuration; // 0xa80(0xc8)
	struct FConfigurableFloat ActiveTriggeredDuration; // 0xb48(0xc8)
	struct URBElectricFloorTrapComponent* MasterTrap; // 0xc10(0x08)
	struct FConfigurableFloat DamageWhileRunning; // 0xc18(0xc8)
	struct FScheduledInt ElectricFloorTrapState; // 0xce0(0x78)
	struct TArray<struct URBElectricFloorTrapComponent*> SlaveTraps; // 0xd58(0x10)
	struct FMulticastInlineDelegate OnElectricFloorTrapStateChanged; // 0xd68(0x10)
	char pad_D78[0x8]; // 0xd78(0x08)

	void SetMasterTrap(struct URBElectricFloorTrapComponent* newMasterTrap); // Function OPP.RBElectricFloorTrapComponent.SetMasterTrap // (Final|Native|Public|BlueprintCallable) // @ game+0x1d55a38
	void OnRep_ElectricFloorTrapState(); // Function OPP.RBElectricFloorTrapComponent.OnRep_ElectricFloorTrapState // (Final|Native|Public) // @ game+0x1d55894
	void ElectricFloorTrapStateChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBElectricFloorTrapComponent.ElectricFloorTrapStateChangedCallback // (Final|Native|Public) // @ game+0x1d552f0
	void BP_BreakTrap(); // Function OPP.RBElectricFloorTrapComponent.BP_BreakTrap // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d55044
};

// Class OPP.RBElectrocutionDevice
// Size: 0x268 (Inherited: 0x248)
struct ARBElectrocutionDevice : AActor {
	bool bStarted; // 0x248(0x01)
	bool bCompleted; // 0x249(0x01)
	char pad_24A[0x6]; // 0x24a(0x06)
	struct ARBElectrocutionObjectiveCoordinator* LinkedCoordinator; // 0x250(0x08)
	struct TArray<struct URBElectrocutionSwitchPanelComponent*> LinkedSwitchPanels; // 0x258(0x10)

	void OnRep_OnStartedChanged(); // Function OPP.RBElectrocutionDevice.OnRep_OnStartedChanged // (Final|Native|Protected) // @ game+0x1d558f8
	void OnRep_OnCompletedChanged(); // Function OPP.RBElectrocutionDevice.OnRep_OnCompletedChanged // (Final|Native|Protected) // @ game+0x1d558e4
	int32_t GetNumberOfActivePlayers(); // Function OPP.RBElectrocutionDevice.GetNumberOfActivePlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d55558
	struct ARBElectrocutionObjectiveCoordinator* GetLinkedCoordinator(); // Function OPP.RBElectrocutionDevice.GetLinkedCoordinator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d55540
	float GetCurrentVoltageRatio(); // Function OPP.RBElectrocutionDevice.GetCurrentVoltageRatio // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d554e0
	void Event_OnStartedChanged(); // Function OPP.RBElectrocutionDevice.Event_OnStartedChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnPlayerOverloading(struct URBElectrocutionSwitchPanelComponent* panel, struct ARBPlayer* Player); // Function OPP.RBElectrocutionDevice.Event_OnPlayerOverloading // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnCurrentVoltageChanged(float currentVoltage); // Function OPP.RBElectrocutionDevice.Event_OnCurrentVoltageChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnCompletedChanged(); // Function OPP.RBElectrocutionDevice.Event_OnCompletedChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnActivePanelRemoved(struct URBElectrocutionSwitchPanelComponent* panel); // Function OPP.RBElectrocutionDevice.Event_OnActivePanelRemoved // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnActivePanelAdded(struct URBElectrocutionSwitchPanelComponent* panel); // Function OPP.RBElectrocutionDevice.Event_OnActivePanelAdded // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBElectrocutionObjectiveCoordinator
// Size: 0x1c98 (Inherited: 0xba8)
struct ARBElectrocutionObjectiveCoordinator : ARBBaseObjectiveCoordinator {
	struct FConfigurableFloat TotalVoltageToAchieve; // 0xba8(0xc8)
	struct FConfigurableFloat VoltageGainPerSec; // 0xc70(0xc8)
	struct FConfigurableFloat VoltageLossPerSec; // 0xd38(0xc8)
	struct FConfigurableFloat VoltageLossDelay; // 0xe00(0xc8)
	struct TSoftObjectPtr<ARBElectrocutionDevice> SpecificElectrocutionDevice; // 0xec8(0x28)
	struct FConfigurableFloat TimeBeforePanelOverloadBegin; // 0xef0(0xc8)
	struct FConfigurableFloat PanelOverloadDamageMinTime; // 0xfb8(0xc8)
	struct FConfigurableFloat PanelOverloadDamageMaxTime; // 0x1080(0xc8)
	struct FCustomDamageInfoData PanelOverloadDamageData; // 0x1148(0xd8)
	struct FObjectiveUISettings ElectrocutionPanelUISettings; // 0x1220(0xa50)
	float currentVoltage; // 0x1c70(0x04)
	char pad_1C74[0x4]; // 0x1c74(0x04)
	struct ARBElectrocutionDevice* ElectrocutionDevice; // 0x1c78(0x08)
	struct TArray<struct URBElectrocutionSwitchPanelComponent*> SwitchPanels; // 0x1c80(0x10)
	char pad_1C90[0x8]; // 0x1c90(0x08)

	void OnRep_CurrentVoltage(); // Function OPP.RBElectrocutionObjectiveCoordinator.OnRep_CurrentVoltage // (Final|Native|Protected) // @ game+0x1d5586c
	void OnPanelPawnInteractingChangedEvent(struct URBInteractiblePanelComponent* panel, struct ARBPawn* pawnInteracting); // Function OPP.RBElectrocutionObjectiveCoordinator.OnPanelPawnInteractingChangedEvent // (Final|Native|Protected) // @ game+0x1d556a0
	float GetNumberOfActivePlayers(); // Function OPP.RBElectrocutionObjectiveCoordinator.GetNumberOfActivePlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d55590
	float GetCurrentVoltageRatio(); // Function OPP.RBElectrocutionObjectiveCoordinator.GetCurrentVoltageRatio // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d55518
};

// Class OPP.RBElectrocutionSwitchPanelComponent
// Size: 0xb10 (Inherited: 0x7a0)
struct URBElectrocutionSwitchPanelComponent : URBInteractiblePanelComponent {
	struct FConfigurableFloat InteractTimeBeforeActive; // 0x7a0(0xc8)
	struct FConfigurableFloat AINoiseInterval; // 0x868(0xc8)
	struct FConfigurableFloat HighPriorityStimulusFullLoudnessDistance; // 0x930(0xc8)
	struct FConfigurableFloat HighPriorityStimulusMaxAudibleDistance; // 0x9f8(0xc8)
	struct ARBElectrocutionObjectiveCoordinator* LinkedCoordinator; // 0xac0(0x08)
	struct ARBElectrocutionDevice* LinkedElectrocutionDevice; // 0xac8(0x08)
	enum class EElectrocutionSwitchState SwitchState; // 0xad0(0x01)
	char pad_AD1[0x3]; // 0xad1(0x03)
	float SoftOperatingStartTime; // 0xad4(0x04)
	float SwitchActiveTime; // 0xad8(0x04)
	float OverloadBeginTime; // 0xadc(0x04)
	struct FMulticastInlineDelegate OnAccumulatedInteractionTimeChanged; // 0xae0(0x10)
	struct FMulticastInlineDelegate OnSwitchStateChanged; // 0xaf0(0x10)
	char pad_B00[0x10]; // 0xb00(0x10)

	void OnRep_SwitchState(); // Function OPP.RBElectrocutionSwitchPanelComponent.OnRep_SwitchState // (Final|Native|Private) // @ game+0x1d5590c
	bool IsInActiveState(); // Function OPP.RBElectrocutionSwitchPanelComponent.IsInActiveState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d5565c
	float GetSwitchActiveRatio(); // Function OPP.RBElectrocutionSwitchPanelComponent.GetSwitchActiveRatio // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d555b4
	float GetActiveToOverloadedRatio(); // Function OPP.RBElectrocutionSwitchPanelComponent.GetActiveToOverloadedRatio // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d55394
	void Event_OnSwitchStateChanged(); // Function OPP.RBElectrocutionSwitchPanelComponent.Event_OnSwitchStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnActiveStateChanged(); // Function OPP.RBElectrocutionSwitchPanelComponent.Event_OnActiveStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBPopUpWidget
// Size: 0x318 (Inherited: 0x308)
struct URBPopUpWidget : URBMenuWidget {
	struct URBPopUpAnchorWidget* AnchorToAdjust; // 0x308(0x08)
	bool bUsePopupCenterToAdjust; // 0x310(0x01)
	char pad_311[0x7]; // 0x311(0x07)

	void BP_AdjustToAnchor(struct URBPopUpAnchorWidget* anchorWidget, bool bUsePopupCenter); // Function OPP.RBPopUpWidget.BP_AdjustToAnchor // (Final|Native|Public|BlueprintCallable) // @ game+0x1de2fac
};

// Class OPP.RBPopUpConfirmWidget
// Size: 0x328 (Inherited: 0x318)
struct URBPopUpConfirmWidget : URBPopUpWidget {
	struct FMulticastInlineDelegate OnConfirm; // 0x318(0x10)

	void Event_InitializePopup(struct FText& TitleText, struct FText& MainText, struct FText& ConfirmText); // Function OPP.RBPopUpConfirmWidget.Event_InitializePopup // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void BP_Confirm(); // Function OPP.RBPopUpConfirmWidget.BP_Confirm // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3094
};

// Class OPP.RBErrorConfirmPopUpWidget
// Size: 0x350 (Inherited: 0x328)
struct URBErrorConfirmPopUpWidget : URBPopUpConfirmWidget {
	struct FText SecondaryMessage; // 0x328(0x18)
	struct FString ErrorCode; // 0x340(0x10)

	void InitializeErrorPopup(struct FText& Message, struct FText& errorCauseMessage, struct FString errorCodeString); // Function OPP.RBErrorConfirmPopUpWidget.InitializeErrorPopup // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d58b20
};

// Class OPP.RBEvalCorridor
// Size: 0x380 (Inherited: 0x248)
struct ARBEvalCorridor : AActor {
	char pad_248[0x8]; // 0x248(0x08)
	struct UBoxComponent* EvalCorridorZone; // 0x250(0x08)
	struct ARBEvalCorridorEntrance* EvalCorridorEntrance; // 0x258(0x08)
	struct ARBEvalCorridorExit* EvalCorridorExit; // 0x260(0x08)
	struct AActor* CinematicZoneActor; // 0x268(0x08)
	struct URBTrialAsyncData* LastTrialAsyncData; // 0x270(0x08)
	bool bIsLastTrialAsyncDataLoaded; // 0x278(0x01)
	char pad_279[0x7]; // 0x279(0x07)
	struct TArray<struct ARBPlayer*> PlayersInCorridor; // 0x280(0x10)
	char pad_290[0xf0]; // 0x290(0xf0)

	void OnPlayerInitReplicated(struct ARBPlayer* Player); // Function OPP.RBEvalCorridor.OnPlayerInitReplicated // (Final|Native|Protected) // @ game+0x1d5a4c4
	void OnComponentEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function OPP.RBEvalCorridor.OnComponentEndOverlap // (Final|Native|Protected) // @ game+0x1d59ae0
	void OnComponentBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBEvalCorridor.OnComponentBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x1d58e18
	void Event_OnLocalPlayerExited(); // Function OPP.RBEvalCorridor.Event_OnLocalPlayerExited // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnLocalPlayerEntered(); // Function OPP.RBEvalCorridor.Event_OnLocalPlayerEntered // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBEvalCorridorEntrance
// Size: 0x268 (Inherited: 0x248)
struct ARBEvalCorridorEntrance : AActor {
	char pad_248[0x8]; // 0x248(0x08)
	struct UBoxComponent* OpenDoorTrigger; // 0x250(0x08)
	struct URBPositionComponent* SpawnPositionComponent; // 0x258(0x08)
	bool bLocallyClosed; // 0x260(0x01)
	char pad_261[0x7]; // 0x261(0x07)

	void OnComponentBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBEvalCorridorEntrance.OnComponentBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x1d594d0
	void Event_OnLocallyClosedChanged(); // Function OPP.RBEvalCorridorEntrance.Event_OnLocallyClosedChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBEvalCorridorExit
// Size: 0x260 (Inherited: 0x248)
struct ARBEvalCorridorExit : AActor {
	float PlayerTeleportDelayTime; // 0x248(0x04)
	char pad_24C[0x4]; // 0x24c(0x04)
	struct UBoxComponent* ReturnToLobbyTrigger; // 0x250(0x08)
	struct USceneComponent* TeleportPointRef; // 0x258(0x08)

	void OnComponentBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBEvalCorridorExit.OnComponentBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x1d596b8
	void Event_OnLocalPlayerEntered(); // Function OPP.RBEvalCorridorExit.Event_OnLocalPlayerEntered // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBEvalCorridorHelperComponent
// Size: 0x2b0 (Inherited: 0x220)
struct URBEvalCorridorHelperComponent : USceneComponent {
	char pad_220[0x10]; // 0x220(0x10)
	bool bAutoDisableCollisionOnEnterCorridor; // 0x230(0x01)
	bool bAutoDisableExcludeLocalPlayer; // 0x231(0x01)
	char pad_232[0x6]; // 0x232(0x06)
	struct TArray<struct UPrimitiveComponent*> LinkedCollisions; // 0x238(0x10)
	struct TArray<struct ARBPlayer*> DisabledCollisionsForPlayers_Server; // 0x248(0x10)
	struct TArray<struct ARBPlayer*> DisabledCollisionsForPlayers_Local; // 0x258(0x10)
	struct FMulticastInlineDelegate OnPlayerEnteredCorridorCallback; // 0x268(0x10)
	struct FMulticastInlineDelegate OnPlayerExitedCorridorCallback; // 0x278(0x10)
	struct FMulticastInlineDelegate OnCollisionForPlayerEnabled; // 0x288(0x10)
	struct FMulticastInlineDelegate OnCollisionForPlayerDisabled; // 0x298(0x10)
	char pad_2A8[0x8]; // 0x2a8(0x08)

	void Multicast_ScheduleCollisionEnabledForPlayer(struct ARBPlayer* Player, bool bEnabled, float executionTime, bool bSkipLocalPlayer); // Function OPP.RBEvalCorridorHelperComponent.Multicast_ScheduleCollisionEnabledForPlayer // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d58cd0
	void BP_ScheduleCollisionEnabledLocalPlayer(bool bEnabled, float delay); // Function OPP.RBEvalCorridorHelperComponent.BP_ScheduleCollisionEnabledLocalPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x1d58860
	void BP_ScheduleCollisionEnabled(struct ARBPlayer* Player, bool bEnabled, float delay); // Function OPP.RBEvalCorridorHelperComponent.BP_ScheduleCollisionEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d58704
};

// Class OPP.RBBaseExitStageObjectiveCoordinator
// Size: 0xba8 (Inherited: 0xba8)
struct ARBBaseExitStageObjectiveCoordinator : ARBBaseObjectiveCoordinator {
};

// Class OPP.RBExitStageObjectiveCoordinator
// Size: 0x2178 (Inherited: 0xba8)
struct ARBExitStageObjectiveCoordinator : ARBBaseExitStageObjectiveCoordinator {
	struct AActor* StageEndButtonClass; // 0xba8(0x08)
	struct TArray<struct TSoftObjectPtr<ARBNarrativeScreen>> SpecificCountdownNarrativeScreens; // 0xbb0(0x10)
	int32_t TimeBeforeTrainArrival; // 0xbc0(0x04)
	int32_t EndOfStageWarningRemainingTime; // 0xbc4(0x04)
	float EndOfStageFinalWarningRemainingTime; // 0xbc8(0x04)
	char pad_BCC[0x4]; // 0xbcc(0x04)
	struct FObjectiveUISettings ExitObjectiveUISettings; // 0xbd0(0xa50)
	struct FObjectiveUISettings StageEndButtonObjectiveUISettings; // 0x1620(0xa50)
	struct FText PressStageButtonText; // 0x2070(0x18)
	struct FText WaitForTrainArrivalText; // 0x2088(0x18)
	struct FText EndOfStageStartedMsg; // 0x20a0(0x18)
	struct FText EndOfStageStartedNoPlayersMsg; // 0x20b8(0x18)
	struct FText EndOfStageWarningMsg; // 0x20d0(0x18)
	struct FText EndOfStageFinalWarningMsg; // 0x20e8(0x18)
	struct UAkAudioEvent* TrainArrivalSound; // 0x2100(0x08)
	struct UAkAudioEvent* EndOfStageCountdownStartedSound; // 0x2108(0x08)
	struct UAkAudioEvent* EndOfStageCountdownWarningSound; // 0x2110(0x08)
	struct UAkAudioEvent* EndOfStageCountdownFinalWarningSound; // 0x2118(0x08)
	struct FMulticastInlineDelegate OnExitStageObjectiveStateChanged; // 0x2120(0x10)
	enum class EExitStageObjectiveState objectiveState; // 0x2130(0x01)
	char pad_2131[0x3]; // 0x2131(0x03)
	float TrainArrivalTimestamp; // 0x2134(0x04)
	struct URBInteractionZoneComponent* StageEndButtonPtr; // 0x2138(0x08)
	struct AActor* TargetExit_Local; // 0x2140(0x08)
	struct AActor* TargetButton_Local; // 0x2148(0x08)
	struct ARBPlayer* WatchedPlayer_Local; // 0x2150(0x08)
	int32_t NumberOfPlayersInCompleting_Local; // 0x2158(0x04)
	char pad_215C[0x4]; // 0x215c(0x04)
	struct ARBPlayer* ButtonPresser; // 0x2160(0x08)
	char pad_2168[0x10]; // 0x2168(0x10)

	void OnRep_ObjectiveState(); // Function OPP.RBExitStageObjectiveCoordinator.OnRep_ObjectiveState // (Final|Native|Private) // @ game+0x1d5a6f0
	void OnPlayerSimpleDoAction(struct ARBPawn* Player, struct URBInteractibleComponent* Component); // Function OPP.RBExitStageObjectiveCoordinator.OnPlayerSimpleDoAction // (Final|Native|Private) // @ game+0x1d5a5f4
	void OnPlayerRevived(struct ARBPlayer* instigatorActor, struct ARBPlayer* subjectActor); // Function OPP.RBExitStageObjectiveCoordinator.OnPlayerRevived // (Final|Native|Private) // @ game+0x1d5a380
	void OnPawnRespawned(struct ARBPawn* Pawn); // Function OPP.RBExitStageObjectiveCoordinator.OnPawnRespawned // (Final|Native|Private) // @ game+0x1d5a444
	void OnPawnKilled(struct ARBPawn* instigatorActor, struct ARBPawn* subjectActor); // Function OPP.RBExitStageObjectiveCoordinator.OnPawnKilled // (Final|Native|Private) // @ game+0x1d5a380
	void OnOperatingFinished(struct URBOperatableComponent* Component, struct ARBPawn* Player); // Function OPP.RBExitStageObjectiveCoordinator.OnOperatingFinished // (Final|Native|Private) // @ game+0x1d5a2bc
	void OnGamePhaseUpdated(enum class EGamePhase gamePhase); // Function OPP.RBExitStageObjectiveCoordinator.OnGamePhaseUpdated // (Final|Native|Private) // @ game+0x1d59fb8
	void Event_OnExitStageObjectiveStateChanged(enum class EExitStageObjectiveState objectiveState); // Function OPP.RBExitStageObjectiveCoordinator.Event_OnExitStageObjectiveStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBReleaseExitStageObjectiveCoordinator
// Size: 0xba8 (Inherited: 0xba8)
struct ARBReleaseExitStageObjectiveCoordinator : ARBBaseExitStageObjectiveCoordinator {

	void OnCreditsMenuPopped(); // Function OPP.RBReleaseExitStageObjectiveCoordinator.OnCreditsMenuPopped // (Final|Native|Private) // @ game+0x1d59f90
};

// Class OPP.RBExperimentBoardMenu
// Size: 0x348 (Inherited: 0x308)
struct URBExperimentBoardMenu : URBMenuWidget {
	bool bAllowDebugMatchSettings; // 0x308(0x01)
	char pad_309[0x7]; // 0x309(0x07)
	struct ARBLobbyPlayerController* RBLobbyPlayerController; // 0x310(0x08)
	char pad_318[0x30]; // 0x318(0x30)

	void StartMatchCountdown(); // Function OPP.RBExperimentBoardMenu.StartMatchCountdown // (Final|Native|Public|BlueprintCallable) // @ game+0x1d5aa28
	void SetTrialId(struct FName& TrialId); // Function OPP.RBExperimentBoardMenu.SetTrialId // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d5a968
	void SetStageName(struct FName& StageName); // Function OPP.RBExperimentBoardMenu.SetStageName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d5a8c0
	void SetSeed(int32_t Seed); // Function OPP.RBExperimentBoardMenu.SetSeed // (Final|Native|Public|BlueprintCallable) // @ game+0x1d5a840
	void SetMissionName(struct FName& MissionName); // Function OPP.RBExperimentBoardMenu.SetMissionName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d5a798
	void SetGameDifficulty(enum class EGameDifficulty GameDifficulty); // Function OPP.RBExperimentBoardMenu.SetGameDifficulty // (Final|Native|Public|BlueprintCallable) // @ game+0x1d5a718
	void SaveMatchSettings(); // Function OPP.RBExperimentBoardMenu.SaveMatchSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x1d5a704
	void OnMatchStateUpdated(struct ARBLobbyPlayerState* RBLobbyPlayerState, struct FMatchState& MatchState); // Function OPP.RBExperimentBoardMenu.OnMatchStateUpdated // (Final|Native|Private|HasOutParms) // @ game+0x1d5a1ec
	void OnMatchSettingsUpdated(struct FMatchSettings& MatchSettings); // Function OPP.RBExperimentBoardMenu.OnMatchSettingsUpdated // (Final|Native|Private|HasOutParms) // @ game+0x1d5a154
	bool IsMatchOwner(); // Function OPP.RBExperimentBoardMenu.IsMatchOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d58c80
	struct FMatchSettings GetMatchSettings(); // Function OPP.RBExperimentBoardMenu.GetMatchSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d58a80
	int32_t GetMatchCurrentPlayerCount(); // Function OPP.RBExperimentBoardMenu.GetMatchCurrentPlayerCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d58a4c
	void Event_Refresh(); // Function OPP.RBExperimentBoardMenu.Event_Refresh // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	bool CanStartMatch(); // Function OPP.RBExperimentBoardMenu.CanStartMatch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d58978
	void CancelMatchCountdown(); // Function OPP.RBExperimentBoardMenu.CancelMatchCountdown // (Final|Native|Public|BlueprintCallable) // @ game+0x1d589b0
	bool CanCancelMatch(); // Function OPP.RBExperimentBoardMenu.CanCancelMatch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d58928
};

// Class OPP.RBGameModePersistentData
// Size: 0x30 (Inherited: 0x30)
struct URBGameModePersistentData : UDataAsset {
};

// Class OPP.RBExperimentPersistentData
// Size: 0x98 (Inherited: 0x30)
struct URBExperimentPersistentData : URBGameModePersistentData {
	struct TArray<struct FRandomDoorReplacement> DoorRandomizationReplacementsActors; // 0x30(0x10)
	struct UPhysicalMaterial* DeepWaterFootstepMaterial; // 0x40(0x08)
	struct TArray<struct UAkAudioEvent*> PeriodicGasAnnounceEvents; // 0x48(0x10)
	struct TArray<struct UAkAudioEvent*> PeriodicGasStartEvents; // 0x58(0x10)
	struct TArray<struct UAkAudioEvent*> PeriodicGasEndEvents; // 0x68(0x10)
	struct UAkAudioEvent* UnderwaterPlayerInEvent; // 0x78(0x08)
	struct UAkAudioEvent* UnderwaterPlayerOutEvent; // 0x80(0x08)
	struct UAkAudioEvent* UnderwaterLowPassOnEvent; // 0x88(0x08)
	struct UAkAudioEvent* UnderwaterLowPassOffEvent; // 0x90(0x08)
};

// Class OPP.RBPhotoFinishEntry
// Size: 0x268 (Inherited: 0x268)
struct URBPhotoFinishEntry : URBUserWidget {

	void Event_Setup(struct FEndStagePlayerInfo& Info); // Function OPP.RBPhotoFinishEntry.Event_Setup // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBExperimentResultScreen
// Size: 0x4d8 (Inherited: 0x308)
struct URBExperimentResultScreen : URBMenuWidget {
	struct FEndStageInfo EndStageInfo; // 0x308(0x50)
	struct FEndStagePlayerInfo EndStageLocalPlayerInfo; // 0x358(0xe0)
	struct ARBSocialMenuSceneActor* SceneActor; // 0x438(0x08)
	bool bHasMurkoffComment; // 0x440(0x01)
	char pad_441[0x7]; // 0x441(0x07)
	struct FText MurkoffComment; // 0x448(0x18)
	bool bMurkoffCommentBasedOnDeaths; // 0x460(0x01)
	bool bIsPlayingWithOthers; // 0x461(0x01)
	char pad_462[0x6]; // 0x462(0x06)
	struct URBMenuWidget* LeaveMenuClass; // 0x468(0x08)
	struct URBSocialMenuEntry* PhotoFinishOverheadEntryClass; // 0x470(0x08)
	struct UDataTable* MurkoffCommentDataTable; // 0x478(0x08)
	struct ARBController* RBController; // 0x480(0x08)
	char pad_488[0x40]; // 0x488(0x40)
	struct TArray<struct URBSocialMenuEntry*> PhotoFinishOverheadEntries; // 0x4c8(0x10)

	void OnPlayerLeftGame(struct FUniqueNetIdRepl UniqueId); // Function OPP.RBExperimentResultScreen.OnPlayerLeftGame // (Final|Native|Private) // @ game+0x1d5a544
	void OnLobbyGameSessionAvailable(); // Function OPP.RBExperimentResultScreen.OnLobbyGameSessionAvailable // (Final|Native|Private) // @ game+0x1d5a138
	void OnLeaving(enum class EPlayerLeaveTarget Target); // Function OPP.RBExperimentResultScreen.OnLeaving // (Final|Native|Private) // @ game+0x1d5a0bc
	void OnGamePhaseUpdated(enum class EGamePhase gamePhase); // Function OPP.RBExperimentResultScreen.OnGamePhaseUpdated // (Final|Native|Private) // @ game+0x1d5a03c
	void OnDrawHud(); // Function OPP.RBExperimentResultScreen.OnDrawHud // (Final|Native|Private) // @ game+0x1d59fa4
	void Leave(); // Function OPP.RBExperimentResultScreen.Leave // (Final|Native|Public|BlueprintCallable) // @ game+0x1d58cbc
	bool IsReturningToLobbyWithParty(); // Function OPP.RBExperimentResultScreen.IsReturningToLobbyWithParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d58ca4
	void InitSocialMenuScene(); // Function OPP.RBExperimentResultScreen.InitSocialMenuScene // (Final|Native|Public|BlueprintCallable) // @ game+0x1d58b0c
	int32_t GetSecondsRemaining(); // Function OPP.RBExperimentResultScreen.GetSecondsRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d58aa8
	void Event_UpdateReadyState(); // Function OPP.RBExperimentResultScreen.Event_UpdateReadyState // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_StartAnimations(); // Function OPP.RBExperimentResultScreen.Event_StartAnimations // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_Refresh(); // Function OPP.RBExperimentResultScreen.Event_Refresh // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void ClearSocialMenuScene(); // Function OPP.RBExperimentResultScreen.ClearSocialMenuScene // (Final|Native|Public|BlueprintCallable) // @ game+0x1d58a38
	void ClearOverheadEntries(); // Function OPP.RBExperimentResultScreen.ClearOverheadEntries // (Final|Native|Public|BlueprintCallable) // @ game+0x1d589dc
	bool CanLeave(); // Function OPP.RBExperimentResultScreen.CanLeave // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d58960
};

// Class OPP.RBRandomizableActor
// Size: 0x258 (Inherited: 0x248)
struct ARBRandomizableActor : AActor {
	char pad_248[0x8]; // 0x248(0x08)
	struct URBRandomizableHelperComponent* RandomizableHelper; // 0x250(0x08)
};

// Class OPP.RBExplosiveTrap
// Size: 0x950 (Inherited: 0x258)
struct ARBExplosiveTrap : ARBRandomizableActor {
	char pad_258[0x68]; // 0x258(0x68)
	struct USphereComponent* SphereTrigger; // 0x2c0(0x08)
	struct USceneComponent* RaycastPointRef; // 0x2c8(0x08)
	struct FConfigurableFloat ExplosionDetectionRange; // 0x2d0(0xc8)
	struct FConfigurableFloat ExplosionMinDamageRange; // 0x398(0xc8)
	struct FConfigurableFloat ExplosionMaxDamageRange; // 0x460(0xc8)
	struct FConfigurableFloat ExplosionMinDamagePercent; // 0x528(0xc8)
	struct FConfigurableFloat ExplosionRatioDecayRate; // 0x5f0(0xc8)
	struct FConfigurableFloat ExplosionRatioGainRate; // 0x6b8(0xc8)
	struct FConfigurableFloat PsychosisGainInExplosion; // 0x780(0xc8)
	struct FConfigurableFloat ExplosionDamage; // 0x848(0xc8)
	enum class EDamageType ExplosionDamageType; // 0x910(0x01)
	char pad_911[0x3]; // 0x911(0x03)
	float HitReactionDamageDistance2D; // 0x914(0x04)
	bool bExploded; // 0x918(0x01)
	char pad_919[0x3]; // 0x919(0x03)
	float ExplosionTimeStamp; // 0x91c(0x04)
	float ExplosionRatio; // 0x920(0x04)
	bool bIsActive; // 0x924(0x01)
	char pad_925[0x3]; // 0x925(0x03)
	struct TArray<struct ARBPlayer*> PlayersInRange_Server; // 0x928(0x10)
	struct TArray<struct ARBPlayer*> VisiblePlayers_Server; // 0x938(0x10)
	char pad_948[0x8]; // 0x948(0x08)

	void OnRep_ExplosionRatio(); // Function OPP.RBExplosiveTrap.OnRep_ExplosionRatio // (Final|Native|Protected) // @ game+0x1d5a6dc
	void OnRep_Exploded(); // Function OPP.RBExplosiveTrap.OnRep_Exploded // (Final|Native|Protected) // @ game+0x1d5a6b8
	void OnComponentEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function OPP.RBExplosiveTrap.OnComponentEndOverlap // (Final|Native|Protected) // @ game+0x1d59e18
	void OnComponentBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBExplosiveTrap.OnComponentBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x1d598c4
	void Multicast_Explode(); // Function OPP.RBExplosiveTrap.Multicast_Explode // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d21684
	void Multicast_Disable(); // Function OPP.RBExplosiveTrap.Multicast_Disable // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1cfe9e0
	void Event_SnapToState(); // Function OPP.RBExplosiveTrap.Event_SnapToState // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_Explode(); // Function OPP.RBExplosiveTrap.Event_Explode // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_Disable(); // Function OPP.RBExplosiveTrap.Event_Disable // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_ActiveChanged(); // Function OPP.RBExplosiveTrap.Event_ActiveChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_ForceExplode(); // Function OPP.RBExplosiveTrap.BP_ForceExplode // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d586c8
};

// Class OPP.RBFloorMaterialBoxComponent
// Size: 0x510 (Inherited: 0x4c0)
struct URBFloorMaterialBoxComponent : UBoxComponent {
	char pad_4C0[0x8]; // 0x4c0(0x08)
	bool bStartsEnabled; // 0x4c8(0x01)
	char pad_4C9[0x3]; // 0x4c9(0x03)
	int32_t Priority; // 0x4cc(0x04)
	struct UPhysicalMaterial* FloorMaterial; // 0x4d0(0x08)
	struct FFootstepData SurfaceData; // 0x4d8(0x28)
	float NoiseOverride; // 0x500(0x04)
	bool bIsObviousNoiseSurface; // 0x504(0x01)
	bool bEnabled; // 0x505(0x01)
	char pad_506[0xa]; // 0x506(0x0a)

	void OnRep_Enabled(); // Function OPP.RBFloorMaterialBoxComponent.OnRep_Enabled // (Final|Native|Public) // @ game+0x1d5e824
	void EndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function OPP.RBFloorMaterialBoxComponent.EndOverlap // (Final|Native|Public) // @ game+0x1d5e588
	void BP_SetEnabled(bool bEnabledValue); // Function OPP.RBFloorMaterialBoxComponent.BP_SetEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d5de3c
	void BeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBFloorMaterialBoxComponent.BeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0x1d5e16c
};

// Class OPP.RBFloorMaterialOverride
// Size: 0x28 (Inherited: 0x28)
struct URBFloorMaterialOverride : UInterface {
};

// Class OPP.RBFloorMaterialVolume
// Size: 0x2d0 (Inherited: 0x280)
struct ARBFloorMaterialVolume : AVolume {
	char pad_280[0x10]; // 0x280(0x10)
	int32_t Priority; // 0x290(0x04)
	char pad_294[0x4]; // 0x294(0x04)
	struct UPhysicalMaterial* FloorMaterial; // 0x298(0x08)
	struct FFootstepData SurfaceData; // 0x2a0(0x28)
	float NoiseOverride; // 0x2c8(0x04)
	bool bIsObviousNoiseSurface; // 0x2cc(0x01)
	bool bEnabled; // 0x2cd(0x01)
	bool bRandomlyDisabled; // 0x2ce(0x01)
	char pad_2CF[0x1]; // 0x2cf(0x01)

	void OnRep_RandomlyDisabled(); // Function OPP.RBFloorMaterialVolume.OnRep_RandomlyDisabled // (Final|Native|Private) // @ game+0x1d5e8e0
	void OnRep_Enabled(); // Function OPP.RBFloorMaterialVolume.OnRep_Enabled // (Final|Native|Public) // @ game+0x1d5e810
	void EndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function OPP.RBFloorMaterialVolume.EndOverlap // (Final|Native|Public) // @ game+0x1d5e434
	void BP_SetEnabled(bool bEnabledValue); // Function OPP.RBFloorMaterialVolume.BP_SetEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d5ddac
	void BeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBFloorMaterialVolume.BeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0x1d5df88
};

// Class OPP.RBFocusPullingCameraActor
// Size: 0x840 (Inherited: 0x830)
struct ARBFocusPullingCameraActor : ACameraActor {
	char pad_830[0x10]; // 0x830(0x10)
};

// Class OPP.RBFocusPullingCameraComponent
// Size: 0x860 (Inherited: 0x850)
struct URBFocusPullingCameraComponent : UCameraComponent {
	struct FVector FocusPosition; // 0x850(0x0c)
	char pad_85C[0x4]; // 0x85c(0x04)
};

// Class OPP.RBFootStepGridComponent
// Size: 0x270 (Inherited: 0x220)
struct URBFootStepGridComponent : USceneComponent {
	struct FVector GridSize; // 0x218(0x0c)
	struct FVector VoxelSize; // 0x224(0x0c)
	uint64_t CellDepthCount; // 0x230(0x08)
	uint64_t CellWidthCount; // 0x238(0x08)
	uint64_t CellHeightCount; // 0x240(0x08)
	struct FGuid FootstepDataId; // 0x248(0x10)
	enum class EGridType GridType; // 0x258(0x01)
	struct FVector GridWorldOffset; // 0x25c(0x0c)
	bool bDiscardDefaultMaterialVoxel; // 0x268(0x01)
	bool bShowAsIfSelected; // 0x269(0x01)
	char pad_26F[0x1]; // 0x26f(0x01)

	void ClearCurrentData(); // Function OPP.RBFootStepGridComponent.ClearCurrentData // (Final|Native|Public) // @ game+0x1521dbc
	void ClearAllData(); // Function OPP.RBFootStepGridComponent.ClearAllData // (Final|Native|Public) // @ game+0x1521dbc
};

// Class OPP.RBFrequencyMatchKnobComponent
// Size: 0x930 (Inherited: 0x600)
struct URBFrequencyMatchKnobComponent : URBInteractibleComponent {
	bool bNeedHoldInput; // 0x5f8(0x01)
	bool bAllowWrapAroundTurning; // 0x5f9(0x01)
	bool bCheckWhileHolding; // 0x5fa(0x01)
	float CheckRatioWhileInteractingDelay; // 0x5fc(0x04)
	struct FVector2D MouseInputRotationMultiplier; // 0x600(0x08)
	struct FVector2D GamepadInputRotationMultiplier; // 0x608(0x08)
	struct FVector2D GamepadInputExpRotationMultiplier; // 0x610(0x08)
	struct FText OnKnobInteractionTextMouseKB; // 0x618(0x18)
	struct FText OnKnobInteractionTextGamepadWithoutRightThumb; // 0x630(0x18)
	struct FText OnKnobInteractionTextGamepadWithRightThumb; // 0x648(0x18)
	struct FConfigurableFloat MaxStartingRatioDistance; // 0x660(0xc8)
	struct FConfigurableFloat MinStartingRatioDistance; // 0x728(0xc8)
	struct FConfigurableFloat AcceptableErrorRatio; // 0x7f0(0xc8)
	bool bAreStartAndEndRatioEqual; // 0x8b8(0x01)
	float CurrentRatio; // 0x8bc(0x04)
	float TargetRatio; // 0x8c0(0x04)
	bool bIsCompleted; // 0x8c4(0x01)
	struct ARBPlayer* PlayerOnKnob; // 0x8c8(0x08)
	struct FMulticastInlineDelegate OnCurrentRatioChanged; // 0x8d0(0x10)
	struct FMulticastInlineDelegate OnCompletedChanged; // 0x8e0(0x10)
	struct FMulticastInlineDelegate OnLocallyFocusedChanged; // 0x8f0(0x10)
	struct FMulticastInlineDelegate OnPlayerOnKnobChanged; // 0x900(0x10)
	struct URBFrequencyMatchPanelComponent* ParentPanel; // 0x910(0x08)
	char pad_919[0x17]; // 0x919(0x17)

	void OnRep_PlayerOnKnob(struct ARBPlayer* OldValue); // Function OPP.RBFrequencyMatchKnobComponent.OnRep_PlayerOnKnob // (Final|Native|Public) // @ game+0x1d5e860
	void OnRep_IsCompleted(); // Function OPP.RBFrequencyMatchKnobComponent.OnRep_IsCompleted // (Final|Native|Public) // @ game+0x1d5e838
	void OnRep_CurrentRatio(); // Function OPP.RBFrequencyMatchKnobComponent.OnRep_CurrentRatio // (Final|Native|Public) // @ game+0x1d5e7fc
	void Multicast_InitializeKnobPosition(float ratio); // Function OPP.RBFrequencyMatchKnobComponent.Multicast_InitializeKnobPosition // (Final|Net|NetReliableNative|Event|NetMulticast|Private|BlueprintCallable) // @ game+0x1d5e760
	bool IsLocallyFocused(); // Function OPP.RBFrequencyMatchKnobComponent.IsLocallyFocused // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d5e748
	bool GetIsCompletedForDisplay(); // Function OPP.RBFrequencyMatchKnobComponent.GetIsCompletedForDisplay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d5e6ec
	float GetCurrentRatioForDisplay(); // Function OPP.RBFrequencyMatchKnobComponent.GetCurrentRatioForDisplay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d5e6d4
	void Event_OnPlayerOnKnobChanged(); // Function OPP.RBFrequencyMatchKnobComponent.Event_OnPlayerOnKnobChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnLocallyFocusedChanged(); // Function OPP.RBFrequencyMatchKnobComponent.Event_OnLocallyFocusedChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnIsCompletedChanged(); // Function OPP.RBFrequencyMatchKnobComponent.Event_OnIsCompletedChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnCurrentRatioChanged(); // Function OPP.RBFrequencyMatchKnobComponent.Event_OnCurrentRatioChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBFrequencyMatchPanelComponent
// Size: 0x800 (Inherited: 0x7a0)
struct URBFrequencyMatchPanelComponent : URBInteractiblePanelComponent {
	char pad_7A0[0x8]; // 0x7a0(0x08)
	struct TArray<struct URBFrequencyMatchKnobComponent*> Knobs; // 0x7a8(0x10)
	struct TArray<struct URBFrequencyMatchKnobComponent*> CompletedKnobs; // 0x7b8(0x10)
	bool bIsCompleted; // 0x7c8(0x01)
	char pad_7C9[0x7]; // 0x7c9(0x07)
	struct FMulticastInlineDelegate OnPanelSucceeded; // 0x7d0(0x10)
	struct FMulticastInlineDelegate OnKnobInteractionStarted; // 0x7e0(0x10)
	struct FMulticastInlineDelegate OnKnobInteractionEnded; // 0x7f0(0x10)

	void OnRep_IsCompleted(); // Function OPP.RBFrequencyMatchPanelComponent.OnRep_IsCompleted // (Final|Native|Protected) // @ game+0x1d5e84c
	void OnCompletedGameplayCallback(); // Function OPP.RBFrequencyMatchPanelComponent.OnCompletedGameplayCallback // (Final|Native|Protected) // @ game+0x1d5e7e8
};

// Class OPP.RBNotificationUserWidget
// Size: 0x2d0 (Inherited: 0x268)
struct URBNotificationUserWidget : URBUserWidget {
	struct UAkAudioEvent* OnShowSoundEvent; // 0x268(0x08)
	struct UAkAudioEvent* OnAcceptSoundEvent; // 0x270(0x08)
	struct UAkAudioEvent* OnRefuseSoundEvent; // 0x278(0x08)
	struct UAkAudioEvent* OnBlockedSoundEvent; // 0x280(0x08)
	bool bEnableAccept; // 0x288(0x01)
	bool bEnableRefuse; // 0x289(0x01)
	bool bEnableBlock; // 0x28a(0x01)
	char pad_28B[0x5]; // 0x28b(0x05)
	struct FString PlayerName; // 0x290(0x10)
	float totalDisplayTime; // 0x2a0(0x04)
	char pad_2A4[0x2c]; // 0x2a4(0x2c)

	void Refuse(); // Function OPP.RBNotificationUserWidget.Refuse // (Native|Public|BlueprintCallable) // @ game+0x1da81a0
	void Hide(); // Function OPP.RBNotificationUserWidget.Hide // (Final|Native|Public|BlueprintCallable) // @ game+0x1da5890
	void Hidden(); // Function OPP.RBNotificationUserWidget.Hidden // (Final|Native|Public|BlueprintCallable) // @ game+0x1da587c
	void Event_UpdateDisplayTime(float DisplayTime, float totalDisplayTime); // Function OPP.RBNotificationUserWidget.Event_UpdateDisplayTime // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_Show(); // Function OPP.RBNotificationUserWidget.Event_Show // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_Refused(); // Function OPP.RBNotificationUserWidget.Event_Refused // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_Hide(); // Function OPP.RBNotificationUserWidget.Event_Hide // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_Blocked(); // Function OPP.RBNotificationUserWidget.Event_Blocked // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_Accepted(); // Function OPP.RBNotificationUserWidget.Event_Accepted // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Block(); // Function OPP.RBNotificationUserWidget.Block // (Native|Public|BlueprintCallable) // @ game+0x1da5718
	void Accept(); // Function OPP.RBNotificationUserWidget.Accept // (Native|Public|BlueprintCallable) // @ game+0x1da4b00
};

// Class OPP.RBFriendInviteNotificationUserWidget
// Size: 0x2d8 (Inherited: 0x2d0)
struct URBFriendInviteNotificationUserWidget : URBNotificationUserWidget {
	char pad_2D0[0x8]; // 0x2d0(0x08)
};

// Class OPP.RBFunctionalTestManager
// Size: 0x48 (Inherited: 0x28)
struct URBFunctionalTestManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct URBFunctionalTestAgent*> FunctionalTests; // 0x30(0x10)
	struct UWorld* World; // 0x40(0x08)
};

// Class OPP.RBFXControlActor
// Size: 0x270 (Inherited: 0x248)
struct ARBFXControlActor : AActor {
	bool bEnableGameplayEffects; // 0x248(0x01)
	char pad_249[0x3]; // 0x249(0x03)
	float OverrideHallucinationFXIntensity; // 0x24c(0x04)
	float FOVOverride; // 0x250(0x04)
	float DizzinessIntensityOverride; // 0x254(0x04)
	float OverridePsychosisVeins; // 0x258(0x04)
	float OverridePsychosisColors; // 0x25c(0x04)
	float OverridePsychosisDeform; // 0x260(0x04)
	float OverridePsychosisShake; // 0x264(0x04)
	float OverridePsychosisDarkTexture; // 0x268(0x04)
	bool bDisableAllPostProcessOverrides; // 0x26c(0x01)
	char pad_26D[0x3]; // 0x26d(0x03)

	void BP_Deactivate(); // Function OPP.RBFXControlActor.BP_Deactivate // (Final|Native|Public|BlueprintCallable) // @ game+0x1d5dd98
	void BP_Activate(); // Function OPP.RBFXControlActor.BP_Activate // (Final|Native|Public|BlueprintCallable) // @ game+0x1d5dd4c
};

// Class OPP.RBFXManager
// Size: 0xd10 (Inherited: 0x28)
struct URBFXManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FAdditiveFOVData AdditiveFOV; // 0x30(0x18)
	char pad_48[0x8]; // 0x48(0x08)
	struct FPostProcessSettings BasePostProcessSettings; // 0x50(0x5b0)
	struct FPostProcessSettings BlueprintFXProcessSettings; // 0x600(0x5b0)
	struct TArray<struct FFXPostProcessData> DynPPSMats; // 0xbb0(0x10)
	struct TArray<struct FFXPostProcessSettings> DynPPSSettings; // 0xbc0(0x10)
	struct TArray<struct UMaterialParameterCollection*> MaterialParameterCollections; // 0xbd0(0x10)
	struct TArray<struct FPostProcessParamData> PPSParams; // 0xbe0(0x10)
	struct TArray<struct ARBFXControlActor*> ActiveControlActors; // 0xbf0(0x10)
	char pad_C00[0x18]; // 0xc00(0x18)
	struct UMaterialInstancePermutationContainer* MasterBasePPSContainer; // 0xc18(0x08)
	char pad_C20[0x58]; // 0xc20(0x58)
	struct UMaterialInstanceConstant* VeinsBasePPSMat; // 0xc78(0x08)
	struct UMaterialInstanceConstant* LSDEffectBasePPSMat; // 0xc80(0x08)
	struct UMaterialInstanceDynamic* LSDEffectDynMat; // 0xc88(0x08)
	struct UMaterialInstanceConstant* OverseerOutlinePPS; // 0xc90(0x08)
	struct UMaterialInstanceDynamic* OverseerDynMat; // 0xc98(0x08)
	char pad_CA0[0x70]; // 0xca0(0x70)

	void SetBrightnessCalibrationMode(bool bEnable, bool bHDR); // Function OPP.RBFXManager.SetBrightnessCalibrationMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1d5e8f4
	void EnableGameplayEffectsFor(struct FName controlName); // Function OPP.RBFXManager.EnableGameplayEffectsFor // (Final|Native|Public|BlueprintCallable) // @ game+0x1d5e3b4
	void DisableGameplayEffectsFor(struct FName controlName); // Function OPP.RBFXManager.DisableGameplayEffectsFor // (Final|Native|Public|BlueprintCallable) // @ game+0x1d5e334
	void BP_StartAdditiveFOVAnim(struct UCurveFloat* FOVCurve); // Function OPP.RBFXManager.BP_StartAdditiveFOVAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x1d5decc
	bool BP_AreGameplayEffectsEnabled(); // Function OPP.RBFXManager.BP_AreGameplayEffectsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d5dd80
};

// Class OPP.RBGameCondition
// Size: 0x30 (Inherited: 0x28)
struct URBGameCondition : UObject {
	bool bInversed; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
};

// Class OPP.RBGameCondition_AllOfSubConditions
// Size: 0x40 (Inherited: 0x30)
struct URBGameCondition_AllOfSubConditions : URBGameCondition {
	struct TArray<struct URBGameCondition*> SubConditions; // 0x30(0x10)
};

// Class OPP.RBGameCondition_AnyOfSubConditions
// Size: 0x40 (Inherited: 0x30)
struct URBGameCondition_AnyOfSubConditions : URBGameCondition {
	struct TArray<struct URBGameCondition*> SubConditions; // 0x30(0x10)
};

// Class OPP.RBGameCondition_AICondition
// Size: 0x48 (Inherited: 0x30)
struct URBGameCondition_AICondition : URBGameCondition {
	enum class EGlobalAIEvaluationType EvaluationType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct URBAICondition*> AIConditions; // 0x38(0x10)
};

// Class OPP.RBGameCondition_Blueprint
// Size: 0x50 (Inherited: 0x30)
struct URBGameCondition_Blueprint : URBGameCondition {
	struct FString ConditionDescription; // 0x30(0x10)
	struct FString ConditionDescriptionInversed; // 0x40(0x10)

	bool Event_EvaluateCondition(); // Function OPP.RBGameCondition_Blueprint.Event_EvaluateCondition // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBGameCondition_MinimumHealthyPlayers
// Size: 0x38 (Inherited: 0x30)
struct URBGameCondition_MinimumHealthyPlayers : URBGameCondition {
	int32_t MinHealthyPlayers; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class OPP.RBGameCondition_MaxActiveBots
// Size: 0x38 (Inherited: 0x30)
struct URBGameCondition_MaxActiveBots : URBGameCondition {
	int32_t MaximumNumberOfActiveBots; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class OPP.RBGameCondition_MaxBotsByType
// Size: 0x38 (Inherited: 0x30)
struct URBGameCondition_MaxBotsByType : URBGameCondition {
	int32_t MaxBotsOfType; // 0x30(0x04)
	enum class ENPCType NPCType; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)
};

// Class OPP.RBGameCondition_MaxBotsByTags
// Size: 0x78 (Inherited: 0x30)
struct URBGameCondition_MaxBotsByTags : URBGameCondition {
	int32_t MaxBotsWithTags; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct FGameplayTagContainer IncludeTags; // 0x38(0x20)
	struct FGameplayTagContainer ExcludeTags; // 0x58(0x20)
};

// Class OPP.RBGameCondition_MaxParaspecialists
// Size: 0x38 (Inherited: 0x30)
struct URBGameCondition_MaxParaspecialists : URBGameCondition {
	int32_t MaxParaspecialists; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class OPP.RBGameCondition_MaxPrimeAssets
// Size: 0x38 (Inherited: 0x30)
struct URBGameCondition_MaxPrimeAssets : URBGameCondition {
	int32_t MaxPrimeAssets; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class OPP.RBGameCondition_StageTime
// Size: 0xf8 (Inherited: 0x30)
struct URBGameCondition_StageTime : URBGameCondition {
	struct FConfigurableFloat StageTimeThresholdInMinutes; // 0x30(0xc8)
};

// Class OPP.RBGameCondition_MinimumGameDifficulty
// Size: 0x38 (Inherited: 0x30)
struct URBGameCondition_MinimumGameDifficulty : URBGameCondition {
	enum class EGameDifficulty MinDifficulty; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class OPP.RBGameCondition_Adversity
// Size: 0xf8 (Inherited: 0x30)
struct URBGameCondition_Adversity : URBGameCondition {
	struct FConfigurableInt MinimumAdversityLevel; // 0x30(0xc8)
};

// Class OPP.RBGameCondition_TimeSinceLastSpecialSpawn
// Size: 0x38 (Inherited: 0x30)
struct URBGameCondition_TimeSinceLastSpecialSpawn : URBGameCondition {
	float MinTimeSinceLastSpecialSpawn; // 0x30(0x04)
	bool bIncludeParaspecialists; // 0x34(0x01)
	bool bIncludePrimeAssets; // 0x35(0x01)
	char pad_36[0x2]; // 0x36(0x02)
};

// Class OPP.RBGameInstance
// Size: 0x3f0 (Inherited: 0x1a8)
struct URBGameInstance : UGameInstance {
	char pad_1A8[0x8]; // 0x1a8(0x08)
	struct ARBSpectatorPawn* SpectatorPawnClass; // 0x1b0(0x08)
	struct AHUD* HUDClass; // 0x1b8(0x08)
	struct ARBBot* BotClass; // 0x1c0(0x08)
	struct URBGlobalAIConfig* DefaultSpecialistsConfig; // 0x1c8(0x08)
	struct URBNPCConfigRedirectors* ConfigRedirectors; // 0x1d0(0x08)
	struct AActor* NarratorClass; // 0x1d8(0x08)
	struct URBLocalProfile* CurrentUserLocalProfile; // 0x1e0(0x08)
	struct FString CurrentUserLocalProfileSlotName; // 0x1e8(0x10)
	int32_t CurrentUserLocalProfileUserIndex; // 0x1f8(0x04)
	char pad_1FC[0x4]; // 0x1fc(0x04)
	struct URBVoiceChatManager* VoiceChatManager; // 0x200(0x08)
	struct URBAudioManager* AudioManager; // 0x208(0x08)
	struct TArray<struct URBPlayerProgressionData*> PlayerProgressionDataConfigs; // 0x210(0x10)
	struct AActor* Narrator; // 0x220(0x08)
	struct URBVOSoundComponent* NarratorSoundComponent; // 0x228(0x08)
	struct URBMenuManager* MenuManager; // 0x230(0x08)
	struct URBAIManager* AIManager; // 0x238(0x08)
	struct URBSpatialReasoning* SpatialReasoning; // 0x240(0x08)
	struct URBAnimManager* AnimManager; // 0x248(0x08)
	struct URBFXManager* FXManager; // 0x250(0x08)
	struct URBObjectiveManager* ObjectiveManager; // 0x258(0x08)
	struct URBGameplayAttributeManager* AttributeManager; // 0x260(0x08)
	struct URBPawnCustomizationManager* PawnCustomizationManager; // 0x268(0x08)
	struct URBWorld* RBWorld; // 0x270(0x08)
	struct ARBPostProcessUpdateManager* PostProcessUpdateManager; // 0x278(0x08)
	struct URBTutorialManager* RBTutorialManager; // 0x280(0x08)
	struct URBStatsManager* RBStatsManager; // 0x288(0x08)
	struct URBAchievementManager* RBAchievementManager; // 0x290(0x08)
	struct URBGameStructureConfig* GameStructureConfig; // 0x298(0x08)
	struct URBGlobalUIConfig* GlobalUIConfig; // 0x2a0(0x08)
	struct URBGlobalAudioConfig* GlobalAudioConfig; // 0x2a8(0x08)
	struct URBGlobalAnimConfig* GlobalAnimConfig; // 0x2b0(0x08)
	struct URBPlayerStatsConfig* PlayerStatsConfig; // 0x2b8(0x08)
	struct URBAchievementsConfig* AchievementsConfig; // 0x2c0(0x08)
	struct URBScoringConfig* ScoringConfig; // 0x2c8(0x08)
	struct URBTasksConfig* TasksConfig; // 0x2d0(0x08)
	struct URBNPCArchetypeConfig* NPCArchetypesConfig; // 0x2d8(0x08)
	struct URBPlayerCustomizationConfig* PlayerCustomizationConfig; // 0x2e0(0x08)
	struct URBPlayerCellCustomizationConfig* PlayerCellCustomizationConfig; // 0x2e8(0x08)
	struct URBCollectibleDocumentsConfig* CollectibleDocumentsConfig; // 0x2f0(0x08)
	struct URBPlayerLoadoutConfig* PlayerLoadoutConfig; // 0x2f8(0x08)
	struct URBPlayerGameSessionManager* PlayerGameSessionManager; // 0x300(0x08)
	struct URBChunkInstallManager* ChunkInstallManager; // 0x308(0x08)
	struct FMulticastInlineDelegate OnPlayerJoinedGame; // 0x310(0x10)
	struct FMulticastInlineDelegate OnPlayerLeftGame; // 0x320(0x10)
	struct FMulticastInlineDelegate OnSaveGameWritten; // 0x330(0x10)
	struct FMulticastInlineDelegate OnSaveGameLoaded; // 0x340(0x10)
	char pad_350[0x90]; // 0x350(0x90)
	struct TArray<struct FCachedRuntimeCustomizationResources> CachedCustomization; // 0x3e0(0x10)

	void AsyncWriteProfileDone(struct FString SlotName, int32_t UserIndex, bool bSuccess); // Function OPP.RBGameInstance.AsyncWriteProfileDone // (Final|Native|Public) // @ game+0x1d60f94
	void AsyncLoadProfileDone(struct FString SlotName, int32_t UserIndex, struct USaveGame* SaveGame); // Function OPP.RBGameInstance.AsyncLoadProfileDone // (Final|Native|Public) // @ game+0x1d60e7c
};

// Class OPP.RBGameLoadOrderTestAgent
// Size: 0x50 (Inherited: 0x40)
struct URBGameLoadOrderTestAgent : URBFunctionalTestAgent {
	struct TArray<struct FString> GameLoadOrderMaps; // 0x40(0x10)
};

// Class OPP.RBGameModeBase
// Size: 0x430 (Inherited: 0x2e8)
struct ARBGameModeBase : AGameModeBase {
	char pad_2E8[0x18]; // 0x2e8(0x18)
	float InactivePlayerStateLifeSpan; // 0x300(0x04)
	int32_t MaxInactivePlayers; // 0x304(0x04)
	struct TArray<struct APlayerState*> InactivePlayerArray; // 0x308(0x10)
	char pad_318[0x10]; // 0x318(0x10)
	struct ARBStreaming* RBStreaming; // 0x328(0x08)
	struct ARBRandomAudioFXManager* RBRandomAudioFXManager; // 0x330(0x08)
	struct ARBAnnouncer* RBAnnouncer; // 0x338(0x08)
	struct ARBTextChatManager* RBTextChatManager; // 0x340(0x08)
	struct ARBPlayerProgressionManager* RBPlayerProgressionManager; // 0x348(0x08)
	struct ARBTaskManager* RBTaskManager; // 0x350(0x08)
	struct ARBPlayerLoadoutManager* RBPlayerLoadoutManager; // 0x358(0x08)
	char pad_360[0xd0]; // 0x360(0xd0)

	bool RespawnPlayer(struct ARBController* RBController, struct AActor* StartSpot, enum class EPlayerSpawnType SpawnType); // Function OPP.RBGameModeBase.RespawnPlayer // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d61900
	int32_t GetExpectedPlayerCount(); // Function OPP.RBGameModeBase.GetExpectedPlayerCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x150d470
};

// Class OPP.RBGameMode
// Size: 0x6b8 (Inherited: 0x430)
struct ARBGameMode : ARBGameModeBase {
	struct AActor* StaticBlockingDoorActorClass; // 0x430(0x08)
	struct AActor* StaticBlockingDoubleDoorActorClass; // 0x438(0x08)
	struct AActor* ClosedRoomRollingGateDoorReplacementActorClass; // 0x440(0x08)
	struct AActor* ClosedRoomRollingGateDoubleDoorReplacementActorClass; // 0x448(0x08)
	struct ARBPushCartRailBlocker* PushCartRailBlockerActorClass; // 0x450(0x08)
	struct ARBDoor* RewardRoomDoorClass; // 0x458(0x08)
	struct ARBWireTriggerTrap* TrapTriggerLeftActorClass; // 0x460(0x08)
	struct ARBWireTriggerTrap* TrapTriggerRightActorClass; // 0x468(0x08)
	struct ARBTrapTriggerable* DefaultTrapTriggerableLeftActorClass; // 0x470(0x08)
	struct ARBTrapTriggerable* DefaultTrapTriggerableRightActorClass; // 0x478(0x08)
	struct ARBPsychosisObjectiveCoordinator* PsychosisObjectiveCoordClass; // 0x480(0x08)
	struct ARBNarrativeScreenChannel* ObjectiveNarrativeScreenChannelClass; // 0x488(0x08)
	struct ARBHallucinationManager* HallucinationManagerClass; // 0x490(0x08)
	char pad_498[0x10]; // 0x498(0x10)
	struct TArray<struct ARBPlayer*> DisconnectedPlayerToCleanup; // 0x4a8(0x10)
	struct ARBPlayer* ForcedExecutePlayer; // 0x4b8(0x08)
	struct ARBBot* ForcedExecuteBot; // 0x4c0(0x08)
	struct FRuntimeStageInfo CurrentStageRuntimeInfo; // 0x4c8(0x88)
	enum class ERollingGateVariatorType RollingGateVariatorType; // 0x550(0x01)
	bool bIsFallbackTrialId; // 0x551(0x01)
	char pad_552[0x6]; // 0x552(0x06)
	struct FMulticastInlineDelegate PostGameModeInit; // 0x558(0x10)
	struct FMulticastInlineDelegate GameSessionSettingsChanged; // 0x568(0x10)
	enum class EGameDifficulty GameDifficulty; // 0x578(0x01)
	bool bIsInit; // 0x579(0x01)
	char pad_57A[0x6]; // 0x57a(0x06)
	struct ARBGameState* RBGameState; // 0x580(0x08)
	struct ARBSAS* currentSAS; // 0x588(0x08)
	struct TArray<struct UObject*> PlayerRespawnBlockers; // 0x590(0x10)
	struct ARBVariatorManager* VariatorManager; // 0x5a0(0x08)
	struct ARBReviveObjectiveCoordinator* ReviveObjectiveCoord; // 0x5a8(0x08)
	struct ARBPsychosisObjectiveCoordinator* PsychosisObjectiveCoord; // 0x5b0(0x08)
	struct ARBNarrativeScreenChannel* ObjectiveNarrativeScreenChannel; // 0x5b8(0x08)
	struct ARBHallucinationManager* HallucinationManager; // 0x5c0(0x08)
	struct AActor* BackupPlayerRespawnPoint; // 0x5c8(0x08)
	struct TArray<struct FCoopMoveEntry> PastCoopMoveList; // 0x5d0(0x10)
	struct TArray<struct ARBPlayer*> EndStageKilledPlayers; // 0x5e0(0x10)
	struct TArray<struct ARBPlayer*> EndStageForceSitPlayers; // 0x5f0(0x10)
	struct TArray<struct ARBPlayer*> ForcedInChairsPlayers; // 0x600(0x10)
	struct ARBSASTransitionZone* CurrentStageEntrance; // 0x610(0x08)
	char pad_618[0xa0]; // 0x618(0xa0)

	void SetBackupPlayerRespawnPoint(struct AActor* respawnPoint); // Function OPP.RBGameMode.SetBackupPlayerRespawnPoint // (Final|Native|Public|BlueprintCallable) // @ game+0x1d619fc
	void OnPawnKilled(struct ARBPawn* instigatorActor, struct ARBPawn* subjectActor); // Function OPP.RBGameMode.OnPawnKilled // (Final|Native|Private) // @ game+0x1d616f8
	void OnObjectiveCoordinatorStateChanged(struct ARBBaseObjectiveCoordinator* coordinator, enum class EObjectiveCoordinatorState State); // Function OPP.RBGameMode.OnObjectiveCoordinatorStateChanged // (Final|Native|Private) // @ game+0x1d614fc
	bool IsStageStarted(); // Function OPP.RBGameMode.IsStageStarted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d612e4
	bool IsStageReady(); // Function OPP.RBGameMode.IsStageReady // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d612b8
	bool HasAnyPlayerExitedStartingSAS(); // Function OPP.RBGameMode.HasAnyPlayerExitedStartingSAS // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d61294
	void GetPlayersReadyToRespawn(struct TArray<struct ARBController*>& outPlayers); // Function OPP.RBGameMode.GetPlayersReadyToRespawn // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d611fc
	void Cheat_ForceMissionID(struct FRBMissionID& MissionID, struct FName TrialId); // Function OPP.RBGameMode.Cheat_ForceMissionID // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d61148
	void Cheat_ForceGamePhase(enum class EGamePhase gamePhase); // Function OPP.RBGameMode.Cheat_ForceGamePhase // (Final|Native|Public|BlueprintCallable) // @ game+0x1d32d30
	void Cheat_ForceFailStage(); // Function OPP.RBGameMode.Cheat_ForceFailStage // (Final|Native|Public|BlueprintCallable) // @ game+0x1521dbc
	void Cheat_DisableStageEnding(); // Function OPP.RBGameMode.Cheat_DisableStageEnding // (Final|Native|Public|BlueprintCallable) // @ game+0x1521dbc
	struct FRBStageID BP_GetCurrentStageID(); // Function OPP.RBGameMode.BP_GetCurrentStageID // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d610b0
};

// Class OPP.RBGameModeLobby
// Size: 0x488 (Inherited: 0x430)
struct ARBGameModeLobby : ARBGameModeBase {
	float PlayerReleaseRequestExpirationTimeSeconds; // 0x430(0x04)
	float PlayerReleaseExpirationTimeSeconds; // 0x434(0x04)
	float PlayerReleaseCooldownTimeSeconds; // 0x438(0x04)
	char pad_43C[0x14]; // 0x43c(0x14)
	struct TArray<struct FPendingMatchDetails> PendingMatches; // 0x450(0x10)
	struct TArray<struct FPendingFindPartyRequestDetails> PendingFindPartyRequests; // 0x460(0x10)
	struct TArray<struct APlayerController*> PlayersToSpawn; // 0x470(0x10)
	char pad_480[0x8]; // 0x480(0x08)

	void StartRelease(struct ARBLobbyPlayerController* RBLobbyPlayerController); // Function OPP.RBGameModeLobby.StartRelease // (Final|Native|Public|BlueprintCallable) // @ game+0x1d61a7c
	void OnPawnKilled(struct ARBPawn* instigatorActor, struct ARBPawn* subjectActor); // Function OPP.RBGameModeLobby.OnPawnKilled // (Final|Native|Private) // @ game+0x1d61814
};

// Class OPP.RBGameModeMainMenu
// Size: 0x3a8 (Inherited: 0x2e8)
struct ARBGameModeMainMenu : AGameModeBase {
	struct FMulticastInlineDelegate OnInitMenuPlayer; // 0x2e8(0x10)
	struct FMulticastInlineDelegate OnMainMenuStateChanged; // 0x2f8(0x10)
	enum class EMainMenuState mainMenuState; // 0x308(0x01)
	char pad_309[0x7]; // 0x309(0x07)
	struct URBMenuWidget* SplashScreenClass; // 0x310(0x08)
	struct URBMenuWidget* MainMenuClass; // 0x318(0x08)
	struct URBMenuWidget* OptionMenuClass; // 0x320(0x08)
	struct URBMenuWidget* CreditsMenuClass; // 0x328(0x08)
	struct URBMenuWidget* DisclaimerMenuClass; // 0x330(0x08)
	struct URBPolicyDocumentMenuWidget* PolicyDocumentMenuWidgetClass; // 0x338(0x08)
	char pad_340[0x68]; // 0x340(0x68)

	void RejoinSoloGameSession(); // Function OPP.RBGameModeMainMenu.RejoinSoloGameSession // (Final|Native|Public|BlueprintCallable) // @ game+0x1d618ec
	void RejoinParty(); // Function OPP.RBGameModeMainMenu.RejoinParty // (Final|Native|Public|BlueprintCallable) // @ game+0x1d618d8
	void OnOperationStatusChanged(bool bPending, bool bSucceeded); // Function OPP.RBGameModeMainMenu.OnOperationStatusChanged // (Final|Native|Private) // @ game+0x1d61634
	void OnMenuTransitionOutDone(); // Function OPP.RBGameModeMainMenu.OnMenuTransitionOutDone // (Final|Native|Private) // @ game+0x1d614e8
	void OnMenuButtonClicked(enum class EMainMenuButton Button); // Function OPP.RBGameModeMainMenu.OnMenuButtonClicked // (Final|Native|Public|BlueprintCallable) // @ game+0x1d61468
	void OnKeyPressed(struct FKey Key, enum class EInputEvent EventType, bool bGamepad); // Function OPP.RBGameModeMainMenu.OnKeyPressed // (Final|Native|Private) // @ game+0x1d61318
	void OnDisclaimerAcknowledged(); // Function OPP.RBGameModeMainMenu.OnDisclaimerAcknowledged // (Final|Native|Private|BlueprintCallable) // @ game+0x1d61304
	bool IsPlayEnabled(); // Function OPP.RBGameModeMainMenu.IsPlayEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17b6990
	bool CanRejoinSoloGameSession(); // Function OPP.RBGameModeMainMenu.CanRejoinSoloGameSession // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d61124
	bool CanRejoinParty(); // Function OPP.RBGameModeMainMenu.CanRejoinParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d6110c
	bool CanPlay(); // Function OPP.RBGameModeMainMenu.CanPlay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d610f4
};

// Class OPP.RBGamepadSpecificData
// Size: 0x100 (Inherited: 0x30)
struct URBGamepadSpecificData : UDataAsset {
	enum class EGamepadType GamepadType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct UTexture2D* FaceButtonDown; // 0x38(0x08)
	struct UTexture2D* FaceButtonRight; // 0x40(0x08)
	struct UTexture2D* FaceButtonUp; // 0x48(0x08)
	struct UTexture2D* FaceButtonLeft; // 0x50(0x08)
	struct UTexture2D* LeftBumper; // 0x58(0x08)
	struct UTexture2D* LeftTrigger; // 0x60(0x08)
	struct UTexture2D* RightBumper; // 0x68(0x08)
	struct UTexture2D* RightTrigger; // 0x70(0x08)
	struct UTexture2D* SpecialLeft; // 0x78(0x08)
	struct UTexture2D* SpecialRight; // 0x80(0x08)
	struct UTexture2D* DPadDown; // 0x88(0x08)
	struct UTexture2D* DPadRight; // 0x90(0x08)
	struct UTexture2D* DPadUp; // 0x98(0x08)
	struct UTexture2D* DPadLeft; // 0xa0(0x08)
	struct UTexture2D* DPadLeftRight; // 0xa8(0x08)
	struct UTexture2D* LeftStick; // 0xb0(0x08)
	struct UTexture2D* LeftStickHorizontal; // 0xb8(0x08)
	struct UTexture2D* LeftStickVertical; // 0xc0(0x08)
	struct UTexture2D* LeftStickAll; // 0xc8(0x08)
	struct UTexture2D* LeftStickButton; // 0xd0(0x08)
	struct UTexture2D* RightStick; // 0xd8(0x08)
	struct UTexture2D* RightStickHorizontal; // 0xe0(0x08)
	struct UTexture2D* RightStickVertical; // 0xe8(0x08)
	struct UTexture2D* RightStickAll; // 0xf0(0x08)
	struct UTexture2D* RightStickButton; // 0xf8(0x08)
};

// Class OPP.RBGameplayAttributeManager
// Size: 0x90 (Inherited: 0x28)
struct URBGameplayAttributeManager : UObject {
	struct UObject* AttributeDebugTarget; // 0x28(0x08)
	struct TMap<struct UObject*, struct FRBAttributeOwnerRuntimeInfo> RuntimeInfos; // 0x30(0x50)
	struct TArray<struct FRBConfigurableGameplayAttributeModifier> StageVariatorModifiers; // 0x80(0x10)
};

// Class OPP.RBGameplayTriggerComponent
// Size: 0xf0 (Inherited: 0xb8)
struct URBGameplayTriggerComponent : UActorComponent {
	bool bStartsEnabled; // 0xb8(0x01)
	enum class ETriggerComponentNetType NetType; // 0xb9(0x01)
	enum class EGameplayTriggerType GameplayTriggerType; // 0xba(0x01)
	char pad_BB[0x5]; // 0xbb(0x05)
	struct TArray<struct ARBNPC*> AllowedNPCClasses; // 0xc0(0x10)
	struct UPrimitiveComponent* LinkedTriggerCollision; // 0xd0(0x08)
	struct FMulticastInlineDelegate OnTriggeredEvent; // 0xd8(0x10)
	bool bTriggered; // 0xe8(0x01)
	bool bEnabled; // 0xe9(0x01)
	char pad_EA[0x6]; // 0xea(0x06)

	void OnTriggeredChanged(); // Function OPP.RBGameplayTriggerComponent.OnTriggeredChanged // (Final|Native|Private) // @ game+0x1d65f94
	void OnComponentBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBGameplayTriggerComponent.OnComponentBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0x1d65c24
	void OnActorOverlapped(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function OPP.RBGameplayTriggerComponent.OnActorOverlapped // (Final|Native|Public) // @ game+0x1d65b4c
	bool IsEnabled(); // Function OPP.RBGameplayTriggerComponent.IsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d654d8
	void GetOverlappingActors(struct TArray<struct AActor*>& out_Actors); // Function OPP.RBGameplayTriggerComponent.GetOverlappingActors // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d65310
};

// Class OPP.RBGameplayTriggerVolume
// Size: 0x2a8 (Inherited: 0x280)
struct ARBGameplayTriggerVolume : AVolume {
	char pad_280[0x8]; // 0x280(0x08)
	enum class ETriggerComponentNetType NetType; // 0x288(0x01)
	char pad_289[0x7]; // 0x289(0x07)
	struct URBGameplayTriggerComponent* GameplayTriggerComponent; // 0x290(0x08)
	struct FMulticastInlineDelegate OnTriggeredEvent; // 0x298(0x10)

	void OnTriggeredEventBypass(struct URBGameplayTriggerComponent* Trigger); // Function OPP.RBGameplayTriggerVolume.OnTriggeredEventBypass // (Final|Native|Public) // @ game+0x1d65fa8
	bool IsEnabled(); // Function OPP.RBGameplayTriggerVolume.IsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d654b0
	void BP_SetEnabled(bool Enabled); // Function OPP.RBGameplayTriggerVolume.BP_SetEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d65240
	void BP_Reset(); // Function OPP.RBGameplayTriggerVolume.BP_Reset // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d65214
};

// Class OPP.RBGameStateBase
// Size: 0x370 (Inherited: 0x288)
struct ARBGameStateBase : AGameStateBase {
	uint32_t ServerBinariesVersion; // 0x288(0x04)
	enum class EGameSessionType GameSessionType; // 0x28c(0x01)
	char pad_28D[0x3]; // 0x28d(0x03)
	struct FString GameSessionRegion; // 0x290(0x10)
	struct FString GameSessionId; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnGameSessionEnding; // 0x2b0(0x10)
	int32_t LevelSeed; // 0x2c0(0x04)
	int32_t EffectiveNumberOfPlayers; // 0x2c4(0x04)
	struct FMulticastInlineDelegate OnPlayerDisconnect; // 0x2c8(0x10)
	struct FMulticastInlineDelegate OnPlayerInitReplicated; // 0x2d8(0x10)
	struct FMulticastInlineDelegate OnLocalPlayerStateReplicated; // 0x2e8(0x10)
	struct FMulticastInlineDelegate OnPawnKilled; // 0x2f8(0x10)
	struct FMulticastInlineDelegate OnPawnRespawned; // 0x308(0x10)
	struct FMulticastInlineDelegate OnEffectiveNumberOfPlayerChanged; // 0x318(0x10)
	struct FMulticastInlineDelegate OnExpectedPlayerCountUpdated; // 0x328(0x10)
	struct FMulticastInlineDelegate OnPlayerRevived; // 0x338(0x10)
	struct FMulticastInlineDelegate OnPlayerKnockedDown; // 0x348(0x10)
	struct FMulticastInlineDelegate OnPlayerPickedUpItem; // 0x358(0x10)
	char pad_368[0x4]; // 0x368(0x04)
	int32_t expectedPlayerCount; // 0x36c(0x04)

	void OnRep_LevelSeed(); // Function OPP.RBGameStateBase.OnRep_LevelSeed // (Final|Native|Public) // @ game+0x1d65f54
	void OnRep_ExpectedPlayerCount(); // Function OPP.RBGameStateBase.OnRep_ExpectedPlayerCount // (Final|Native|Private) // @ game+0x1d65ed0
	void OnRep_EffectiveNumberOfPlayers(); // Function OPP.RBGameStateBase.OnRep_EffectiveNumberOfPlayers // (Final|Native|Public) // @ game+0x1d65ea8
	void Multicast_StartClipboardCopyOfMsg(); // Function OPP.RBGameStateBase.Multicast_StartClipboardCopyOfMsg // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d65b34
	void Multicast_PlayMurkoffAnnouncement(struct TArray<struct FRBMurkoffAnnouncentAudioData> murkoffAnnouncementAudioDatas, struct FRBMurkoffAnnouncentAudioData stopAudioData); // Function OPP.RBGameStateBase.Multicast_PlayMurkoffAnnouncement // (Net|Native|Event|NetMulticast|Public) // @ game+0x1d65910
	void Multicast_OnPlayerRevived(struct ARBPlayer* instigatorActor, struct ARBPlayer* subjectActor); // Function OPP.RBGameStateBase.Multicast_OnPlayerRevived // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d65784
	void Multicast_FunctionalTestLog(struct FString serverMsg, bool failTest); // Function OPP.RBGameStateBase.Multicast_FunctionalTestLog // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d656a8
	void Multicast_EndClipboardCopyOfMsg(); // Function OPP.RBGameStateBase.Multicast_EndClipboardCopyOfMsg // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1ce8d70
	struct URBGameModePersistentData* BP_GetGameModePersistentData(); // Function OPP.RBGameStateBase.BP_GetGameModePersistentData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d651ec
};

// Class OPP.RBGameState
// Size: 0x728 (Inherited: 0x370)
struct ARBGameState : ARBGameStateBase {
	char pad_370[0x8]; // 0x370(0x08)
	struct URBExperimentPersistentData* ExperimentPersistentData; // 0x378(0x08)
	struct FStageAudioEvents DefaultStageMusicEvents; // 0x380(0x20)
	struct FNarrativeSoundEventsInfo DefaultFailedStageMusicEvents; // 0x3a0(0x20)
	struct FNarrativeSoundEventsInfo DefaultIncapacitatedStageMusicEvents; // 0x3c0(0x20)
	struct TArray<struct FStageMusicSystem> DefaultMusicSystemOptions; // 0x3e0(0x10)
	struct FStageAudioEvents DefaultStageSFXEvents; // 0x3f0(0x20)
	struct FMulticastInlineDelegate OnGamePhaseUpdated; // 0x410(0x10)
	struct FMulticastInlineDelegate OnDrugSequenceCompleted; // 0x420(0x10)
	struct FMulticastInlineDelegate OnGameStageInfoUpdated; // 0x430(0x10)
	struct FMulticastInlineDelegate OnCurrentSasChanged; // 0x440(0x10)
	struct FMulticastInlineDelegate OnAsyncDataLoaded; // 0x450(0x10)
	struct FMulticastInlineDelegate OnStageStarted; // 0x460(0x10)
	struct FMulticastInlineDelegate OnStageEnded; // 0x470(0x10)
	struct FMulticastInlineDelegate OnStageReady; // 0x480(0x10)
	struct FMulticastInlineDelegate OnEndStageDamageTimeChanged; // 0x490(0x10)
	struct FMulticastInlineDelegate OnLocalPlayerExitStartSASEvent; // 0x4a0(0x10)
	struct FMulticastInlineDelegate OnAllPlayersExitStartSASEvent; // 0x4b0(0x10)
	struct FMulticastInlineDelegate OnPlayStageIntroVOs; // 0x4c0(0x10)
	struct FMulticastInlineDelegate OnPlayStageOutroVOs; // 0x4d0(0x10)
	struct FMulticastInlineDelegate OnResetTimerSkippedChanged; // 0x4e0(0x10)
	struct FMulticastInlineDelegate OnTriggerPlayerTransition; // 0x4f0(0x10)
	struct FMulticastInlineDelegate OnGameDifficultyChanged; // 0x500(0x10)
	struct FMulticastInlineDelegate OnCanPlayerRespawnChanged; // 0x510(0x10)
	enum class EGamePhase gamePhase; // 0x520(0x01)
	enum class EGamePhase GamePhase_Server; // 0x521(0x01)
	bool bDrugSequenceCompleted; // 0x522(0x01)
	bool bExperimentSucceeded; // 0x523(0x01)
	enum class EGameDifficulty GameDifficulty; // 0x524(0x01)
	bool bIsGameServerServiceEnabled; // 0x525(0x01)
	bool bHasResetStage; // 0x526(0x01)
	char pad_527[0x1]; // 0x527(0x01)
	int32_t StageResetCount; // 0x528(0x04)
	bool bIsTutorialExperiment; // 0x52c(0x01)
	bool bIsReagentReleaseTrial; // 0x52d(0x01)
	bool bCanPlayerRespawnBetweenStages; // 0x52e(0x01)
	bool bIsWaitingForLastPlayerExecution; // 0x52f(0x01)
	float MaxWaitingForPlayersServerTime; // 0x530(0x04)
	float ForcedReturnToLobbyServerTime; // 0x534(0x04)
	float EndOfStageDamageTime; // 0x538(0x04)
	char pad_53C[0x4]; // 0x53c(0x04)
	struct FRBGameStageInfo gameStageInfo; // 0x540(0x60)
	struct ARBNarrativeScreenChannel* ObjectiveNarrativeScreenChannel; // 0x5a0(0x08)
	struct ARBSAS* currentSAS; // 0x5a8(0x08)
	struct URBTrialAsyncData* TrialAsyncData; // 0x5b0(0x08)
	struct UAkAudioEvent* ChosenChaseStartEvents; // 0x5b8(0x08)
	struct UAkAudioEvent* ChosenChaseStopEvents; // 0x5c0(0x08)
	bool bAsyncTrialDataLoaded; // 0x5c8(0x01)
	char pad_5C9[0x7]; // 0x5c9(0x07)
	float StageStartedServerTime; // 0x5d0(0x04)
	float TimeToCompleteStageSeconds; // 0x5d4(0x04)
	float StageResetTime; // 0x5d8(0x04)
	char pad_5DC[0x4]; // 0x5dc(0x04)
	struct TArray<struct FName> AvailableDocuments; // 0x5e0(0x10)
	bool bCheat_EnableLoadoutChanges; // 0x5f0(0x01)
	bool bCheat_DisableLoadoutValidation; // 0x5f1(0x01)
	char pad_5F2[0x2]; // 0x5f2(0x02)
	bool bResetTimerSkipped; // 0x5f4(0x01)
	char pad_5F5[0x3]; // 0x5f5(0x03)
	struct FNarrativeSoundEventsInfo CurrentServerNarrativeMusicInfo; // 0x5f8(0x20)
	bool bLevelMusicPaused; // 0x618(0x01)
	char pad_619[0x3]; // 0x619(0x03)
	int32_t SelectedChaseMusicIndex; // 0x61c(0x04)
	char pad_620[0x108]; // 0x620(0x108)

	bool WasResetTimerSkipped(); // Function OPP.RBGameState.WasResetTimerSkipped // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d66068
	bool WaitingForPlayers(); // Function OPP.RBGameState.WaitingForPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d6604c
	void SetDrugSequenceCompleted(); // Function OPP.RBGameState.SetDrugSequenceCompleted // (Final|Native|Public|BlueprintCallable) // @ game+0x1d66028
	void OnRep_ResetTimerSkipped(); // Function OPP.RBGameState.OnRep_ResetTimerSkipped // (Final|Native|Private) // @ game+0x1d65f80
	void OnRep_LevelMusicPaused(); // Function OPP.RBGameState.OnRep_LevelMusicPaused // (Final|Native|Public) // @ game+0x1d65f40
	void OnRep_GameStageInfo(); // Function OPP.RBGameState.OnRep_GameStageInfo // (Final|Native|Public) // @ game+0x1d65f2c
	void OnRep_GamePhase(); // Function OPP.RBGameState.OnRep_GamePhase // (Final|Native|Public) // @ game+0x1d65f18
	void OnRep_GameDifficulty(); // Function OPP.RBGameState.OnRep_GameDifficulty // (Final|Native|Public) // @ game+0x1d65f04
	void OnRep_EndOfStageDamageTime(); // Function OPP.RBGameState.OnRep_EndOfStageDamageTime // (Final|Native|Public) // @ game+0x1d65ebc
	void OnRep_CurrentServerNarrativeMusicInfo(); // Function OPP.RBGameState.OnRep_CurrentServerNarrativeMusicInfo // (Final|Native|Public) // @ game+0x1d65e94
	void OnRep_CurrentSAS(struct ARBSAS* oldSASValue); // Function OPP.RBGameState.OnRep_CurrentSAS // (Final|Native|Public) // @ game+0x1d65e14
	void OnRep_CanPlayerRespawn(); // Function OPP.RBGameState.OnRep_CanPlayerRespawn // (Final|Native|Public) // @ game+0x1d65dec
	void OnClientPopulateFinished(); // Function OPP.RBGameState.OnClientPopulateFinished // (Final|Native|Public) // @ game+0x1d65c10
	void Multicast_ScareStinger(struct AActor* scareActor, struct UAkAudioEvent* StingerEvent, struct FVector Location, float Range); // Function OPP.RBGameState.Multicast_ScareStinger // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1d659f0
	void Multicast_ApplyStageReset(struct TArray<struct FString> stageLevels); // Function OPP.RBGameState.Multicast_ApplyStageReset // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d65618
	bool IsStageStarted(); // Function OPP.RBGameState.IsStageStarted // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d655f8
	bool IsStageReady(); // Function OPP.RBGameState.IsStageReady // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d655dc
	bool IsStagePrepared(); // Function OPP.RBGameState.IsStagePrepared // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d655bc
	bool IsSoloGame(); // Function OPP.RBGameState.IsSoloGame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d6559c
	bool IsExperimentSuccess(); // Function OPP.RBGameState.IsExperimentSuccess // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d65554
	bool IsExperimentStarted(); // Function OPP.RBGameState.IsExperimentStarted // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d65534
	bool IsExperimentCompleted(); // Function OPP.RBGameState.IsExperimentCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d65514
	bool IsEndOfStageDamageStarted(); // Function OPP.RBGameState.IsEndOfStageDamageStarted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d654f0
	bool IsDrugSequenceCompleted(); // Function OPP.RBGameState.IsDrugSequenceCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d65498
	struct FName GetTrialId(); // Function OPP.RBGameState.GetTrialId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d65480
	struct FRBStageID GetStageID(); // Function OPP.RBGameState.GetStageID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d65464
	struct FRBMissionID GetMissionID(); // Function OPP.RBGameState.GetMissionID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d652f4
	struct FRBGameStageInfo GetGameStageInfo(); // Function OPP.RBGameState.GetGameStageInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d652d8
};

// Class OPP.RBGameStateLobby
// Size: 0x3f0 (Inherited: 0x370)
struct ARBGameStateLobby : ARBGameStateBase {
	struct URBLobbyData* LobbyInteractionData; // 0x370(0x08)
	struct FMulticastInlineDelegate OnPlayerReleaseStateUpdated; // 0x378(0x10)
	struct FMulticastInlineDelegate OnCharacterReleaseCountUpdated; // 0x388(0x10)
	struct TArray<struct FRBMurkoffAnnouncentData> LobbyAnnouncementList; // 0x398(0x10)
	struct FRBMurkoffAnnouncentAudioData MurkoffAnnouncementStopEvent; // 0x3a8(0x10)
	struct FPlayerReleaseState PlayerReleaseState; // 0x3b8(0x18)
	int32_t characterReleaseCount; // 0x3d0(0x04)
	char pad_3D4[0x1c]; // 0x3d4(0x1c)

	void OnRep_PlayerReleaseState(); // Function OPP.RBGameStateLobby.OnRep_PlayerReleaseState // (Final|Native|Private) // @ game+0x1d65f6c
	void OnRep_CharacterReleaseCount(); // Function OPP.RBGameStateLobby.OnRep_CharacterReleaseCount // (Final|Native|Private) // @ game+0x1d65e00
	void OnPlayerReleaseStateUpdated__DelegateSignature(struct FPlayerReleaseState& PlayerReleaseState); // DelegateFunction OPP.RBGameStateLobby.OnPlayerReleaseStateUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x201e6d4
	void OnCharacterReleaseCountUpdated__DelegateSignature(int32_t characterReleaseCount); // DelegateFunction OPP.RBGameStateLobby.OnCharacterReleaseCountUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void Multicast_PlayLobbyAnnouncement(int32_t announcementIndex, int32_t announcementLineSeed); // Function OPP.RBGameStateLobby.Multicast_PlayLobbyAnnouncement // (Net|Native|Event|NetMulticast|Public) // @ game+0x1d6584c
	bool IsPlayerReleasing(); // Function OPP.RBGameStateLobby.IsPlayerReleasing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d65584
	bool IsPlayerReleasePending(); // Function OPP.RBGameStateLobby.IsPlayerReleasePending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d6556c
	struct FPlayerReleaseState GetPlayerReleaseState(); // Function OPP.RBGameStateLobby.GetPlayerReleaseState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d6543c
	struct ARBLobbyPlayerState* GetPlayerReleasePlayerState(); // Function OPP.RBGameStateLobby.GetPlayerReleasePlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d65424
	float GetPlayerReleaseExpirationServerTime(); // Function OPP.RBGameStateLobby.GetPlayerReleaseExpirationServerTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d6540c
	int32_t GetCharacterReleaseCount(); // Function OPP.RBGameStateLobby.GetCharacterReleaseCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x178b784
};

// Class OPP.RBGameStateMainMenu
// Size: 0x288 (Inherited: 0x288)
struct ARBGameStateMainMenu : AGameStateBase {
};

// Class OPP.RBMissionInfo
// Size: 0xe0 (Inherited: 0x28)
struct URBMissionInfo : UObject {
	struct FName MissionName; // 0x28(0x08)
	struct FText BundleLoreName; // 0x30(0x18)
	struct FText BundleLoreDescription; // 0x48(0x18)
	struct TArray<struct FName> MissionSpecificLevels; // 0x60(0x10)
	bool bExcludeFromRandomSelection; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
	struct TSoftObjectPtr<URBTrialAsyncData> asyncData; // 0x78(0x28)
	bool bHasSASExit; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)
	struct FString JiraLevelName; // 0xa8(0x10)
	enum class ENPCType PrimeAsset; // 0xb8(0x01)
	char pad_B9[0x7]; // 0xb9(0x07)
	struct TArray<struct FRBObjectiveGroupInfo> ObjectiveGroupInfos; // 0xc0(0x10)
	struct URBStageInfo* StageOwner; // 0xd0(0x08)
	bool bIsAnyMission; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
};

// Class OPP.RBStageInfo
// Size: 0x120 (Inherited: 0x28)
struct URBStageInfo : UObject {
	struct FText StageDisplayName; // 0x28(0x18)
	struct FString StageDisplayNameInWorld; // 0x40(0x10)
	struct FText StageDisplayDescription; // 0x50(0x18)
	struct FName StageName; // 0x68(0x08)
	struct FFilePath PersistentLevelPath; // 0x70(0x10)
	struct FName PersistentLevelName; // 0x80(0x08)
	struct TArray<struct FName> DrugSequenceLevelNames; // 0x88(0x10)
	struct TArray<struct FName> RandomOutsidePersistentLevelNames; // 0x98(0x10)
	struct TArray<struct FName> AdditionalIncludedLevelNames; // 0xa8(0x10)
	struct URBAIDirectorConfig* AIDirectorConfig; // 0xb8(0x08)
	struct TArray<struct URBMissionInfo*> MissionInfos; // 0xc0(0x10)
	struct TArray<struct FName> LevelNames; // 0xd0(0x10)
	struct TArray<struct FRBSecondaryObjectiveInfo> SecondaryObjectiveInfos; // 0xe0(0x10)
	struct TArray<struct FRBObstacleVariatorInfo> ObstacleVariatorInfos; // 0xf0(0x10)
	struct TArray<struct FName> DevLevelNames; // 0x100(0x10)
	struct TArray<struct FName> ClientOnlyLevelNames; // 0x110(0x10)
};

// Class OPP.RBGameStructureConfig
// Size: 0xd0 (Inherited: 0x28)
struct URBGameStructureConfig : UObject {
	struct TArray<struct URBStageInfo*> StageInfos; // 0x28(0x10)
	struct FName InitialLoadingMapName; // 0x38(0x08)
	struct TArray<struct FName> DefaultSASLevelNames; // 0x40(0x10)
	struct URBTrialSectionConfig* DefaultFullStageSectionConfig; // 0x50(0x08)
	struct FName TutorialTrialId; // 0x58(0x08)
	struct FName ReleaseTrialId; // 0x60(0x08)
	struct TArray<struct URBStageInfo*> GymStages; // 0x68(0x10)
	struct TArray<struct FRBStageID> AutoCompleteTestStages; // 0x78(0x10)
	struct FNarrativeScreenAnimationData ObjectiveTVAnimationIntro; // 0x88(0x18)
	struct TArray<struct URBVariatorInfo*> VariatorsInfos; // 0xa0(0x10)
	struct URBMissionInfo* AnyMissionInfo; // 0xb0(0x08)
	struct URBMissionInfo* NoMissionInfo; // 0xb8(0x08)
	struct UDataTable* TrialInfoDataTable; // 0xc0(0x08)
	struct UDataTable* ProgramInfoDataTable; // 0xc8(0x08)

	struct URBVariatorInfo* GetVariatorInfo(struct FName& ID); // Function OPP.RBGameStructureConfig.GetVariatorInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d69128
	struct FRBTrialInfoRow GetTrialInfo(struct FName& TrialId); // Function OPP.RBGameStructureConfig.GetTrialInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d69058
	struct URBStageInfo* GetStageInfo(struct FName& StageID); // Function OPP.RBGameStructureConfig.GetStageInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68eb0
	struct TArray<struct FRBTrialInfoRow> GetProgramTrials(struct FName& ProgramId); // Function OPP.RBGameStructureConfig.GetProgramTrials // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68c90
	struct TArray<struct FRBProgramInfoRow> GetPrograms(); // Function OPP.RBGameStructureConfig.GetPrograms // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68d8c
	struct FRBProgramInfoRow GetProgramInfo(struct FName& ProgramId); // Function OPP.RBGameStructureConfig.GetProgramInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68bf0
	struct FRBTrialInfoRow FindBestTrialInfoFromDetails(struct FRBStageID& StageID, struct FRBMissionID& MissionID, enum class EGameDifficulty Difficulty); // Function OPP.RBGameStructureConfig.FindBestTrialInfoFromDetails // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68778
};

// Class OPP.RBGameUserSettings
// Size: 0x3f8 (Inherited: 0x138)
struct URBGameUserSettings : UGameUserSettings {
	float ResolutionScale; // 0x138(0x04)
	float MasterVolume; // 0x13c(0x04)
	float MusicVolume; // 0x140(0x04)
	float SFXVolume; // 0x144(0x04)
	struct FString VoiceChatInputDevice; // 0x148(0x10)
	bool bEnableVoiceChat; // 0x158(0x01)
	bool bUsePushToTalk; // 0x159(0x01)
	bool bVoiceActivityDetectorAuto; // 0x15a(0x01)
	char pad_15B[0x1]; // 0x15b(0x01)
	int32_t VoiceActivityDetectorHangover; // 0x15c(0x04)
	int32_t VoiceActivityDetectorSensitivity; // 0x160(0x04)
	int32_t VoiceActivityDetectorNoiseFloor; // 0x164(0x04)
	float MicrophoneVolume; // 0x168(0x04)
	bool bDistanceBasedRadio; // 0x16c(0x01)
	bool bShowInventoryHudInputs; // 0x16d(0x01)
	bool bShowHUD; // 0x16e(0x01)
	char pad_16F[0x1]; // 0x16f(0x01)
	struct FVector LookSensitivityMultiplierSetting; // 0x170(0x0c)
	enum class EUIFontSize SubtitleSize; // 0x17c(0x01)
	enum class EUIFontSize TutorialSize; // 0x17d(0x01)
	bool bUseMaxWatchDistanceProto; // 0x17e(0x01)
	bool bForceGotoIconsProto; // 0x17f(0x01)
	bool bShouldAutoDetectScalabilitySettings; // 0x180(0x01)
	char pad_181[0x3]; // 0x181(0x03)
	int32_t QualityPreset; // 0x184(0x04)
	int32_t AntiAliasingQuality; // 0x188(0x04)
	bool bMotionBlurEnabled; // 0x18c(0x01)
	enum class EGraphicsRHI WantedDirect3DVersion; // 0x18d(0x01)
	char pad_18E[0x2]; // 0x18e(0x02)
	int32_t DLSSQuality; // 0x190(0x04)
	int32_t FSR2Quality; // 0x194(0x04)
	bool bShouldAutoDetectRTCapability; // 0x198(0x01)
	bool EnableRT; // 0x199(0x01)
	char pad_19A[0x2]; // 0x19a(0x02)
	int32_t RTShadowsQuality; // 0x19c(0x04)
	int32_t TempRTShadowsQuality; // 0x1a0(0x04)
	int32_t RTReflectionsQuality; // 0x1a4(0x04)
	int32_t TempRTReflectionsQuality; // 0x1a8(0x04)
	bool bStickyRun; // 0x1ac(0x01)
	bool bAutoHideItemInHand; // 0x1ad(0x01)
	char pad_1AE[0x2]; // 0x1ae(0x02)
	struct TArray<struct FInputActionKeyMapping> UserActionBindingsKBM; // 0x1b0(0x10)
	struct TArray<struct FInputAxisKeyMapping> UserAxisBindingsKBM; // 0x1c0(0x10)
	struct TArray<struct FInputActionKeyMapping> UserActionBindingsGamepad; // 0x1d0(0x10)
	struct TArray<struct FInputAxisKeyMapping> UserAxisBindingsGamepad; // 0x1e0(0x10)
	struct TMap<struct FName, bool> InvertedBindings; // 0x1f0(0x50)
	char pad_240[0x20]; // 0x240(0x20)
	int32_t InterfacePreset; // 0x260(0x04)
	int32_t HealthDisplay; // 0x264(0x04)
	int32_t SanityDisplay; // 0x268(0x04)
	int32_t NoiseDisplay; // 0x26c(0x04)
	int32_t DarknessDisplay; // 0x270(0x04)
	int32_t InventoryDisplay; // 0x274(0x04)
	int32_t ObjectiveDisplay; // 0x278(0x04)
	int32_t CrosshairDisplay; // 0x27c(0x04)
	int32_t TeammateStatusHUDDisplay; // 0x280(0x04)
	int32_t TeammateStatusInWorldDisplay; // 0x284(0x04)
	int32_t TeammateStatusOutsideViewDisplay; // 0x288(0x04)
	bool bFriendsOnlineStatusNotifications; // 0x28c(0x01)
	bool bAllowFriendRequestNotifications; // 0x28d(0x01)
	char pad_28E[0x2]; // 0x28e(0x02)
	int32_t PartyInviteFilter; // 0x290(0x04)
	char pad_294[0x4]; // 0x294(0x04)
	struct FString TextLanguage; // 0x298(0x10)
	struct FString AudioLanguage; // 0x2a8(0x10)
	bool bShowSubtitles; // 0x2b8(0x01)
	char pad_2B9[0x7]; // 0x2b9(0x07)
	struct FString SubtitlesLanguage; // 0x2c0(0x10)
	int32_t SubtitlesFontSize; // 0x2d0(0x04)
	bool bSubtitlesBackground; // 0x2d4(0x01)
	char pad_2D5[0x3]; // 0x2d5(0x03)
	struct TArray<struct FProfileId> BlockedPlayers; // 0x2d8(0x10)
	struct TArray<struct FRecentlySeenPlayer> RecentlySeenPlayers; // 0x2e8(0x10)
	float GlobalVoiceChatVolume; // 0x2f8(0x04)
	char pad_2FC[0x4]; // 0x2fc(0x04)
	struct TArray<struct FVoiceChatVolumeMapping> PlayerVoiceChatVolumes; // 0x300(0x10)
	bool bAllowPartyMemberInvites; // 0x310(0x01)
	enum class EPartyPrivacy PartyPrivacy; // 0x311(0x01)
	bool bCrossplayEnabled; // 0x312(0x01)
	char pad_313[0x5]; // 0x313(0x05)
	struct TArray<struct FString> DisabledRegions; // 0x318(0x10)
	bool bHasSeenDisclaimer; // 0x328(0x01)
	char pad_329[0xcf]; // 0x329(0xcf)

	void UpdateQualityFromPreset(int32_t presetValue); // Function OPP.RBGameUserSettings.UpdateQualityFromPreset // (Final|Native|Public|BlueprintCallable) // @ game+0x1d6a224
	void UnBlock(struct FProfileId& ProfileId); // Function OPP.RBGameUserSettings.UnBlock // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6a198
	bool ShouldShowSubtitles(); // Function OPP.RBGameUserSettings.ShouldShowSubtitles // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16a8200
	bool ShouldShowHud(); // Function OPP.RBGameUserSettings.ShouldShowHud // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d6a180
	void SetUsePushToTalk(bool bInUsePushTotalk); // Function OPP.RBGameUserSettings.SetUsePushToTalk // (Final|Native|Public|BlueprintCallable) // @ game+0x1d6a100
	void SetTutorialSize(enum class EUIFontSize Size); // Function OPP.RBGameUserSettings.SetTutorialSize // (Final|Native|Public|BlueprintCallable) // @ game+0x1d6a07c
	void SetSubtitleSize(enum class EUIFontSize Size); // Function OPP.RBGameUserSettings.SetSubtitleSize // (Final|Native|Public|BlueprintCallable) // @ game+0x1d69ffc
	void SetStickyRunEnabled(bool bInStickyRun); // Function OPP.RBGameUserSettings.SetStickyRunEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1d69f7c
	void SetShowSubtitles(bool bShow); // Function OPP.RBGameUserSettings.SetShowSubtitles // (Final|Native|Public|BlueprintCallable) // @ game+0x1d69efc
	void SetShowHud(bool bShow); // Function OPP.RBGameUserSettings.SetShowHud // (Final|Native|Public|BlueprintCallable) // @ game+0x1d69e74
	void SetSFXVolume(float InSFXVolume); // Function OPP.RBGameUserSettings.SetSFXVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x1d69ddc
	void SetQualityPreset(int32_t presetValue); // Function OPP.RBGameUserSettings.SetQualityPreset // (Final|Native|Public|BlueprintCallable) // @ game+0x1d69d60
	void SetPlayerVoiceChatVolume(struct FProfileId& ProfileId, float Volume); // Function OPP.RBGameUserSettings.SetPlayerVoiceChatVolume // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d69c80
	void SetPartyPrivacy(enum class EPartyPrivacy privacy); // Function OPP.RBGameUserSettings.SetPartyPrivacy // (Final|Native|Public|BlueprintCallable) // @ game+0x1d69c00
	void SetPartyInviteFilter(int32_t PartyInviteFilter); // Function OPP.RBGameUserSettings.SetPartyInviteFilter // (Final|Native|Public|BlueprintCallable) // @ game+0x1d69b80
	void SetNormalizedBrightness(float Value); // Function OPP.RBGameUserSettings.SetNormalizedBrightness // (Final|Native|Public|BlueprintCallable) // @ game+0x1d69ae4
	void SetMusicVolume(float InMusicVolume); // Function OPP.RBGameUserSettings.SetMusicVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x1d69a4c
	void SetMicrophoneVolume(float InMicrophoneVolume); // Function OPP.RBGameUserSettings.SetMicrophoneVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x1d699c8
	void SetLookSensitivityMultiplier(struct FVector Value); // Function OPP.RBGameUserSettings.SetLookSensitivityMultiplier // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1d69938
	void SetHasSeenDisclaimer(bool NewValue); // Function OPP.RBGameUserSettings.SetHasSeenDisclaimer // (Final|Native|Public|BlueprintCallable) // @ game+0x1d698b8
	void SetGlobalVoiceChatVolume(float Volume); // Function OPP.RBGameUserSettings.SetGlobalVoiceChatVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x1d69834
	void SetEnableVoiceChat(bool bInEnableVoiceChat); // Function OPP.RBGameUserSettings.SetEnableVoiceChat // (Final|Native|Public|BlueprintCallable) // @ game+0x1d697b4
	void SetEnableRegion(struct FString region, bool bEnable); // Function OPP.RBGameUserSettings.SetEnableRegion // (Final|Native|Public|BlueprintCallable) // @ game+0x1d696dc
	void SetEnableCrossPlay(bool bEnableCrossPlay); // Function OPP.RBGameUserSettings.SetEnableCrossPlay // (Final|Native|Public|BlueprintCallable) // @ game+0x1d6965c
	void SetDirect3DVersion(enum class EGraphicsRHI d3DVersion); // Function OPP.RBGameUserSettings.SetDirect3DVersion // (Final|Native|Public|BlueprintCallable) // @ game+0x1d695f0
	void SetBrightnessSettingsToDefaults(bool bHDR); // Function OPP.RBGameUserSettings.SetBrightnessSettingsToDefaults // (Final|Native|Public|BlueprintCallable) // @ game+0x1d6954c
	void SetAutoHideItemInHandEnabled(bool bInAutoHideItemInHand); // Function OPP.RBGameUserSettings.SetAutoHideItemInHandEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1d694cc
	void SetAllowPartyMemberInvites(bool bAllowPartyMemberInvites); // Function OPP.RBGameUserSettings.SetAllowPartyMemberInvites // (Final|Native|Public|BlueprintCallable) // @ game+0x1d6944c
	bool IsVoiceActivityDetectorAuto(); // Function OPP.RBGameUserSettings.IsVoiceActivityDetectorAuto // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d69434
	bool IsStickyRunEnabled(); // Function OPP.RBGameUserSettings.IsStickyRunEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d69410
	bool IsRegionEnabled(struct FString region); // Function OPP.RBGameUserSettings.IsRegionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d6936c
	bool IsMotionBlurEnabled(); // Function OPP.RBGameUserSettings.IsMotionBlurEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d69354
	bool IsMotionBlurDirty(); // Function OPP.RBGameUserSettings.IsMotionBlurDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d69330
	bool IsBlocked(struct FProfileId& ProfileId); // Function OPP.RBGameUserSettings.IsBlocked // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d69294
	bool IsAutoHideItemInHandEnabled(); // Function OPP.RBGameUserSettings.IsAutoHideItemInHandEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d6927c
	bool HasRTHardware(); // Function OPP.RBGameUserSettings.HasRTHardware // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d69244
	bool HasResolutionChanged(); // Function OPP.RBGameUserSettings.HasResolutionChanged // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d6925c
	enum class EGraphicsRHI GetWantedDirect3DVersion(); // Function OPP.RBGameUserSettings.GetWantedDirect3DVersion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d6922c
	int32_t GetVoiceActivityDetectorSensitivity(); // Function OPP.RBGameUserSettings.GetVoiceActivityDetectorSensitivity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d69214
	int32_t GetVoiceActivityDetectorNoiseFloor(); // Function OPP.RBGameUserSettings.GetVoiceActivityDetectorNoiseFloor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d691fc
	int32_t GetVoiceActivityDetectorHangover(); // Function OPP.RBGameUserSettings.GetVoiceActivityDetectorHangover // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d691e4
	bool GetUsePushToTalk(); // Function OPP.RBGameUserSettings.GetUsePushToTalk // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d69110
	enum class EUIFontSize GetTutorialSize(); // Function OPP.RBGameUserSettings.GetTutorialSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d690f8
	struct FString GetTextLanguage(); // Function OPP.RBGameUserSettings.GetTextLanguage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d69018
	int32_t GetTeammateStatusOutsideViewDisplay(); // Function OPP.RBGameUserSettings.GetTeammateStatusOutsideViewDisplay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d69000
	int32_t GetTeammateStatusInWorldDisplay(); // Function OPP.RBGameUserSettings.GetTeammateStatusInWorldDisplay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68fe8
	int32_t GetTeammateStatusHUDDisplay(); // Function OPP.RBGameUserSettings.GetTeammateStatusHUDDisplay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68fd0
	struct FString GetSubtitlesLanguage(); // Function OPP.RBGameUserSettings.GetSubtitlesLanguage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68f94
	enum class EUIFontSize GetSubtitleSize(); // Function OPP.RBGameUserSettings.GetSubtitleSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68f64
	bool GetSubtitlesBackground(); // Function OPP.RBGameUserSettings.GetSubtitlesBackground // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68f7c
	bool GetShowSubtitles(); // Function OPP.RBGameUserSettings.GetShowSubtitles // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16a8200
	enum class EGraphicsRHI GetSetDirect3DVersion(); // Function OPP.RBGameUserSettings.GetSetDirect3DVersion // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d68e8c
	int32_t GetSanityDisplay(); // Function OPP.RBGameUserSettings.GetSanityDisplay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x170b1ac
	int32_t GetRTShadowsQuality(); // Function OPP.RBGameUserSettings.GetRTShadowsQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68e74
	int32_t GetRTReflectionsQuality(); // Function OPP.RBGameUserSettings.GetRTReflectionsQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68e5c
	bool GetRTEnabled(); // Function OPP.RBGameUserSettings.GetRTEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68e44
	int32_t GetQualityPreset(); // Function OPP.RBGameUserSettings.GetQualityPreset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68e2c
	float GetPlayerVoiceChatVolume(struct FProfileId& ProfileId); // Function OPP.RBGameUserSettings.GetPlayerVoiceChatVolume // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d68b54
	enum class EPartyPrivacy GetPartyPrivacy(); // Function OPP.RBGameUserSettings.GetPartyPrivacy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68b3c
	int32_t GetPartyInviteFilter(); // Function OPP.RBGameUserSettings.GetPartyInviteFilter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68b24
	int32_t GetObjectiveDisplay(); // Function OPP.RBGameUserSettings.GetObjectiveDisplay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68b0c
	int32_t GetNoiseDisplay(); // Function OPP.RBGameUserSettings.GetNoiseDisplay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68af4
	float GetMusicVolume(); // Function OPP.RBGameUserSettings.GetMusicVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68adc
	float GetMicrophoneVolume(); // Function OPP.RBGameUserSettings.GetMicrophoneVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68abc
	float GetMasterVolume(); // Function OPP.RBGameUserSettings.GetMasterVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68aa4
	struct FVector GetLookSensitivityMultiplier(); // Function OPP.RBGameUserSettings.GetLookSensitivityMultiplier // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68a7c
	int32_t GetInventoryDisplay(); // Function OPP.RBGameUserSettings.GetInventoryDisplay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68a64
	int32_t GetInterfacePreset(); // Function OPP.RBGameUserSettings.GetInterfacePreset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68a4c
	int32_t GetHealthDisplay(); // Function OPP.RBGameUserSettings.GetHealthDisplay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68a34
	float GetGlobalVoiceChatVolume(); // Function OPP.RBGameUserSettings.GetGlobalVoiceChatVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d68a14
	int32_t GetFSR2Quality(); // Function OPP.RBGameUserSettings.GetFSR2Quality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d689e4
	bool GetFriendsOnlineStatusNotifications(); // Function OPP.RBGameUserSettings.GetFriendsOnlineStatusNotifications // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d689fc
	bool GetEnableVoiceChat(); // Function OPP.RBGameUserSettings.GetEnableVoiceChat // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d689cc
	float GetEffectsVolume(); // Function OPP.RBGameUserSettings.GetEffectsVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d689b4
	int32_t GetDLSSQuality(); // Function OPP.RBGameUserSettings.GetDLSSQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68984
	int32_t GetDarknessDisplay(); // Function OPP.RBGameUserSettings.GetDarknessDisplay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d6899c
	enum class EGraphicsRHI GetCurrentDirect3DVersion(); // Function OPP.RBGameUserSettings.GetCurrentDirect3DVersion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d6896c
	int32_t GetCrosshairDisplay(); // Function OPP.RBGameUserSettings.GetCrosshairDisplay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68954
	float GetBrightness(); // Function OPP.RBGameUserSettings.GetBrightness // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68934
	struct FString GetAudioLanguage(); // Function OPP.RBGameUserSettings.GetAudioLanguage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d688f8
	int32_t GetAntiAliasingQuality(); // Function OPP.RBGameUserSettings.GetAntiAliasingQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d688e0
	bool GetAllowFriendRequestNotifications(); // Function OPP.RBGameUserSettings.GetAllowFriendRequestNotifications // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d688c8
	bool CrossPlayEnabled(); // Function OPP.RBGameUserSettings.CrossPlayEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68760
	int32_t ComputeQualityPreset(); // Function OPP.RBGameUserSettings.ComputeQualityPreset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d6873c
	void Block(struct FProfileId& ProfileId); // Function OPP.RBGameUserSettings.Block // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d686b0
	void ApplyVoiceChatAudioSettings(); // Function OPP.RBGameUserSettings.ApplyVoiceChatAudioSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x1d6869c
	bool AllowPartyMemberInvites(); // Function OPP.RBGameUserSettings.AllowPartyMemberInvites // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d68684
};

// Class OPP.RBInputSettings_AZERTY
// Size: 0x150 (Inherited: 0x150)
struct URBInputSettings_AZERTY : UInputSettings {
};

// Class OPP.RBGarageDoor
// Size: 0x9e8 (Inherited: 0x658)
struct ARBGarageDoor : ARBOperatable {
	char pad_658[0x8]; // 0x658(0x08)
	bool bAllowJackOnMultiplayer; // 0x660(0x01)
	char pad_661[0x3]; // 0x661(0x03)
	float GarageDoorWidth; // 0x664(0x04)
	float SoloStayOpenDuration; // 0x668(0x04)
	char pad_66C[0x4]; // 0x66c(0x04)
	struct FText CoopInteractionText; // 0x670(0x18)
	struct FText SoloInteractionText; // 0x688(0x18)
	struct FConfigurableFloat OnePlayerOperateTime; // 0x6a0(0xc8)
	struct FConfigurableFloat TwoPlayersOperateTime; // 0x768(0xc8)
	struct FConfigurableFloat ThreePlayersOperateTime; // 0x830(0xc8)
	struct FConfigurableFloat FourPlayersOperateTime; // 0x8f8(0xc8)
	struct URBRoomConnectorComponent* RoomConnectorComp; // 0x9c0(0x08)
	float DoorFullyOpenServerTimestamp; // 0x9c8(0x04)
	bool bHasJack; // 0x9cc(0x01)
	char pad_9CD[0xb]; // 0x9cd(0x0b)
	struct TArray<struct FPlayerGarageDoorInfo> PlayerGarageDoorInfos; // 0x9d8(0x10)

	void OnRep_HasJack(); // Function OPP.RBGarageDoor.OnRep_HasJack // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	bool HasJack(); // Function OPP.RBGarageDoor.HasJack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d6f024
	struct FVector GetCoopIconOffset(); // Function OPP.RBGarageDoor.GetCoopIconOffset // (Native|Event|Public|HasDefaults|BlueprintEvent) // @ game+0x1d6ef68
	void Event_OnJackHoldingStop(); // Function OPP.RBGarageDoor.Event_OnJackHoldingStop // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnJackHoldingStart(); // Function OPP.RBGarageDoor.Event_OnJackHoldingStart // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBGasTrapComponent
// Size: 0x6c0 (Inherited: 0x220)
struct URBGasTrapComponent : USceneComponent {
	struct UAkAudioEvent* GasTrapAudioStartEvent; // 0x218(0x08)
	struct UAkAudioEvent* GasTrapAudioStopEvent; // 0x220(0x08)
	struct UAkAudioEvent* GasTrapAudioTriggerEvent; // 0x228(0x08)
	struct FConfigurableFloat InitialDamage; // 0x230(0xc8)
	struct FConfigurableFloat DamageInterval; // 0x2f8(0xc8)
	struct FConfigurableFloat DamagePerInterval; // 0x3c0(0xc8)
	float InitialDamageInterval; // 0x488(0x04)
	struct FConfigurableFloat GasDuration; // 0x490(0xc8)
	struct FConfigurableBool DoesDamageDecayOverTime; // 0x558(0x60)
	bool bDoesPsychosisDamage; // 0x5b8(0x01)
	char pad_5BD[0xb]; // 0x5bd(0x0b)
	struct UShapeComponent* TriggerComponent; // 0x5c8(0x08)
	struct TArray<struct ARBPlayer*> OverlappingPlayers; // 0x5d0(0x10)
	struct TMap<struct ARBPlayer*, float> PlayersAffected; // 0x5e0(0x50)
	struct TArray<struct UParticleSystemComponent*> GasTrapParticleEmitters; // 0x630(0x10)
	struct TArray<struct UNiagaraComponent*> GasTrapNiagaraEmitters; // 0x640(0x10)
	struct FScheduledBool ScheduledEnabled; // 0x650(0x70)

	void UntriggerGasTrap_Server(); // Function OPP.RBGasTrapComponent.UntriggerGasTrap_Server // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d6f62c
	void TriggerGasTrap_Server(); // Function OPP.RBGasTrapComponent.TriggerGasTrap_Server // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d6f618
	void SnapToState(); // Function OPP.RBGasTrapComponent.SnapToState // (Final|Native|Private|BlueprintCallable) // @ game+0x1d6f5fc
	void OnTrapEndOverlap_Server(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function OPP.RBGasTrapComponent.OnTrapEndOverlap_Server // (Final|Native|Private) // @ game+0x1d6f4c0
	void OnTrapBeginOverlap_Server(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBGasTrapComponent.OnTrapBeginOverlap_Server // (Final|Native|Private|HasOutParms) // @ game+0x1d6f270
	void OnRep_ScheduledEnabled(); // Function OPP.RBGasTrapComponent.OnRep_ScheduledEnabled // (Final|Native|Private) // @ game+0x1d6f254
	void EnabledChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBGasTrapComponent.EnabledChangedCallback // (Final|Native|Private) // @ game+0x1d6edc0
};

// Class OPP.RBGeneratorMultiObjectiveActor
// Size: 0x370 (Inherited: 0x258)
struct ARBGeneratorMultiObjectiveActor : ARBRandomizableActor {
	char pad_258[0x8]; // 0x258(0x08)
	struct FConfigurableFloat SabotageDetectionDistance2D; // 0x260(0xc8)
	bool bIsInteractible; // 0x328(0x01)
	bool bIsCompleted; // 0x329(0x01)
	bool bPreFueled; // 0x32a(0x01)
	char pad_32B[0xd]; // 0x32b(0x0d)
	struct FMulticastInlineDelegate OnCompletionStateChanged; // 0x338(0x10)
	struct URBSwitchMatchPanelComponent* SwitchMatchPanelLeft; // 0x348(0x08)
	struct URBSwitchMatchPanelComponent* SwitchMatchPanelRight; // 0x350(0x08)
	struct URBZoneTimingPanelComponent* CrankPanel; // 0x358(0x08)
	struct URBLargeObjectInteractionPanelComponent* GasReservoirPanel; // 0x360(0x08)
	struct USceneComponent* SabotageLocation; // 0x368(0x08)

	void OnRep_PreFueled(); // Function OPP.RBGeneratorMultiObjectiveActor.OnRep_PreFueled // (Final|Native|Protected) // @ game+0x1d6f240
	void OnRep_IsInteractible(); // Function OPP.RBGeneratorMultiObjectiveActor.OnRep_IsInteractible // (Final|Native|Protected) // @ game+0x1d6f22c
	void OnRep_IsCompleted(); // Function OPP.RBGeneratorMultiObjectiveActor.OnRep_IsCompleted // (Final|Native|Protected) // @ game+0x1d6f218
	void OnPanelStateChanged_Server(struct URBInteractiblePanelComponent* panel, struct ARBPawn* pawnInteracting); // Function OPP.RBGeneratorMultiObjectiveActor.OnPanelStateChanged_Server // (Final|Native|Protected) // @ game+0x1d6f140
	void Multicast_OnBreak(); // Function OPP.RBGeneratorMultiObjectiveActor.Multicast_OnBreak // (Net|Native|Event|NetMulticast|Public) // @ game+0x1cfe9e0
	bool IsRightElectricPanelCompleted(); // Function OPP.RBGeneratorMultiObjectiveActor.IsRightElectricPanelCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d6f0a0
	bool IsLeftElectricPanelCompleted(); // Function OPP.RBGeneratorMultiObjectiveActor.IsLeftElectricPanelCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d6f080
	bool IsGasReservoirFilled(); // Function OPP.RBGeneratorMultiObjectiveActor.IsGasReservoirFilled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d6f05c
	bool IsCrankCompleted(); // Function OPP.RBGeneratorMultiObjectiveActor.IsCrankCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d6f03c
	void ForceComplete(); // Function OPP.RBGeneratorMultiObjectiveActor.ForceComplete // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|Const) // @ game+0x1d6eeec
	void Event_OnPreFueledStateChanged(); // Function OPP.RBGeneratorMultiObjectiveActor.Event_OnPreFueledStateChanged // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnInteractibleStateChanged(); // Function OPP.RBGeneratorMultiObjectiveActor.Event_OnInteractibleStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnCompletionStateChanged(); // Function OPP.RBGeneratorMultiObjectiveActor.Event_OnCompletionStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnBreak(); // Function OPP.RBGeneratorMultiObjectiveActor.Event_OnBreak // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Break_Server(); // Function OPP.RBGeneratorMultiObjectiveActor.Break_Server // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d6edac
};

// Class OPP.RBLargeInteractObjectiveCoordinator
// Size: 0x25d0 (Inherited: 0xba8)
struct ARBLargeInteractObjectiveCoordinator : ARBBaseObjectiveCoordinator {
	struct ARBLargePickup* LargePickupActors; // 0xba8(0x08)
	struct FName SpecificObjectiveComponentTag; // 0xbb0(0x08)
	struct TArray<struct TSoftObjectPtr<ARBLargePickup>> SpecificLargePickupActors; // 0xbb8(0x10)
	bool bUseAvailableLargePickupsForMaxCount; // 0xbc8(0x01)
	char pad_BC9[0x7]; // 0xbc9(0x07)
	struct AActor* LockingLargePickupActorClass; // 0xbd0(0x08)
	struct FText GoToUsableObjectiveText; // 0xbd8(0x18)
	char bUseLargePickupActorsRandomization : 1; // 0xbf0(0x01)
	char pad_BF0_1 : 7; // 0xbf0(0x01)
	char pad_BF1[0x7]; // 0xbf1(0x07)
	struct FObjectiveRandomizationSetupData LargePickupActorsRandomizationSetup; // 0xbf8(0x4e8)
	struct FObjectiveUISettings DeliveryZoneUISettings; // 0x10e0(0xa50)
	struct FObjectiveUISettings PickupObjectiveUISettings; // 0x1b30(0xa50)
	struct FMulticastInlineDelegate OnLargeObjectHandlerChanged; // 0x2580(0x10)
	struct FMulticastInlineDelegate OnLargeObjectUsed; // 0x2590(0x10)
	struct TArray<struct ARBLargePickup*> AvailableLargePickups; // 0x25a0(0x10)
	struct TArray<struct AActor*> LockingLargePickupsActors; // 0x25b0(0x10)
	struct TArray<struct ARBLargePickup*> PreviousAvailablePickups; // 0x25c0(0x10)

	void OnRep_LockingLargePickupsActors(); // Function OPP.RBLargeInteractObjectiveCoordinator.OnRep_LockingLargePickupsActors // (Final|Native|Protected) // @ game+0x1d8b954
	void OnRep_AvailableLargePickups(); // Function OPP.RBLargeInteractObjectiveCoordinator.OnRep_AvailableLargePickups // (Final|Native|Protected) // @ game+0x1d8b908
	void OnPickupHolderChanged(struct ARBPawn* Player, struct ARBLargePickup* largePickup); // Function OPP.RBLargeInteractObjectiveCoordinator.OnPickupHolderChanged // (Final|Native|Protected) // @ game+0x1d8b7a8
	void OnLargePickupUsedOnObject(struct ARBPawn* interactor, struct ARBLargePickup* largePickup, struct URBLargeObjectInteractionPanelComponent* interactible); // Function OPP.RBLargeInteractObjectiveCoordinator.OnLargePickupUsedOnObject // (Final|Native|Protected) // @ game+0x1d8b630
	void OnLargeObjectInteractionDoAction(struct URBLargeObjectInteractionPanelComponent* largeObjectPanel, struct ARBLargePickup* largePickup, struct ARBPawn* interactor); // Function OPP.RBLargeInteractObjectiveCoordinator.OnLargeObjectInteractionDoAction // (Native|Protected) // @ game+0x1d8b534
	void OnInteractibleAddedToWorld(struct ARBInteractible* interactible); // Function OPP.RBLargeInteractObjectiveCoordinator.OnInteractibleAddedToWorld // (Final|Native|Protected) // @ game+0x1d8b4b4
	struct TArray<struct ARBLargePickup*> GetAvailableLargePickups(); // Function OPP.RBLargeInteractObjectiveCoordinator.GetAvailableLargePickups // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d8aee8
};

// Class OPP.RBGeneratorObjectiveCoordinator
// Size: 0x26a0 (Inherited: 0x25d0)
struct ARBGeneratorObjectiveCoordinator : ARBLargeInteractObjectiveCoordinator {
	struct FConfigurableInt DesiredNumberOfGeneratorAlreadyFueled; // 0x25d0(0xc8)
	bool bAllGeneratorRefueled; // 0x2698(0x01)
	char pad_2699[0x7]; // 0x2699(0x07)

	void OnRep_AllGeneratorRefueled(); // Function OPP.RBGeneratorObjectiveCoordinator.OnRep_AllGeneratorRefueled // (Final|Native|Private) // @ game+0x1d6f204
	void OnGeneratorCompletedStateChanged(struct ARBGeneratorMultiObjectiveActor* generator); // Function OPP.RBGeneratorObjectiveCoordinator.OnGeneratorCompletedStateChanged // (Final|Native|Public) // @ game+0x1d6f0c0
	bool AreAllGeneratorFueled(); // Function OPP.RBGeneratorObjectiveCoordinator.AreAllGeneratorFueled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d6ed88
};

// Class OPP.RBHUDElementWidget
// Size: 0x2e8 (Inherited: 0x268)
struct URBHUDElementWidget : URBUserWidget {
	struct ARBHUD* HUD; // 0x268(0x08)
	bool bStartsWithNoOpacity; // 0x270(0x01)
	char pad_271[0x7]; // 0x271(0x07)
	struct TArray<enum class EHudMode> HudModesForShow; // 0x278(0x10)
	bool bAutoHandleVisibility; // 0x288(0x01)
	char pad_289[0x3]; // 0x289(0x03)
	float AutoVisibilityCollapseDelay; // 0x28c(0x04)
	struct ARBPlayer* LocalPlayer; // 0x290(0x08)
	struct ARBPlayer* SpectatedPlayer; // 0x298(0x08)
	bool bForcedShow; // 0x2a0(0x01)
	bool bIsShown; // 0x2a1(0x01)
	enum class EHudMode hudMode; // 0x2a2(0x01)
	char pad_2A3[0x45]; // 0x2a3(0x45)

	void UpdateVisibility(); // Function OPP.RBHUDElementWidget.UpdateVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7c4c4
	bool ShouldShowBase(); // Function OPP.RBHUDElementWidget.ShouldShowBase // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d7c35c
	bool ShouldShow(); // Function OPP.RBHUDElementWidget.ShouldShow // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d7c334
	bool ShouldForceShow(); // Function OPP.RBHUDElementWidget.ShouldForceShow // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d7c30c
	void SetForcedShow(bool forcedShow); // Function OPP.RBHUDElementWidget.SetForcedShow // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7c168
	bool IsInValidHudMode(); // Function OPP.RBHUDElementWidget.IsInValidHudMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d7bb44
	struct ARBPlayer* GetWatchedPlayer(); // Function OPP.RBHUDElementWidget.GetWatchedPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d7bb24
	float GetHUDOpacity(); // Function OPP.RBHUDElementWidget.GetHUDOpacity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d7ba50
	void ForceShowForDuration(float duration); // Function OPP.RBHUDElementWidget.ForceShowForDuration // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7b9a4
	void Event_Show(); // Function OPP.RBHUDElementWidget.Event_Show // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnWatchedPlayerChanged(struct ARBPlayer* oldPlayer, struct ARBPlayer* NewPlayer); // Function OPP.RBHUDElementWidget.Event_OnWatchedPlayerChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnSpectatedPlayerChanged(struct ARBPlayer* newSpectatedlPlayer); // Function OPP.RBHUDElementWidget.Event_OnSpectatedPlayerChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnResetHud(); // Function OPP.RBHUDElementWidget.Event_OnResetHud // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnLocalPlayerChanged(struct ARBPlayer* oldLocalPlayer, struct ARBPlayer* newLocalPlayer); // Function OPP.RBHUDElementWidget.Event_OnLocalPlayerChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnHudModeChanged(enum class EHudMode newHudMode); // Function OPP.RBHUDElementWidget.Event_OnHudModeChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_Hide(); // Function OPP.RBHUDElementWidget.Event_Hide // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBRadialMenuBase
// Size: 0x2f0 (Inherited: 0x2e8)
struct URBRadialMenuBase : URBHUDElementWidget {
	char pad_2E8[0x8]; // 0x2e8(0x08)

	void OnShow(); // Function OPP.RBRadialMenuBase.OnShow // (Native|Public) // @ game+0x1d80538
	void OnHide(); // Function OPP.RBRadialMenuBase.OnHide // (Native|Public) // @ game+0x16a8140
	void OnAddToSimulatedMouseLocation(struct FVector2D& amount); // Function OPP.RBRadialMenuBase.OnAddToSimulatedMouseLocation // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1deb0ec
};

// Class OPP.RBGenericRadialMenu
// Size: 0x300 (Inherited: 0x2f0)
struct URBGenericRadialMenu : URBRadialMenuBase {
	int32_t NumberOfDivisions; // 0x2f0(0x04)
	bool bSticky; // 0x2f4(0x01)
	char pad_2F5[0x3]; // 0x2f5(0x03)
	int32_t WheelIndex; // 0x2f8(0x04)
	char pad_2FC[0x4]; // 0x2fc(0x04)

	void Event_HighlightWheel(int32_t wheelIndexValue); // Function OPP.RBGenericRadialMenu.Event_HighlightWheel // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBGhostAnimInstance
// Size: 0x2f0 (Inherited: 0x2c0)
struct URBGhostAnimInstance : UAnimInstance {
	struct UAnimSequence* AnchorAnimSequence; // 0x2b8(0x08)
	bool bAnchorIsYForward; // 0x2c0(0x01)
	bool bAnchorSnapToGround; // 0x2c1(0x01)
	struct ARBPawn* RBPawn; // 0x2c8(0x08)
	struct ARBPlayer* RBPlayer; // 0x2d0(0x08)
	struct URBAnimInstance* PawnAnimInstance; // 0x2d8(0x08)
	char pad_2E2[0xe]; // 0x2e2(0x0e)

	void OnGhostAnimNotify(enum class EGhostAnimEvent animEvent, struct FName& animEventName); // Function OPP.RBGhostAnimInstance.OnGhostAnimNotify // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	struct AActor* GetInteractableActor(); // Function OPP.RBGhostAnimInstance.GetInteractableActor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d6efa0
	bool FinishGhost(enum class EGhostFinishReason finishReason, int32_t GhostFinishCustomReason); // Function OPP.RBGhostAnimInstance.FinishGhost // (Native|Event|Public|BlueprintEvent) // @ game+0x1d6ee40
	void BP_InitializeGhost(); // Function OPP.RBGhostAnimInstance.BP_InitializeGhost // (Event|Protected|BlueprintEvent) // @ game+0x201e6d4
	void BP_ClearGhost(); // Function OPP.RBGhostAnimInstance.BP_ClearGhost // (Event|Protected|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBGlassFloorTrap
// Size: 0x250 (Inherited: 0x248)
struct ARBGlassFloorTrap : AActor {
	char pad_248[0x8]; // 0x248(0x08)
};

// Class OPP.RBGlobalAIConfig
// Size: 0x1338 (Inherited: 0x28)
struct URBGlobalAIConfig : UObject {
	struct URBGlobalAIConfig* Parent; // 0x28(0x08)
	struct FString OverridesDescription; // 0x30(0x10)
	struct FSpecialistsConfigData Config; // 0x40(0x12f8)
};

// Class OPP.RBAIDirectorConfig
// Size: 0x15b8 (Inherited: 0x28)
struct URBAIDirectorConfig : UObject {
	bool bEnableSystemicSpawning; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct URBGlobalAIConfig* SpecialistsCfg; // 0x30(0x08)
	struct URBNPCRandomizationConfig* InitialSpawn; // 0x38(0x08)
	struct TArray<struct FNPCSpawnWaveParams> SpawnWaves; // 0x40(0x10)
	struct FDynamicPressureConfig DynamicPressure; // 0x50(0x1490)
	struct TArray<struct FRandomSpawnParams> RandomSpawns; // 0x14e0(0x10)
	struct FGlobalConditionalRetirementParams ConditionalRetirementGlobalRules; // 0x14f0(0x50)
	struct TArray<struct FEventConditionalRetirementParams> ConditionalRetirementEvents; // 0x1540(0x10)
	struct FDesignatedRetirementParams DesignatedRetirementRules; // 0x1550(0x68)
};

// Class OPP.RBNPCConfigRedirectors
// Size: 0x38 (Inherited: 0x28)
struct URBNPCConfigRedirectors : UObject {
	struct TArray<struct FNPCConfigRedirector> ConfigRedirectors; // 0x28(0x10)
};

// Class OPP.RBGlobalAnimConfig
// Size: 0x78 (Inherited: 0x28)
struct URBGlobalAnimConfig : UObject {
	struct TMap<struct FString, struct FSoftObjectPath> VoiceTypeDataTables; // 0x28(0x50)
};

// Class OPP.RBGlobalAudioConfig
// Size: 0xc8 (Inherited: 0x28)
struct URBGlobalAudioConfig : UObject {
	struct TMap<struct FName, struct FGameSyncValues> SwitchGroups; // 0x28(0x50)
	struct TMap<struct FName, struct FGameSyncValues> StateGroups; // 0x78(0x50)
};

// Class OPP.RBGlobalUIConfig
// Size: 0x1dc8 (Inherited: 0x28)
struct URBGlobalUIConfig : UObject {
	struct TMap<struct FName, struct UStringTable*> StringTables; // 0x28(0x50)
	struct UAkAudioEvent* MainObjectiveStartedSound; // 0x78(0x08)
	struct UAkAudioEvent* MainObjectiveCompletedSound; // 0x80(0x08)
	struct UAkAudioEvent* MainObjectiveStepCompletedSound; // 0x88(0x08)
	struct UAkAudioEvent* MainObjectiveCompletedStepRevertedSound; // 0x90(0x08)
	struct UAkAudioEvent* SecondaryObjectiveStartedSound; // 0x98(0x08)
	struct UAkAudioEvent* SecondaryObjectiveCompletedSound; // 0xa0(0x08)
	struct UAkAudioEvent* SecondaryObjectiveStepCompletedSound; // 0xa8(0x08)
	struct UAkAudioEvent* SecondaryObjectiveCompletedStepRevertedSound; // 0xb0(0x08)
	struct TMap<enum class EGameObjectiveType, struct FObjectiveProgressionAudioEvents> MainObjectiveProgressionSounds; // 0xb8(0x50)
	struct UAkAudioEvent* DefaultMenuOpenSound; // 0x108(0x08)
	struct UAkAudioEvent* DefaultMenuExitSound; // 0x110(0x08)
	struct UAkAudioEvent* DefaultButtonHoverSound; // 0x118(0x08)
	struct UAkAudioEvent* DefaultButtonClickedSound; // 0x120(0x08)
	struct UAkAudioEvent* DefaultMenuTabChangeSound; // 0x128(0x08)
	struct UAkAudioEvent* DefaultMenuConfirmSound; // 0x130(0x08)
	struct UAkAudioEvent* DefaultMenuCancelSound; // 0x138(0x08)
	struct UAkAudioEvent* DefaultMenuFailedSound; // 0x140(0x08)
	struct UAkAudioEvent* DefaultMenuPurchaseSound; // 0x148(0x08)
	struct UAkAudioEvent* LoadingScreenStartEvent; // 0x150(0x08)
	struct UAkAudioEvent* LoadingScreenSecondaryStartEvent; // 0x158(0x08)
	struct UAkAudioEvent* LoadingScreenStopEvent; // 0x160(0x08)
	struct UAkAudioEvent* LoadingScreenSecondaryStopEvent; // 0x168(0x08)
	struct UAkAudioEvent* MuffleStateHighOn; // 0x170(0x08)
	struct UAkAudioEvent* MuffleStateLowOn; // 0x178(0x08)
	struct UAkAudioEvent* MuffleStateOff; // 0x180(0x08)
	struct UAkAudioEvent* StageIntroVoice; // 0x188(0x08)
	struct UAkAudioEvent* StageIntroSound; // 0x190(0x08)
	struct UAkAudioEvent* StageResetSound; // 0x198(0x08)
	struct UAkAudioEvent* TutorialMessageSound; // 0x1a0(0x08)
	struct UAkAudioEvent* TrappedMateSound; // 0x1a8(0x08)
	struct UAkAudioEvent* KnockedDownMateSound; // 0x1b0(0x08)
	struct UAkAudioEvent* TargetedMateSound; // 0x1b8(0x08)
	struct UAkAudioEvent* DeadMateSound; // 0x1c0(0x08)
	struct UAkAudioEvent* DeadLocalPlayerSound; // 0x1c8(0x08)
	struct UAkAudioEvent* ActiveSkillInCooldown; // 0x1d0(0x08)
	struct UAkAudioEvent* ActiveSkillAvailable; // 0x1d8(0x08)
	struct UAkAudioEvent* AddedPingSound; // 0x1e0(0x08)
	struct UAkAudioEvent* RemovedPingSound; // 0x1e8(0x08)
	struct UAkAudioEvent* ExperimentResultLevelUpSound; // 0x1f0(0x08)
	struct UAkAudioEvent* ExperimentResultSequenceStartSound; // 0x1f8(0x08)
	struct UAkAudioEvent* ExperimentResultUnlock; // 0x200(0x08)
	struct UAkAudioEvent* ExperimentResultXP; // 0x208(0x08)
	struct FName CustomizationMenuVoiceType; // 0x210(0x08)
	struct TArray<struct FSlateBrush> PlayerBarBaseImages; // 0x218(0x10)
	struct TArray<struct FSlateBrush> PlayerBarUpperImages; // 0x228(0x10)
	struct TArray<struct FSlateBrush> PlayerBarTempImages; // 0x238(0x10)
	struct TMap<enum class EPlayerBarState, struct FSlateColor> PlayerBarHealthColors; // 0x248(0x50)
	struct TMap<enum class EPlayerBarState, struct FSlateColor> PlayerBarStaminaColors; // 0x298(0x50)
	struct TMap<enum class EPlayerBarState, struct FSlateColor> PlayerBarPsychosisColors; // 0x2e8(0x50)
	struct TMap<enum class EPlayerBarState, struct FSlateColor> PlayerBarBatteryColors; // 0x338(0x50)
	struct FLinearColor ObjectiveColor; // 0x388(0x10)
	struct FText ObjectiveCompleted; // 0x398(0x18)
	struct FLinearColor NormalInventoryItemTint; // 0x3b0(0x10)
	struct TMap<enum class EItemCategory, struct FLinearColor> ItemGroupColors; // 0x3c0(0x50)
	struct TMap<enum class EGameObjectiveType, struct UTexture2D*> GameObjectivesIcons; // 0x410(0x50)
	struct TMap<enum class EPlayerIndicatorType, struct FSlateBrush> StatusIcons; // 0x460(0x50)
	struct TMap<enum class EPlayerIndicatorType, enum class EGameObjectiveType> StatusToObjectivesMap; // 0x4b0(0x50)
	struct UTexture2D* DefaultGotoIconTexture; // 0x500(0x08)
	int32_t MaxObjectiveIconsDisplayed; // 0x508(0x04)
	bool bUseSpecialScreenBorderRules; // 0x50c(0x01)
	char pad_50D[0x3]; // 0x50d(0x03)
	float RippleFrequency; // 0x510(0x04)
	float RippleOpacity; // 0x514(0x04)
	float RippleSpeed; // 0x518(0x04)
	char pad_51C[0x4]; // 0x51c(0x04)
	struct TMap<enum class EPlayerPingType, struct FLinearColor> PlayerPingIconTypeColors; // 0x520(0x50)
	struct FVector2D WorldIconSize; // 0x570(0x08)
	float WorldIconFarSizePercentage; // 0x578(0x04)
	float WorldIconPingedSizePercentage; // 0x57c(0x04)
	float ObjectiveZDistanceForUp; // 0x580(0x04)
	float ObjectiveZDistanceForDown; // 0x584(0x04)
	struct FObjectiveUISettings BaseObjectiveUISettings; // 0x588(0xa50)
	float ClosestsObjectivesUpdateDelay; // 0xfd8(0x04)
	float MinimalInventoryUpdateDisplayDuration; // 0xfdc(0x04)
	float CompletedTaskDisplayDuration; // 0xfe0(0x04)
	float ObjectiveUpdateDisplayDuration; // 0xfe4(0x04)
	float GameMessageDisplayDuration; // 0xfe8(0x04)
	char pad_FEC[0x4]; // 0xfec(0x04)
	struct TMap<enum class EGameMessageCategory, struct FLinearColor> GameMessagesTextColor; // 0xff0(0x50)
	struct TArray<struct FTalkWheelSpliceData> TalkWheelSlicesData; // 0x1040(0x10)
	struct FVector2D OverheadStatusIconSize; // 0x1050(0x08)
	struct TMap<enum class EGameDifficulty, float> ImposterNameCorruptionPercentage; // 0x1058(0x50)
	float OverheadFarSizePercentage; // 0x10a8(0x04)
	float OverheadIntermediateFOP; // 0x10ac(0x04)
	float OverheadFODStart; // 0x10b0(0x04)
	float OverheadFODIntermediate; // 0x10b4(0x04)
	float OverheadFODEnd; // 0x10b8(0x04)
	float OverheadFarSizePercentageIncapacitated; // 0x10bc(0x04)
	float OverheadIntermediateFOPIncapacitated; // 0x10c0(0x04)
	float OverheadFODStartIncapacitated; // 0x10c4(0x04)
	float OverheadFODIntermediateIncapacitated; // 0x10c8(0x04)
	float OverheadFODEndIncapacitated; // 0x10cc(0x04)
	float OverheadFODStartLobbyParty; // 0x10d0(0x04)
	float OverheadFODIntermediateLobbyParty; // 0x10d4(0x04)
	float OverheadFODEndLobbyParty; // 0x10d8(0x04)
	float OverheadFODStartLobby; // 0x10dc(0x04)
	float OverheadFODIntermediateLobby; // 0x10e0(0x04)
	float OverheadFODEndLobby; // 0x10e4(0x04)
	struct TMap<enum class EUIFontSize, int32_t> SubtitleSizes; // 0x10e8(0x50)
	struct TMap<enum class EUIFontSize, int32_t> TutorialSizes; // 0x1138(0x50)
	float TutorialShortenedDuration; // 0x1188(0x04)
	float DelayBetweenTutorialSequenceText; // 0x118c(0x04)
	struct FName CycleInventoryTutorialId; // 0x1190(0x08)
	struct FHUDTutorialTextData HealthBelowMaxTutorialData; // 0x1198(0x38)
	struct FHUDTutorialTextData HealthBleedOutTutorialData; // 0x11d0(0x38)
	struct FHUDTutorialTextData StaminaExhaustedTutorialData; // 0x1208(0x38)
	struct FHUDTutorialTextData BatteryEmptyTutorialData; // 0x1240(0x38)
	struct FHUDTutorialTextData BatteryUsingNightVisionTutorialData; // 0x1278(0x38)
	struct FHUDTutorialTextData PsychosisBelowMaxTutorialData; // 0x12b0(0x38)
	struct FHUDTutorialTextData LivesCountTutorialData; // 0x12e8(0x38)
	struct FHUDTutorialTextData DeathTutorialData; // 0x1320(0x38)
	struct FHUDTutorialTextData ActiveSkillEmptyTutorialData; // 0x1358(0x38)
	struct FHUDTutorialTextData ActiveSkillCooldownTutorialData; // 0x1390(0x38)
	struct FHUDTutorialTextData ActiveSkillReadyTutorialData; // 0x13c8(0x38)
	struct FHUDTutorialTextData JoinedPartyTutorialData; // 0x1400(0x38)
	struct FHUDTutorialTextData FirstRespawnSoloData; // 0x1438(0x38)
	struct FHUDTutorialTextData FirstRespawnMultiData; // 0x1470(0x38)
	struct FHUDTutorialTextData SoundTrapTutorialData; // 0x14a8(0x38)
	struct FHUDTutorialTextData NoisyFloorMaterialTutorialData; // 0x14e0(0x38)
	struct FHUDTutorialTextData DoorTrapTutorialData; // 0x1518(0x38)
	int32_t HUDTutorialMaxDisplayCount; // 0x1550(0x04)
	float HUDTutorialDuration; // 0x1554(0x04)
	float HUDTutorialDisplayDelay; // 0x1558(0x04)
	float HUDTutorialRepeatDelay; // 0x155c(0x04)
	float ObjectiveTutorialDuration; // 0x1560(0x04)
	int32_t ObjectiveTutorialMaxDisplayCount; // 0x1564(0x04)
	float DelayBetweenObjectiveTutorial; // 0x1568(0x04)
	float PsychosisObjectiveTutoMaxDisplayTime; // 0x156c(0x04)
	int32_t MaxNumberOfEquipItemTutorialDisplayedTimes; // 0x1570(0x04)
	float DefaultDurationOfEquipItemTutorial; // 0x1574(0x04)
	float DelayBetweenSameItemEquipItemTutorial; // 0x1578(0x04)
	int32_t MaxNumberOfLargeObjectTutorialDisplayedTimes; // 0x157c(0x04)
	float DefaultDurationOfLargeObjectTutorial; // 0x1580(0x04)
	float DelayBetweenLargeObjectTutorial; // 0x1584(0x04)
	struct TArray<struct FTutorialTextData> LargeObjectPickedUpTutorialSequence; // 0x1588(0x10)
	struct TArray<struct FTutorialTextData> FirstTimePlayingGameTutorialSequence; // 0x1598(0x10)
	struct TArray<struct FTutorialTextData> FirstTimePickedUpAnyItemSequence; // 0x15a8(0x10)
	struct TArray<struct FTutorialTextData> FirstTimeEquippedAnyItemSequence; // 0x15b8(0x10)
	struct TArray<struct FTutorialTextData> FirstTimeStartingAnyStageSequence; // 0x15c8(0x10)
	struct TArray<struct FTutorialTextData> CycleInventoryTutorial; // 0x15d8(0x10)
	float PingDuration; // 0x15e8(0x04)
	float NPCPingDuration; // 0x15ec(0x04)
	float PingFadeOutDuration; // 0x15f0(0x04)
	float MaxPingDistance; // 0x15f4(0x04)
	float FallbackLineTracePingMaxDistance; // 0x15f8(0x04)
	float PingCoopMoveLedgeMarkerExtent; // 0x15fc(0x04)
	float PingCoopMoveLedgeMarkerExtraDistance; // 0x1600(0x04)
	float PingCoopMoveIconZOffset; // 0x1604(0x04)
	float PingMaxDistanceToRemove; // 0x1608(0x04)
	float PingIconFadeoutDistanceStart; // 0x160c(0x04)
	float PingIconFadeoutDistanceEnd; // 0x1610(0x04)
	struct FVector2D PingIconSize; // 0x1614(0x08)
	float PingIconFarSizePercentage; // 0x161c(0x04)
	struct UTexture2D* DoorPingIcon; // 0x1620(0x08)
	struct UTexture2D* GarageDoorPingIcon; // 0x1628(0x08)
	struct UTexture2D* LockedDoorPingIcon; // 0x1630(0x08)
	struct UTexture2D* CoopDoorPingIcon; // 0x1638(0x08)
	struct UTexture2D* TrappedDoorPingIcon; // 0x1640(0x08)
	struct UTexture2D* LockedContainerPingIcon; // 0x1648(0x08)
	struct UTexture2D* ContainerPingIcon; // 0x1650(0x08)
	struct UTexture2D* EnemyPingIcon; // 0x1658(0x08)
	struct UTexture2D* ElectricFloorTrapPingIcon; // 0x1660(0x08)
	struct UTexture2D* ExplosiveTrapPingIcon; // 0x1668(0x08)
	struct UTexture2D* HangingSoundTrapPingIcon; // 0x1670(0x08)
	struct UTexture2D* GlassFloorTrapPingIcon; // 0x1678(0x08)
	struct UTexture2D* PsychosisMinePingIcon; // 0x1680(0x08)
	struct UTexture2D* CoopWallPingIcon; // 0x1688(0x08)
	struct UTexture2D* CoopThrowCatchPingIcon; // 0x1690(0x08)
	struct UTexture2D* CoopButtonPingIcon; // 0x1698(0x08)
	struct UTexture2D* breakableObstacle; // 0x16a0(0x08)
	struct UTexture2D* BreakableWindow; // 0x16a8(0x08)
	struct UTexture2D* HidespotPingIcon; // 0x16b0(0x08)
	struct FMetaNPCSettings EngineerSettings; // 0x16b8(0x90)
	struct FMetaNPCSettings PharmacistSettings; // 0x1748(0x90)
	struct FMetaNPCSettings ShadowyDameSettings; // 0x17d8(0x90)
	struct FMetaNPCSettings DirectorSettings; // 0x1868(0x90)
	char pad_18F8[0x90]; // 0x18f8(0x90)
	struct FUIColors PlayerColors; // 0x1988(0x40)
	struct TArray<struct FLinearColor> TQColors; // 0x19c8(0x10)
	struct TArray<struct UTexture2D*> TQFaces; // 0x19d8(0x10)
	struct FLinearColor ProgressColor; // 0x19e8(0x10)
	struct TMap<struct FName, struct FRBUIEffectDisplayData> EffectDisplayData; // 0x19f8(0x50)
	float MinimumEffectDisplayDuration; // 0x1a48(0x04)
	float MenuHoldInputDuration; // 0x1a4c(0x04)
	float PauseMenuHoldInputDuration; // 0x1a50(0x04)
	char pad_1A54[0x4]; // 0x1a54(0x04)
	struct URBMenuTransition* MenuTransitionClass; // 0x1a58(0x08)
	struct URBErrorConfirmPopUpWidget* ErrorWidgetClass; // 0x1a60(0x08)
	struct URBLoadingScreenWidget* LoadingWidgetClass; // 0x1a68(0x08)
	struct URBGroupStatusWidget* GroupStatusWidgetClass; // 0x1a70(0x08)
	struct URBUserWidget* SubtitleWidgetClass; // 0x1a78(0x08)
	struct URBUserWidget* NDAOverlayWidgetClass; // 0x1a80(0x08)
	struct URBInputIcon* InputIconWidgetClass; // 0x1a88(0x08)
	struct URBPlayerGameSessionTransitionWidget* PlayerGameSessionTransitionWidgetClass; // 0x1a90(0x08)
	struct URBTextChatWidget* TextChatWidgetClass; // 0x1a98(0x08)
	struct URBMenuWidget* IngameMenuClass; // 0x1aa0(0x08)
	struct URBMenuWidget* CharacterSheetClass; // 0x1aa8(0x08)
	struct URBHUDWidget* PlayerHudWidgetClass; // 0x1ab0(0x08)
	struct URBExperimentResultScreen* ExperimentResultScreenClass; // 0x1ab8(0x08)
	struct URBMenuWidget* PostReleaseVideoMenuClass; // 0x1ac0(0x08)
	struct URBCharacterCustomizationMenu* CharacterCustomizationMenuClass; // 0x1ac8(0x08)
	struct URBMenuWidget* CreditsMenuClass; // 0x1ad0(0x08)
	struct URBPartyInviteNotificationUserWidget* PartyInviteNotificationUserWidgetClass; // 0x1ad8(0x08)
	struct URBPartyInviteRequestNotificationUserWidget* PartyInviteRequestNotificationUserWidgetClass; // 0x1ae0(0x08)
	struct URBFriendInviteNotificationUserWidget* FriendInviteNotificationUserWidgetClass; // 0x1ae8(0x08)
	struct URBMatchAcceptanceNotificationUserWidget* MatchAcceptanceNotificationUserWidgetClass; // 0x1af0(0x08)
	struct TMap<enum class ENPCType, struct FText> PrimeAssetsDescriptions; // 0x1af8(0x50)
	struct TMap<int32_t, struct UTexture2D*> RankTextures; // 0x1b48(0x50)
	struct TMap<enum class ELoadoutElementType, struct FSlateColor> LoadoutElementTints; // 0x1b98(0x50)
	struct TMap<enum class ELoadoutElementType, struct FLoadoutBrushes> LoadoutReceptorBrushes; // 0x1be8(0x50)
	struct TMap<enum class ESecondaryObjectiveVariatorType, struct TSoftObjectPtr<UTexture2D>> SecondaryObjectiveVariatorTextures; // 0x1c38(0x50)
	struct TMap<enum class EObstacleVariatorType, struct TSoftObjectPtr<UTexture2D>> ObstacleVariatorTextures; // 0x1c88(0x50)
	struct TMap<enum class ERollingGateVariatorType, struct TSoftObjectPtr<UTexture2D>> RollingGateVariatorTextures; // 0x1cd8(0x50)
	struct TMap<enum class ESASVariatorType, struct TSoftObjectPtr<UTexture2D>> SASVariatorTextures; // 0x1d28(0x50)
	struct URBGamepadSpecificData* DualsenseData; // 0x1d78(0x08)
	struct URBGamepadSpecificData* XboneGamepadData; // 0x1d80(0x08)
	struct FSlateColor ModifiedValueColor; // 0x1d88(0x28)
	float BackgroundBlurEffect; // 0x1db0(0x04)
	struct FLinearColor BackgroundColor; // 0x1db4(0x10)
	char pad_1DC4[0x4]; // 0x1dc4(0x04)

	struct FMetaNPCSettings GetNPCSettings(enum class EMetaNPCType NPCType); // Function OPP.RBGlobalUIConfig.GetNPCSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d71944
};

// Class OPP.RBGroundPushable
// Size: 0x560 (Inherited: 0x540)
struct ARBGroundPushable : ARBBasePushable {
	struct FVector Server_Location; // 0x540(0x0c)
	struct FVector InitialLocation; // 0x54c(0x0c)
	char pad_558[0x8]; // 0x558(0x08)
};

// Class OPP.RBGroupStatusEntryWidget
// Size: 0x2b8 (Inherited: 0x268)
struct URBGroupStatusEntryWidget : URBUserWidget {
	char pad_268[0x8]; // 0x268(0x08)
	struct ARBPlayerState* RBPlayerState; // 0x270(0x08)
	char pad_278[0x40]; // 0x278(0x40)

	void SetMaxDisplayNameLength(int32_t maxDisplayNameLength); // Function OPP.RBGroupStatusEntryWidget.SetMaxDisplayNameLength // (Final|Native|Public|BlueprintCallable) // @ game+0x1d757f0
	void OnPlayerVoiceChatVolumeChanged(struct FProfileId& ProfileId, float Volume); // Function OPP.RBGroupStatusEntryWidget.OnPlayerVoiceChatVolumeChanged // (Final|Native|Private|HasOutParms) // @ game+0x1d756a8
	void OnPlayerIndicatorUpdated(enum class EPlayerIndicatorType playerIndicatorType, float timeLeft, float progress); // Function OPP.RBGroupStatusEntryWidget.OnPlayerIndicatorUpdated // (Final|Native|Private) // @ game+0x1d755b0
	void OnPlayerBlockStateChanged(struct FProfileId& ProfileId, bool bBlocked); // Function OPP.RBGroupStatusEntryWidget.OnPlayerBlockStateChanged // (Final|Native|Private|HasOutParms) // @ game+0x1d754d4
	void OnInventoryUpdated(); // Function OPP.RBGroupStatusEntryWidget.OnInventoryUpdated // (Final|Native|Private) // @ game+0x1d75440
	void OnHealthUpdated(float newHealth); // Function OPP.RBGroupStatusEntryWidget.OnHealthUpdated // (Final|Native|Private) // @ game+0x1d753bc
	void OnCurrentLoadoutChanged(); // Function OPP.RBGroupStatusEntryWidget.OnCurrentLoadoutChanged // (Final|Native|Private) // @ game+0x1d75328
	bool IsVoiceChatConnected(); // Function OPP.RBGroupStatusEntryWidget.IsVoiceChatConnected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d74ea0
	bool IsSpeaking(); // Function OPP.RBGroupStatusEntryWidget.IsSpeaking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d74e58
	bool IsPartyOwner(); // Function OPP.RBGroupStatusEntryWidget.IsPartyOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d74e40
	bool IsMuted(); // Function OPP.RBGroupStatusEntryWidget.IsMuted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d74e14
	bool IsGloballyMuted(); // Function OPP.RBGroupStatusEntryWidget.IsGloballyMuted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d74df8
	bool IsBlocked(); // Function OPP.RBGroupStatusEntryWidget.IsBlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d74dcc
	bool HasVoiceChatEnabled(); // Function OPP.RBGroupStatusEntryWidget.HasVoiceChatEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d74db4
	struct ARBPlayerState* GetPlayerState(); // Function OPP.RBGroupStatusEntryWidget.GetPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d74d9c
	enum class EPlayerIndicatorType GetPlayerIndicatorType(); // Function OPP.RBGroupStatusEntryWidget.GetPlayerIndicatorType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d74d84
	float GetPlayerIndicatorTimeLeft(); // Function OPP.RBGroupStatusEntryWidget.GetPlayerIndicatorTimeLeft // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d74d6c
	float GetPlayerIndicatorIconProgress(); // Function OPP.RBGroupStatusEntryWidget.GetPlayerIndicatorIconProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d74d54
	int32_t GetMaxDisplayNameLength(); // Function OPP.RBGroupStatusEntryWidget.GetMaxDisplayNameLength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d74d3c
	struct FString GetDisplayName(); // Function OPP.RBGroupStatusEntryWidget.GetDisplayName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d74c8c
	enum class EActiveSkillType GetActiveSkillType(); // Function OPP.RBGroupStatusEntryWidget.GetActiveSkillType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d74c74
	void Event_Refresh_ObjectiveItemsCount(); // Function OPP.RBGroupStatusEntryWidget.Event_Refresh_ObjectiveItemsCount // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void Event_Refresh_MaxHealth(float newMaxHealth); // Function OPP.RBGroupStatusEntryWidget.Event_Refresh_MaxHealth // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void Event_Refresh_Health(float newHealth, bool skipAnim); // Function OPP.RBGroupStatusEntryWidget.Event_Refresh_Health // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void Event_Refresh_Audio(); // Function OPP.RBGroupStatusEntryWidget.Event_Refresh_Audio // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void Event_Refresh(); // Function OPP.RBGroupStatusEntryWidget.Event_Refresh // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void Event_PlayerStatusUpdated(); // Function OPP.RBGroupStatusEntryWidget.Event_PlayerStatusUpdated // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void Event_MaxDisplayNameLengthUpdated(); // Function OPP.RBGroupStatusEntryWidget.Event_MaxDisplayNameLengthUpdated // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBGroupStatusWidget
// Size: 0x328 (Inherited: 0x2e8)
struct URBGroupStatusWidget : URBHUDElementWidget {
	struct URBGroupStatusEntryWidget* EntryClass; // 0x2e8(0x08)
	struct URBGroupStatusEntryWidget* SelfEntryClass; // 0x2f0(0x08)
	bool bDisplaySelfOnly; // 0x2f8(0x01)
	char pad_2F9[0x7]; // 0x2f9(0x07)
	struct TArray<struct URBGroupStatusEntryWidget*> Entries; // 0x300(0x10)
	char pad_310[0x8]; // 0x310(0x08)
	struct TArray<struct FProfileId> HiddenRegisteredPlayers; // 0x318(0x10)

	struct TArray<struct URBGroupStatusEntryWidget*> GetEntries(); // Function OPP.RBGroupStatusWidget.GetEntries // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d74ca8
	void Event_Refresh(); // Function OPP.RBGroupStatusWidget.Event_Refresh // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBHackPanelComponent
// Size: 0x1300 (Inherited: 0x7a0)
struct URBHackPanelComponent : URBInteractiblePanelComponent {
	struct FConfigurableInt NumberOfStage; // 0x7a0(0xc8)
	struct FConfigurableFloat NeedleSpeed; // 0x868(0xc8)
	struct FConfigurableFloat DamagerPerNeutral; // 0x930(0xc8)
	struct FConfigurableFloat PsychosisOnFail; // 0x9f8(0xc8)
	struct FConfigurableFloat PsychosisOnNoMoreTrips; // 0xac0(0xc8)
	struct FConfigurableInt NumberOfSuccessZone; // 0xb88(0xc8)
	struct FConfigurableInt SizeOfSuccessZone; // 0xc50(0xc8)
	struct FConfigurableInt NumberOfFailureZone; // 0xd18(0xc8)
	struct FConfigurableInt MaxNumberOfTrip; // 0xde0(0xc8)
	struct FConfigurableInt SizeOfFailureZone; // 0xea8(0xc8)
	struct FConfigurableFloat SuccessFlexibilityRange; // 0xf70(0xc8)
	int32_t NumberOfQuadrant; // 0x1038(0x04)
	char pad_103C[0x4]; // 0x103c(0x04)
	struct TArray<float> StageSpeedMultiplier; // 0x1040(0x10)
	float InitialPauseDuration; // 0x1050(0x04)
	float InteractionFeedbackDuration; // 0x1054(0x04)
	struct FMulticastInlineDelegate OnQuadrantStatesChanged; // 0x1058(0x10)
	struct FMulticastInlineDelegate OnStageStarted; // 0x1068(0x10)
	struct FMulticastInlineDelegate OnStageSucceeded; // 0x1078(0x10)
	struct FMulticastInlineDelegate OnStageFailed; // 0x1088(0x10)
	struct FMulticastInlineDelegate OnStageNeutral; // 0x1098(0x10)
	struct FMulticastInlineDelegate OnSoftFail; // 0x10a8(0x10)
	struct FMulticastInlineDelegate OnPanelSucceeded; // 0x10b8(0x10)
	struct FMulticastInlineDelegate OnNumberOfTripLeftChanged; // 0x10c8(0x10)
	struct FMulticastInlineDelegate OnInteractionPause; // 0x10d8(0x10)
	struct FMulticastInlineDelegate OnInteractionResume; // 0x10e8(0x10)
	struct FMulticastInlineDelegate OnUnlockAnimationDone; // 0x10f8(0x10)
	struct FMulticastInlineDelegate OnElectricityTriggered; // 0x1108(0x10)
	struct FMulticastInlineDelegate OnPsychosisTriggered; // 0x1118(0x10)
	struct AActor* LockedActor; // 0x1128(0x08)
	struct TArray<enum class EHackQuadrantState> QuadrantStates; // 0x1130(0x10)
	char pad_1140[0x10]; // 0x1140(0x10)
	float needleRatio; // 0x1150(0x04)
	char pad_1154[0x4]; // 0x1154(0x04)
	struct FScheduledInt NumberOfTripLeft; // 0x1158(0x78)
	bool bInteractionWithMasterKey; // 0x11d0(0x01)
	char pad_11D1[0x3]; // 0x11d1(0x03)
	struct FVector HackPanelOriginalLocation; // 0x11d4(0x0c)
	float HackPanelOriginalYaw; // 0x11e0(0x04)
	char pad_11E4[0x4]; // 0x11e4(0x04)
	struct FScheduledFloat StageStartedPawnTimestamp; // 0x11e8(0x78)
	char pad_1260[0x4]; // 0x1260(0x04)
	float DisabledUntilTimestamp; // 0x1264(0x04)
	struct FScheduledFloat LastRatio; // 0x1268(0x78)
	int32_t CurrentStageIndex; // 0x12e0(0x04)
	int32_t QuadrantGenerationCount; // 0x12e4(0x04)
	bool bUnlocked; // 0x12e8(0x01)
	char pad_12E9[0x3]; // 0x12e9(0x03)
	float ServerPawnTimeDelta; // 0x12ec(0x04)
	struct ARBPickup* ItemUsedToUnlock; // 0x12f0(0x08)
	char pad_12F8[0x8]; // 0x12f8(0x08)

	void OnStageStartedPawnTimestampChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBHackPanelComponent.OnStageStartedPawnTimestampChangedCallback // (Final|Native|Private) // @ game+0x1d32d30
	void OnRep_StageStartedPawnTimestamp(); // Function OPP.RBHackPanelComponent.OnRep_StageStartedPawnTimestamp // (Final|Native|Private) // @ game+0x1d757d4
	void OnRep_QuadrantStates(); // Function OPP.RBHackPanelComponent.OnRep_QuadrantStates // (Final|Native|Private) // @ game+0x1d757c0
	void OnRep_NumberOfTripLeft(); // Function OPP.RBHackPanelComponent.OnRep_NumberOfTripLeft // (Final|Native|Private) // @ game+0x1d757a4
	void OnRep_LastRatio(); // Function OPP.RBHackPanelComponent.OnRep_LastRatio // (Final|Native|Private) // @ game+0x1d75788
	void OnNumberOfTripLeftChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBHackPanelComponent.OnNumberOfTripLeftChangedCallback // (Final|Native|Private) // @ game+0x1d75454
	void OnLastRatioChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBHackPanelComponent.OnLastRatioChangedCallback // (Final|Native|Private) // @ game+0x1d32d30
	void Multicast_SetInteractionPawnTimestamp(float interactionPawnTimeStamp, float needleRatio); // Function OPP.RBHackPanelComponent.Multicast_SetInteractionPawnTimestamp // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d75260
	void Multicast_OnStageSucceeded(struct ARBPawn* Pawn); // Function OPP.RBHackPanelComponent.Multicast_OnStageSucceeded // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d750e0
	void Multicast_OnStageStarted(); // Function OPP.RBHackPanelComponent.Multicast_OnStageStarted // (Net|Native|Event|NetMulticast|Public) // @ game+0x1d750c8
	void Multicast_OnStageSoftFail(struct ARBPawn* Pawn); // Function OPP.RBHackPanelComponent.Multicast_OnStageSoftFail // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d75044
	void Multicast_OnStageNeutral(struct ARBPawn* Pawn); // Function OPP.RBHackPanelComponent.Multicast_OnStageNeutral // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d74fc0
	void Multicast_OnStageFailed(struct ARBPawn* Pawn); // Function OPP.RBHackPanelComponent.Multicast_OnStageFailed // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d74f3c
	void Multicast_OnPanelSucceeded(struct ARBPawn* Pawn); // Function OPP.RBHackPanelComponent.Multicast_OnPanelSucceeded // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d74eb8
	void BP_TemporaryDisable(float duration); // Function OPP.RBHackPanelComponent.BP_TemporaryDisable // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d74bf0
	void BP_OnUnlockAnimationDone(); // Function OPP.RBHackPanelComponent.BP_OnUnlockAnimationDone // (Final|Native|Public|BlueprintCallable) // @ game+0x1d749e0
	int32_t BP_GetNumberOfStageLeft(); // Function OPP.RBHackPanelComponent.BP_GetNumberOfStageLeft // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d749a4
};

// Class OPP.RBHallucinationConfig
// Size: 0x1c8 (Inherited: 0x28)
struct URBHallucinationConfig : UObject {
	struct FConfigurableFloat MinDuration; // 0x28(0xc8)
	struct FConfigurableFloat MaxDuration; // 0xf0(0xc8)
	float MinIntensity; // 0x1b8(0x04)
	float MaxIntensity; // 0x1bc(0x04)
	float FadeInTime; // 0x1c0(0x04)
	float FadeOutTime; // 0x1c4(0x04)
};

// Class OPP.RBHalluCfg_AlteredControls
// Size: 0x1d8 (Inherited: 0x1c8)
struct URBHalluCfg_AlteredControls : URBHallucinationConfig {
	bool bModifyControlDirection; // 0x1c8(0x01)
	char pad_1C9[0x3]; // 0x1c9(0x03)
	float AngleOffset; // 0x1cc(0x04)
	bool bRewindAngleToOrigin; // 0x1d0(0x01)
	bool bInvertLeftRight; // 0x1d1(0x01)
	bool bInvertForwardBack; // 0x1d2(0x01)
	char pad_1D3[0x5]; // 0x1d3(0x05)
};

// Class OPP.RBHalluCfg_Psychosis
// Size: 0x1f0 (Inherited: 0x1c8)
struct URBHalluCfg_Psychosis : URBHallucinationConfig {
	struct URBDizzinessConfig* DizzinessConfig; // 0x1c8(0x08)
	bool bSyncDizzinessDuration; // 0x1d0(0x01)
	char pad_1D1[0x3]; // 0x1d1(0x03)
	struct FPsychosisFXData FXData; // 0x1d4(0x14)
	int32_t PsychosisStepPPS; // 0x1e8(0x04)
	char pad_1EC[0x4]; // 0x1ec(0x04)
};

// Class OPP.RBHalluCfg_LSDEffectBurst
// Size: 0x200 (Inherited: 0x1c8)
struct URBHalluCfg_LSDEffectBurst : URBHallucinationConfig {
	float BurstMaxIntensityTime; // 0x1c8(0x04)
	float BurstRestartTime; // 0x1cc(0x04)
	struct FPsychosisFXData FXDataMin; // 0x1d0(0x14)
	struct FPsychosisFXData FXDataMax; // 0x1e4(0x14)
	int32_t PsychosisStepPPS; // 0x1f8(0x04)
	char pad_1FC[0x4]; // 0x1fc(0x04)
};

// Class OPP.RBHalluCfg_DizzynessBurst
// Size: 0x1d8 (Inherited: 0x1c8)
struct URBHalluCfg_DizzynessBurst : URBHallucinationConfig {
	struct URBDizzinessConfig* DizzinessConfig; // 0x1c8(0x08)
	float MaxIntensityTime; // 0x1d0(0x04)
	float BurstRestartTime; // 0x1d4(0x04)
};

// Class OPP.RBBaseSpectreCfg
// Size: 0x68 (Inherited: 0x28)
struct URBBaseSpectreCfg : UObject {
	struct TSoftClassPtr<UObject> SpectrePawnClassPtr; // 0x28(0x28)
	struct URBAIConfig* SpectreConfigAsset; // 0x50(0x08)
	float SpectreMaxSpawnDistance; // 0x58(0x04)
	float SpectreMinSpawnDistance; // 0x5c(0x04)
	float SpectreSpawnFrontOfPlayerAngle; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class OPP.RBSpectreCfg
// Size: 0x238 (Inherited: 0x68)
struct URBSpectreCfg : URBBaseSpectreCfg {
	float SpectreDistanceForRespawn; // 0x68(0x04)
	float CloseDistForPPS; // 0x6c(0x04)
	float FarDistForPPS; // 0x70(0x04)
	bool bEnableDizziness; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)
	float CloseDistForDizziness; // 0x78(0x04)
	float FarDistForDizziness; // 0x7c(0x04)
	float MinimumDizziness; // 0x80(0x04)
	bool bCameraShake; // 0x84(0x01)
	char pad_85[0x3]; // 0x85(0x03)
	float MaxShakeIntensity; // 0x88(0x04)
	float FarDistForShake; // 0x8c(0x04)
	float ImmunityTimeFromApparition; // 0x90(0x04)
	float DamageInterval; // 0x94(0x04)
	float CloseDistForDamage; // 0x98(0x04)
	float FarDistForDamage; // 0x9c(0x04)
	struct FConfigurableFloat CloseInstantDamage; // 0xa0(0xc8)
	float CloseInstantDamageInterval; // 0x168(0x04)
	char pad_16C[0x4]; // 0x16c(0x04)
	struct FConfigurableFloat DamageRateAtCloseDistance; // 0x170(0xc8)
};

// Class OPP.RBPsychosisSpookCfg
// Size: 0x80 (Inherited: 0x68)
struct URBPsychosisSpookCfg : URBBaseSpectreCfg {
	struct UAkAudioEvent* SpookEvent; // 0x68(0x08)
	float MaxDuration; // 0x70(0x04)
	float EffectDisappearDistance; // 0x74(0x04)
	float SpookRushSpeed; // 0x78(0x04)
	float SpookDotEyeForwardToSpectre; // 0x7c(0x04)
};

// Class OPP.RBHallucinationManager
// Size: 0x368 (Inherited: 0x248)
struct ARBHallucinationManager : AActor {
	struct TArray<struct URBHalluCfg_AlteredControls*> AlteredControlsCfgs; // 0x248(0x10)
	struct URBHalluCfg_Psychosis* StandardPsychosisConfig; // 0x258(0x08)
	struct URBSpectreCfg* SpectreConfig; // 0x260(0x08)
	struct URBPsychosisSpookCfg* PsychosisSpookConfig; // 0x268(0x08)
	float PsychosisSpookMinInterval; // 0x270(0x04)
	float PsychosisSpookMaxInterval; // 0x274(0x04)
	int32_t PsychosisSpookStartThresh; // 0x278(0x04)
	char pad_27C[0x4]; // 0x27c(0x04)
	struct ARBNPC* SpectrePawnClass; // 0x280(0x08)
	struct UAnimSequence* SpectreSpecialMoveIntroAnim; // 0x288(0x08)
	struct UAnimSequence* SpectreSpecialMoveOutroAnim; // 0x290(0x08)
	float MinDistanceForSpectreMediumVisual; // 0x298(0x04)
	float MinDistanceForSpectreFarVisual; // 0x29c(0x04)
	float SpectreVisualDistanceBuffer; // 0x2a0(0x04)
	char pad_2A4[0x4]; // 0x2a4(0x04)
	struct UAkAudioEvent* PlayerHasPsychosisBracketSoundStart; // 0x2a8(0x08)
	struct UAkAudioEvent* PlayerHasPsychosisBracketSoundStop; // 0x2b0(0x08)
	struct FMulticastInlineDelegate OnHallucinationStartedEvent; // 0x2b8(0x10)
	struct FMulticastInlineDelegate OnHallucinationStoppedEvent; // 0x2c8(0x10)
	struct FMulticastInlineDelegate OnSpectreSpawned; // 0x2d8(0x10)
	bool bCanSpawnPsychosisSpectre; // 0x2e8(0x01)
	bool bUseSpecificSpawnLocation; // 0x2e9(0x01)
	char pad_2EA[0x2]; // 0x2ea(0x02)
	struct FVector SpecificSpawnLocation; // 0x2ec(0x0c)
	struct TArray<struct ARBNPC*> SpawnedSpectres; // 0x2f8(0x10)
	struct TArray<struct FHallucinationData> Hallucinations; // 0x308(0x10)
	struct TArray<struct FPsychosisSpookData> PsychosisSpooks; // 0x318(0x10)
	struct TArray<struct URBHallucinationConfig*> AllConfigs; // 0x328(0x10)
	struct TArray<struct FPsychosisDiffucultyData> PsychosisDifficultyConfig; // 0x338(0x10)
	struct TArray<struct AActor*> PsychosisDisabledObjects; // 0x348(0x10)
	char pad_358[0x10]; // 0x358(0x10)

	void OnGamePhaseUpdated(enum class EGamePhase gamePhase); // Function OPP.RBHallucinationManager.OnGamePhaseUpdated // (Final|Native|Private) // @ game+0x1d7533c
	void Multicast_ReplaceSpectreConfig(struct URBSpectreCfg* Config); // Function OPP.RBHallucinationManager.Multicast_ReplaceSpectreConfig // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d49188
	void Multicast_ReplaceHallucinationConfig(int32_t bracketIndex, enum class EHallucinationType HallucinationType, struct URBHallucinationConfig* Config); // Function OPP.RBHallucinationManager.Multicast_ReplaceHallucinationConfig // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d75164
	int32_t GetMaxBracketAmount(); // Function OPP.RBHallucinationManager.GetMaxBracketAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d74d1c
	void Event_Init(); // Function OPP.RBHallucinationManager.Event_Init // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_HallucinationStopped(struct FHallucinationData& halluData); // Function OPP.RBHallucinationManager.Event_HallucinationStopped // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void Event_HallucinationStarted(struct FHallucinationData& halluData); // Function OPP.RBHallucinationManager.Event_HallucinationStarted // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void BP_ReplaceSpectreConfig(struct URBSpectreCfg* Config); // Function OPP.RBHallucinationManager.BP_ReplaceSpectreConfig // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d74b44
	void BP_ReplaceHallucinationConfig(int32_t bracketIndex, enum class EHallucinationType HallucinationType, struct URBHallucinationConfig* Config); // Function OPP.RBHallucinationManager.BP_ReplaceHallucinationConfig // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d74a1c
};

// Class OPP.RBHingedSceneComponent
// Size: 0x280 (Inherited: 0x220)
struct URBHingedSceneComponent : USceneComponent {
	float BackToNeutralSpeed; // 0x218(0x04)
	float Thickness; // 0x21c(0x04)
	bool bLimitAngle; // 0x220(0x01)
	float MinAngle; // 0x224(0x04)
	float MaxAngle; // 0x228(0x04)
	struct UAkAudioEvent* MovementStartedEvent; // 0x230(0x08)
	struct UAkAudioEvent* MovementStoppedEvent; // 0x238(0x08)
	float MovementDelayBeforeStopping; // 0x240(0x04)
	char pad_245[0x3]; // 0x245(0x03)
	struct FString MovementSpeedRTPC; // 0x248(0x10)
	char pad_258[0x18]; // 0x258(0x18)
	struct TArray<struct AActor*> OverlappingActors; // 0x270(0x10)

	void OnComponentEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function OPP.RBHingedSceneComponent.OnComponentEndOverlap // (Final|Native|Private) // @ game+0x1d77f08
	void OnComponentBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBHingedSceneComponent.OnComponentBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x1d77d1c
};

// Class OPP.RBHitNPCObjectiveCoordinator
// Size: 0x28c0 (Inherited: 0xba8)
struct ARBHitNPCObjectiveCoordinator : ARBBaseObjectiveCoordinator {
	struct ARBAutoRespawnContainer* ThrowableSpawnerActorClass; // 0xba8(0x08)
	struct TArray<struct FHitNPCTargetTypeSettings> TargetTypeSettings; // 0xbb0(0x10)
	struct FConfigurableFloat TotalMeterAmount; // 0xbc0(0xc8)
	struct FConfigurableInt MaxNumberOfThrowableSlots; // 0xc88(0xc8)
	bool bKillTargetsWhenCompleted; // 0xd50(0x01)
	char pad_D51[0x7]; // 0xd51(0x07)
	struct FConfigurableInt NumberOfTargets; // 0xd58(0xc8)
	struct FConfigurableFloat MaxDifficultyCost; // 0xe20(0xc8)
	struct FText NewRoundStartedText; // 0xee8(0x18)
	char bUseSpawnerActorsRandomization : 1; // 0xf00(0x01)
	char pad_F00_1 : 7; // 0xf00(0x01)
	char pad_F01[0x7]; // 0xf01(0x07)
	struct FObjectiveRandomizationSetupData SpawnerActorsRandomizationSetup; // 0xf08(0x4e8)
	struct FObjectiveUISettings ThrowableContainerUISettings; // 0x13f0(0xa50)
	struct FObjectiveUISettings NPCTargetUISettings; // 0x1e40(0xa50)
	float CurrentRoundCompletion; // 0x2890(0x04)
	char pad_2894[0x4]; // 0x2894(0x04)
	struct TArray<struct FHitNPCTargetInfo> CurrentTargetInfos; // 0x2898(0x10)
	struct TArray<struct ARBAutoRespawnContainer*> ThrowableSpawners; // 0x28a8(0x10)
	char pad_28B8[0x8]; // 0x28b8(0x08)

	void OnRep_CurrentRoundCompletion(float OldValue); // Function OPP.RBHitNPCObjectiveCoordinator.OnRep_CurrentRoundCompletion // (Final|Native|Protected) // @ game+0x1d788dc
	void OnNPCHitByProjectile(struct ARBNPC* Target, struct ARBPawn* thrower, struct AActor* Projectile, bool bIsHeadshot); // Function OPP.RBHitNPCObjectiveCoordinator.OnNPCHitByProjectile // (Final|Native|Protected) // @ game+0x1d78444
	void Multicast_OnNextRoundStarted(); // Function OPP.RBHitNPCObjectiveCoordinator.Multicast_OnNextRoundStarted // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x1d77c80
	void Event_OnNPCHit(struct ARBNPC* NPC, bool bHeadshot); // Function OPP.RBHitNPCObjectiveCoordinator.Event_OnNPCHit // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBLargePickup
// Size: 0x930 (Inherited: 0x4c0)
struct ARBLargePickup : ARBInteractible {
	char pad_4C0[0x18]; // 0x4c0(0x18)
	struct UBoxComponent* DetectionBox; // 0x4d8(0x08)
	struct UTexture2D* IconTexture; // 0x4e0(0x08)
	struct UTexture2D* PickedUpByPlayerIconTextureOverride; // 0x4e8(0x08)
	struct FVector IconWorldOffset; // 0x4f0(0x0c)
	struct FVector2D IconCloseSize; // 0x4fc(0x08)
	struct FVector2D IconFarSize; // 0x504(0x08)
	float IconCloseDistance; // 0x50c(0x04)
	float IconFarDistance; // 0x510(0x04)
	bool bAllowsCrouch; // 0x514(0x01)
	char pad_515[0x3]; // 0x515(0x03)
	float ThrowSpeed; // 0x518(0x04)
	float WaterFloatingDepth; // 0x51c(0x04)
	float PickupClearanceZOffset; // 0x520(0x04)
	float CustomWalkSpeed; // 0x524(0x04)
	char bUseCustomWalkSpeed : 1; // 0x528(0x01)
	char pad_528_1 : 7; // 0x528(0x01)
	char pad_529[0x3]; // 0x529(0x03)
	float CustomRunSpeed; // 0x52c(0x04)
	char bUseCustomRunSpeed : 1; // 0x530(0x01)
	char pad_530_1 : 7; // 0x530(0x01)
	char pad_531[0x3]; // 0x531(0x03)
	float CustomSprintSpeed; // 0x534(0x04)
	char bUseCustomSprintSpeed : 1; // 0x538(0x01)
	char pad_538_1 : 7; // 0x538(0x01)
	char pad_539[0x3]; // 0x539(0x03)
	float CustomCrouchedSpeed; // 0x53c(0x04)
	char bUseCustomCrouchedSpeed : 1; // 0x540(0x01)
	char pad_540_1 : 7; // 0x540(0x01)
	bool bYForward; // 0x541(0x01)
	enum class ELargeObjectType LargeObjectType; // 0x542(0x01)
	bool bIsValidForTrickster; // 0x543(0x01)
	struct FVector2D HoldingPawnMeshOffset3P; // 0x544(0x08)
	char pad_54C[0x4]; // 0x54c(0x04)
	struct UBlendSpaceBase* PickUpBlendSpace; // 0x550(0x08)
	struct UBlendSpaceBase* PickUpCrouchedBlendSpace; // 0x558(0x08)
	struct URBGhostAnimInstance* GhostAnimationInstanceClass; // 0x560(0x08)
	struct FName AttachSocketName; // 0x568(0x08)
	struct UAkAudioEvent* StartCarryingLoopingAkEvent; // 0x570(0x08)
	struct UAkAudioEvent* StopCarryingLoopingAkEvent; // 0x578(0x08)
	struct FMulticastInlineDelegate OnUsedOnObject; // 0x580(0x10)
	struct FMulticastInlineDelegate OnLargePickupDropped; // 0x590(0x10)
	struct FMulticastInlineDelegate OnHoldingPlayerChangedEvent; // 0x5a0(0x10)
	struct FMulticastInlineDelegate OnTossDone; // 0x5b0(0x10)
	struct ARBBaseObjectiveCoordinator* LinkedCoordinator; // 0x5c0(0x08)
	char pad_5C8[0x28]; // 0x5c8(0x28)
	struct URBRandomizableHelperComponent* RandomizableHelper; // 0x5f0(0x08)
	struct URBOutlineComponent* OutlineComponent; // 0x5f8(0x08)
	struct URBObjectiveActorComponent* ObjectiveComponent; // 0x600(0x08)
	struct FScheduledUObject HoldingPawn; // 0x608(0x88)
	struct FScheduledTransform PickupTransform; // 0x690(0x130)
	struct FScheduledUObject UsedOnObject; // 0x7c0(0x88)
	char pad_848[0x2]; // 0x848(0x02)
	bool bToss_Server; // 0x84a(0x01)
	char pad_84B[0x1]; // 0x84b(0x01)
	float TossDuration; // 0x84c(0x04)
	char pad_850[0xe0]; // 0x850(0xe0)

	void OnWorldFullyLoaded_Implementation(); // Function OPP.RBLargePickup.OnWorldFullyLoaded_Implementation // (Native|Public) // @ game+0x1d8bc90
	void OnUsedOnObjectChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBLargePickup.OnUsedOnObjectChangedCallback // (Final|Native|Protected) // @ game+0x1d31c30
	void OnRep_UsedOnObject(); // Function OPP.RBLargePickup.OnRep_UsedOnObject // (Final|Native|Protected) // @ game+0x1d8ba28
	void OnRep_Toss(); // Function OPP.RBLargePickup.OnRep_Toss // (Final|Native|Protected) // @ game+0x1d8b9a0
	void OnRep_PickupTransform(); // Function OPP.RBLargePickup.OnRep_PickupTransform // (Final|Native|Protected) // @ game+0x1d8b984
	void OnRep_HoldingPawn(); // Function OPP.RBLargePickup.OnRep_HoldingPawn // (Final|Native|Protected) // @ game+0x1d8b91c
	void OnPickupTransformChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBLargePickup.OnPickupTransformChangedCallback // (Final|Native|Protected) // @ game+0x1d8b86c
	void OnHoldingPawnChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBLargePickup.OnHoldingPawnChangedCallback // (Native|Protected) // @ game+0x1d8b430
	bool IsUsedOnObject(); // Function OPP.RBLargePickup.IsUsedOnObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d8b394
	bool IsUsable(); // Function OPP.RBLargePickup.IsUsable // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d8b36c
	bool IsConsideredActiveForObjective(); // Function OPP.RBLargePickup.IsConsideredActiveForObjective // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1d8b344
	struct URBLargeObjectInteractionPanelComponent* GetUsedOnObject(); // Function OPP.RBLargePickup.GetUsedOnObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d8b280
	struct ARBPlayer* GetHoldingPlayer(); // Function OPP.RBLargePickup.GetHoldingPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d8b108
	struct ARBPawn* GetHoldingPawn(); // Function OPP.RBLargePickup.GetHoldingPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d8b0e4
	bool GetCustomPickupInteractionText(struct ARBPlayer* Player, struct FText& out_CustomInteractionText); // Function OPP.RBLargePickup.GetCustomPickupInteractionText // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x1d8aff4
	bool GetCustomDropInteractionText(struct ARBPlayer* Player, struct FText& out_CustomInteractionText); // Function OPP.RBLargePickup.GetCustomDropInteractionText // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x1d8af04
	void Event_OnUsedOnInteractible(struct ARBPawn* interactor, struct URBLargeObjectInteractionPanelComponent* interactible); // Function OPP.RBLargePickup.Event_OnUsedOnInteractible // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	bool BP_ShouldPlayAnimAfterAdjustPosition(struct ARBPawn* Pawn); // Function OPP.RBLargePickup.BP_ShouldPlayAnimAfterAdjustPosition // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1d8ae2c
	void BP_SetDesiredTransform(struct FTransform& desiredTransform, float delay); // Function OPP.RBLargePickup.BP_SetDesiredTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d8ad18
	void BP_PlaySequence(struct UAnimSequence* Sequence); // Function OPP.RBLargePickup.BP_PlaySequence // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnHoldingPawnChanged(); // Function OPP.RBLargePickup.BP_OnHoldingPawnChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBHotPotato
// Size: 0xc10 (Inherited: 0x930)
struct ARBHotPotato : ARBLargePickup {
	bool bDestroyWhenCompleted; // 0x928(0x01)
	float bDestroyWhenCompletedDelay; // 0x92c(0x04)
	bool bDoDamageWhenExpired; // 0x930(0x01)
	enum class EDamageType ExpiredDamageType; // 0x931(0x01)
	char pad_937[0x1]; // 0x937(0x01)
	struct FConfigurableFloat ExpiredDamageAmount; // 0x938(0xc8)
	bool bCanDamageKnockdown; // 0xa00(0x01)
	bool bCanDamageKill; // 0xa01(0x01)
	char pad_A02[0x6]; // 0xa02(0x06)
	struct FConfigurableFloat MinTimeBeforeDamage; // 0xa08(0xc8)
	struct FConfigurableFloat MaxTimeBeforeDamage; // 0xad0(0xc8)
	struct FMulticastInlineDelegate OnObjectiveProgressChanged; // 0xb98(0x10)
	struct FMulticastInlineDelegate OnHotPotatoStateChanged; // 0xba8(0x10)
	enum class EHotPotatoState HotPotatoState; // 0xbb8(0x01)
	char pad_BB9[0x3]; // 0xbb9(0x03)
	float ObjectiveProgress; // 0xbbc(0x04)
	float TotalActivationTime; // 0xbc0(0x04)
	float MaxDistractionDistance; // 0xbc4(0x04)
	int32_t MaxNumAttractedBots; // 0xbc8(0x04)
	float ActivationTimeRemaining; // 0xbcc(0x04)
	float TimeRemainingBeforeDamage; // 0xbd0(0x04)
	bool bIsDamageTimerActive; // 0xbd4(0x01)
	char pad_BD5[0x3]; // 0xbd5(0x03)
	struct ARBHotPotatoSpawner* spawner; // 0xbd8(0x08)
	char pad_BE0[0x30]; // 0xbe0(0x30)

	void OnRep_ObjectiveProgress(float OldValue); // Function OPP.RBHotPotato.OnRep_ObjectiveProgress // (Native|Protected) // @ game+0x1d789b0
	void OnRep_IsDamageTimerActive(); // Function OPP.RBHotPotato.OnRep_IsDamageTimerActive // (Native|Protected) // @ game+0x1d78998
	void OnRep_HotPotatoState(); // Function OPP.RBHotPotato.OnRep_HotPotatoState // (Native|Protected) // @ game+0x1d11100
	bool IsHotPotatoEnabled(); // Function OPP.RBHotPotato.IsHotPotatoEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d77bdc
	bool IsHotPotatoCompletedOrExpired(); // Function OPP.RBHotPotato.IsHotPotatoCompletedOrExpired // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d77bbc
	bool IsHotPotatoActivated(); // Function OPP.RBHotPotato.IsHotPotatoActivated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d77b9c
	void Event_OnStateChanged(enum class EHotPotatoState newState); // Function OPP.RBHotPotato.Event_OnStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnObjectiveProgressChanged(float newProgress, float oldProgress); // Function OPP.RBHotPotato.Event_OnObjectiveProgressChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnIsDamageTimerActiveChanged(bool isDamageTimerActive); // Function OPP.RBHotPotato.Event_OnIsDamageTimerActiveChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBDistanceHotPotato
// Size: 0xc10 (Inherited: 0xc10)
struct ARBDistanceHotPotato : ARBHotPotato {
};

// Class OPP.RBHotPotatoObjectiveCoordinator
// Size: 0x2708 (Inherited: 0xba8)
struct ARBHotPotatoObjectiveCoordinator : ARBBaseObjectiveCoordinator {
	struct ARBHotPotato* HotPotatoActorClass; // 0xba8(0x08)
	struct FConfigurableFloat TotalProgressToDo; // 0xbb0(0xc8)
	struct FConfigurableFloat MaxPototatoActivationTime; // 0xc78(0xc8)
	struct FConfigurableFloat MaxDistractionDistance; // 0xd40(0xc8)
	struct FConfigurableInt MaxNumAttractedBots; // 0xe08(0xc8)
	struct FConfigurableInt NumberOfPotatos; // 0xed0(0xc8)
	struct FHotPotatoEnemyConfig HotPotatoEnemies; // 0xf98(0x268)
	struct FText NewObjectSpawnedText; // 0x1200(0x18)
	bool bShowCompletionInText; // 0x1218(0x01)
	bool bShowIconOnSpawner; // 0x1219(0x01)
	char pad_121A[0x6]; // 0x121a(0x06)
	struct FObjectiveUISettings HotPotatoUISettings; // 0x1220(0xa50)
	struct FObjectiveUISettings GetAwayUISettings; // 0x1c70(0xa50)
	char pad_26C0[0x8]; // 0x26c0(0x08)
	struct AActor* CurrentIconTarget_Client; // 0x26c8(0x08)
	struct ARBHotPotato* LocallyHeldPotato_Client; // 0x26d0(0x08)
	struct TArray<struct ARBHotPotato*> SetupPotatos_Client; // 0x26d8(0x10)
	struct TArray<struct ARBHotPotato*> CurrentHotPotatos; // 0x26e8(0x10)
	float currentProgress; // 0x26f8(0x04)
	char pad_26FC[0xc]; // 0x26fc(0x0c)

	void OnRep_CurrentHotPotatos(); // Function OPP.RBHotPotatoObjectiveCoordinator.OnRep_CurrentHotPotatos // (Final|Native|Public) // @ game+0x1d788c8
	void OnHotPotatoStateChanged(struct ARBHotPotato* hotPotato, enum class EHotPotatoState newState); // Function OPP.RBHotPotatoObjectiveCoordinator.OnHotPotatoStateChanged // (Final|Native|Public) // @ game+0x1d78260
	void OnHotPotatoObjectiveProgressChanged(struct ARBHotPotato* hotPotato, float newProgress, float OldValue); // Function OPP.RBHotPotatoObjectiveCoordinator.OnHotPotatoObjectiveProgressChanged // (Final|Native|Public) // @ game+0x1d78110
	void Multicast_OnNewHotPotatoSpawned(struct ARBHotPotato* newHotPotato); // Function OPP.RBHotPotatoObjectiveCoordinator.Multicast_OnNewHotPotatoSpawned // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d77bfc
};

// Class OPP.RBHotPotatoSpawner
// Size: 0x278 (Inherited: 0x248)
struct ARBHotPotatoSpawner : AActor {
	struct ARBHotPotato* AutoSpawnHotPotatoActorClass; // 0x248(0x08)
	float AutoSpawnActivationTime; // 0x250(0x04)
	float AutoSpawnMaxDistractionDistance; // 0x254(0x04)
	int32_t AutoSpawnMaxNumAttractedBots; // 0x258(0x04)
	bool bAutoRespawnAfterExpiration; // 0x25c(0x01)
	char pad_25D[0x3]; // 0x25d(0x03)
	struct USceneComponent* SpawnPointRef; // 0x260(0x08)
	struct ARBHotPotato* SpawnedHotPotato; // 0x268(0x08)
	bool bHasPotatoMoved; // 0x270(0x01)
	bool bHasPotatoCompleted; // 0x271(0x01)
	char pad_272[0x6]; // 0x272(0x06)

	void OnRep_SpawnedHotPotato(); // Function OPP.RBHotPotatoSpawner.OnRep_SpawnedHotPotato // (Final|Native|Protected) // @ game+0x1d78a84
	void OnRep_HasPotatoMoved(); // Function OPP.RBHotPotatoSpawner.OnRep_HasPotatoMoved // (Final|Native|Protected) // @ game+0x1d78984
	void OnRep_HasPotatoCompleted(); // Function OPP.RBHotPotatoSpawner.OnRep_HasPotatoCompleted // (Final|Native|Protected) // @ game+0x1d78970
	void OnPickupHolderChanged(struct ARBPawn* Pawn, struct ARBLargePickup* largePickup); // Function OPP.RBHotPotatoSpawner.OnPickupHolderChanged // (Final|Native|Protected) // @ game+0x1d78804
	void OnHotPotatoStateChanged(struct ARBHotPotato* hotPotato, enum class EHotPotatoState newState); // Function OPP.RBHotPotatoSpawner.OnHotPotatoStateChanged // (Final|Native|Protected) // @ game+0x1d78380
	void Event_OnSpawnedHotPotato(); // Function OPP.RBHotPotatoSpawner.Event_OnSpawnedHotPotato // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnPotatoMoved(); // Function OPP.RBHotPotatoSpawner.Event_OnPotatoMoved // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnPotatoCompleted(); // Function OPP.RBHotPotatoSpawner.Event_OnPotatoCompleted // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBMinigameProgressHUDOwner
// Size: 0x28 (Inherited: 0x28)
struct URBMinigameProgressHUDOwner : UInterface {

	float GetHUDMinigameProgressRatio(); // Function OPP.RBMinigameProgressHUDOwner.GetHUDMinigameProgressRatio // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d7ba28
};

// Class OPP.RBHUD
// Size: 0x638 (Inherited: 0x338)
struct ARBHUD : AHUD {
	float IconMarginX; // 0x338(0x04)
	float IconMarginY; // 0x33c(0x04)
	bool bAlwaysDisplayGotoIcons; // 0x340(0x01)
	bool bAlwaysDisplayPlayersHealthWidgets; // 0x341(0x01)
	char pad_342[0x6]; // 0x342(0x06)
	struct URBHUDOverheadInfo* OverheadInfoTemplate; // 0x348(0x08)
	struct URBHUDObjectiveInWorld* ObjectiveInWorldTemplate; // 0x350(0x08)
	struct URBHUDPlayerPingIconWidget* PlayerPingIconWidgetTemplate; // 0x358(0x08)
	struct URBNPCDebugIconWidget* NPCDebugIconInWorldTemplate; // 0x360(0x08)
	struct URBHUDFriendlyDeviceIconWidget* FriendlyDeviceIconWidgetTemplate; // 0x368(0x08)
	struct URBHUDSelfDeadBodyIconWidget* SelfDeadBodyIconWidgetTemplate; // 0x370(0x08)
	struct UTexture2D* PointerIcon; // 0x378(0x08)
	struct FVector2D PointerSize; // 0x380(0x08)
	struct FMulticastInlineDelegate OnToggledPsychosisDebug; // 0x388(0x10)
	struct FMulticastInlineDelegate OnShowGameMessage; // 0x398(0x10)
	struct FMulticastInlineDelegate OnShowTutorialMessage; // 0x3a8(0x10)
	struct FMulticastInlineDelegate OnHideTutorialMessage; // 0x3b8(0x10)
	struct FMulticastInlineDelegate OnShowHUDTutorial; // 0x3c8(0x10)
	struct FMulticastInlineDelegate OnHideHUDTutorial; // 0x3d8(0x10)
	struct FMulticastInlineDelegate OnUpdateInventoryDisplay; // 0x3e8(0x10)
	struct FMulticastInlineDelegate OnShowInventoryWheel; // 0x3f8(0x10)
	struct FMulticastInlineDelegate OnHideInventoryWheel; // 0x408(0x10)
	struct FMulticastInlineDelegate OnShowTalkWheel; // 0x418(0x10)
	struct FMulticastInlineDelegate OnHideTalkWheel; // 0x428(0x10)
	struct FMulticastInlineDelegate OnInventoryWheelIndexChanged; // 0x438(0x10)
	char pad_448[0x10]; // 0x448(0x10)
	struct FMulticastInlineDelegate OnDrawHudEvent; // 0x458(0x10)
	struct FMulticastInlineDelegate OnHudUserConfigChangedEvent; // 0x468(0x10)
	struct FMulticastInlineDelegate OnHudActionProgressChanged; // 0x478(0x10)
	struct FMulticastInlineDelegate OnPlayerActionStatusChanged; // 0x488(0x10)
	struct FMulticastInlineDelegate OnShowEndOfStageScreen; // 0x498(0x10)
	struct FMulticastInlineDelegate OnMinigameProgressHUDOwnerChanged; // 0x4a8(0x10)
	struct FMulticastInlineDelegate OnRequestDisplayObjectiveHUD; // 0x4b8(0x10)
	struct URBHUDWidget* HUDWidget; // 0x4c8(0x08)
	struct UCurveFloat* IconIntroductionCurve; // 0x4d0(0x08)
	float HudActionProgress; // 0x4d8(0x04)
	enum class PlayerActionStatus LocalPlayerActionStatus; // 0x4dc(0x01)
	char pad_4DD[0x3b]; // 0x4dd(0x3b)
	struct TArray<struct FWorldIconData> WorldIconData; // 0x518(0x10)
	char pad_528[0x4]; // 0x528(0x04)
	bool bIsRadialMenuVisible; // 0x52c(0x01)
	char pad_52D[0x3]; // 0x52d(0x03)
	float OverheadIndicatorZOffset; // 0x530(0x04)
	char pad_534[0x34]; // 0x534(0x34)
	struct TArray<struct URBHUDElementWidget*> HUDElementWidgets; // 0x568(0x10)
	struct TArray<struct ARBIconMergerVolume*> IconMergers; // 0x578(0x10)
	struct TArray<struct URBNotificationUserWidget*> Notifications; // 0x588(0x10)
	struct TArray<struct URBOutlineComponent*> CloseOutlineComponents; // 0x598(0x10)
	char pad_5A8[0x30]; // 0x5a8(0x30)
	struct URBHUDObjectiveInWorld* CurrentClosestObjectiveIcon; // 0x5d8(0x08)
	struct URBHUDOverheadInfo* CurrentClosestPlayerIcon; // 0x5e0(0x08)
	struct URBHUDOverheadInfo* CurrentClosestIncapacitatedPlayerIcon; // 0x5e8(0x08)
	char pad_5F0[0x8]; // 0x5f0(0x08)
	struct AActor* MinigameProgressHUDOwner; // 0x5f8(0x08)
	struct URBInteractionZoneComponent* CurrentInteractionToGetFocus; // 0x600(0x08)
	struct TArray<struct FPlayerPingIconMapping> PlayerPingIcons; // 0x608(0x10)
	char pad_618[0x20]; // 0x618(0x20)

	struct FVector UpdateWorldIconProjection(int32_t Index, int32_t SizeX, int32_t SizeY, bool& bOutsideOfRange, float& outsideRangeDirectionAngle); // Function OPP.RBHUD.UpdateWorldIconProjection // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d7c4d8
	void StopTransitionFeedback(); // Function OPP.RBHUD.StopTransitionFeedback // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7c380
	bool ShouldDisplayExtraInfo(); // Function OPP.RBHUD.ShouldDisplayExtraInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d7c2f4
	void SetForcedConsideredInSASForHUD(bool bIsForcedConsideredInSAS); // Function OPP.RBHUD.SetForcedConsideredInSASForHUD // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7c0e8
	void PlayerActionStatusChanged__DelegateSignature(enum class PlayerActionStatus status); // DelegateFunction OPP.RBHUD.PlayerActionStatusChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnUpdateInventoryDisplay__DelegateSignature(); // DelegateFunction OPP.RBHUD.OnUpdateInventoryDisplay__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnToggledPsychosisDebug__DelegateSignature(bool Enabled); // DelegateFunction OPP.RBHUD.OnToggledPsychosisDebug__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnStartSpectatingPlayer(struct ARBPlayer* Player); // Function OPP.RBHUD.OnStartSpectatingPlayer // (Final|Native|Public) // @ game+0x1d7c068
	void OnStageEnded(struct FRBStageID& StageID, struct FRBMissionID& MissionID, bool isRestarting); // Function OPP.RBHUD.OnStageEnded // (Final|Native|Public|HasOutParms) // @ game+0x1d7bf44
	void OnShowTutorialMessage__DelegateSignature(struct FText& Message); // DelegateFunction OPP.RBHUD.OnShowTutorialMessage__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x201e6d4
	void OnShowTalkWheel__DelegateSignature(); // DelegateFunction OPP.RBHUD.OnShowTalkWheel__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnShowInventoryWheel__DelegateSignature(enum class InventoryWheelMode Mode); // DelegateFunction OPP.RBHUD.OnShowInventoryWheel__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnShowHUDTutorial__DelegateSignature(struct FHUDTutorialTextData& tutorialData); // DelegateFunction OPP.RBHUD.OnShowHUDTutorial__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x201e6d4
	void OnShowGameMessage__DelegateSignature(struct FText& gameMessage, enum class EGameMessageCategory messageCategory, enum class EGameObjectiveType gameObjectiveType, struct FGameMessageAudioParams& audioParams); // DelegateFunction OPP.RBHUD.OnShowGameMessage__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x201e6d4
	void OnShowEndOfStageScreen__DelegateSignature(struct FEndStageInfo& screenInfo); // DelegateFunction OPP.RBHUD.OnShowEndOfStageScreen__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x201e6d4
	void OnRequestDisplayObjectiveHUD__DelegateSignature(); // DelegateFunction OPP.RBHUD.OnRequestDisplayObjectiveHUD__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnMinigameProgressHUDOwnerChanged__DelegateSignature(struct AActor* progressOwner); // DelegateFunction OPP.RBHUD.OnMinigameProgressHUDOwnerChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnLocalPlayerInit(struct ARBPlayer* Player); // Function OPP.RBHUD.OnLocalPlayerInit // (Final|Native|Public) // @ game+0x1d7bc7c
	void OnLeaveSpectatorMode(); // Function OPP.RBHUD.OnLeaveSpectatorMode // (Final|Native|Public) // @ game+0x1d7bc68
	void OnInventoryWheelIndexChanged__DelegateSignature(int32_t Index); // DelegateFunction OPP.RBHUD.OnInventoryWheelIndexChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnHudUserConfigChanged__DelegateSignature(); // DelegateFunction OPP.RBHUD.OnHudUserConfigChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnHudActionProgressChanged__DelegateSignature(float newProgress); // DelegateFunction OPP.RBHUD.OnHudActionProgressChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnHideTutorialMessage__DelegateSignature(); // DelegateFunction OPP.RBHUD.OnHideTutorialMessage__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnHideTalkWheel__DelegateSignature(); // DelegateFunction OPP.RBHUD.OnHideTalkWheel__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnHideInventoryWheel__DelegateSignature(); // DelegateFunction OPP.RBHUD.OnHideInventoryWheel__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnHideHUDTutorial__DelegateSignature(); // DelegateFunction OPP.RBHUD.OnHideHUDTutorial__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnDrawHud__DelegateSignature(); // DelegateFunction OPP.RBHUD.OnDrawHud__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnAddToSimulatedMouseLocation__DelegateSignature(struct FVector2D& amount); // DelegateFunction OPP.RBHUD.OnAddToSimulatedMouseLocation__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x201e6d4
	float GetStageIntroRemainingTime(); // Function OPP.RBHUD.GetStageIntroRemainingTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d7baf8
	struct AActor* GetMinigameProgressHUDOwner(); // Function OPP.RBHUD.GetMinigameProgressHUDOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d7baa8
	void EnableIconTypes(enum class EWorldIconType Type); // Function OPP.RBHUD.EnableIconTypes // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7b91c
	void DisableIconTypes(enum class EWorldIconType Type); // Function OPP.RBHUD.DisableIconTypes // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7b7bc
	void BP_TryClearMinigameProgressHUDOwner(struct AActor* progressOwner); // Function OPP.RBHUD.BP_TryClearMinigameProgressHUDOwner // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7b734
	bool BP_ShouldDrawWorldIcon(int32_t Index, bool bOutsideOfRange); // Function OPP.RBHUD.BP_ShouldDrawWorldIcon // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7b644
	void BP_SetMinigameProgressHUDOwner(struct AActor* progressOwner); // Function OPP.RBHUD.BP_SetMinigameProgressHUDOwner // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7b5c4
	void BP_SetAlwaysDisplayGotoIcons(bool alwaysDisplayGotoIcons); // Function OPP.RBHUD.BP_SetAlwaysDisplayGotoIcons // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7b544
	void BP_RemoveWorldIcon(struct FName ID, float duration); // Function OPP.RBHUD.BP_RemoveWorldIcon // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7b47c
	int32_t BP_GetWorldIconNum(); // Function OPP.RBHUD.BP_GetWorldIconNum // (Final|Native|Public|BlueprintCallable) // @ game+0x178b750
	bool BP_GetPsychosisDebugHudEnabled(); // Function OPP.RBHUD.BP_GetPsychosisDebugHudEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x150d484
	int32_t BP_GetMaxTextCharacterWidth(struct FString string); // Function OPP.RBHUD.BP_GetMaxTextCharacterWidth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d7b398
	float BP_GetIconArrowOffset(int32_t Index); // Function OPP.RBHUD.BP_GetIconArrowOffset // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7b2fc
	void BP_AddWorldIcon(struct FName ID, float introDuration, float fadeInDuration, float fadeOutDuration, enum class EWorldIconType iconType, float showDuration, struct AActor* Actor, struct FVector Location); // Function OPP.RBHUD.BP_AddWorldIcon // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1d7b08c
	void AddStageIntroTime(float Time); // Function OPP.RBHUD.AddStageIntroTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7b008
};

// Class OPP.RBHUDComms
// Size: 0x530 (Inherited: 0x2e8)
struct URBHUDComms : URBHUDElementWidget {
	struct UImage* SpeakerIcon; // 0x2e8(0x08)
	struct FSlateBrush SilentBrush; // 0x2f0(0x88)
	struct FSlateBrush SpeakBrush; // 0x378(0x88)
	struct FSlateBrush MuteBrush; // 0x400(0x88)
	struct FSlateBrush GlobalMuteBrush; // 0x488(0x88)
	struct URBHUDElementWidget* ParentWidget; // 0x510(0x08)
	struct FProfileId ProfileId; // 0x518(0x10)
	bool bIsInParty; // 0x528(0x01)
	bool bHasVoiceChatPrivilege; // 0x529(0x01)
	bool bIsSpeaking; // 0x52a(0x01)
	bool bIsMuted; // 0x52b(0x01)
	char pad_52C[0x4]; // 0x52c(0x04)

	void UpdateInfo(struct ARBPlayerState* RBPlayerState, bool bInIsInParty); // Function OPP.RBHUDComms.UpdateInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7c398
	void OnTalkingStateChangeDetected(struct FProfileId& ProfileId, bool bSpeechDetected); // Function OPP.RBHUDComms.OnTalkingStateChangeDetected // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void OnPlayerVoiceChatVolumeChanged(struct FProfileId& ProfileId, float Volume); // Function OPP.RBHUDComms.OnPlayerVoiceChatVolumeChanged // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBHUDWorldIconWidget
// Size: 0x330 (Inherited: 0x2e8)
struct URBHUDWorldIconWidget : URBHUDElementWidget {
	char pad_2E8[0x8]; // 0x2e8(0x08)
	bool bIsOutsideOfScreen; // 0x2f0(0x01)
	char pad_2F1[0x3]; // 0x2f1(0x03)
	float OutsideScreenDirectionAngle; // 0x2f4(0x04)
	float DirectDistance; // 0x2f8(0x04)
	float RoompathedDistance; // 0x2fc(0x04)
	char pad_300[0x4]; // 0x300(0x04)
	bool bIsRayCastClear; // 0x304(0x01)
	bool bIsInLineOfSight; // 0x305(0x01)
	char pad_306[0x2]; // 0x306(0x02)
	struct FLinearColor PointerColor; // 0x308(0x10)
	bool bIsClosestIcon; // 0x318(0x01)
	char pad_319[0x3]; // 0x319(0x03)
	int32_t FloorDifference; // 0x31c(0x04)
	struct FVector2D DesiredSize; // 0x320(0x08)
	enum class EWorldIconType iconType; // 0x328(0x01)
	char pad_329[0x7]; // 0x329(0x07)

	void UpdateDisplay(); // Function OPP.RBHUDWorldIconWidget.UpdateDisplay // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBHUDFriendlyDeviceIconWidget
// Size: 0x338 (Inherited: 0x330)
struct URBHUDFriendlyDeviceIconWidget : URBHUDWorldIconWidget {
	struct ARBDeployableSkillItem* FriendlyDevice; // 0x330(0x08)

	void UpdateDistanceEffects(); // Function OPP.RBHUDFriendlyDeviceIconWidget.UpdateDistanceEffects // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBHUDHealthBar
// Size: 0x2f0 (Inherited: 0x2e8)
struct URBHUDHealthBar : URBHUDElementWidget {
	struct ARBPlayer* RBPlayer; // 0x2e8(0x08)

	void SetPlayer(struct ARBPlayer* NewPlayer); // Function OPP.RBHUDHealthBar.SetPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7c1f0
};

// Class OPP.RBHUDInventoryItemEntry
// Size: 0x280 (Inherited: 0x268)
struct URBHUDInventoryItemEntry : URBUserWidget {
	struct UImage* ItemIcon_Image; // 0x268(0x08)
	struct UImage* SwapImage; // 0x270(0x08)
	bool bSwapDisplayed; // 0x278(0x01)
	char pad_279[0x7]; // 0x279(0x07)

	void SetEquippedItem(bool bEquipped); // Function OPP.RBHUDInventoryItemEntry.SetEquippedItem // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void DisplaySwap(bool bShouldShow); // Function OPP.RBHUDInventoryItemEntry.DisplaySwap // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7b880
};

// Class OPP.RBHUDLinearInventory
// Size: 0x300 (Inherited: 0x2e8)
struct URBHUDLinearInventory : URBHUDElementWidget {
	struct TArray<struct FUILinearInventoryItem> Items; // 0x2e8(0x10)
	struct ARBActiveSkill* activeSkillActor; // 0x2f8(0x08)

	void OnInventoryUpdated(enum class EInventoryUpdateEventType EventType); // Function OPP.RBHUDLinearInventory.OnInventoryUpdated // (Final|Native|Public) // @ game+0x1d7bb68
	void Event_UpdateEquippedItem(); // Function OPP.RBHUDLinearInventory.Event_UpdateEquippedItem // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_RefreshPrompts(); // Function OPP.RBHUDLinearInventory.Event_RefreshPrompts // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_RefreshDarknessIndicator(bool newDarknessState); // Function OPP.RBHUDLinearInventory.Event_RefreshDarknessIndicator // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_Refresh(enum class EInventoryUpdateEventType EventType); // Function OPP.RBHUDLinearInventory.Event_Refresh // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnIsInCooldownChanged(struct ARBActiveSkill* ActiveSkill, bool bIsInCooldown); // Function OPP.RBHUDLinearInventory.Event_OnIsInCooldownChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBHUDLivesCounter
// Size: 0x2f0 (Inherited: 0x2e8)
struct URBHUDLivesCounter : URBHUDElementWidget {
	struct ARBPlayerState* PlayerState; // 0x2e8(0x08)

	void SetPlayerState(struct ARBPlayerState* NewPlayerState); // Function OPP.RBHUDLivesCounter.SetPlayerState // (Native|Event|Public|BlueprintEvent) // @ game+0x1d7c270
	void OnRemainingLivesChanged(); // Function OPP.RBHUDLivesCounter.OnRemainingLivesChanged // (Final|Native|Public) // @ game+0x1d7bf30
	void OnIsDeadChanged(bool bIsDead); // Function OPP.RBHUDLivesCounter.OnIsDeadChanged // (Final|Native|Public) // @ game+0x1d7bbe8
	int32_t GetRemainingNumberOfLives(); // Function OPP.RBHUDLivesCounter.GetRemainingNumberOfLives // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d7bac0
	int32_t GetMaxNumberOfLives(); // Function OPP.RBHUDLivesCounter.GetMaxNumberOfLives // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d7ba84
	void Event_OnRemainingLivesChanged(); // Function OPP.RBHUDLivesCounter.Event_OnRemainingLivesChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBHUDObjectiveInWorld
// Size: 0x358 (Inherited: 0x330)
struct URBHUDObjectiveInWorld : URBHUDWorldIconWidget {
	bool bShowDistance; // 0x330(0x01)
	char pad_331[0x7]; // 0x331(0x07)
	struct AActor* objectiveActor; // 0x338(0x08)
	struct UTexture2D* ObjectiveIconTexture; // 0x340(0x08)
	enum class EGameObjectiveType ObjectiveType; // 0x348(0x01)
	bool bOneOfClosests; // 0x349(0x01)
	char pad_34A[0x2]; // 0x34a(0x02)
	float FloorCompensationOffset; // 0x34c(0x04)
	bool bIsPinged; // 0x350(0x01)
	char pad_351[0x7]; // 0x351(0x07)

	void UpdateIconImage(); // Function OPP.RBHUDObjectiveInWorld.UpdateIconImage // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void UpdateDistanceEffects(); // Function OPP.RBHUDObjectiveInWorld.UpdateDistanceEffects // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	struct TArray<struct AActor*> GetStalkerCompletingTargets(); // Function OPP.RBHUDObjectiveInWorld.GetStalkerCompletingTargets // (Final|Native|Public|BlueprintCallable) // @ game+0x1d8030c
};

// Class OPP.RBHUDOverheadInfo
// Size: 0x348 (Inherited: 0x330)
struct URBHUDOverheadInfo : URBHUDWorldIconWidget {
	struct ARBPlayerState* RBPlayerState; // 0x330(0x08)
	struct ARBImposter* Imposter; // 0x338(0x08)
	bool bIsImposter; // 0x340(0x01)
	bool bIsInSameRoom; // 0x341(0x01)
	bool bIsInLocalParty; // 0x342(0x01)
	char pad_343[0x5]; // 0x343(0x05)

	void UpdateDistanceEffects(); // Function OPP.RBHUDOverheadInfo.UpdateDistanceEffects // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void SetPlayerState(struct ARBPlayerState* NewPlayerState); // Function OPP.RBHUDOverheadInfo.SetPlayerState // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d80e7c
	void SetImposter(struct ARBImposter* newImposter); // Function OPP.RBHUDOverheadInfo.SetImposter // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void OnTeammateInWorldIconsDisplayUpdated(); // Function OPP.RBHUDOverheadInfo.OnTeammateInWorldIconsDisplayUpdated // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void OnPlayerPartyStateUpdated_Interface(struct ARBPlayerState* ARBPlayerState); // Function OPP.RBHUDOverheadInfo.OnPlayerPartyStateUpdated_Interface // (Final|Native|Public) // @ game+0x1d80958
	void OnPlayerPartyStateUpdated(); // Function OPP.RBHUDOverheadInfo.OnPlayerPartyStateUpdated // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x16a8140
	void OnPlayerMaxHealthChanged(float newMaxHealth); // Function OPP.RBHUDOverheadInfo.OnPlayerMaxHealthChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void OnPlayerLevelChanged(); // Function OPP.RBHUDOverheadInfo.OnPlayerLevelChanged // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void OnPlayerIndicatorTypeChanged(enum class EPlayerIndicatorType playerIndicatorType); // Function OPP.RBHUDOverheadInfo.OnPlayerIndicatorTypeChanged // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void OnPlayerHealthChanged(float newHealth); // Function OPP.RBHUDOverheadInfo.OnPlayerHealthChanged // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void OnLastPossessedPlayerUpdated(struct ARBPlayer* LastPossessedPlayer); // Function OPP.RBHUDOverheadInfo.OnLastPossessedPlayerUpdated // (Final|Native|Public) // @ game+0x1d804b8
	void OnCurrentLoadoutChanged(); // Function OPP.RBHUDOverheadInfo.OnCurrentLoadoutChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void OnCompletingObjectiveChanged(bool bIsCompletingObjective); // Function OPP.RBHUDOverheadInfo.OnCompletingObjectiveChanged // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	bool IsIsInLobby(); // Function OPP.RBHUDOverheadInfo.IsIsInLobby // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d804a0
};

// Class OPP.RBHUDPlayerInfo
// Size: 0x318 (Inherited: 0x2e8)
struct URBHUDPlayerInfo : URBHUDElementWidget {
	struct ARBPlayer* RBPlayer; // 0x2e8(0x08)
	struct URBHUDPlayerInfoBar* HealthBar; // 0x2f0(0x08)
	struct URBHUDPlayerInfoBar* StaminaBar; // 0x2f8(0x08)
	struct URBHUDPlayerInfoBar* PsychosisBar; // 0x300(0x08)
	struct URBHUDPlayerInfoBar* BatteryBar; // 0x308(0x08)
	struct URBHUDLivesCounter* LivesCounter; // 0x310(0x08)

	void SetPlayer(struct ARBPlayer* NewPlayer); // Function OPP.RBHUDPlayerInfo.SetPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x1d80c58
	void OnWatchedPlayerChanged(struct ARBPlayer* oldPlayer); // Function OPP.RBHUDPlayerInfo.OnWatchedPlayerChanged // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void OnStaminaChanged(float newStamina, bool bIsExhausted); // Function OPP.RBHUDPlayerInfo.OnStaminaChanged // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void OnPsychosisChanged(int32_t newPsychosis, int32_t oldPsychosis); // Function OPP.RBHUDPlayerInfo.OnPsychosisChanged // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void OnPlayerStatusChanged(enum class EPlayerIndicatorType playerIndicatorType); // Function OPP.RBHUDPlayerInfo.OnPlayerStatusChanged // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void OnMaxStaminaChanged(float OldValue); // Function OPP.RBHUDPlayerInfo.OnMaxStaminaChanged // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void OnMaxHealthChanged(float OldValue); // Function OPP.RBHUDPlayerInfo.OnMaxHealthChanged // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void OnMaxBatteryChanged(float OldValue); // Function OPP.RBHUDPlayerInfo.OnMaxBatteryChanged // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void OnHealthUpdated(float newHealth, bool bIncreased); // Function OPP.RBHUDPlayerInfo.OnHealthUpdated // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void OnBatteryLevelChanged(float newBatteryLevel); // Function OPP.RBHUDPlayerInfo.OnBatteryLevelChanged // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBHUDPlayerInfoBar
// Size: 0x2f0 (Inherited: 0x2e8)
struct URBHUDPlayerInfoBar : URBHUDElementWidget {
	struct ARBPlayer* RBPlayer; // 0x2e8(0x08)

	void SetPlayer(struct ARBPlayer* NewPlayer); // Function OPP.RBHUDPlayerInfoBar.SetPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7c1f0
};

// Class OPP.RBHUDPlayerPingIconWidget
// Size: 0x348 (Inherited: 0x330)
struct URBHUDPlayerPingIconWidget : URBHUDWorldIconWidget {
	bool bHasAssociatedActor; // 0x330(0x01)
	char pad_331[0x7]; // 0x331(0x07)
	struct AActor* AssociatedActor; // 0x338(0x08)
	bool bForcedHidden; // 0x340(0x01)
	enum class EPlayerPingType Type; // 0x341(0x01)
	char pad_342[0x6]; // 0x342(0x06)

	void SetupIcon(struct UTexture2D* Icon); // Function OPP.RBHUDPlayerPingIconWidget.SetupIcon // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBHUDPlayerStatus
// Size: 0x278 (Inherited: 0x268)
struct URBHUDPlayerStatus : URBUserWidget {
	struct ARBPlayer* RBPlayer; // 0x268(0x08)
	bool bUpdateProgress; // 0x270(0x01)
	enum class EPlayerIndicatorType PlayerStatus; // 0x271(0x01)
	char pad_272[0x6]; // 0x272(0x06)

	void SetPlayer(struct ARBPlayer* NewPlayer, bool bShouldBindStatusChanges); // Function OPP.RBHUDPlayerStatus.SetPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x1d80cd8
	void OnPlayerStatusChanged(enum class EPlayerIndicatorType newPlayerStatus); // Function OPP.RBHUDPlayerStatus.OnPlayerStatusChanged // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d809d4
	void OnCompletingObjectiveChanged(bool isCompletingObjective); // Function OPP.RBHUDPlayerStatus.OnCompletingObjectiveChanged // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBHUDSelfDeadBodyIconWidget
// Size: 0x350 (Inherited: 0x330)
struct URBHUDSelfDeadBodyIconWidget : URBHUDWorldIconWidget {
	char pad_330[0x18]; // 0x330(0x18)
	float SelfDestructTimerDuration; // 0x348(0x04)
	char pad_34C[0x4]; // 0x34c(0x04)
};

// Class OPP.RBHUDSpectatorInfo
// Size: 0x2e8 (Inherited: 0x2e8)
struct URBHUDSpectatorInfo : URBHUDElementWidget {
};

// Class OPP.RBHUDStaminaBar
// Size: 0x2f0 (Inherited: 0x2e8)
struct URBHUDStaminaBar : URBHUDElementWidget {
	struct ARBPlayer* RBPlayer; // 0x2e8(0x08)

	void SetPlayer(struct ARBPlayer* NewPlayer); // Function OPP.RBHUDStaminaBar.SetPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7c1f0
};

// Class OPP.RBHUDTeammateInfo
// Size: 0x310 (Inherited: 0x2e8)
struct URBHUDTeammateInfo : URBHUDElementWidget {
	struct UImage* LeaderIcon; // 0x2e8(0x08)
	struct UTextBlock* MateName; // 0x2f0(0x08)
	struct URBHUDComms* mateComms; // 0x2f8(0x08)
	char pad_300[0x10]; // 0x300(0x10)
};

// Class OPP.RBHUDWidget
// Size: 0x298 (Inherited: 0x268)
struct URBHUDWidget : URBUserWidget {
	char pad_268[0x8]; // 0x268(0x08)
	struct UCanvasPanel* WorldIconCanvasPanel; // 0x270(0x08)
	float HUDOpacity; // 0x278(0x04)
	char pad_27C[0x4]; // 0x27c(0x04)
	struct TArray<struct FMessageData> InteractionMessages; // 0x280(0x10)
	char pad_290[0x8]; // 0x290(0x08)

	void Event_StartTransitionFeedback(float blackoutDuration); // Function OPP.RBHUDWidget.Event_StartTransitionFeedback // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_ShowTalkWheel(); // Function OPP.RBHUDWidget.Event_ShowTalkWheel // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_ShowObjectiveIntroMessage(struct FText& objectiveText); // Function OPP.RBHUDWidget.Event_ShowObjectiveIntroMessage // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void Event_ShowInventoryWheel(); // Function OPP.RBHUDWidget.Event_ShowInventoryWheel // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_ShowInteractionMessage(struct FText& Message, enum class EGameMessageCategory GameMessageCategory); // Function OPP.RBHUDWidget.Event_ShowInteractionMessage // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnSpectateNewPlayer(struct ARBPlayer* Player); // Function OPP.RBHUDWidget.Event_OnSpectateNewPlayer // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnResetHud(); // Function OPP.RBHUDWidget.Event_OnResetHud // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnPlayAsPlayer(struct ARBPlayer* Player); // Function OPP.RBHUDWidget.Event_OnPlayAsPlayer // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnHUDOpacityChanged(); // Function OPP.RBHUDWidget.Event_OnHUDOpacityChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnHudModeChanged(enum class EHudMode newHudMode); // Function OPP.RBHUDWidget.Event_OnHudModeChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_HideTalkWheel(); // Function OPP.RBHUDWidget.Event_HideTalkWheel // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_HideInventoryWheel(); // Function OPP.RBHUDWidget.Event_HideInventoryWheel // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_HideInteractionMessage(); // Function OPP.RBHUDWidget.Event_HideInteractionMessage // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_ForceUpdateSwapIcons(); // Function OPP.RBHUDWidget.Event_ForceUpdateSwapIcons // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_ClearAllObjectives(); // Function OPP.RBHUDWidget.BP_ClearAllObjectives // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBHurtVolume
// Size: 0x2c8 (Inherited: 0x280)
struct ARBHurtVolume : AVolume {
	char pad_280[0x8]; // 0x280(0x08)
	bool bEnabled; // 0x288(0x01)
	char pad_289[0x3]; // 0x289(0x03)
	float Damage; // 0x28c(0x04)
	bool bDamageOnce; // 0x290(0x01)
	bool bForceKill; // 0x291(0x01)
	bool bForceDropLargePickup; // 0x292(0x01)
	enum class EDamageType DamageType; // 0x293(0x01)
	bool bCanKnockdown; // 0x294(0x01)
	bool bCanKill; // 0x295(0x01)
	bool bNPCOnly; // 0x296(0x01)
	bool bLimitSpeed; // 0x297(0x01)
	float SpeedLimiter; // 0x298(0x04)
	char pad_29C[0x4]; // 0x29c(0x04)
	struct TArray<struct AActor*> LinkedEmitters; // 0x2a0(0x10)
	bool bCurrentlyEnabled; // 0x2b0(0x01)
	char pad_2B1[0x7]; // 0x2b1(0x07)
	struct TArray<struct ARBPawn*> HurtedPawn; // 0x2b8(0x10)

	void Toggle(bool bEnabledValue); // Function OPP.RBHurtVolume.Toggle // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d8103c
	void OnRep_CurrentlyEnabled(); // Function OPP.RBHurtVolume.OnRep_CurrentlyEnabled // (Final|Native|Public) // @ game+0x1d80a58
	void OnPawnOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBHurtVolume.OnPawnOverlap // (Final|Native|Private|HasOutParms) // @ game+0x1d80614
	bool IsEnabled(); // Function OPP.RBHurtVolume.IsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d80348
};

// Class OPP.RBIconMergerVolume
// Size: 0x2a0 (Inherited: 0x280)
struct ARBIconMergerVolume : AVolume {
	struct UTexture* IconTextureToMerge; // 0x280(0x08)
	struct FVector LocationOffset; // 0x288(0x0c)
	bool bMergeWhenPlayerInVolume; // 0x294(0x01)
	bool bShowDistance; // 0x295(0x01)
	bool bStickToEdges; // 0x296(0x01)
	bool bStartsEnabled; // 0x297(0x01)
	bool bCurrentlyEnabled; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)

	void Toggle(bool bEnabledValue); // Function OPP.RBIconMergerVolume.Toggle // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d810bc
	bool IsEnabled(); // Function OPP.RBIconMergerVolume.IsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d80360
};

// Class OPP.RBPawn
// Size: 0x4d70 (Inherited: 0x540)
struct ARBPawn : ACharacter {
	struct FRBAnimReferencesData AnimRefs; // 0x538(0x33c8)
	struct URBAnimReferences* AnimRefsAsset; // 0x3900(0x08)
	struct FRBSoundReferencesData SoundRefs; // 0x3908(0x630)
	struct URBSoundReferences* SoundRefsAsset; // 0x3f38(0x08)
	struct UDataTable* FacialAnimations; // 0x3f40(0x08)
	float ConfigProceduralAnimLinearVelocity; // 0x3f48(0x04)
	float ConfigProceduralAnimAngularVelocity; // 0x3f4c(0x04)
	struct FConfigurableFloat BashDamage2Handed; // 0x3f50(0xc8)
	struct FConfigurableFloat BashDamage1Handed; // 0x4018(0xc8)
	struct FConfigurableFloat BashDamageUnarmed; // 0x40e0(0xc8)
	struct FName FoleyType_Switch; // 0x41a8(0x08)
	float MinBodyLocationVelocityRTPC; // 0x41b0(0x04)
	float MaxBodyLocationVelocityRTPC; // 0x41b4(0x04)
	float MinBodyRotationVelocityRTPC; // 0x41b8(0x04)
	float MaxBodyRotationVelocityRTPC; // 0x41bc(0x04)
	float PhysicsCapsuleFirstPersonExtraRadius; // 0x41c0(0x04)
	float FloorAdjustmentZOffset; // 0x41c4(0x04)
	struct FMulticastInlineDelegate Event_HealthAdded; // 0x41d0(0x10)
	struct FMulticastInlineDelegate OnHealthUpdated; // 0x41e0(0x10)
	struct FMulticastInlineDelegate OnTakeDamage; // 0x41f0(0x10)
	struct FMulticastInlineDelegate OnDarknessStateChanged; // 0x4200(0x10)
	struct FMulticastInlineDelegate Event_SpecialMoveAnimNotify; // 0x4210(0x10)
	struct FMulticastInlineDelegate Event_TraversalAnimNotify; // 0x4220(0x10)
	struct FMulticastInlineDelegate Event_FootStepAnimNotify; // 0x4230(0x10)
	struct FVector CharLocation; // 0x4240(0x0c)
	struct FRotator CharRotation; // 0x424c(0x0c)
	struct FVector CharForward; // 0x4258(0x0c)
	struct FVector CharRight; // 0x4264(0x0c)
	struct FVector EyeLocation; // 0x4270(0x0c)
	struct FRotator LastEyeRotation; // 0x427c(0x0c)
	struct FRotator EyeRotation; // 0x4288(0x0c)
	struct FRotator CameraBoneRotation; // 0x4294(0x0c)
	struct FVector EyeForward; // 0x42a0(0x0c)
	char pad_42AC[0x30]; // 0x42ac(0x30)
	struct FVector RealVelocity; // 0x42dc(0x0c)
	struct FVector SmoothedVelocity; // 0x42e8(0x0c)
	char pad_42F4[0x4c]; // 0x42f4(0x4c)
	struct UPrimitiveComponent* CurrentBase; // 0x4340(0x08)
	char pad_4348[0x10c]; // 0x4348(0x10c)
	enum class ELocomotionMode Server_LocomotionMode; // 0x4454(0x01)
	enum class ELocomotionMode LocomotionMode; // 0x4455(0x01)
	enum class ELocomotionMode AnimLocomotionMode; // 0x4456(0x01)
	enum class ELocomotionMode CinematicExitLocomotionMode; // 0x4457(0x01)
	struct FSpecialMoveMulticastData CurrentSpecialMoveData; // 0x4458(0x48)
	struct FSpecialMoveMulticastData LastCompletedSpecialMoveData; // 0x44a0(0x48)
	char pad_44E8[0x4]; // 0x44e8(0x04)
	struct FScheduledLocomotionData ScheduledLocomotionMode; // 0x44ec(0x0c)
	struct FScheduledCompleteSpecialMoveData ScheduledCompleteSpecialMove; // 0x44f8(0x10)
	struct FScheduledSpecialMoveData ScheduledSpecialMove; // 0x4508(0x68)
	struct FScheduledNextSpecialMoveLocomotionModeData NextLocomotionOverrideLocomotionModeData; // 0x4570(0x08)
	char pad_4578[0x151]; // 0x4578(0x151)
	bool bIsPairedPawnLeader; // 0x46c9(0x01)
	char pad_46CA[0x6]; // 0x46ca(0x06)
	struct ARBPawn* PairedPawn; // 0x46d0(0x08)
	struct ARBPawn* SpecialMoveTargetPawn; // 0x46d8(0x08)
	struct UAnimMontage* SpecialMoveAnimMontage; // 0x46e0(0x08)
	char pad_46E8[0x8]; // 0x46e8(0x08)
	struct UAnimSequence* PendingSpecialMoveAnim; // 0x46f0(0x08)
	char pad_46F8[0x18]; // 0x46f8(0x18)
	struct FFootstepData LastFootStepData; // 0x4710(0x28)
	char pad_4738[0x44]; // 0x4738(0x44)
	struct FStrikeDamageSettings CurrentAttackDamageSettings; // 0x477c(0x04)
	char pad_4780[0x28]; // 0x4780(0x28)
	struct FMulticastInlineDelegate OnTraversalSlideDone; // 0x47a8(0x10)
	bool bSlideFinished; // 0x47b8(0x01)
	bool bSlideFinishedWithHitWall; // 0x47b9(0x01)
	char pad_47BA[0x6]; // 0x47ba(0x06)
	struct TArray<struct FSpawnedAnimPropData> SpawnedAnimProps; // 0x47c0(0x10)
	bool bDisableAnimOptims; // 0x47d0(0x01)
	char pad_47D1[0xf]; // 0x47d1(0x0f)
	struct UDataTable* VoiceTypeFaceAnimDataTable; // 0x47e0(0x08)
	char pad_47E8[0xf8]; // 0x47e8(0xf8)
	struct FRBAnimRef ScriptedAnimation; // 0x48e0(0x30)
	struct AActor* scriptedAttachActor; // 0x4910(0x08)
	char pad_4918[0x38]; // 0x4918(0x38)
	struct ARBPawn* KilledBy; // 0x4950(0x08)
	struct TArray<struct FDamageVolume> DamageVolumes; // 0x4958(0x10)
	struct FStandardFatalityData StandardFatality; // 0x4968(0x40)
	int32_t Health; // 0x49a8(0x04)
	float HealthF; // 0x49ac(0x04)
	struct FRBGameplayAttribute maxHealth; // 0x49b0(0x30)
	bool bDead; // 0x49e0(0x01)
	char pad_49E1[0x7]; // 0x49e1(0x07)
	struct FScheduledUObject CurrentInteractable; // 0x49e8(0x88)
	char pad_4A70[0x4]; // 0x4a70(0x04)
	float WaitEndTimestamp; // 0x4a74(0x04)
	struct TArray<struct FInteractionComponentReparentingData> InteractionComponentReparenting; // 0x4a78(0x10)
	char pad_4A88[0xc]; // 0x4a88(0x0c)
	struct FNetworkFloat AnimatedPeekRatio; // 0x4a94(0x10)
	char pad_4AA4[0x4]; // 0x4aa4(0x04)
	struct FItemDefinition BaseEquippedItem; // 0x4aa8(0x48)
	bool bInDarkness; // 0x4af0(0x01)
	char pad_4AF1[0x17]; // 0x4af1(0x17)
	struct TArray<struct AActor*> ForcedDarknessSources_Server; // 0x4b08(0x10)
	struct ARBDarknessVolume* DarknessVolume; // 0x4b18(0x08)
	bool bIsolated; // 0x4b20(0x01)
	bool bIsolationMonitored; // 0x4b21(0x01)
	bool bCurrentlyIsolated; // 0x4b22(0x01)
	char pad_4B23[0xd]; // 0x4b23(0x0d)
	struct FPawnRepulsionData RepulsionData; // 0x4b30(0x14)
	char pad_4B44[0x4]; // 0x4b44(0x04)
	struct TArray<struct ARBRoom*> Rooms; // 0x4b48(0x10)
	struct TArray<struct ARBRoom*> RoomHistory; // 0x4b58(0x10)
	struct ARBStairsMarker* CurrentStairsMarker; // 0x4b68(0x08)
	struct ARBStairsMarker* ProximityStairsMarker; // 0x4b70(0x08)
	struct TArray<struct ARBWaterVolume*> WaterVolumes; // 0x4b78(0x10)
	bool IsPlayingSingleEvalBlendSpace; // 0x4b88(0x01)
	char pad_4B89[0x7]; // 0x4b89(0x07)
	struct UBlendSpaceBase* SingleEvalBlendSpace; // 0x4b90(0x08)
	char pad_4B98[0x18]; // 0x4b98(0x18)
	struct TArray<struct UObject*> FloorMaterialOverrideObjects; // 0x4bb0(0x10)
	char pad_4BC0[0x28]; // 0x4bc0(0x28)
	struct USceneComponent* MeshHolderComponent; // 0x4be8(0x08)
	struct UCapsuleComponent* PawnCollisionComponent; // 0x4bf0(0x08)
	char pad_4BF8[0x8]; // 0x4bf8(0x08)
	struct UCapsuleComponent* PhysicsBodyCapsuleComponent; // 0x4c00(0x08)
	struct USkeletalMeshComponent* SeeThroughWallMesh; // 0x4c08(0x08)
	struct USkeletalMeshComponent* GhostMesh; // 0x4c10(0x08)
	float GhostAnimBlendIn; // 0x4c18(0x04)
	float GhostAnimBlendOut; // 0x4c1c(0x04)
	bool bIsStoppingGhostAnim; // 0x4c20(0x01)
	char pad_4C21[0x3]; // 0x4c21(0x03)
	float ClearGhostAnimPawnTime; // 0x4c24(0x04)
	enum class EGhostFinishReason GhostFinishReason; // 0x4c28(0x01)
	char pad_4C29[0x3]; // 0x4c29(0x03)
	int32_t GhostFinishCustomReason; // 0x4c2c(0x04)
	char pad_4C30[0x8]; // 0x4c30(0x08)
	struct URBSoundComponent* VoiceAKComponent; // 0x4c38(0x08)
	struct URBSoundComponent* FoleyAKComponent; // 0x4c40(0x08)
	struct URBSoundComponent* InteractionSoundComponent; // 0x4c48(0x08)
	struct UNavModifierComponent* PathBlockerComp; // 0x4c50(0x08)
	struct URBRepulsionComponent* repulsionComponent; // 0x4c58(0x08)
	struct FRBBreadcrumbs MovementCrumbs; // 0x4c60(0x20)
	struct FLightingChannels LightingChannelsOverride; // 0x4c80(0x01)
	char pad_4C81[0x7]; // 0x4c81(0x07)
	struct TArray<struct UPrimitiveComponent*> ExtraProjectileCollisionComponents; // 0x4c88(0x10)
	struct URBMovementComponent* RBMovement; // 0x4c98(0x08)
	struct USkeletalMesh* OriginalSkelMesh; // 0x4ca0(0x08)
	char pad_4CA8[0x10]; // 0x4ca8(0x10)
	struct TArray<struct UMeshComponent*> HiddenChildMeshes; // 0x4cb8(0x10)
	struct URBAnimReferences* EffectiveAnimRefsAsset; // 0x4cc8(0x08)
	char pad_4CD0[0xa0]; // 0x4cd0(0xa0)

	bool TryPlayFacialAnim(struct FString lineId); // Function OPP.RBPawn.TryPlayFacialAnim // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1dbc4f0
	void TraversalNotify(struct USkeletalMeshComponent* meshComp, struct URBAnimNotify_Traversal* AnimNotify); // Function OPP.RBPawn.TraversalNotify // (Native|Public) // @ game+0x1dbc428
	void StopGhostAnimState(float blendTime); // Function OPP.RBPawn.StopGhostAnimState // (Native|Public|BlueprintCallable) // @ game+0x1dbc3a0
	void StopFacialAnim(); // Function OPP.RBPawn.StopFacialAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbc38c
	void StartGhostAnimState(struct URBGhostAnimInstance* animInstanceClass, float blendTime); // Function OPP.RBPawn.StartGhostAnimState // (Native|Public|BlueprintCallable) // @ game+0x1dbc2c0
	void SpecialMoveNotify(struct USkeletalMeshComponent* meshComp, struct URBAnimNotify_SpecialMove* AnimNotify); // Function OPP.RBPawn.SpecialMoveNotify // (Native|Public) // @ game+0x1dbc1f8
	void Server_SwitchLocomotionMode(enum class ELocomotionMode newLocomotionMode); // Function OPP.RBPawn.Server_SwitchLocomotionMode // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dbc15c
	void Server_StartSpecialMove_NoSync(enum class ESpecialMove specialMove, char SpecialMoveSubType); // Function OPP.RBPawn.Server_StartSpecialMove_NoSync // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dbc074
	void Server_StartSpecialMove(enum class ESpecialMove specialMove, struct FVector targetPosition, struct FVector targetDirection); // Function OPP.RBPawn.Server_StartSpecialMove // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0x1dbbf4c
	void Server_StartPairedMoveExternalSync(enum class ESpecialMove specialMove, struct ARBPawn* follower, struct FVector externalInitiatorSyncPos, struct FVector externalInitiatorSyncDir, struct FVector externalReceiverSyncPos, struct FVector externalReceiverSyncDir); // Function OPP.RBPawn.Server_StartPairedMoveExternalSync // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0x1dbbd38
	void Server_StartPairedMove(enum class ESpecialMove specialMove, struct ARBPawn* follower); // Function OPP.RBPawn.Server_StartPairedMove // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dbbc50
	void Server_SetSpecialMoveNextLocomotionMode(int32_t SpecialMoveIndex, enum class ESpecialMove specialMove, enum class ELocomotionMode nextLocomotionMode); // Function OPP.RBPawn.Server_SetSpecialMoveNextLocomotionMode // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1dbbb54
	void Server_SetFinishedGhostReason(enum class EGhostFinishReason finishReason, int32_t customFinishReason); // Function OPP.RBPawn.Server_SetFinishedGhostReason // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1dbba8c
	void Server_ScheduleLocomotionMode(enum class ELocomotionMode newLocomotionMode); // Function OPP.RBPawn.Server_ScheduleLocomotionMode // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1dbba08
	void Server_ResetPawn(); // Function OPP.RBPawn.Server_ResetPawn // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dbb9bc
	void RemoveForcedDarknessSource_Server(struct AActor* Source); // Function OPP.RBPawn.RemoveForcedDarknessSource_Server // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbb934
	void PostCharacterMeshPoseUpdate(); // Function OPP.RBPawn.PostCharacterMeshPoseUpdate // (Native|Public) // @ game+0x1d4dcf8
	void OnRep_SlideFinished(); // Function OPP.RBPawn.OnRep_SlideFinished // (Final|Native|Public) // @ game+0x1dbb8d4
	void OnRep_Repulsion(); // Function OPP.RBPawn.OnRep_Repulsion // (Final|Native|Public) // @ game+0x1dbb8c0
	void OnRep_PairedPawn(struct ARBPawn* oldPairedPawn); // Function OPP.RBPawn.OnRep_PairedPawn // (Final|Native|Public) // @ game+0x1dbb840
	void OnRep_LocomotionMode_Callback(); // Function OPP.RBPawn.OnRep_LocomotionMode_Callback // (Final|Native|Public) // @ game+0x1dbb82c
	void OnRep_LocomotionMode(); // Function OPP.RBPawn.OnRep_LocomotionMode // (Final|Native|Public) // @ game+0x1dbb818
	void OnRep_InDarkness(); // Function OPP.RBPawn.OnRep_InDarkness // (Final|Native|Public) // @ game+0x1dbb804
	void OnRep_Health(int32_t oldHealth); // Function OPP.RBPawn.OnRep_Health // (Final|Native|Public) // @ game+0x1dbb784
	void OnRep_CurrentInteractable(); // Function OPP.RBPawn.OnRep_CurrentInteractable // (Final|Native|Public) // @ game+0x1dbb768
	void OnFootstep(struct USkeletalMeshComponent* meshComp, bool bLeftFoot); // Function OPP.RBPawn.OnFootstep // (Native|Public) // @ game+0x1dbb688
	void OnDamageVolumeHit(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBPawn.OnDamageVolumeHit // (Final|Native|Public|HasOutParms) // @ game+0x1dbb458
	void OnCurrentInteractableChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBPawn.OnCurrentInteractableChangedCallback // (Native|Public) // @ game+0x1dbb3d4
	void Multicast_TraversalSlideDone(bool bHitWall); // Function OPP.RBPawn.Multicast_TraversalSlideDone // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dbb350
	void Multicast_SwitchLocomotionMode(enum class ELocomotionMode newLocomotionMode, bool bPredicted); // Function OPP.RBPawn.Multicast_SwitchLocomotionMode // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dbb288
	void Multicast_StartSpecialMove(struct FSpecialMoveMulticastData SpecialMoveData); // Function OPP.RBPawn.Multicast_StartSpecialMove // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dbb1fc
	void Multicast_StartScriptedAnimation(struct FVector Location, struct FVector Forward, struct FRBAnimRef Animation, struct FName scriptedAttachName, struct AActor* scriptedAttachActor, struct FTransform scriptedAttachOffset); // Function OPP.RBPawn.Multicast_StartScriptedAnimation // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1dbaff0
	void Multicast_StartPairedMove(struct ARBPawn* PairedPawn, struct FSpecialMoveMulticastData SpecialMoveData, bool bPairedPawnIsLeader, enum class EBasicDirection Direction); // Function OPP.RBPawn.Multicast_StartPairedMove // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dbaea0
	void Multicast_StartDoorInteraction(struct ARBDoor* door, enum class EDoorInteractionType doorInteractionType); // Function OPP.RBPawn.Multicast_StartDoorInteraction // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dbadd8
	void Multicast_StartBashDoor(struct ARBDoor* door, enum class EBashDoorType bashType, bool bPredicted); // Function OPP.RBPawn.Multicast_StartBashDoor // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dbacd8
	void Multicast_SpecialMoveInterrupted(enum class ESpecialMove specialMoveInterrupted, bool bPredicted); // Function OPP.RBPawn.Multicast_SpecialMoveInterrupted // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dbac10
	void Multicast_SpecialMoveCompleted(struct FSpecialMoveMulticastData completedSpecialMoveData, bool bInterrupted); // Function OPP.RBPawn.Multicast_SpecialMoveCompleted // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x1dbab34
	void Multicast_SetSpecialMoveNextLocomotionMode(int32_t SpecialMoveIndex, enum class ESpecialMove specialMove, enum class ELocomotionMode nextLocomotionMode); // Function OPP.RBPawn.Multicast_SetSpecialMoveNextLocomotionMode // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dbaa38
	void Multicast_SetSpecialMoveInterruptedLocomotionMode(int32_t SpecialMoveIndex, enum class ESpecialMove specialMove, enum class ELocomotionMode nextLocomotionMode); // Function OPP.RBPawn.Multicast_SetSpecialMoveInterruptedLocomotionMode // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dba93c
	void Multicast_SetPairedPawn(struct ARBPawn* PairedPawn, bool bPairedPawnIsLeader); // Function OPP.RBPawn.Multicast_SetPairedPawn // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dba870
	void Multicast_SetFinishedGhostReason(enum class EGhostFinishReason finishReason, int32_t customFinishReason, bool bPredicted); // Function OPP.RBPawn.Multicast_SetFinishedGhostReason // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dba774
	void Multicast_SetCurrentInteractable(struct UObject* newCurrentInteractable); // Function OPP.RBPawn.Multicast_SetCurrentInteractable // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dba6f0
	void Multicast_ScheduleSpecialMove(struct FScheduledSpecialMoveData ScheduledSpecialMoveData); // Function OPP.RBPawn.Multicast_ScheduleSpecialMove // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dba660
	void Multicast_ScheduleLocomotionMode(enum class ELocomotionMode newLocomotionMode, float PawnTime, float serverTime); // Function OPP.RBPawn.Multicast_ScheduleLocomotionMode // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dba564
	void Multicast_ScheduleCompleteSpecialMove(float PawnTime, float serverTime, enum class ESpecialMove specialMove, int32_t SpecialMoveSubType, bool bInterrupted); // Function OPP.RBPawn.Multicast_ScheduleCompleteSpecialMove // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dba3e0
	void Multicast_ScheduleBlendOutControl(float blendOutDuration, bool bWaitForAction, float ScheduledPawnTime, float serverTime, float specialMoveEndPawnTime, float specialMoveEndServerTime); // Function OPP.RBPawn.Multicast_ScheduleBlendOutControl // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dba20c
	void Multicast_ResetPawn(); // Function OPP.RBPawn.Multicast_ResetPawn // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d48f9c
	void Multicast_QueueProceduralAnim(struct FProceduralTranslationAnimData animData); // Function OPP.RBPawn.Multicast_QueueProceduralAnim // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dba160
	void Multicast_OnTakeDamage(struct FDamageInfo dmgInfo); // Function OPP.RBPawn.Multicast_OnTakeDamage // (Net|Native|Event|NetMulticast|Public) // @ game+0x1dba0d4
	void Multicast_OnDie(struct ARBPawn* killer); // Function OPP.RBPawn.Multicast_OnDie // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1db9fcc
	void Multicast_KnockbackPawn(struct FVector Direction, float strength); // Function OPP.RBPawn.Multicast_KnockbackPawn // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1db9f04
	void Multicast_InteruptCurrentAction(); // Function OPP.RBPawn.Multicast_InteruptCurrentAction // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1db9eec
	void Multicast_ExitCinematicMode(); // Function OPP.RBPawn.Multicast_ExitCinematicMode // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1db9ed4
	void Multicast_DoActionBashDoor(struct ARBDoor* door); // Function OPP.RBPawn.Multicast_DoActionBashDoor // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1db9e50
	void Multicast_BlendOutActiveSpecialMove(float blendOutTime, int32_t SpecialMoveIndex, enum class ESpecialMove specialMove); // Function OPP.RBPawn.Multicast_BlendOutActiveSpecialMove // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1db9d50
	void Multicast_BashBreakableObstacle(struct ARBBreakableObstacle* breakableObstacle); // Function OPP.RBPawn.Multicast_BashBreakableObstacle // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1db9ccc
	void Multicast_AddServerBreadcrumb(struct FPawnBreadcrumb newBreadcrumb); // Function OPP.RBPawn.Multicast_AddServerBreadcrumb // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1db9c44
	void Multicast_AddExternalImpulse(struct FVector Impulse); // Function OPP.RBPawn.Multicast_AddExternalImpulse // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1db9bc4
	bool IsRunning(); // Function OPP.RBPawn.IsRunning // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db9b9c
	bool IsConsideredDead(); // Function OPP.RBPawn.IsConsideredDead // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db9b74
	bool IsCarryingLargePickup(); // Function OPP.RBPawn.IsCarryingLargePickup // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db9b4c
	bool HasGhostAnimActive(); // Function OPP.RBPawn.HasGhostAnimActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db9b28
	bool GhostAnimTransition(); // Function OPP.RBPawn.GhostAnimTransition // (Native|Public|BlueprintCallable) // @ game+0x1db9b00
	struct URBGhostAnimInstance* GetGhostAnimBP(); // Function OPP.RBPawn.GetGhostAnimBP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db9adc
	struct UPoseAsset* GetFacePoseAsset(); // Function OPP.RBPawn.GetFacePoseAsset // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	struct USkeletalMeshComponent* GetFaceFXSkeletalMeshComponent(); // Function OPP.RBPawn.GetFaceFXSkeletalMeshComponent // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x1db9ab4
	struct ARBLargePickup* GetCarriedLargePickup(); // Function OPP.RBPawn.GetCarriedLargePickup // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db9a8c
	struct URBAnimInstance* GetAnimInstance(); // Function OPP.RBPawn.GetAnimInstance // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db9a64
	void Event_OnTakeDamage(struct FDamageInfo& Info); // Function OPP.RBPawn.Event_OnTakeDamage // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnStopSeeThroughWallMeshSwap(); // Function OPP.RBPawn.Event_OnStopSeeThroughWallMeshSwap // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnStartSeeThroughWallMeshSwap(); // Function OPP.RBPawn.Event_OnStartSeeThroughWallMeshSwap // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnFootstep(struct FFootstepData& FootstepData); // Function OPP.RBPawn.Event_OnFootstep // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnDie(); // Function OPP.RBPawn.Event_OnDie // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_HealthUpdated(float newHealth, bool bIncreased); // Function OPP.RBPawn.Event_HealthUpdated // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void ClearGhostAnimInstance(); // Function OPP.RBPawn.ClearGhostAnimInstance // (Native|Public|BlueprintCallable) // @ game+0x1db9a24
	void BP_TemporaryAttachComponent(struct USceneComponent* Component, struct FName SocketName); // Function OPP.RBPawn.BP_TemporaryAttachComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x1db98bc
	void BP_StartSpecialMove(enum class ESpecialMove specialMove, struct FVector& targetPosition, struct FVector& targetDirection, bool bPredicted); // Function OPP.RBPawn.BP_StartSpecialMove // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1db975c
	void BP_StartScriptedAnimation(struct FVector Location, struct FVector Forward, struct FRBAnimRef Animation, struct FName scriptedAttachBone, struct AActor* scriptedAttachActor, struct FTransform scriptedAttachOffset); // Function OPP.RBPawn.BP_StartScriptedAnimation // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1db94a8
	void BP_SpecialMoveNotify(enum class ESpecialMoveNotifyType notifyType); // Function OPP.RBPawn.BP_SpecialMoveNotify // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_RemoveTemporaryComponent(struct USceneComponent* Component, bool bSnapBack); // Function OPP.RBPawn.BP_RemoveTemporaryComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x1db9344
	void BP_PlayVoiceAkEvent(struct UAkAudioEvent* akEvent); // Function OPP.RBPawn.BP_PlayVoiceAkEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x1db92b8
	void BP_PlaySpecialMoveAnim(struct UAnimSequenceBase* AnimSeq, float blendIn, float blendOut, float PlayRate, float StartTime); // Function OPP.RBPawn.BP_PlaySpecialMoveAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x1db9128
	void BP_PlayAkEvent(struct UAkAudioEvent* akEvent); // Function OPP.RBPawn.BP_PlayAkEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x1db90a4
	bool BP_IsInFirstPerson(); // Function OPP.RBPawn.BP_IsInFirstPerson // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db907c
	bool BP_IsConsideredCrouched(); // Function OPP.RBPawn.BP_IsConsideredCrouched // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db9060
	enum class ESpecialMove BP_GetSpecialMove(); // Function OPP.RBPawn.BP_GetSpecialMove // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db9048
	int32_t BP_GetRandomSelector(); // Function OPP.RBPawn.BP_GetRandomSelector // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db901c
	struct FVector BP_GetPawnTargetLocation(); // Function OPP.RBPawn.BP_GetPawnTargetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db8f98
	struct FVector BP_GetPawnTargetForward(); // Function OPP.RBPawn.BP_GetPawnTargetForward // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db8f64
	float BP_GetMaxHealth(); // Function OPP.RBPawn.BP_GetMaxHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db8f38
	struct FString BP_GetDebugPawnName(); // Function OPP.RBPawn.BP_GetDebugPawnName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db8ef8
	struct AActor* BP_GetCurrentInteractibleActor(); // Function OPP.RBPawn.BP_GetCurrentInteractibleActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db8ed4
	struct ARBInteractible* BP_GetCurrentARBInteractible(); // Function OPP.RBPawn.BP_GetCurrentARBInteractible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db8eb0
	void BP_ForceDropLargeObject(); // Function OPP.RBPawn.BP_ForceDropLargeObject // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1db8e94
	void BP_ExitCinematicMode(); // Function OPP.RBPawn.BP_ExitCinematicMode // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1db8e3c
	void BP_EnterCinematicMode(struct FVector& Location, struct FRotator& Rotation, enum class ELocomotionMode exitLocomotionMode, bool bTeleport); // Function OPP.RBPawn.BP_EnterCinematicMode // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1db8c98
	void BP_Die(); // Function OPP.RBPawn.BP_Die // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1db8c84
	void BP_DetachTemporaryComponent(struct USceneComponent* Component); // Function OPP.RBPawn.BP_DetachTemporaryComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x1db8b58
	void BP_DEBUG_TryInteraction(struct UObject* Interactable); // Function OPP.RBPawn.BP_DEBUG_TryInteraction // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d228d0
	struct FDamageParameters BP_DamageParams(enum class EDamageType dmgType); // Function OPP.RBPawn.BP_DamageParams // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1db8ad4
	void BP_AddHealth(float healthToAdd); // Function OPP.RBPawn.BP_AddHealth // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1db8a4c
	void AddForcedDarknessSource_Server(struct AActor* Source); // Function OPP.RBPawn.AddForcedDarknessSource_Server // (Final|Native|Public|BlueprintCallable) // @ game+0x1db8998
};

// Class OPP.RBNPC
// Size: 0x55b0 (Inherited: 0x4d70)
struct ARBNPC : ARBPawn {
	enum class ENPCType NPCType; // 0x4d70(0x01)
	char pad_4D71[0x7]; // 0x4d71(0x07)
	struct FGameplayTagContainer NPCTags; // 0x4d78(0x20)
	struct FNPCCapabilities Capabilities; // 0x4d98(0x15)
	char pad_4DAD[0x3]; // 0x4dad(0x03)
	struct FNPCPathfindingCosts PathfindingCosts; // 0x4db0(0x34)
	float WallSeparationCheckDistance; // 0x4de4(0x04)
	float WallSeparationCapsuleRadius; // 0x4de8(0x04)
	char pad_4DEC[0x4]; // 0x4dec(0x04)
	struct FCameraShakeData FootstepCameraShakeData; // 0x4df0(0xa0)
	struct URBAnimReferences* H1AnimRefsAsset; // 0x4e90(0x08)
	struct URBAnimReferences* H2AnimRefsAsset; // 0x4e98(0x08)
	struct UAnimBlueprint* WeaponAnimBP; // 0x4ea0(0x08)
	struct TArray<struct URBVOMapping*> VOMappingOptions; // 0x4ea8(0x10)
	struct URBNPCWeaponList* WeaponList; // 0x4eb8(0x08)
	struct AActor* PsychosisMineClass; // 0x4ec0(0x08)
	float WaterMaxSlowDownRatio; // 0x4ec8(0x04)
	float WaterDepthMinSlowDownStart; // 0x4ecc(0x04)
	float WaterDepthMaxSlowDownStart; // 0x4ed0(0x04)
	char pad_4ED4[0x4]; // 0x4ed4(0x04)
	struct FNPCInterruptAction PendingInterruptionAction; // 0x4ed8(0x28)
	struct FMulticastInlineDelegate OnAIEvent; // 0x4f00(0x10)
	struct FMulticastInlineDelegate OnHitByProjectile; // 0x4f10(0x10)
	struct FMulticastInlineDelegate OnPlayWeaponAnimation; // 0x4f20(0x10)
	struct ARBBot* bot; // 0x4f30(0x08)
	struct URBBotVision* Vision; // 0x4f38(0x08)
	struct FNPCReplicatedConfig NPCConfig; // 0x4f40(0x20)
	struct FString NPCName; // 0x4f60(0x10)
	uint16_t NPCId; // 0x4f70(0x02)
	char pad_4F72[0x2]; // 0x4f72(0x02)
	float GroundSpeed; // 0x4f74(0x04)
	char pad_4F78[0x8]; // 0x4f78(0x08)
	struct FNPCAttackParams attackParams; // 0x4f80(0x30)
	struct TArray<struct FDelayedVO> DelayedVOs; // 0x4fb0(0x10)
	struct FNPCWeaponData WeaponConfig; // 0x4fc0(0x18)
	struct FNPCWeaponRuntimeData Weapon; // 0x4fd8(0x03)
	char pad_4FDB[0x5]; // 0x4fdb(0x05)
	struct ARBNPCWeapon* NPCWeapon; // 0x4fe0(0x08)
	enum class EDamageSoundMaterial UnarmedRightHandStrikeSoundMaterial; // 0x4fe8(0x01)
	enum class EDamageSoundMaterial UnarmedLeftHandStrikeSoundMaterial; // 0x4fe9(0x01)
	enum class EDamageSoundMaterial UnarmedHeadStrikeSoundMaterial; // 0x4fea(0x01)
	enum class EDamageSoundMaterial UnarmedLeftFootStrikeSoundMaterial; // 0x4feb(0x01)
	enum class EDamageSoundMaterial UnarmedRightFootStrikeSoundMaterial; // 0x4fec(0x01)
	enum class EDamageSoundMaterial UnarmedOtherStrikeSoundMaterial; // 0x4fed(0x01)
	char pad_4FEE[0x2]; // 0x4fee(0x02)
	struct USphereComponent* LeftHandDamageVolume; // 0x4ff0(0x08)
	struct UCapsuleComponent* RightHandDamageCapsule; // 0x4ff8(0x08)
	struct USphereComponent* LeftFootDamageVolume; // 0x5000(0x08)
	struct USphereComponent* RightFootDamageVolume; // 0x5008(0x08)
	struct UNiagaraComponent* NightHunterSparksEmitter; // 0x5010(0x08)
	struct UNiagaraComponent* WeaponVFXEmitter; // 0x5018(0x08)
	struct UPointLightComponent* WeaponVFXLight; // 0x5020(0x08)
	struct UCapsuleComponent* IdleCollision; // 0x5028(0x08)
	struct FNPCInvestigationData InvestigationData; // 0x5030(0x28)
	struct FNPCAmbientData AmbientData; // 0x5058(0x14)
	char pad_506C[0x4]; // 0x506c(0x04)
	struct FNPCReplicatedAmbientData ReplicatedAmbientData; // 0x5070(0x10)
	struct FNPCLookAtConfig LookAtConfig; // 0x5080(0x20)
	struct FNPCLookAtData LookAt; // 0x50a0(0x48)
	struct FNPCTurnOnSpotData turnOnSpot; // 0x50e8(0x10)
	struct FNPCWaypointData Waypoint; // 0x50f8(0x10)
	struct FNPCAnimatedStartData AnimatedStart; // 0x5108(0x48)
	struct FNPCAnimatedStopData AnimatedStop; // 0x5150(0x88)
	struct FNPCStartleData Startle; // 0x51d8(0x48)
	struct FNPCJumpData LongJump; // 0x5220(0x44)
	struct FNPCCeilingData Ceiling; // 0x5264(0x18)
	char pad_527C[0x4]; // 0x527c(0x04)
	struct FNPCDoorInteractionData DoorInteractionData; // 0x5280(0xa8)
	struct FNPCDoorInvestigationParams doorInvParams; // 0x5328(0x30)
	struct FNPCWeaponVFXControlData WeaponVFXAnimControl; // 0x5358(0x18)
	struct FNPCWeaponVFXState WeaponVFX; // 0x5370(0x14)
	bool bIsAffectedByGrenadeStun; // 0x5384(0x01)
	bool bIsAffectedByBlindPaint; // 0x5385(0x01)
	char pad_5386[0x2]; // 0x5386(0x02)
	struct TArray<int32_t> AffectedBlindPaintDeploymentIdList; // 0x5388(0x10)
	struct FRBBreadcrumbs Breadcrumbs; // 0x5398(0x20)
	struct FNPCLoopingIdleData LoopingIdle; // 0x53b8(0x18)
	struct FNPCScriptedAnimData ScriptedAnim; // 0x53d0(0x18)
	struct FNPCScriptedAnimData LocalScriptedAnimData; // 0x53e8(0x18)
	enum class EAIActivity BotActivity; // 0x5400(0x01)
	enum class EAIAwarenessStateType BotAwarenessState; // 0x5401(0x01)
	char pad_5402[0x2]; // 0x5402(0x02)
	float BotAwarenessStateMeter; // 0x5404(0x04)
	enum class ENPCAnimStyle AnimStyle; // 0x5408(0x01)
	bool ServerPlayingAnimations; // 0x5409(0x01)
	bool bNoTickPose; // 0x540a(0x01)
	bool bNoRefreshBoneTransforms; // 0x540b(0x01)
	char pad_540C[0x4]; // 0x540c(0x04)
	float PlayerDetectionAlpha; // 0x5410(0x04)
	bool bAllowPlayerPing; // 0x5414(0x01)
	enum class EContinuousSoundNPCState CurrentContinousVOClientState; // 0x5415(0x01)
	enum class EContinuousSoundNPCState CurrentContinousFoleyClientState; // 0x5416(0x01)
	char pad_5417[0x1]; // 0x5417(0x01)
	struct UAkAudioEvent* AmbientSoundStopEvent; // 0x5418(0x08)
	char pad_5420[0x20]; // 0x5420(0x20)
	struct ARBPlayer* SpectreTargetPlayer; // 0x5440(0x08)
	bool bSpectreSpook; // 0x5448(0x01)
	char pad_5449[0x7]; // 0x5449(0x07)
	struct FScheduledBool bCanShowSpectre; // 0x5450(0x70)
	bool bShouldShowSpectre; // 0x54c0(0x01)
	enum class EAISpectreVisualType SpectreVisualType; // 0x54c1(0x01)
	char pad_54C2[0xe]; // 0x54c2(0x0e)
	enum class ENPCFlavor NPCFlavor; // 0x54d0(0x01)
	char pad_54D1[0x7]; // 0x54d1(0x07)
	struct ARBPlayer* SpecificTarget; // 0x54d8(0x08)
	struct ARBAISpawner* spawner; // 0x54e0(0x08)
	struct UObject* SpawnSentinel; // 0x54e8(0x08)
	struct FNPCHitReactionParams NPCHitReaction; // 0x54f0(0x38)
	char pad_5528[0x10]; // 0x5528(0x10)
	struct AActor* SpecialMoveOrientationActor; // 0x5538(0x08)
	char pad_5540[0x4]; // 0x5540(0x04)
	float PassingDoorTimestamp; // 0x5544(0x04)
	struct ARBBasePushable* TraversalPushable; // 0x5548(0x08)
	char pad_5550[0x12]; // 0x5550(0x12)
	bool bAccelerateCrouchUnder; // 0x5562(0x01)
	char pad_5563[0x2]; // 0x5563(0x02)
	bool bCanBeStalked; // 0x5565(0x01)
	char pad_5566[0x2]; // 0x5566(0x02)
	struct URBVOMapping* VOMappingAsset; // 0x5568(0x08)
	struct URBVOMappingOverride* VOMappingOverrides; // 0x5570(0x08)
	struct FString VoiceType; // 0x5578(0x10)
	bool bVoiceTypeLoaded; // 0x5588(0x01)
	char pad_5589[0x7]; // 0x5589(0x07)
	struct FString PreparedVoiceType; // 0x5590(0x10)
	struct URBHidespotComponent* LastHiddenHidespot; // 0x55a0(0x08)
	char pad_55A8[0x8]; // 0x55a8(0x08)

	void SetupEditorAudioState(); // Function OPP.RBNPC.SetupEditorAudioState // (Final|Native|Public) // @ game+0x1521dbc
	void OnRep_VoiceType(); // Function OPP.RBNPC.OnRep_VoiceType // (Final|Native|Public) // @ game+0x1da8150
	void OnRep_ScriptedAnim(); // Function OPP.RBNPC.OnRep_ScriptedAnim // (Final|Native|Public) // @ game+0x1da80a4
	void OnRep_CanShowSpectre(); // Function OPP.RBNPC.OnRep_CanShowSpectre // (Final|Native|Public) // @ game+0x1da7f34
	void OnRep_AmbientIdle(); // Function OPP.RBNPC.OnRep_AmbientIdle // (Final|Native|Public) // @ game+0x1da7eb4
	void OnRep_AllowPlayerPing(); // Function OPP.RBNPC.OnRep_AllowPlayerPing // (Final|Native|Public) // @ game+0x1da7ea0
	void OnRep_AffectedByGrenadeStun(); // Function OPP.RBNPC.OnRep_AffectedByGrenadeStun // (Final|Native|Public) // @ game+0x1da7e8c
	void OnRep_AffectedByBlindPaint(); // Function OPP.RBNPC.OnRep_AffectedByBlindPaint // (Final|Native|Public) // @ game+0x1da7e78
	void OnPlayingFullBodyIdleBreakerStateChanged(bool bPlayingFullBodyIdleBreaker); // Function OPP.RBNPC.OnPlayingFullBodyIdleBreakerStateChanged // (Final|Native|Public) // @ game+0x1da7df8
	void OnCanShowSpectreChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBNPC.OnCanShowSpectreChangedCallback // (Final|Native|Public) // @ game+0x1da7d7c
	void Multicast_UpdateReplicatedNPCConfig(struct FNPCReplicatedConfig configData); // Function OPP.RBNPC.Multicast_UpdateReplicatedNPCConfig // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da7cf4
	void Multicast_TriggerScriptedVO(struct UAkAudioEvent* AudioEvent, enum class EVOPriority VOPriority, uint32_t RandomSeed); // Function OPP.RBNPC.Multicast_TriggerScriptedVO // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da7bf8
	void Multicast_TriggerContextualVO(enum class EVOContext VOContext, uint32_t RandomSeed); // Function OPP.RBNPC.Multicast_TriggerContextualVO // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da7b30
	void Multicast_TraversalMoveStarted(struct FTraversalMoveData moveData); // Function OPP.RBNPC.Multicast_TraversalMoveStarted // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da7a98
	void Multicast_TeleportTo(struct FVector DestLocation, struct FRotator DestRotation, bool bNoCheck); // Function OPP.RBNPC.Multicast_TeleportTo // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1da7994
	void Multicast_StartTurnOnSpot(struct FNPCTurnOnSpotData turnOnSpot); // Function OPP.RBNPC.Multicast_StartTurnOnSpot // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da7914
	void Multicast_StartSpecialMoveOrientedToActor(enum class ESpecialMove specialMoveType, struct AActor* TargetActor); // Function OPP.RBNPC.Multicast_StartSpecialMoveOrientedToActor // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da784c
	void Multicast_StartSabotageAction(struct UObject* sabotageInteractableTarget); // Function OPP.RBNPC.Multicast_StartSabotageAction // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da77c8
	void Multicast_StartRelativeYawSpecialMove(enum class ESpecialMove relYawSpecialMove, float RelativeYaw); // Function OPP.RBNPC.Multicast_StartRelativeYawSpecialMove // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da76fc
	void Multicast_StartInvestigationAction(struct FNPCInvestigationData InvestigationData); // Function OPP.RBNPC.Multicast_StartInvestigationAction // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da766c
	void Multicast_StartHidespotPeeking(struct URBHidespotComponent* hidespot, struct UAnimSequence* peekingAnim); // Function OPP.RBNPC.Multicast_StartHidespotPeeking // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da75a4
	void Multicast_StartFixedDurationSpecialMove(enum class ESpecialMove specialMoveType, float ExpirationServerTime); // Function OPP.RBNPC.Multicast_StartFixedDurationSpecialMove // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da74d8
	void Multicast_StartAttackMove(struct FVector StartPos, struct FVector startDir, struct FNPCAttackParams attackParams); // Function OPP.RBNPC.Multicast_StartAttackMove // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1da73b8
	void Multicast_SleeperScream(struct UAnimSequence* AnimSeq, bool bNoScream); // Function OPP.RBNPC.Multicast_SleeperScream // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da72ec
	void Multicast_SleeperDisturbed(struct UAnimSequence* AnimSeq); // Function OPP.RBNPC.Multicast_SleeperDisturbed // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da7268
	void Multicast_SetBlindPaintStateStyle(bool bAgitated); // Function OPP.RBNPC.Multicast_SetBlindPaintStateStyle // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da71e4
	void Multicast_PlayWeaponImpactParticles(struct TArray<struct FVector> impactPoints, struct FRotator impactRotation); // Function OPP.RBNPC.Multicast_PlayWeaponImpactParticles // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1da70fc
	void Multicast_PlayWaypointAnim(struct UAnimSequence* AnimSeq, bool bLoopAnim, struct FVector TargetPos, struct FVector TargetDir); // Function OPP.RBNPC.Multicast_PlayWaypointAnim // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1da6fb0
	void Multicast_PlayStartled(struct FNPCStartleData startleData); // Function OPP.RBNPC.Multicast_PlayStartled // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da6f24
	void Multicast_PlaySingleShotAnim(struct UAnimSequence* AnimSeq, struct FVector TargetPos, struct FVector TargetDir); // Function OPP.RBNPC.Multicast_PlaySingleShotAnim // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1da6e20
	void Multicast_PlayPullFromHidespot(struct FPairedTwoPhaseAnimData animData, struct ARBPlayer* grabbedPlayer, struct URBHidespotComponent* hidespot, struct FVector TargetPos, struct FVector TargetDir); // Function OPP.RBNPC.Multicast_PlayPullFromHidespot // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1da6c9c
	void Multicast_PlayNPCHitReaction(struct FNPCHitReactionParams Params); // Function OPP.RBNPC.Multicast_PlayNPCHitReaction // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da6c10
	void Multicast_PlayGrab(struct FPairedTwoPhaseAnimData animData, struct ARBPlayer* grabbedPlayer, struct FVector TargetPos, struct FVector TargetDir); // Function OPP.RBNPC.Multicast_PlayGrab // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1da6ac4
	void Multicast_PlayAmbientStationExitAnim(struct UAnimSequence* AnimSeq); // Function OPP.RBNPC.Multicast_PlayAmbientStationExitAnim // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da6a40
	void Multicast_PerformStandardFatality(struct FStandardFatalityData fatalityData); // Function OPP.RBNPC.Multicast_PerformStandardFatality // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da69c0
	void Multicast_OverrideAnimRefs(struct URBAnimReferences* overrideAnimRefs); // Function OPP.RBNPC.Multicast_OverrideAnimRefs // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da693c
	void Multicast_OnFinishedExitingMonsterCloset(struct ARBMonsterCloset* closet); // Function OPP.RBNPC.Multicast_OnFinishedExitingMonsterCloset // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da68b8
	void Multicast_OnDealtWeaponDamage(struct ARBPawn* otherPawn, struct FVector DamageLocation); // Function OPP.RBNPC.Multicast_OnDealtWeaponDamage // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1da67f4
	void Multicast_OnDealtUnarmedDamage(struct ARBPawn* otherPawn, struct FName damageSourceBone); // Function OPP.RBNPC.Multicast_OnDealtUnarmedDamage // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da672c
	void Multicast_InterruptHidespotPeeking(); // Function OPP.RBNPC.Multicast_InterruptHidespotPeeking // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da6714
	void Multicast_GroundAndPoundPlayerEscape(struct ARBPlayer* escapingPlayer, struct UAnimSequence* pouncerAnim, struct UAnimSequence* PlayerAnim, struct ARBThrowableWeapon* escapeItem); // Function OPP.RBNPC.Multicast_GroundAndPoundPlayerEscape // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da65d0
	void Multicast_GroundAndPoundInterrupted(struct ARBPlayer* pinnedPlayer, float npcToInterrupterRelativeYaw); // Function OPP.RBNPC.Multicast_GroundAndPoundInterrupted // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da6504
	void Multicast_ExitMonsterCloset(struct ARBMonsterCloset* closet); // Function OPP.RBNPC.Multicast_ExitMonsterCloset // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da6480
	void Multicast_ExitGrenadeStun(struct FVector Location, struct FVector TargetDir); // Function OPP.RBNPC.Multicast_ExitGrenadeStun // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1da63c0
	void Multicast_EnterMonsterCloset(struct ARBMonsterCloset* closet); // Function OPP.RBNPC.Multicast_EnterMonsterCloset // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da633c
	void Multicast_EnterHealSlowdownState(); // Function OPP.RBNPC.Multicast_EnterHealSlowdownState // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da6324
	void Multicast_EnterGroundAndPoundAttacker(struct ARBPawn* Victim, struct FVector TargetPos, struct FVector TargetDir, struct UAnimSequence* enterGnPAnimSeq); // Function OPP.RBNPC.Multicast_EnterGroundAndPoundAttacker // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1da61e4
	void Multicast_EnterGrenadeStun(float stunDuration, struct FVector Location, struct FVector TargetDir); // Function OPP.RBNPC.Multicast_EnterGrenadeStun // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1da60dc
	void Multicast_EnterBlindPaintState(float relYawToPaint, struct FVector StartLocation, struct FVector startDir); // Function OPP.RBNPC.Multicast_EnterBlindPaintState // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1da5fd4
	void Multicast_EnterAmbientStation(struct URBAmbientStationComponent* AmbientStation, bool bImmediate); // Function OPP.RBNPC.Multicast_EnterAmbientStation // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da5f08
	void Multicast_DoorPass(struct FNPCDoorInteractionData doorPass); // Function OPP.RBNPC.Multicast_DoorPass // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da5e48
	void Multicast_DoorInvestigate(struct FNPCDoorInvestigationParams doorInvParams); // Function OPP.RBNPC.Multicast_DoorInvestigate // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da5d98
	void Multicast_CycleBreaker(enum class ENPCAnimStyle breakerAnimStyle, int32_t randomSelector); // Function OPP.RBNPC.Multicast_CycleBreaker // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da5cd0
	void Multicast_CompleteNPCSpecialMove(enum class ESpecialMove specialMoveCompleted, float specialMoveEndVelocityOverride); // Function OPP.RBNPC.Multicast_CompleteNPCSpecialMove // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da5c04
	void Multicast_AnimatedStop(struct FNPCAnimatedStopData stopData); // Function OPP.RBNPC.Multicast_AnimatedStop // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da5b58
	void Multicast_AnimatedStart(struct FNPCAnimatedStartData startData); // Function OPP.RBNPC.Multicast_AnimatedStart // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1da5acc
	void Multicast_AlignToMark(struct FVector AlignPos, float alignYaw, float blendTime); // Function OPP.RBNPC.Multicast_AlignToMark // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1da59c4
	bool IsUsingConfigVoiceType(); // Function OPP.RBNPC.IsUsingConfigVoiceType // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da59ac
	bool IsLocalSpectre(); // Function OPP.RBNPC.IsLocalSpectre // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da5974
	bool IsForcedCustomizationSex(); // Function OPP.RBNPC.IsForcedCustomizationSex // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da5948
	bool IsForcedCustomizationFemale(); // Function OPP.RBNPC.IsForcedCustomizationFemale // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da5920
	bool IsAHiddenSpectre(); // Function OPP.RBNPC.IsAHiddenSpectre // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da58a4
	enum class ENPCWeapon GetWeaponType(); // Function OPP.RBNPC.GetWeaponType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da5830
	struct FName GetFoleySwitchOverride(); // Function OPP.RBNPC.GetFoleySwitchOverride // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1da57ac
	struct ARBScriptedAnimStation* GetAttachedScriptedAnimStation(); // Function OPP.RBNPC.GetAttachedScriptedAnimStation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da575c
	void Event_PlayHitReactionEffects(struct FVector& attackLoc, struct FRotator& effectRotation); // Function OPP.RBNPC.Event_PlayHitReactionEffects // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnWeaponVisible(enum class ENPCWeapon weaponType, struct ARBNPCWeapon* weaponActor); // Function OPP.RBNPC.Event_OnWeaponVisible // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnWeaponHidden(enum class ENPCWeapon weaponType, struct ARBNPCWeapon* weaponActor); // Function OPP.RBNPC.Event_OnWeaponHidden // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnStartPusherAttack(struct ARBPlayer* Victim); // Function OPP.RBNPC.Event_OnStartPusherAttack // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnStartGrenadeStun(); // Function OPP.RBNPC.Event_OnStartGrenadeStun // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnStartBlindPaintState(); // Function OPP.RBNPC.Event_OnStartBlindPaintState // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnSpectreVisualTypeChanged(enum class EAISpectreVisualType oldType, enum class EAISpectreVisualType NewType); // Function OPP.RBNPC.Event_OnSpectreVisualTypeChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnSpectreVisibilityChanged(bool bShouldBeVisible); // Function OPP.RBNPC.Event_OnSpectreVisibilityChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnSpectreOutroSpecialMoveStarted(); // Function OPP.RBNPC.Event_OnSpectreOutroSpecialMoveStarted // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnSpectreIntroSpecialMoveStarted(); // Function OPP.RBNPC.Event_OnSpectreIntroSpecialMoveStarted // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnScreamerSonicStun(struct FVector& headLocation); // Function OPP.RBNPC.Event_OnScreamerSonicStun // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnHeadBoom(); // Function OPP.RBNPC.Event_OnHeadBoom // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnEndGrenadeStun(); // Function OPP.RBNPC.Event_OnEndGrenadeStun // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnEndBlindPaintState(); // Function OPP.RBNPC.Event_OnEndBlindPaintState // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnDealtWeaponDamage(struct ARBPawn* otherPawn, struct FVector& DamageLocation); // Function OPP.RBNPC.Event_OnDealtWeaponDamage // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnDealtUnarmedDamage(struct ARBPawn* otherPawn, struct FName damageSourceBone); // Function OPP.RBNPC.Event_OnDealtUnarmedDamage // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnAIEvent(enum class EAIEvent EventType, struct AActor* relevantActor); // Function OPP.RBNPC.Event_OnAIEvent // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	bool CanBeStalked(); // Function OPP.RBNPC.CanBeStalked // (Final|Native|Public|BlueprintCallable) // @ game+0x1da5730
	void BP_TestHitReaction(enum class ENPCHitReactionType hitReactionType, struct FVector& HitDirection); // Function OPP.RBNPC.BP_TestHitReaction // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1da560c
	void BP_TeleportTo(struct FVector& DestLocation, struct FRotator& DestRotation, bool bNoCheck); // Function OPP.RBNPC.BP_TeleportTo // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1da54f0
	void BP_SetVoiceType(struct FString VoiceType); // Function OPP.RBNPC.BP_SetVoiceType // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1da535c
	void BP_OnCharacterAssembled(); // Function OPP.RBNPC.BP_OnCharacterAssembled // (Final|Native|Public|BlueprintCallable) // @ game+0x1da5014
	struct ARBNPCWeapon* BP_GetWeaponActor(); // Function OPP.RBNPC.BP_GetWeaponActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da4f68
	void BP_DamageNPC(enum class EDamageType dmgType, struct AActor* SrcActor, float DmgAmount, bool bCanKill, bool bCanKnockdown); // Function OPP.RBNPC.BP_DamageNPC // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1da4b18
};

// Class OPP.RBImposter
// Size: 0x5620 (Inherited: 0x55b0)
struct ARBImposter : ARBNPC {
	struct TArray<struct FNPCHitReactionAnimData> HitReactionAnims; // 0x55a8(0x10)
	struct FRBPlayerCustomizationInfo customizationInfo; // 0x55b8(0x38)
	struct FImposterOverheadDetails OverheadDetails; // 0x55f0(0x28)

	void OnRep_OverheadDetails(); // Function OPP.RBImposter.OnRep_OverheadDetails // (Final|Native|Public) // @ game+0x1d80a80
	void OnRep_CustomizationInfo(); // Function OPP.RBImposter.OnRep_CustomizationInfo // (Final|Native|Public) // @ game+0x1d80a6c
	void Event_SetCustomization(struct FRBPlayerCustomizationInfo& newCustomization); // Function OPP.RBImposter.Event_SetCustomization // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	struct FRBPlayerCustomizationInfo BP_GetCustomizationInfo(); // Function OPP.RBImposter.BP_GetCustomizationInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d8006c
};

// Class OPP.RBInGameMenuWidget
// Size: 0x328 (Inherited: 0x308)
struct URBInGameMenuWidget : URBMenuWidget {
	char pad_308[0x8]; // 0x308(0x08)
	struct UAkAudioEvent* NotificationSoundEvent; // 0x310(0x08)
	struct URBReportPlayerMenu* ReportPlayerMenuClass; // 0x318(0x08)
	struct URBSocialMenuManager* SocialMenuManager; // 0x320(0x08)

	void OnMenuCancelPressed(); // Function OPP.RBInGameMenuWidget.OnMenuCancelPressed // (Native|Protected) // @ game+0x1d80538
	struct URBSocialMenuManager* GetSocialMenuManager(); // Function OPP.RBInGameMenuWidget.GetSocialMenuManager // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d802f4
	void Event_Refresh(); // Function OPP.RBInGameMenuWidget.Event_Refresh // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBInputIcon
// Size: 0x280 (Inherited: 0x268)
struct URBInputIcon : URBUserWidget {
	struct FName ActionName; // 0x268(0x08)
	float DesiredHeight; // 0x270(0x04)
	int32_t AxisValue; // 0x274(0x04)
	bool bWasInitialized; // 0x278(0x01)
	bool bHoldInput; // 0x279(0x01)
	enum class EHoldDurationType HoldDurationType; // 0x27a(0x01)
	char pad_27B[0x5]; // 0x27b(0x05)
};

// Class OPP.RBInteractable
// Size: 0x28 (Inherited: 0x28)
struct URBInteractable : UInterface {

	bool TestPhysicsClearance(struct ARBPawn* interactorPawn); // Function OPP.RBInteractable.TestPhysicsClearance // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d80fa8
	bool StartInteraction(struct ARBPawn* interactorPawn); // Function OPP.RBInteractable.StartInteraction // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d80f14
	void SnapToState(); // Function OPP.RBInteractable.SnapToState // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d80f00
	void PostInteractionSoundEvent(struct ARBPawn* pawnInteractor, struct UAkAudioEvent* akEvent, struct UObject* Source); // Function OPP.RBInteractable.PostInteractionSoundEvent // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d80b5c
	bool PlaySpecialMoveAnimation(struct ARBPawn* interactorPawn, enum class ESpecialMove specialMove); // Function OPP.RBInteractable.PlaySpecialMoveAnimation // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d80a94
	void OnPawnSpecialMoveStarted(struct ARBPawn* Pawn, enum class ESpecialMove specialMove); // Function OPP.RBInteractable.OnPawnSpecialMoveStarted // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d80894
	void OnPawnPlaySpecialMoveAnimation(struct ARBPawn* Pawn, enum class ESpecialMove specialMove); // Function OPP.RBInteractable.OnPawnPlaySpecialMoveAnimation // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d807d0
	void OnPawnDoSpecialMoveAction(struct ARBPawn* Pawn, enum class ESpecialMove specialMove); // Function OPP.RBInteractable.OnPawnDoSpecialMoveAction // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d80550
	bool IsInteractionPossible(struct ARBPawn* interactorPawn); // Function OPP.RBInteractable.IsInteractionPossible // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d8040c
	bool IsInteractionInputTriggered(struct ARBPlayer* interactor); // Function OPP.RBInteractable.IsInteractionInputTriggered // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d80378
	bool GetInteractionPawnLocation(struct ARBPawn* Pawn, enum class ESpecialMove specialMove, struct FVector& OutLocation, struct FVector& outDirection); // Function OPP.RBInteractable.GetInteractionPawnLocation // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d80198
	bool EndInteraction(bool bPredicted, struct ARBPawn* interactorPawn, bool bInterrupted); // Function OPP.RBInteractable.EndInteraction // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d80088
};

// Class OPP.RBInteractionPlaneComponent
// Size: 0x220 (Inherited: 0x220)
struct URBInteractionPlaneComponent : USceneComponent {
	float Width; // 0x218(0x04)
	float Depth; // 0x21c(0x04)
};

// Class OPP.RBInteractionRequirement
// Size: 0x88 (Inherited: 0x28)
struct URBInteractionRequirement : UObject {
	struct FText RequirementText; // 0x28(0x18)
	struct FText ReleaseInProgress; // 0x40(0x18)
	struct FText OtherReleaseInProgress; // 0x58(0x18)
	struct FText PleaseWait; // 0x70(0x18)
};

// Class OPP.RBItemInteractionRequirement
// Size: 0xb8 (Inherited: 0x88)
struct URBItemInteractionRequirement : URBInteractionRequirement {
	bool bNeedsToBeEquipped; // 0x88(0x01)
	bool bExactItemClass; // 0x89(0x01)
	char pad_8A[0x6]; // 0x8a(0x06)
	struct FText LargePickupRequirementText; // 0x90(0x18)
	struct TArray<struct ARBPickup*> RequiredItems; // 0xa8(0x10)
};

// Class OPP.RBItemProhibitedInteractionRequirement
// Size: 0xa0 (Inherited: 0x88)
struct URBItemProhibitedInteractionRequirement : URBInteractionRequirement {
	bool bExactItemClass; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
	struct TArray<struct ARBPickup*> ProhibitedItems; // 0x90(0x10)
};

// Class OPP.RBQuestGiverInteractionRequirement
// Size: 0x88 (Inherited: 0x88)
struct URBQuestGiverInteractionRequirement : URBInteractionRequirement {
};

// Class OPP.RBReleaseCharacterInteractionRequirement
// Size: 0x88 (Inherited: 0x88)
struct URBReleaseCharacterInteractionRequirement : URBInteractionRequirement {
};

// Class OPP.RBPlayerCellInteractionRequirement
// Size: 0x90 (Inherited: 0x88)
struct URBPlayerCellInteractionRequirement : URBInteractionRequirement {
	bool bOwnCell; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
};

// Class OPP.RBLargeObjectInteractionRequirement
// Size: 0xb8 (Inherited: 0x88)
struct URBLargeObjectInteractionRequirement : URBInteractionRequirement {
	struct TSoftClassPtr<UObject> RequiredLargeObject; // 0x88(0x28)
	struct UObject* CachedRequiredLargeObjectClass; // 0xb0(0x08)
};

// Class OPP.RBPsychosisInteractionRequirement
// Size: 0xc0 (Inherited: 0x88)
struct URBPsychosisInteractionRequirement : URBInteractionRequirement {
	bool bDisallowInPsychosis; // 0x88(0x01)
	bool bAllowOnlyInPsychosis; // 0x89(0x01)
	char pad_8A[0x6]; // 0x8a(0x06)
	struct FText DisallowInPsychosisRequirementText; // 0x90(0x18)
	struct FText OnlyAllowedInPsychosisRequirementText; // 0xa8(0x18)
};

// Class OPP.RBCollectibleDocumentInteractionRequirement
// Size: 0x88 (Inherited: 0x88)
struct URBCollectibleDocumentInteractionRequirement : URBInteractionRequirement {
};

// Class OPP.RBDisabledInteractionRequirement
// Size: 0x88 (Inherited: 0x88)
struct URBDisabledInteractionRequirement : URBInteractionRequirement {
};

// Class OPP.RBInteractiveCorpse
// Size: 0x308 (Inherited: 0x300)
struct ARBInteractiveCorpse : ARBContainer {
	char pad_300[0x8]; // 0x300(0x08)
};

// Class OPP.RBInteractivePanelObjectiveCoordinator
// Size: 0x1600 (Inherited: 0xba8)
struct ARBInteractivePanelObjectiveCoordinator : ARBBaseObjectiveCoordinator {
	bool bOnlyActivateObjectivesWhenStarted; // 0xba8(0x01)
	char pad_BA9[0x7]; // 0xba9(0x07)
	struct FObjectiveUISettings InteractionPanelUISettings; // 0xbb0(0xa50)

	void OnPanelPawnInteractingChangedEvent(struct URBInteractiblePanelComponent* panel, struct ARBPawn* pawnInteracting); // Function OPP.RBInteractivePanelObjectiveCoordinator.OnPanelPawnInteractingChangedEvent // (Final|Native|Protected) // @ game+0x1d556a0
	void OnPanelActiveChangedEvent(struct URBInteractiblePanelComponent* panel, struct ARBPawn* pawnInteracting); // Function OPP.RBInteractivePanelObjectiveCoordinator.OnPanelActiveChangedEvent // (Final|Native|Protected) // @ game+0x1d88e4c
};

// Class OPP.RBIntercomSoundComponent
// Size: 0x580 (Inherited: 0x580)
struct URBIntercomSoundComponent : URBSoundComponent {
};

// Class OPP.RBSimpleHoldPanelComponent
// Size: 0x900 (Inherited: 0x7a0)
struct URBSimpleHoldPanelComponent : URBInteractiblePanelComponent {
	struct FConfigurableFloat HoldTime; // 0x7a0(0xc8)
	struct FScheduledBool HoldCompleted; // 0x868(0x70)
	struct FMulticastInlineDelegate OnAccumulatedHoldTimeChanged; // 0x8d8(0x10)
	struct FMulticastInlineDelegate OnHoldCompletedChanged; // 0x8e8(0x10)
	char pad_8F8[0x8]; // 0x8f8(0x08)

	void OnRep_HoldCompleted(); // Function OPP.RBSimpleHoldPanelComponent.OnRep_HoldCompleted // (Final|Native|Private) // @ game+0x1e066e8
	void OnHoldCompletedChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBSimpleHoldPanelComponent.OnHoldCompletedChangedCallback // (Final|Native|Private) // @ game+0x1e06290
	bool IsHoldCompleted(); // Function OPP.RBSimpleHoldPanelComponent.IsHoldCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05cbc
	float GetHeldTime(); // Function OPP.RBSimpleHoldPanelComponent.GetHeldTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05950
};

// Class OPP.RBInventoryItemInteractionPanelComponent
// Size: 0x960 (Inherited: 0x900)
struct URBInventoryItemInteractionPanelComponent : URBSimpleHoldPanelComponent {
	struct ARBPickup* ItemClass; // 0x900(0x08)
	bool bCanUseChildItemClass; // 0x908(0x01)
	char pad_909[0x7]; // 0x909(0x07)
	struct FText MissingInventoryItemText; // 0x910(0x18)
	int32_t InitialNumberOfItemsRequired; // 0x928(0x04)
	int32_t NumberOfItemsRequired; // 0x92c(0x04)
	struct ARBPickup* OverrideItemClass; // 0x930(0x08)
	int32_t NumberOfItemsUsed; // 0x938(0x04)
	char pad_93C[0x4]; // 0x93c(0x04)
	struct FMulticastInlineDelegate OnNumberOfItemRequiredChanged; // 0x940(0x10)
	struct FMulticastInlineDelegate OnNumberOfItemsUsedChanged; // 0x950(0x10)

	void OnRep_OverrideItemClass(); // Function OPP.RBInventoryItemInteractionPanelComponent.OnRep_OverrideItemClass // (Final|Native|Public) // @ game+0x1d88f64
	void OnRep_NumberOfItemsUsed(); // Function OPP.RBInventoryItemInteractionPanelComponent.OnRep_NumberOfItemsUsed // (Final|Native|Public) // @ game+0x1d88f50
	void OnRep_NumberOfItemsRequired(); // Function OPP.RBInventoryItemInteractionPanelComponent.OnRep_NumberOfItemsRequired // (Final|Native|Public) // @ game+0x1d88f3c
	struct ARBPickup* GetItemFromPlayer(struct ARBPawn* interactorPawn); // Function OPP.RBInventoryItemInteractionPanelComponent.GetItemFromPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d889dc
	struct USceneComponent* GetItemDropRef(struct ARBPickup* pickup); // Function OPP.RBInventoryItemInteractionPanelComponent.GetItemDropRef // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d88948
	void BP_UseInventoryItemPredicted(struct ARBPickup* pickup, struct ARBPawn* interactorPawn); // Function OPP.RBInventoryItemInteractionPanelComponent.BP_UseInventoryItemPredicted // (Final|Native|Public|BlueprintCallable) // @ game+0x1d88668
};

// Class OPP.RBInventoryWheel
// Size: 0x318 (Inherited: 0x2f0)
struct URBInventoryWheel : URBRadialMenuBase {
	enum class EItemCategory WheelItemCategory; // 0x2f0(0x01)
	char pad_2F1[0x3]; // 0x2f1(0x03)
	float SelectionAngle; // 0x2f4(0x04)
	struct TArray<struct FUIInventoryItem> Items; // 0x2f8(0x10)
	enum class InventoryWheelMode WheelMode; // 0x308(0x01)
	char pad_309[0x3]; // 0x309(0x03)
	int32_t EquippedIndex; // 0x30c(0x04)
	int32_t ActiveSkillIndex; // 0x310(0x04)
	char pad_314[0x4]; // 0x314(0x04)

	void OnShowInventoryWheel(enum class InventoryWheelMode Mode); // Function OPP.RBInventoryWheel.OnShowInventoryWheel // (Final|Native|Public) // @ game+0x1d88ff8
	void OnSelectedItemChanged(int32_t Index); // Function OPP.RBInventoryWheel.OnSelectedItemChanged // (Final|Native|Public) // @ game+0x1d88f78
	void OnInventoryUpdated(enum class EInventoryUpdateEventType EventType); // Function OPP.RBInventoryWheel.OnInventoryUpdated // (Final|Native|Public) // @ game+0x1d88c8c
	void OnHideInventoryWheel(); // Function OPP.RBInventoryWheel.OnHideInventoryWheel // (Final|Native|Public) // @ game+0x1d88c78
	void OnAddedToSimulatedMouseLocation(); // Function OPP.RBInventoryWheel.OnAddedToSimulatedMouseLocation // (Native|Public) // @ game+0x1d88c60
	void Event_WheelModeChanged(); // Function OPP.RBInventoryWheel.Event_WheelModeChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_UpdateSelectedCategory(); // Function OPP.RBInventoryWheel.Event_UpdateSelectedCategory // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_UpdateEquippedItem(); // Function OPP.RBInventoryWheel.Event_UpdateEquippedItem // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_SelectionAngleChanged(); // Function OPP.RBInventoryWheel.Event_SelectionAngleChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_Refresh(); // Function OPP.RBInventoryWheel.Event_Refresh // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBInvestigationComponent
// Size: 0x128 (Inherited: 0xb8)
struct URBInvestigationComponent : UActorComponent {
	float WeightOverride; // 0xb8(0x04)
	float SearchDistance; // 0xbc(0x04)
	float MinDelayBetweenInvestigations; // 0xc0(0x04)
	bool bIrrelevant; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
	struct FGameplayTagContainer EnableOnlyForNPCTags; // 0xc8(0x20)
	struct FGameplayTagContainer DisableForNPCTags; // 0xe8(0x20)
	struct ARBBot* InvestigatingBot; // 0x108(0x08)
	float LastTimeInvestigated; // 0x110(0x04)
	char pad_114[0x4]; // 0x114(0x04)
	struct ARBRoom* EnclosingRoom; // 0x118(0x08)
	bool bInitializedEnclosingRoom; // 0x120(0x01)
	char pad_121[0x7]; // 0x121(0x07)
};

// Class OPP.RBInvestigationPoint
// Size: 0x310 (Inherited: 0x248)
struct ARBInvestigationPoint : AActor {
	char pad_248[0x68]; // 0x248(0x68)
	struct TArray<struct FInvestigationAnimSetup> SpecificAnims; // 0x2b0(0x10)
	bool bAlignAnimation; // 0x2c0(0x01)
	bool bAlignRotationOnly; // 0x2c1(0x01)
	char pad_2C2[0x2]; // 0x2c2(0x02)
	float ActivationRadius; // 0x2c4(0x04)
	enum class EInvestigationRotationAlignBehavior RotationAlignBehavior; // 0x2c8(0x01)
	char pad_2C9[0x7]; // 0x2c9(0x07)
	struct AActor* LookAtTarget; // 0x2d0(0x08)
	struct URBInvestigationComponent* InvestigationComponent; // 0x2d8(0x08)
	struct URBRoomAssociationComponent* RoomAssociation; // 0x2e0(0x08)
	struct FInvestigationAnalysis AnalysisData; // 0x2e8(0x18)
	char pad_300[0x10]; // 0x300(0x10)

	void Event_OnInvestigate(struct ARBBot* bot); // Function OPP.RBInvestigationPoint.Event_OnInvestigate // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBItemActiveSkill
// Size: 0x418 (Inherited: 0x3d8)
struct ARBItemActiveSkill : ARBActiveSkill {
	struct ARBPickup* ItemClass; // 0x3d8(0x08)
	struct ARBPickup* Item; // 0x3e0(0x08)
	struct FRBGameplayAttribute ActiveSkillActivationRadius; // 0x3e8(0x30)

	void OnItemThrown(struct ARBThrowableWeapon* thrownItem); // Function OPP.RBItemActiveSkill.OnItemThrown // (Final|Native|Protected) // @ game+0x1d88dcc
	void OnItemDeployed(struct ARBDeployableSkillItem* thrownItem); // Function OPP.RBItemActiveSkill.OnItemDeployed // (Final|Native|Protected) // @ game+0x1d88d4c
};

// Class OPP.RBItemSpawningManagerConfig
// Size: 0x648 (Inherited: 0x28)
struct URBItemSpawningManagerConfig : UObject {
	struct FRBItemsSpawningConfig StageItemsConfig; // 0x28(0x40)
	bool bAdjustBatteryCountForTraps; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
	struct FConfigurableFloat MinPercentOfContainerToTrap; // 0x70(0xc8)
	struct FConfigurableFloat MinimumDistanceFromObjectiveActors; // 0x138(0xc8)
	struct FConfigurableFloat MinimumDistanceFromSecondaryObjectiveActors; // 0x200(0xc8)
	struct TArray<struct FContainerLimitationInfo> ContainerLimitations; // 0x2c8(0x10)
	bool bAllowForcedContentContainers; // 0x2d8(0x01)
	char pad_2D9[0x7]; // 0x2d9(0x07)
	struct FConfigurableFloat MinDistanceBetweenLockedContainers; // 0x2e0(0xc8)
	bool bAdjustLockpickCountForLocks; // 0x3a8(0x01)
	char pad_3A9[0x3]; // 0x3a9(0x03)
	float MinimumDistanceBetweenLockpicksAndLocks; // 0x3ac(0x04)
	struct FConfigurableInt MinNumberOfLockedContainers; // 0x3b0(0xc8)
	struct FConfigurableInt RewardRoomsCount; // 0x478(0xc8)
	struct FRBItemsSpawningConfig RewardRoomsItemsConfig; // 0x540(0x40)
	struct FConfigurableInt NumberOfRewardRoomItemsCapMin; // 0x580(0xc8)
};

// Class OPP.RBItemSpawningManager
// Size: 0x458 (Inherited: 0x248)
struct ARBItemSpawningManager : AActor {
	char pad_248[0x8]; // 0x248(0x08)
	struct URBItemSpawningManagerConfig* Config; // 0x250(0x08)
	bool bSilentErrors; // 0x258(0x01)
	char pad_259[0x7]; // 0x259(0x07)
	struct USceneComponent* ItemSpawningManagerRootComponent; // 0x260(0x08)
	struct TArray<struct ARBRoomGroup*> SectionWithSpawningOverrides; // 0x268(0x10)
	struct TArray<struct ARBContainer*> SelectableContainers; // 0x278(0x10)
	int32_t NumberOfContainersToTrap; // 0x288(0x04)
	char pad_28C[0x4]; // 0x28c(0x04)
	struct TArray<struct ARBContainer*> ContainersToTrap; // 0x290(0x10)
	int32_t NumberOfContainersToLock; // 0x2a0(0x04)
	char pad_2A4[0x4]; // 0x2a4(0x04)
	struct TArray<enum class EItemType> ValidPrimaryLockItemType; // 0x2a8(0x10)
	struct TArray<struct ARBContainer*> LockedContainersToFill; // 0x2b8(0x10)
	struct TArray<struct ARBContainer*> AvailableContainersToLock; // 0x2c8(0x10)
	struct TArray<struct UObject*> ValidMainObjectiveActors; // 0x2d8(0x10)
	struct TArray<struct UObject*> ValidSecondaryObjectiveActors; // 0x2e8(0x10)
	struct TArray<struct FItemSpawningManagerRewardVolumeInfo> RewardRoomInfos; // 0x2f8(0x10)
	struct TArray<struct FItemSpawningManagerRuntimeInfo> RuntimeInfos; // 0x308(0x10)
	struct TArray<struct FItemClassCacheEntry> ItemClassCache; // 0x318(0x10)
	struct TArray<struct URBHidespotComponent*> HidespotsToCheck; // 0x328(0x10)
	struct TArray<struct URBRandomizableHelperComponent*> RandomHelpersToCheck; // 0x338(0x10)
	struct TArray<struct ARBRoom*> InvalidRoomsToCheck; // 0x348(0x10)
	char pad_358[0x100]; // 0x358(0x100)

	struct ARBPickup* GetItemClass(enum class EItemType ItemType); // Function OPP.RBItemSpawningManager.GetItemClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d888c0
};

// Class OPP.RBJumpScareTriggerable
// Size: 0x4b0 (Inherited: 0x420)
struct ARBJumpScareTriggerable : ARBTriggerable {
	bool bStartsEnabled; // 0x418(0x01)
	int32_t ScareJumpSettings; // 0x41c(0x04)
	uint32_t MinimumNumberOfDetection; // 0x420(0x04)
	uint32_t MaximumNumberOfDetection; // 0x424(0x04)
	uint32_t AdditionalInitialNumberOfDetection; // 0x428(0x04)
	float TriggerIntervalDuration; // 0x42c(0x04)
	bool bCanRetrigger; // 0x430(0x01)
	uint32_t AdditionalRetriggerNumberOfDetection; // 0x434(0x04)
	float RetriggerDelay; // 0x438(0x04)
	float MaxAIDistractionRange; // 0x43c(0x04)
	float LineOfSightTestAngle; // 0x440(0x04)
	char pad_446[0x2]; // 0x446(0x02)
	struct UAkAudioEvent* ScareStingerEvent; // 0x448(0x08)
	bool bAutoPostScareStinger; // 0x450(0x01)
	bool bEnabled; // 0x451(0x01)
	char pad_452[0x2]; // 0x452(0x02)
	float NextRetriggerAvailableTimestamp; // 0x454(0x04)
	uint32_t NextTriggerDetectionCount; // 0x458(0x04)
	uint32_t CurrentDetectionCount; // 0x45c(0x04)
	float ContinuousDetectionTimestamp; // 0x460(0x04)
	bool bStingerTriggered; // 0x464(0x01)
	char pad_465[0x3]; // 0x465(0x03)
	int32_t RandomSeed; // 0x468(0x04)
	char pad_46C[0x4]; // 0x46c(0x04)
	struct URBSoundComponent* SoundComponent; // 0x470(0x08)
	struct UBoxComponent* TriggerBox; // 0x478(0x08)
	struct USceneComponent* LineOfSightTestLocation; // 0x480(0x08)
	struct URBRoomAssociationComponent* AssociatedRoomComponent; // 0x488(0x08)
	struct TArray<struct AActor*> IgnoredTriggerers; // 0x490(0x10)
	struct TArray<struct FJumpScareDetectionEntry> DetectionTimestamps; // 0x4a0(0x10)

	void TryTriggerScareStinger(); // Function OPP.RBJumpScareTriggerable.TryTriggerScareStinger // (Final|Native|Public|BlueprintCallable) // @ game+0x1d8bcac
	void OnTriggerBoxOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBJumpScareTriggerable.OnTriggerBoxOverlap // (Final|Native|Public|HasOutParms) // @ game+0x1d8bacc
	void OnRoomEntered(struct ARBPawn* Pawn); // Function OPP.RBJumpScareTriggerable.OnRoomEntered // (Final|Native|Public) // @ game+0x1d8ba44
	void InitializeLinkedRoom(struct URBRoomAssociationComponent* roomAssociationComponent); // Function OPP.RBJumpScareTriggerable.InitializeLinkedRoom // (Final|Native|Public) // @ game+0x1d8b2a4
	struct FVector GetScareStingerLocation(); // Function OPP.RBJumpScareTriggerable.GetScareStingerLocation // (Native|Event|Public|HasDefaults|BlueprintEvent|Const) // @ game+0x1d8b17c
	bool CanTriggerScareJump(); // Function OPP.RBJumpScareTriggerable.CanTriggerScareJump // (Native|Event|Public|BlueprintEvent) // @ game+0x1d8aec0
};

// Class OPP.RBLargeObjectInteractionPanelComponent
// Size: 0xb60 (Inherited: 0x7a0)
struct URBLargeObjectInteractionPanelComponent : URBInteractiblePanelComponent {
	struct FConfigurableFloat InteractTime; // 0x7a0(0xc8)
	struct FConfigurableFloat MinimumInteractTime; // 0x868(0xc8)
	int32_t StartingAllowedNumberOfInteractions; // 0x930(0x04)
	char pad_934[0x4]; // 0x934(0x04)
	struct FConfigurableBool bInteractTimeIsOneShot; // 0x938(0x60)
	bool bDoThrowClearanceCheck; // 0x998(0x01)
	bool bIgnoreOwnerInThrowClearanceCheck; // 0x999(0x01)
	char pad_99A[0x2]; // 0x99a(0x02)
	float AINoiseInterval; // 0x99c(0x04)
	enum class ETriggeringStimulusType AIStimulusType; // 0x9a0(0x01)
	char pad_9A1[0x7]; // 0x9a1(0x07)
	struct FScheduledInt NumberOfCompletedInteractions; // 0x9a8(0x78)
	int32_t NumberOfAllowedInteractions; // 0xa20(0x04)
	float InteractionDurationNetworked; // 0xa24(0x04)
	struct FMulticastInlineDelegate OnAccumulatedInteractionTimeChanged; // 0xa28(0x10)
	struct FMulticastInlineDelegate OnNumberOfInteractionChanged; // 0xa38(0x10)
	struct FMulticastInlineDelegate OnLargeObjectInteractionDoAction; // 0xa48(0x10)
	struct FMulticastInlineDelegate OnTossIntoFinished; // 0xa58(0x10)
	struct FScheduledFloat AccumulatedInteractionTime; // 0xa68(0x78)
	struct FScheduledFloat InteractionTimeStartedPawnTimestamp; // 0xae0(0x78)
	char pad_B58[0x8]; // 0xb58(0x08)

	void OnRep_NumberOfCompletedInteractions(); // Function OPP.RBLargeObjectInteractionPanelComponent.OnRep_NumberOfCompletedInteractions // (Final|Native|Private) // @ game+0x1d8b968
	void OnRep_InteractionTimeStartedPawnTimestamp(); // Function OPP.RBLargeObjectInteractionPanelComponent.OnRep_InteractionTimeStartedPawnTimestamp // (Final|Native|Private) // @ game+0x1d8b938
	void OnRep_AccumulatedInteractionTime(); // Function OPP.RBLargeObjectInteractionPanelComponent.OnRep_AccumulatedInteractionTime // (Final|Native|Private) // @ game+0x1d8b8ec
	void OnNumberOfCompletedInteractionsChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBLargeObjectInteractionPanelComponent.OnNumberOfCompletedInteractionsChangedCallback // (Final|Native|Private) // @ game+0x1d8b728
	void OnInteractionTimeStartedPawnTimestampChangedCallback(enum class EScheduledPropertyValueChangedType changeType); // Function OPP.RBLargeObjectInteractionPanelComponent.OnInteractionTimeStartedPawnTimestampChangedCallback // (Final|Native|Private) // @ game+0x1d32d30
	void OnAccumulatedInteractionTimeChangedCallback(enum class EScheduledPropertyValueChangedType changeType); // Function OPP.RBLargeObjectInteractionPanelComponent.OnAccumulatedInteractionTimeChangedCallback // (Final|Native|Private) // @ game+0x1d8b3b0
	bool IsCompleted(); // Function OPP.RBLargeObjectInteractionPanelComponent.IsCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d8b324
	struct UAnimSequence* GetSpecialMoveAnimation(struct ARBPawn* Pawn, bool bIsFirstPerson); // Function OPP.RBLargeObjectInteractionPanelComponent.GetSpecialMoveAnimation // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1d8b1b4
	float GetProgressRatio(); // Function OPP.RBLargeObjectInteractionPanelComponent.GetProgressRatio // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d8b154
	struct USceneComponent* GetLargeObjectRef(struct ARBLargePickup* pickup); // Function OPP.RBLargeObjectInteractionPanelComponent.GetLargeObjectRef // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d88948
	float GetInteractionDuration(); // Function OPP.RBLargeObjectInteractionPanelComponent.GetInteractionDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d8b12c
	void Event_OnTossIntoFinished(struct ARBLargePickup* largeObject); // Function OPP.RBLargeObjectInteractionPanelComponent.Event_OnTossIntoFinished // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnNumberOfCompletedInteractionsChanged(); // Function OPP.RBLargeObjectInteractionPanelComponent.Event_OnNumberOfCompletedInteractionsChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnLargeObjectDoAction(struct ARBLargePickup* largeObject, struct ARBPawn* interactor); // Function OPP.RBLargeObjectInteractionPanelComponent.Event_OnLargeObjectDoAction // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnAccumulatedInteractionTimeChanged(); // Function OPP.RBLargeObjectInteractionPanelComponent.Event_OnAccumulatedInteractionTimeChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBLeashMarker
// Size: 0x2e8 (Inherited: 0x248)
struct ARBLeashMarker : AActor {
	enum class ELeashType Type; // 0x248(0x01)
	char pad_249[0x7]; // 0x249(0x07)
	struct AVolume* LeashVolume; // 0x250(0x08)
	struct TArray<struct TSoftObjectPtr<ARBRoom>> Rooms; // 0x258(0x10)
	bool bCylindrical; // 0x268(0x01)
	char pad_269[0x3]; // 0x269(0x03)
	float CylinderRadius; // 0x26c(0x04)
	float BoxWidth; // 0x270(0x04)
	float BoxLength; // 0x274(0x04)
	float LeashHeight; // 0x278(0x04)
	bool bUsingVolume; // 0x27c(0x01)
	char pad_27D[0x3]; // 0x27d(0x03)
	struct TMap<struct FIntVector, bool> CachedPointsInside; // 0x280(0x50)
	struct TArray<struct ARBRoom*> RoomPtrs; // 0x2d0(0x10)
	char pad_2E0[0x8]; // 0x2e0(0x08)
};

// Class OPP.RBSplineActor
// Size: 0x270 (Inherited: 0x248)
struct ARBSplineActor : AActor {
	bool bSoftAngles; // 0x248(0x01)
	char pad_249[0x7]; // 0x249(0x07)
	struct ARBSplineActor* Next; // 0x250(0x08)
	struct ARBSplineActor* Prev; // 0x258(0x08)
	char pad_260[0x10]; // 0x260(0x10)

	void SetLink(struct ARBSplineActor* NextMarker); // Function OPP.RBSplineActor.SetLink // (Native|Public|BlueprintCallable) // @ game+0x1d83fa4
};

// Class OPP.RBLedgeMarker
// Size: 0x410 (Inherited: 0x270)
struct ARBLedgeMarker : ARBSplineActor {
	char pad_270[0x88]; // 0x270(0x88)
	bool bEnabled; // 0x2f8(0x01)
	bool bCanJumpOver; // 0x2f9(0x01)
	bool bCanSlideOver; // 0x2fa(0x01)
	bool bCanClimbOnto; // 0x2fb(0x01)
	bool bOverrideTraversalMargin; // 0x2fc(0x01)
	char pad_2FD[0x3]; // 0x2fd(0x03)
	float OverridenTraversalMargin; // 0x300(0x04)
	float CustomLedgeWidth; // 0x304(0x04)
	bool bOverride_SingleLedge; // 0x308(0x01)
	bool bForceSingleLedge; // 0x309(0x01)
	bool bFixedPositionJumpOver; // 0x30a(0x01)
	char pad_30B[0x1]; // 0x30b(0x01)
	float FixedPositionCenter; // 0x30c(0x04)
	bool bHasBase; // 0x310(0x01)
	bool bHasWall; // 0x311(0x01)
	bool bForceWalkingInteraction; // 0x312(0x01)
	bool bForceRunningInteraction; // 0x313(0x01)
	bool bSkipInitialCollisionValidations; // 0x314(0x01)
	bool bEnableZSecondChance; // 0x315(0x01)
	bool bOverride_ZSecondChanceHeight; // 0x316(0x01)
	char pad_317[0x1]; // 0x317(0x01)
	float ZSecondChanceHeight; // 0x318(0x04)
	bool bIgnoreOwnerForCollisionChecks; // 0x31c(0x01)
	char pad_31D[0x3]; // 0x31d(0x03)
	struct TArray<struct TSoftObjectPtr<AActor>> ActorsToIgnoreCollision; // 0x320(0x10)
	bool bAllowSmallLandOntoAnimationFromWalkJump; // 0x330(0x01)
	bool bOverrideDropSide; // 0x331(0x01)
	bool bOverrideDropSideToTheRight; // 0x332(0x01)
	bool bOverrideLedgeDrop; // 0x333(0x01)
	bool bOverrideLedgeRightDrop; // 0x334(0x01)
	bool bOverrideLedgeLeftDrop; // 0x335(0x01)
	bool bAnimatedDropDown; // 0x336(0x01)
	bool bSmallDropDownOnlyAvailableInCrouch; // 0x337(0x01)
	bool bDisablePushFromLedge; // 0x338(0x01)
	bool bForcePushFromLedge; // 0x339(0x01)
	bool bUseAnimatedClimbDownWhileRunning; // 0x33a(0x01)
	enum class ELedgeCoopMoveType CoopMove; // 0x33b(0x01)
	bool bHasWallForLedgeCatch; // 0x33c(0x01)
	bool bCanBeUsedByAI; // 0x33d(0x01)
	char pad_33E[0x2]; // 0x33e(0x02)
	struct FGameplayTagContainer EnableOnlyForNPCTags; // 0x340(0x20)
	struct FGameplayTagContainer DisableForNPCTags; // 0x360(0x20)
	char pad_380[0x4]; // 0x380(0x04)
	bool bCurrentlyEnabled; // 0x384(0x01)
	bool bIsLedgeValid; // 0x385(0x01)
	bool bIsLedgeValidForAI; // 0x386(0x01)
	bool bIsLedgeUsingSecondChanceForAI; // 0x387(0x01)
	bool bValidationTestDone; // 0x388(0x01)
	char pad_389[0x7]; // 0x389(0x07)
	struct URBNavLinkComponent* NavLinkCompLeftToRight; // 0x390(0x08)
	struct URBNavLinkComponent* NavLinkCompRightToLeft; // 0x398(0x08)
	struct URBNavLinkComponent* LongJumpNavLinkComp; // 0x3a0(0x08)
	struct URBInvestigationComponent* InvestigationComponent; // 0x3a8(0x08)
	struct FMulticastInlineDelegate OnLedgeTraversalBegin; // 0x3b0(0x10)
	struct ARBLedgeMarker* FarLedgeOnPath; // 0x3c0(0x08)
	char pad_3C8[0x10]; // 0x3c8(0x10)
	struct TArray<struct ARBLedgeMarker*> ReciprocalFarLedgesOnPath; // 0x3d8(0x10)
	char pad_3E8[0x1e]; // 0x3e8(0x1e)
	bool bHasComputedLedgeDrop; // 0x406(0x01)
	bool bLedgeDropLeft; // 0x407(0x01)
	bool bLedgeDropRight; // 0x408(0x01)
	char pad_409[0x7]; // 0x409(0x07)

	void Validate(bool bDebug); // Function OPP.RBLedgeMarker.Validate // (Final|Native|Public) // @ game+0x1d8ec68
	void UnlinkPrevious(); // Function OPP.RBLedgeMarker.UnlinkPrevious // (Final|Native|Public) // @ game+0x1521dbc
	void UnlinkNext(); // Function OPP.RBLedgeMarker.UnlinkNext // (Final|Native|Public) // @ game+0x1521dbc
	void SetCanBeUsedByAI(bool canBeUsedByAI); // Function OPP.RBLedgeMarker.SetCanBeUsedByAI // (Final|Native|Public|BlueprintCallable) // @ game+0x1d8ebc4
	void SelectPrevious(); // Function OPP.RBLedgeMarker.SelectPrevious // (Final|Native|Public) // @ game+0x1521dbc
	void SelectNext(); // Function OPP.RBLedgeMarker.SelectNext // (Final|Native|Public) // @ game+0x1521dbc
	void SelectGroup(); // Function OPP.RBLedgeMarker.SelectGroup // (Final|Native|Public) // @ game+0x1521dbc
	void GotoPrevious(); // Function OPP.RBLedgeMarker.GotoPrevious // (Final|Native|Public) // @ game+0x1521dbc
	void GotoNext(); // Function OPP.RBLedgeMarker.GotoNext // (Final|Native|Public) // @ game+0x1521dbc
	void BP_SetEnabled(bool bEnabledValue); // Function OPP.RBLedgeMarker.BP_SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1d8e2b0
};

// Class OPP.RBLevelScriptActor
// Size: 0x258 (Inherited: 0x250)
struct ARBLevelScriptActor : ALevelScriptActor {
	char pad_250[0x8]; // 0x250(0x08)

	void OnWorldLoadingFinished(); // Function OPP.RBLevelScriptActor.OnWorldLoadingFinished // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void OnStageStartedCallback(struct FRBStageID& StageID, struct FRBMissionID& MissionID); // Function OPP.RBLevelScriptActor.OnStageStartedCallback // (Final|Native|Public|HasOutParms) // @ game+0x1d8ea18
	void OnStageStarted(struct FRBStageID StageID, struct FRBMissionID MissionID); // Function OPP.RBLevelScriptActor.OnStageStarted // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void OnStageReadyCallback(struct FRBStageID& StageID, struct FRBMissionID& MissionID); // Function OPP.RBLevelScriptActor.OnStageReadyCallback // (Final|Native|Public|HasOutParms) // @ game+0x1d8e918
	void OnStageReady(struct FRBStageID StageID, struct FRBMissionID MissionID); // Function OPP.RBLevelScriptActor.OnStageReady // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void OnStageEndedCallback(struct FRBStageID& StageID, struct FRBMissionID& MissionID, bool bIsFail); // Function OPP.RBLevelScriptActor.OnStageEndedCallback // (Final|Native|Public|HasOutParms) // @ game+0x1d8e7d0
	void OnStageEnded(struct FRBStageID StageID, struct FRBMissionID MissionID, bool bIsFail); // Function OPP.RBLevelScriptActor.OnStageEnded // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void OnPopulatingFinished(); // Function OPP.RBLevelScriptActor.OnPopulatingFinished // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void OnObjectiveCoordinatorStateChanged(struct ARBBaseObjectiveCoordinator* coordinator, enum class EObjectiveCoordinatorState State); // Function OPP.RBLevelScriptActor.OnObjectiveCoordinatorStateChanged // (Final|Native|Public) // @ game+0x1d8e528
	void OnCoordinatorStarted(struct ARBBaseObjectiveCoordinator* coordinator, bool bIsApplyingCheats); // Function OPP.RBLevelScriptActor.OnCoordinatorStarted // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void OnCoordinatorCompleted(struct ARBBaseObjectiveCoordinator* coordinator, bool bIsApplyingCheats); // Function OPP.RBLevelScriptActor.OnCoordinatorCompleted // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void OnAIDirectorSpawnedBotCallback(struct ARBBot* bot, struct ARBNPC* Pawn); // Function OPP.RBLevelScriptActor.OnAIDirectorSpawnedBotCallback // (Final|Native|Public) // @ game+0x1d8e3e0
	void OnAIDirectorSpawnedBot(struct ARBBot* bot, struct ARBNPC* Pawn); // Function OPP.RBLevelScriptActor.OnAIDirectorSpawnedBot // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBLight
// Size: 0x580 (Inherited: 0x420)
struct ARBLight : ARBTriggerable {
	struct TArray<struct ULightComponent*> StaticLights; // 0x418(0x10)
	struct TArray<struct ULightComponent*> DynamicLights; // 0x428(0x10)
	struct TArray<struct ULightComponent*> DualLights; // 0x438(0x10)
	struct TArray<struct ULightComponent*> AllLights; // 0x448(0x10)
	struct TArray<struct UStaticMeshComponent*> Staticmeshes; // 0x458(0x10)
	struct TArray<struct URBVolumetricFogLightComponent*> FogLights; // 0x468(0x10)
	struct TSoftObjectPtr<AReflectionCapture> ReflectionCapture; // 0x478(0x28)
	struct TSoftObjectPtr<AReflectionCapture> PreviousReflectionCapture; // 0x4a0(0x28)
	bool bIsReflectionCaptureSecondState; // 0x4c8(0x01)
	bool bAffectsWorld; // 0x4c9(0x01)
	bool bUseDynamicLighting; // 0x4ca(0x01)
	float LightIntensity; // 0x4cc(0x04)
	struct FLinearColor Color; // 0x4d0(0x10)
	float LightIntensityScale; // 0x4e0(0x04)
	float RadiusScaleMultiplier; // 0x4e4(0x04)
	float ConeAngle; // 0x4e8(0x04)
	float ShadowResolutionScale; // 0x4ec(0x04)
	float ShadowBias; // 0x4f0(0x04)
	float IndirectLightingIntensity; // 0x4f4(0x04)
	bool bBakeIndirectOnMovables; // 0x4f8(0x01)
	bool bNoStaticLightingWhenFlickering; // 0x4f9(0x01)
	bool bDisableDualLight; // 0x4fa(0x01)
	int32_t LightMode; // 0x4fc(0x04)
	struct FLightingChannels LightingChannels; // 0x500(0x01)
	enum class ELightClipPlaneMode ClipPlane; // 0x501(0x01)
	float ClipPlaneDistance; // 0x504(0x04)
	enum class EHybridLightChannel SpecularChannel; // 0x508(0x01)
	bool bOverrideAll; // 0x509(0x01)
	bool bOverrideIntensities; // 0x50a(0x01)
	bool bOverrideLightColor; // 0x50b(0x01)
	bool bOverrideFog; // 0x50c(0x01)
	bool bOverrideConeOpening; // 0x50d(0x01)
	bool bOverrideRadius; // 0x50e(0x01)
	bool bOverrideFogLightColor; // 0x50f(0x01)
	bool bUseVolumetricFog; // 0x510(0x01)
	bool bUseVolumetricFogLights; // 0x511(0x01)
	bool bLinkFogLightColor; // 0x512(0x01)
	bool bBakeFogInVolume; // 0x513(0x01)
	bool bVolumetricFogCastShadows; // 0x514(0x01)
	float VolumetricFogIntensity; // 0x518(0x04)
	bool bIsFlickering; // 0x51c(0x01)
	char pad_51E[0x2]; // 0x51e(0x02)
	float FlickeringIntensity; // 0x520(0x04)
	float FlickeringSpeed; // 0x524(0x04)
	float AnimatedMaterialDynamicDataIntensity; // 0x528(0x04)
	bool bAnimationSetMaterialDynamicDataA; // 0x52c(0x01)
	bool bAnimationSetMaterialDynamicDataR; // 0x52d(0x01)
	bool bAnimationSetMaterialDynamicDataG; // 0x52e(0x01)
	bool bAnimationSetMaterialDynamicDataB; // 0x52f(0x01)
	struct UCurveFloat* FlickeringCurve; // 0x530(0x08)
	float MaxDrawDistanceFadeStart; // 0x538(0x04)
	float MaxDrawDistanceFadeRange; // 0x53c(0x04)
	float MaxDrawDistanceMultiplier; // 0x540(0x04)
	bool bShouldResetWithStageOverride; // 0x544(0x01)
	char pad_545[0x3]; // 0x545(0x03)
	struct FLinearColor PostIntensityColor; // 0x548(0x10)
	float ReflectionDiffuseBrightness; // 0x558(0x04)
	char pad_55C[0x4]; // 0x55c(0x04)
	float AnimationCurveStartTime; // 0x560(0x04)
	char pad_564[0x4]; // 0x564(0x04)
	struct UCurveFloat* OldAnimCurve; // 0x568(0x08)
	struct UCurveFloat* AnimationCurve; // 0x570(0x08)
	struct FName LightDeprecatedName; // 0x578(0x08)

	void UpdateColors(); // Function OPP.RBLight.UpdateColors // (Final|Native|Public) // @ game+0x1d8e7a4
	void UpdateAffectsWorld(); // Function OPP.RBLight.UpdateAffectsWorld // (Final|Native|Public) // @ game+0x1d8ec54
	void PlayAnimationCurve(struct UCurveFloat* newAnimCurve); // Function OPP.RBLight.PlayAnimationCurve // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d8eb18
	void OnRep_LightMode(); // Function OPP.RBLight.OnRep_LightMode // (Final|Native|Public) // @ game+0x1d8e7b8
	void OnRep_Color(); // Function OPP.RBLight.OnRep_Color // (Final|Native|Public) // @ game+0x1d8e7a4
	void OnRep_AnimationCurve(); // Function OPP.RBLight.OnRep_AnimationCurve // (Final|Native|Public) // @ game+0x1d8e790
	void OnLightMode(int32_t newLightMode); // Function OPP.RBLight.OnLightMode // (Native|Event|Public|BlueprintEvent) // @ game+0x1d8e4a4
	void OnBPConstruction(); // Function OPP.RBLight.OnBPConstruction // (Native|Event|Public|BlueprintEvent) // @ game+0x13b39e4
	void GetOldLightValues(); // Function OPP.RBLight.GetOldLightValues // (Final|Native|Public) // @ game+0x1d8e3cc
	void BP_SetLightColor(struct FLinearColor& newColor); // Function OPP.RBLight.BP_SetLightColor // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d8e334
};

// Class OPP.RBSpotLightComponent
// Size: 0x450 (Inherited: 0x430)
struct URBSpotLightComponent : USpotLightComponent {
	struct FString LightAnimationRTPC; // 0x430(0x10)
	struct URBSoundComponent* SoundComponent; // 0x440(0x08)
	char pad_448[0x8]; // 0x448(0x08)
};

// Class OPP.RBLineOfSightTrigger
// Size: 0x278 (Inherited: 0x248)
struct ARBLineOfSightTrigger : AActor {
	enum class ETriggerComponentNetType NetType; // 0x248(0x01)
	char pad_249[0x3]; // 0x249(0x03)
	float MaxTriggerDistance; // 0x24c(0x04)
	float MaxHorizontalAngle; // 0x250(0x04)
	float MaxVerticalAngle; // 0x254(0x04)
	bool bIgnoreCurrentInteractible; // 0x258(0x01)
	char pad_259[0x7]; // 0x259(0x07)
	struct FMulticastInlineDelegate OnLineOfSight; // 0x260(0x10)
	bool bTriggerEnabled; // 0x270(0x01)
	char pad_271[0x7]; // 0x271(0x07)

	void BP_EnableTrigger(); // Function OPP.RBLineOfSightTrigger.BP_EnableTrigger // (Final|Native|Public|BlueprintCallable) // @ game+0x1d8e1d0
	void BP_DisableTrigger(); // Function OPP.RBLineOfSightTrigger.BP_DisableTrigger // (Final|Native|Public|BlueprintCallable) // @ game+0x1d8e1bc
};

// Class OPP.RBLoadingScreenWidget
// Size: 0x270 (Inherited: 0x268)
struct URBLoadingScreenWidget : URBUserWidget {
	char pad_268[0x8]; // 0x268(0x08)

	void Event_StopLoadingScreen(bool skipOutro); // Function OPP.RBLoadingScreenWidget.Event_StopLoadingScreen // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_StartLoadingScreen(bool skipIntro); // Function OPP.RBLoadingScreenWidget.Event_StartLoadingScreen // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnLoadingScreenOutroCompleted(); // Function OPP.RBLoadingScreenWidget.BP_OnLoadingScreenOutroCompleted // (Final|Native|Public|BlueprintCallable) // @ game+0x1d8e258
};

// Class OPP.RBLoadoutValidationCondition
// Size: 0x30 (Inherited: 0x28)
struct URBLoadoutValidationCondition : UObject {
	bool bInverse; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
};

// Class OPP.RBLoadoutValidationConditionGroup
// Size: 0x48 (Inherited: 0x30)
struct URBLoadoutValidationConditionGroup : URBLoadoutValidationCondition {
	int32_t NumberOfValidConditionsNeeded; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<struct URBLoadoutValidationCondition*> Conditions; // 0x38(0x10)
};

// Class OPP.RBActiveSkillValidationCondition
// Size: 0x38 (Inherited: 0x30)
struct URBActiveSkillValidationCondition : URBLoadoutValidationCondition {
	char bUseSpecificActiveSkillType : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	enum class EActiveSkillType ActiveSkillType; // 0x31(0x01)
	char pad_32[0x6]; // 0x32(0x06)
};

// Class OPP.RBLobbyData
// Size: 0x2c0 (Inherited: 0x30)
struct URBLobbyData : URBGameModePersistentData {
	struct TMap<enum class EMetaNPCType, struct UTexture2D*> DenizensWorldIcons; // 0x30(0x50)
	struct AActor* CellMenuCharacterClass; // 0x80(0x08)
	struct FDirectorVOs DirectorVOs; // 0x88(0x108)
	struct FOfficerVOs OfficerVOs; // 0x190(0x20)
	struct TMap<enum class EMetaNPCType, struct FNPCLobbyInteractionData> NPCLobbyInteractionAudioEvents; // 0x1b0(0x50)
	struct FEvaluationCorridorTVAnimations EvaluationCorridorTVAnimations; // 0x200(0x80)
	struct UDataTable* FacialAnimations; // 0x280(0x08)
	struct FHUDTutorialTextData ReleaseAvailableTutorialText; // 0x288(0x38)
};

// Class OPP.RBLobbyFakeReagent
// Size: 0x248 (Inherited: 0x248)
struct ARBLobbyFakeReagent : AActor {

	bool TryPlayFacialAnim(struct FString lineId); // Function OPP.RBLobbyFakeReagent.TryPlayFacialAnim // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d92ce8
	struct USkeletalMeshComponent* GetFaceFXSkeletalMeshComponent(); // Function OPP.RBLobbyFakeReagent.GetFaceFXSkeletalMeshComponent // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d918c0
};

// Class OPP.RBLobbyPlayerController
// Size: 0x3520 (Inherited: 0xa48)
struct ARBLobbyPlayerController : ARBController {
	struct AActor* ExperimentBoardClass; // 0xa48(0x08)
	struct UTexture2D* ExperimentBoardIcon; // 0xa50(0x08)
	struct FObjectiveUISettings QuestGiversUISettings; // 0xa58(0xa50)
	struct FObjectiveUISettings CellIconUISettings; // 0x14a8(0xa50)
	struct FObjectiveUISettings PlayerCustomizationIconUISettings; // 0x1ef8(0xa50)
	struct FObjectiveUISettings PlayerCellCustomizationIconUISettings; // 0x2948(0xa50)
	bool bHasBeenInEvalCorridor; // 0x3398(0x01)
	char pad_3399[0x7]; // 0x3399(0x07)
	struct FMulticastInlineDelegate OnMatchSettingsUpdatedDelegate; // 0x33a0(0x10)
	struct FMulticastInlineDelegate OnMatchStateUpdated; // 0x33b0(0x10)
	struct FMulticastInlineDelegate OnFindPartyStateUpdated; // 0x33c0(0x10)
	struct FMulticastInlineDelegate OnFindPartyTicketStateUpdated; // 0x33d0(0x10)
	struct FMulticastInlineDelegate OnPlayerInOwnCellUpdated; // 0x33e0(0x10)
	struct FMulticastInlineDelegate OnMatchReady; // 0x33f0(0x10)
	char pad_3400[0x50]; // 0x3400(0x50)
	struct FServerTravelInfo ServerTravelInfo; // 0x3450(0x28)
	char pad_3478[0x8]; // 0x3478(0x08)
	struct AActor* CellIconTarget; // 0x3480(0x08)
	struct AActor* ExperimentBoardIconTarget; // 0x3488(0x08)
	struct TMap<enum class EMetaNPCType, struct ARBQuestGiver*> NPCsTarget; // 0x3490(0x50)
	struct AActor* PlayerCustomizationTarget; // 0x34e0(0x08)
	struct AActor* PlayerCellCustomizationTarget; // 0x34e8(0x08)
	char pad_34F0[0x30]; // 0x34f0(0x30)

	void Server_UpdatePlayerCellCustomization(struct TArray<struct FRBPlayerCellCustomizationEntry> playerCellCustomization); // Function OPP.RBLobbyPlayerController.Server_UpdatePlayerCellCustomization // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d92abc
	void Server_UpdateMatchSettings(struct FMatchSettings MatchSettings); // Function OPP.RBLobbyPlayerController.Server_UpdateMatchSettings // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1d92a28
	void Server_StartMatchCountdown(struct TArray<struct ARBLobbyPlayerState*> members, struct FMatchSettings MatchSettings); // Function OPP.RBLobbyPlayerController.Server_StartMatchCountdown // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1d92938
	void Server_RequestTravelToPendingMatch(); // Function OPP.RBLobbyPlayerController.Server_RequestTravelToPendingMatch // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1d92920
	void Server_RequestReleaseCurrentCharacter(); // Function OPP.RBLobbyPlayerController.Server_RequestReleaseCurrentCharacter // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d92908
	void Server_ReportWaitForPartyFailed(int32_t errorFacility, int32_t ErrorCode); // Function OPP.RBLobbyPlayerController.Server_ReportWaitForPartyFailed // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1d92844
	void Server_ReportWaitForMatchFailed(); // Function OPP.RBLobbyPlayerController.Server_ReportWaitForMatchFailed // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1d9282c
	void Server_ReportPartyFound(int32_t partySize); // Function OPP.RBLobbyPlayerController.Server_ReportPartyFound // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1d927a8
	void Server_ReportMatchFound(); // Function OPP.RBLobbyPlayerController.Server_ReportMatchFound // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1d92790
	void Server_OnDLCConcentPackPurchased(); // Function OPP.RBLobbyPlayerController.Server_OnDLCConcentPackPurchased // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1d92778
	void Server_FindPartyForGroup(struct TArray<struct ARBLobbyPlayerState*> members, int32_t DesiredSize, struct TArray<struct FProfileId> lastPartyFindProfileIds); // Function OPP.RBLobbyPlayerController.Server_FindPartyForGroup // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1d92464
	void Server_Cheat_StartRelease(); // Function OPP.RBLobbyPlayerController.Server_Cheat_StartRelease // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d92418
	void Server_Cheat_PersistPlayerProgression(); // Function OPP.RBLobbyPlayerController.Server_Cheat_PersistPlayerProgression // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d923cc
	void Server_Cheat_ForceAssignCell(); // Function OPP.RBLobbyPlayerController.Server_Cheat_ForceAssignCell // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d92380
	void Server_Cheat_EnableAutoBackfill(); // Function OPP.RBLobbyPlayerController.Server_Cheat_EnableAutoBackfill // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d92334
	void Server_Cheat_DisableAutoBackfill(); // Function OPP.RBLobbyPlayerController.Server_Cheat_DisableAutoBackfill // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1d922e8
	void Server_CancelMatchCountdown(enum class EMatchCancelationReason Reason); // Function OPP.RBLobbyPlayerController.Server_CancelMatchCountdown // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1d92264
	void Server_CancelFindParty(enum class EMatchCancelationReason Reason); // Function OPP.RBLobbyPlayerController.Server_CancelFindParty // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1d921e0
	void RequestTravelToPendingMatch(); // Function OPP.RBLobbyPlayerController.RequestTravelToPendingMatch // (Final|Native|Public|BlueprintCallable) // @ game+0x1d921cc
	void RequestReleaseCurrentCharacter(); // Function OPP.RBLobbyPlayerController.RequestReleaseCurrentCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x1d921b8
	void OnPlayerStateMatchStateUpdated(struct ARBLobbyPlayerState* RBLobbyPlayerState, struct FMatchState& MatchState); // Function OPP.RBLobbyPlayerController.OnPlayerStateMatchStateUpdated // (Final|Native|Private|HasOutParms) // @ game+0x1d92034
	void OnPlayerStateFindPartyStateUpdated(struct ARBLobbyPlayerState* RBLobbyPlayerState, struct FFindPartyState& FindPartyState); // Function OPP.RBLobbyPlayerController.OnPlayerStateFindPartyStateUpdated // (Final|Native|Private|HasOutParms) // @ game+0x1d91f58
	void OnPlayerReleaseStateUpdated(struct FPlayerReleaseState& PlayerReleaseState); // Function OPP.RBLobbyPlayerController.OnPlayerReleaseStateUpdated // (Final|Native|Public|HasOutParms) // @ game+0x1d91ee4
	void OnPlayerReleaseAvailableServerTimeUpdated(struct ARBLobbyPlayerState* RBLobbyPlayerState, float playerReleaseAvailableServerTime); // Function OPP.RBLobbyPlayerController.OnPlayerReleaseAvailableServerTimeUpdated // (Final|Native|Public) // @ game+0x1d91e3c
	void OnPlayerCellUpdated(struct ARBLobbyPlayerState* RBLobbyPlayerState, struct ARBPlayerCell* PlayerCell); // Function OPP.RBLobbyPlayerController.OnPlayerCellUpdated // (Final|Native|Public) // @ game+0x1d91b5c
	void OnEvalCorridorUpdated(struct ARBLobbyPlayerState* RBLobbyPlayerState, struct ARBEvalCorridor* evalCorridor); // Function OPP.RBLobbyPlayerController.OnEvalCorridorUpdated // (Final|Native|Public) // @ game+0x1d91a98
	bool IsPlayerInOwnCell(); // Function OPP.RBLobbyPlayerController.IsPlayerInOwnCell // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d91a68
	enum class EClientTravelSource GetClientTravelSource(); // Function OPP.RBLobbyPlayerController.GetClientTravelSource // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d91890
	void Event_OnMatchStateUpdated(struct ARBLobbyPlayerState* RBLobbyPlayerState, struct FMatchState& MatchState); // Function OPP.RBLobbyPlayerController.Event_OnMatchStateUpdated // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnMatchSettingsUpdated(struct FMatchSettings& MatchSettings); // Function OPP.RBLobbyPlayerController.Event_OnMatchSettingsUpdated // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnMatchReady(); // Function OPP.RBLobbyPlayerController.Event_OnMatchReady // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnFindPartyStateUpdated(struct ARBLobbyPlayerState* RBLobbyPlayerState, struct FFindPartyState& FindPartyState); // Function OPP.RBLobbyPlayerController.Event_OnFindPartyStateUpdated // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnFailedTravelToPendingMatch(); // Function OPP.RBLobbyPlayerController.Event_OnFailedTravelToPendingMatch // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Client_WaitForParty(struct FString TicketId, struct FString MatchmakingConfigurationName, struct TArray<struct FProfileId> groupMembers); // Function OPP.RBLobbyPlayerController.Client_WaitForParty // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d9174c
	void Client_WaitForMatchPlacement(struct FString placementId); // Function OPP.RBLobbyPlayerController.Client_WaitForMatchPlacement // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d916b8
	void Client_TravelToPendingMatch(bool bForced); // Function OPP.RBLobbyPlayerController.Client_TravelToPendingMatch // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d91634
	void Client_ReadyToTravelToMatch(); // Function OPP.RBLobbyPlayerController.Client_ReadyToTravelToMatch // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d9161c
	void Client_MatchFound(struct FString RegionName, struct FString GameSessionId, struct FString ipAddress, uint32_t Port, struct FString playerSessionId); // Function OPP.RBLobbyPlayerController.Client_MatchFound // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d9143c
	void Client_MatchCanceled(enum class EMatchCancelationReason Reason, int32_t errorFacility, int32_t ErrorCode); // Function OPP.RBLobbyPlayerController.Client_MatchCanceled // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d91340
	void Client_FindPartyCanceled(enum class EMatchCancelationReason Reason, int32_t errorFacility, int32_t ErrorCode); // Function OPP.RBLobbyPlayerController.Client_FindPartyCanceled // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d91244
	void Client_FailTravelToPendingMatch(); // Function OPP.RBLobbyPlayerController.Client_FailTravelToPendingMatch // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d9122c
	void Client_CharacterReleased(); // Function OPP.RBLobbyPlayerController.Client_CharacterReleased // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d91214
	bool CanReleaseCharacter(); // Function OPP.RBLobbyPlayerController.CanReleaseCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d911f0
};

// Class OPP.RBPlayerState
// Size: 0x8c8 (Inherited: 0x348)
struct ARBPlayerState : APlayerState {
	float JoinTime; // 0x348(0x04)
	bool bRejoined; // 0x34c(0x01)
	bool bHasBeenReplicated; // 0x34d(0x01)
	bool bHasPlayerBeenReplicated; // 0x34e(0x01)
	bool bIsOnlineInitialized; // 0x34f(0x01)
	bool bIsInMenu; // 0x350(0x01)
	char pad_351[0x7]; // 0x351(0x07)
	struct FRBPlayerId RBPlayerId; // 0x358(0x10)
	uint32_t ProcessId; // 0x368(0x04)
	char pad_36C[0x14]; // 0x36c(0x14)
	bool bHasReceivedCustomizationSet; // 0x380(0x01)
	bool bIsValidPlayer; // 0x381(0x01)
	char pad_382[0x2]; // 0x382(0x02)
	int32_t PlayerSlot; // 0x384(0x04)
	enum class EPlayerIndicatorType playerIndicatorType; // 0x388(0x01)
	char pad_389[0x3]; // 0x389(0x03)
	float PlayerIndicatorTimeLeft; // 0x38c(0x04)
	float PlayerIndicatorIconProgress; // 0x390(0x04)
	bool bIsNVMeshAnimated; // 0x394(0x01)
	bool bIsDead; // 0x395(0x01)
	bool bLostChance; // 0x396(0x01)
	char pad_397[0x1]; // 0x397(0x01)
	int32_t RemainingChances; // 0x398(0x04)
	bool bIsReadyToRespawn; // 0x39c(0x01)
	char pad_39D[0x3]; // 0x39d(0x03)
	struct ARBSAS* currentSAS; // 0x3a0(0x08)
	bool bStartingSASExited; // 0x3a8(0x01)
	char pad_3A9[0x7]; // 0x3a9(0x07)
	struct ARBSocialMenuSceneActor* ActiveSceneActor; // 0x3b0(0x08)
	struct ARBPlayer* LastPossessedPlayer; // 0x3b8(0x08)
	struct ARBRoom* LastPossessedPlayerRoom; // 0x3c0(0x08)
	char pad_3C8[0xc]; // 0x3c8(0x0c)
	bool bSpectator; // 0x3d4(0x01)
	char pad_3D5[0x3]; // 0x3d5(0x03)
	float DeathTime; // 0x3d8(0x04)
	int32_t DeathCount; // 0x3dc(0x04)
	bool bStreamingStable; // 0x3e0(0x01)
	bool bStreamingReadyToCommit; // 0x3e1(0x01)
	bool bStreamingTargetStateReached; // 0x3e2(0x01)
	bool bWorldPopulatingDone; // 0x3e3(0x01)
	bool bReceivedAllNetDataBeforePopulate; // 0x3e4(0x01)
	char pad_3E5[0x2b]; // 0x3e5(0x2b)
	struct FMulticastInlineDelegate OnPlayerLeaving; // 0x410(0x10)
	struct FMulticastInlineDelegate OnIsInMenuChanged; // 0x420(0x10)
	struct FMulticastInlineDelegate OnVoiceChatEnabledChanged; // 0x430(0x10)
	struct FMulticastInlineDelegate OnUnlockedItemsChanged; // 0x440(0x10)
	struct FMulticastInlineDelegate OnAcquiredItemsChanged; // 0x450(0x10)
	struct FMulticastInlineDelegate OnCurrenciesChanged; // 0x460(0x10)
	struct FMulticastInlineDelegate OnCurrencyGained; // 0x470(0x10)
	struct FMulticastInlineDelegate OnActiveSkillActorInitialized; // 0x480(0x10)
	struct FMulticastInlineDelegate OnPlayerLevelChanged; // 0x490(0x10)
	struct FMulticastInlineDelegate OnVoiceChatPrivilegeStatusChanged; // 0x4a0(0x10)
	struct FMulticastInlineDelegate OnCurrentLoadoutChangedCallback; // 0x4b0(0x10)
	struct FMulticastInlineDelegate OnPlayerXpChanged; // 0x4c0(0x10)
	struct FMulticastInlineDelegate OnPlayerScoreChanged; // 0x4d0(0x10)
	struct FMulticastInlineDelegate OnPlayerProgressionReceived; // 0x4e0(0x10)
	struct FMulticastInlineDelegate OnPlayerSASChanged; // 0x4f0(0x10)
	struct FMulticastInlineDelegate OnPlayerEvent; // 0x500(0x10)
	struct FMulticastInlineDelegate OnRemainingLivesChanged; // 0x510(0x10)
	struct FMulticastInlineDelegate OnEnteredHidespot; // 0x520(0x10)
	struct FMulticastInlineDelegate OnPlayerIndicatorUpdated; // 0x530(0x10)
	struct FMulticastInlineDelegate OnIsDeadChanged; // 0x540(0x10)
	struct FMulticastInlineDelegate OnIsSpectatorChanged; // 0x550(0x10)
	struct FMulticastInlineDelegate OnPlayerCustomizationUpdated; // 0x560(0x10)
	struct FMulticastInlineDelegate OnPlayerPartyStateUpdated; // 0x570(0x10)
	struct FMulticastInlineDelegate OnReadyForStageResetChanged; // 0x580(0x10)
	struct FMulticastInlineDelegate OnPlayerHealthChanged; // 0x590(0x10)
	struct FMulticastInlineDelegate OnInventoryUpdated; // 0x5a0(0x10)
	struct FMulticastInlineDelegate OnPlayerMaxHealthChanged; // 0x5b0(0x10)
	char pad_5C0[0x18]; // 0x5c0(0x18)
	struct FRBPlayerLoadout CurrentLoadout; // 0x5d8(0x18)
	char pad_5F0[0x10]; // 0x5f0(0x10)
	enum class EPlayerLeaveTarget LeaveTarget; // 0x600(0x01)
	enum class EProfilePlatform Platform; // 0x601(0x01)
	char pad_602[0x6]; // 0x602(0x06)
	struct FString PlatformId; // 0x608(0x10)
	struct FProfileId ProfileId; // 0x618(0x10)
	bool bHasVoiceChatPrivilege; // 0x628(0x01)
	bool bCheatsEnabled; // 0x629(0x01)
	char pad_62A[0x6]; // 0x62a(0x06)
	struct FString partyId; // 0x630(0x10)
	int32_t PartyMemberCount; // 0x640(0x04)
	bool bPartyJoinable; // 0x644(0x01)
	bool bPartyFriendRequiresInvite; // 0x645(0x01)
	bool bPartyPublicRequiresInvite; // 0x646(0x01)
	bool bVoiceChatEnabled; // 0x647(0x01)
	char pad_648[0x10]; // 0x648(0x10)
	struct FRBPlayerCustomizationInfo customizationInfo; // 0x658(0x38)
	bool bForcedTutorialLoadout; // 0x690(0x01)
	char pad_691[0x3]; // 0x691(0x03)
	int32_t ExperimentTimePlayedSeconds; // 0x694(0x04)
	struct FRBGameplayAttribute ExtraPerkSlots; // 0x698(0x30)
	struct FName ProgressionDataId; // 0x6c8(0x08)
	int32_t InmateId; // 0x6d0(0x04)
	char pad_6D4[0x4]; // 0x6d4(0x04)
	struct FTrialProgression TrialProgression; // 0x6d8(0x10)
	char pad_6E8[0x28]; // 0x6e8(0x28)
	int32_t Xp; // 0x710(0x04)
	int32_t PlayerLevel; // 0x714(0x04)
	int32_t ReleaseCount; // 0x718(0x04)
	int32_t CharacterStartingReleaseCount; // 0x71c(0x04)
	bool bHasPendingReleaseProcess; // 0x720(0x01)
	char pad_721[0x7]; // 0x721(0x07)
	struct TArray<struct FName> UnlockedProfileItems; // 0x728(0x10)
	struct TArray<struct FName> UnlockedCharacterItems; // 0x738(0x10)
	struct TArray<struct FName> PendingAcquiredProfileItems; // 0x748(0x10)
	struct TArray<struct FName> AcquiredProfileItems; // 0x758(0x10)
	struct TArray<struct FName> AcquiredCharacterItems; // 0x768(0x10)
	struct TArray<struct FCurrencyEntry> CurrencyEntries; // 0x778(0x10)
	int32_t Score; // 0x788(0x04)
	char pad_78C[0x4]; // 0x78c(0x04)
	struct TArray<struct FName> UpgradeEffects; // 0x790(0x10)
	char pad_7A0[0xe0]; // 0x7a0(0xe0)
	struct FPlayerRejoinInfo RejoinPlayerInfo; // 0x880(0x20)
	char pad_8A0[0x20]; // 0x8a0(0x20)
	bool bReadyForStageReset; // 0x8c0(0x01)
	char pad_8C1[0x7]; // 0x8c1(0x07)

	void Server_SetClientPopulateStarted(); // Function OPP.RBPlayerState.Server_SetClientPopulateStarted // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1340704
	void Server_OnPlayerReplicated(); // Function OPP.RBPlayerState.Server_OnPlayerReplicated // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1ddfb60
	void OnVoiceChatPrivilegeStatusChanged__DelegateSignature(struct ARBPlayerState* RBPlayerState); // DelegateFunction OPP.RBPlayerState.OnVoiceChatPrivilegeStatusChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnVoiceChatEnabledChanged__DelegateSignature(struct ARBPlayerState* PlayerState); // DelegateFunction OPP.RBPlayerState.OnVoiceChatEnabledChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnUnlockedItemsChanged__DelegateSignature(); // DelegateFunction OPP.RBPlayerState.OnUnlockedItemsChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnRep_Xp(); // Function OPP.RBPlayerState.OnRep_Xp // (Final|Native|Private) // @ game+0x1ddfb30
	void OnRep_VoiceChatEnabled(); // Function OPP.RBPlayerState.OnRep_VoiceChatEnabled // (Final|Native|Public) // @ game+0x1ddfb1c
	void OnRep_Spectator(); // Function OPP.RBPlayerState.OnRep_Spectator // (Final|Native|Public) // @ game+0x1ddfb08
	void OnRep_Score(); // Function OPP.RBPlayerState.OnRep_Score // (Final|Native|Private) // @ game+0x1ddfaf4
	void OnRep_RemainingChances(int32_t previousRemainingChances); // Function OPP.RBPlayerState.OnRep_RemainingChances // (Final|Native|Public) // @ game+0x1ddfa74
	void OnRep_ReadyForStageReset(); // Function OPP.RBPlayerState.OnRep_ReadyForStageReset // (Final|Native|Private) // @ game+0x1ddfa60
	void OnRep_PlayerLevel(int32_t oldPlayerLevel); // Function OPP.RBPlayerState.OnRep_PlayerLevel // (Final|Native|Private) // @ game+0x1ddf9e0
	void OnRep_PartyState(); // Function OPP.RBPlayerState.OnRep_PartyState // (Final|Native|Private) // @ game+0x1ddf94c
	void OnRep_LeaveTarget(); // Function OPP.RBPlayerState.OnRep_LeaveTarget // (Final|Native|Private) // @ game+0x1ddf924
	void OnRep_LastPossessedPlayer(struct ARBPlayer* oldLastPossessedPlayer); // Function OPP.RBPlayerState.OnRep_LastPossessedPlayer // (Final|Native|Public) // @ game+0x1ddf8a0
	void OnRep_IsOnlineInitialized(); // Function OPP.RBPlayerState.OnRep_IsOnlineInitialized // (Final|Native|Public) // @ game+0x1ddf804
	void OnRep_IsInMenu(); // Function OPP.RBPlayerState.OnRep_IsInMenu // (Final|Native|Public) // @ game+0x1ddf88c
	void OnRep_IsDead(); // Function OPP.RBPlayerState.OnRep_IsDead // (Final|Native|Public) // @ game+0x1ddf878
	void OnRep_InmateId(); // Function OPP.RBPlayerState.OnRep_InmateId // (Final|Native|Private) // @ game+0x1ddf864
	void OnRep_HasVoiceChatPrivilege(); // Function OPP.RBPlayerState.OnRep_HasVoiceChatPrivilege // (Final|Native|Private) // @ game+0x1ddf850
	void OnRep_HasBeenReplicated(); // Function OPP.RBPlayerState.OnRep_HasBeenReplicated // (Final|Native|Public) // @ game+0x1ddf804
	void OnRep_CustomizationInfo(); // Function OPP.RBPlayerState.OnRep_CustomizationInfo // (Final|Native|Private) // @ game+0x1ddf7f0
	void OnRep_CurrentSAS(); // Function OPP.RBPlayerState.OnRep_CurrentSAS // (Final|Native|Public) // @ game+0x1ddf7dc
	void OnRep_CurrentLoadout(); // Function OPP.RBPlayerState.OnRep_CurrentLoadout // (Final|Native|Private) // @ game+0x1ddf7c8
	void OnRep_CurrencyEntries(); // Function OPP.RBPlayerState.OnRep_CurrencyEntries // (Final|Native|Private) // @ game+0x1ddf7b4
	void OnRep_AcquiredProfileItems(); // Function OPP.RBPlayerState.OnRep_AcquiredProfileItems // (Final|Native|Private) // @ game+0x1ddf7a0
	void OnRep_AcquiredCharacterItems(); // Function OPP.RBPlayerState.OnRep_AcquiredCharacterItems // (Final|Native|Private) // @ game+0x1ddf78c
	void OnRemainingLivesChanged__DelegateSignature(); // DelegateFunction OPP.RBPlayerState.OnRemainingLivesChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnReadyForStageResetChanged__DelegateSignature(struct ARBPlayerState* RBPlayerState, bool IsReady); // DelegateFunction OPP.RBPlayerState.OnReadyForStageResetChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnPlayerXpChanged__DelegateSignature(); // DelegateFunction OPP.RBPlayerState.OnPlayerXpChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnPlayerScoreChanged__DelegateSignature(struct ARBPlayerState* RBPlayerState, int32_t Score); // DelegateFunction OPP.RBPlayerState.OnPlayerScoreChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnPlayerSASChanged__DelegateSignature(struct ARBPlayerState* RBPlayerState, struct ARBSAS* currentSAS); // DelegateFunction OPP.RBPlayerState.OnPlayerSASChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnPlayerProgressionReceived__DelegateSignature(struct ARBPlayerState* RBPlayerState); // DelegateFunction OPP.RBPlayerState.OnPlayerProgressionReceived__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnPlayerPartyStateUpdated__DelegateSignature(struct ARBPlayerState* RBPlayerState); // DelegateFunction OPP.RBPlayerState.OnPlayerPartyStateUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnPlayerMaxHealthChanged__DelegateSignature(float newMaxHealth); // DelegateFunction OPP.RBPlayerState.OnPlayerMaxHealthChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnPlayerLevelChanged__DelegateSignature(); // DelegateFunction OPP.RBPlayerState.OnPlayerLevelChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnPlayerIndicatorUpdated__DelegateSignature(enum class EPlayerIndicatorType playerIndicatorType, float timeLeft, float progress); // DelegateFunction OPP.RBPlayerState.OnPlayerIndicatorUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnPlayerHealthChanged__DelegateSignature(float newHealth); // DelegateFunction OPP.RBPlayerState.OnPlayerHealthChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnPlayerEvent__DelegateSignature(enum class EPlayerEvent EventType, int32_t Value); // DelegateFunction OPP.RBPlayerState.OnPlayerEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnPlayerCustomizationUpdated__DelegateSignature(struct FRBPlayerCustomizationInfo& customizationInfo); // DelegateFunction OPP.RBPlayerState.OnPlayerCustomizationUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x201e6d4
	void OnIsSpectatorChanged__DelegateSignature(bool isSpectator); // DelegateFunction OPP.RBPlayerState.OnIsSpectatorChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnIsDeadChanged__DelegateSignature(bool isDead); // DelegateFunction OPP.RBPlayerState.OnIsDeadChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnInventoryUpdated__DelegateSignature(); // DelegateFunction OPP.RBPlayerState.OnInventoryUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnEnteredHidespot__DelegateSignature(struct URBHidespotComponent* hidespotComponent); // DelegateFunction OPP.RBPlayerState.OnEnteredHidespot__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnCurrentLoadoutChanged__DelegateSignature(); // DelegateFunction OPP.RBPlayerState.OnCurrentLoadoutChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnCurrencyGained__DelegateSignature(enum class ECurrencyType currencyType, int32_t amount); // DelegateFunction OPP.RBPlayerState.OnCurrencyGained__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnCurrenciesChanged__DelegateSignature(); // DelegateFunction OPP.RBPlayerState.OnCurrenciesChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnActiveSkillActorInitialized__DelegateSignature(); // DelegateFunction OPP.RBPlayerState.OnActiveSkillActorInitialized__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnAcquiredItemsChanged__DelegateSignature(); // DelegateFunction OPP.RBPlayerState.OnAcquiredItemsChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void Multicast_ClearGainedCurrencies(); // Function OPP.RBPlayerState.Multicast_ClearGainedCurrencies // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1ddf5ec
	bool IsPartyJoinable(); // Function OPP.RBPlayerState.IsPartyJoinable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf5d4
	bool IsLeaving(); // Function OPP.RBPlayerState.IsLeaving // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf5b8
	bool IsItemAcquired(struct FName& ItemId); // Function OPP.RBPlayerState.IsItemAcquired // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddeca4
	bool IsFemale(); // Function OPP.RBPlayerState.IsFemale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf584
	bool HasUpgradeEffect(struct FName& ID); // Function OPP.RBPlayerState.HasUpgradeEffect // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf4ec
	bool HasCompletedTrial(struct FName& ID, bool bPerfect); // Function OPP.RBPlayerState.HasCompletedTrial // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf410
	bool HasAttemptedTrial(struct FName& ID); // Function OPP.RBPlayerState.HasAttemptedTrial // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf37c
	int32_t GetXp(); // Function OPP.RBPlayerState.GetXp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf364
	struct URBVoiceCustomizationOption* GetVoiceCustomizationOption(); // Function OPP.RBPlayerState.GetVoiceCustomizationOption // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf34c
	enum class ESkinColorType GetSkinColorType(); // Function OPP.RBPlayerState.GetSkinColorType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf244
	enum class EActiveSkillType GetSelectedActiveSkill(); // Function OPP.RBPlayerState.GetSelectedActiveSkill // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf220
	int32_t GetReleaseCount(); // Function OPP.RBPlayerState.GetReleaseCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf208
	struct FProfileId GetProfileId(); // Function OPP.RBPlayerState.GetProfileId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf1ec
	struct FRBPlayerLoadout GetPlayerLoadout(); // Function OPP.RBPlayerState.GetPlayerLoadout // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf1d0
	int32_t GetPlayerLevel(); // Function OPP.RBPlayerState.GetPlayerLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf1b8
	struct URBPlayerIconCustomizationOption* GetPlayerIconCustomizationOption(); // Function OPP.RBPlayerState.GetPlayerIconCustomizationOption // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf1a0
	struct FString GetPlatformId(); // Function OPP.RBPlayerState.GetPlatformId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf184
	enum class EProfilePlatform GetPlatform(); // Function OPP.RBPlayerState.GetPlatform // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf16c
	int32_t GetPartyMemberCount(); // Function OPP.RBPlayerState.GetPartyMemberCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf154
	struct FString GetPartyId(); // Function OPP.RBPlayerState.GetPartyId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf138
	int32_t GetNumberOfUnlockedPerkSlots(); // Function OPP.RBPlayerState.GetNumberOfUnlockedPerkSlots // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf114
	float GetNormalizedScore(); // Function OPP.RBPlayerState.GetNormalizedScore // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf0ec
	enum class EPlayerLeaveTarget GetLeaveTarget(); // Function OPP.RBPlayerState.GetLeaveTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x178c654
	int32_t GetInmateId(); // Function OPP.RBPlayerState.GetInmateId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf0d4
	struct TMap<enum class ECurrencyType, int32_t> GetGainedCurrencies(); // Function OPP.RBPlayerState.GetGainedCurrencies // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf0b8
	struct FString GetFullPlayerId(); // Function OPP.RBPlayerState.GetFullPlayerId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf07c
	int32_t GetExperimentTimePlayedSeconds(); // Function OPP.RBPlayerState.GetExperimentTimePlayedSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf064
	struct URBPlayerCustomizationOption* GetCustomizationOptionsBySlot(enum class EPlayerCustomizationSlot Slot); // Function OPP.RBPlayerState.GetCustomizationOptionsBySlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddefd4
	struct TArray<struct URBPlayerCustomizationOption*> GetCustomizationOptions(); // Function OPP.RBPlayerState.GetCustomizationOptions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddefb8
	struct URBCustomizationOutfit* GetCustomizationLegendaryOutfit(); // Function OPP.RBPlayerState.GetCustomizationLegendaryOutfit // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddefa0
	struct FRBPlayerCustomizationInfo GetCustomizationInfo(); // Function OPP.RBPlayerState.GetCustomizationInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddef84
	int32_t GetCurrency(enum class ECurrencyType currencyType); // Function OPP.RBPlayerState.GetCurrency // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddeef8
	int32_t GetCharacterStartingReleaseCount(); // Function OPP.RBPlayerState.GetCharacterStartingReleaseCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddeee0
	bool BP_IsUpgradeAcquired(struct FName& upgradeID); // Function OPP.RBPlayerState.BP_IsUpgradeAcquired // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddeca4
	bool BP_HasAcquiredActiveSkill(); // Function OPP.RBPlayerState.BP_HasAcquiredActiveSkill // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddec40
	struct FUniqueNetIdRepl BP_GetUniqueID(); // Function OPP.RBPlayerState.BP_GetUniqueID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddec04
	bool AreItemsAcquired(struct TArray<struct FName>& itemIds); // Function OPP.RBPlayerState.AreItemsAcquired // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddeb5c
};

// Class OPP.RBLobbyPlayerState
// Size: 0x9c0 (Inherited: 0x8c8)
struct ARBLobbyPlayerState : ARBPlayerState {
	struct FMulticastInlineDelegate OnPlayerCellUpdated; // 0x8c8(0x10)
	struct FMulticastInlineDelegate OnEvalCorridorUpdated; // 0x8d8(0x10)
	struct FMulticastInlineDelegate OnPlayerCellCustomizationUpdated; // 0x8e8(0x10)
	struct FMulticastInlineDelegate OnMatchStateUpdated; // 0x8f8(0x10)
	struct FMulticastInlineDelegate OnFindPartyStateUpdated; // 0x908(0x10)
	struct FMulticastInlineDelegate OnPlayerReleaseAvailableServerTimeUpdated; // 0x918(0x10)
	struct FMulticastInlineDelegate OnMatchSettingsUpdated; // 0x928(0x10)
	struct ARBPlayerCell* PlayerCell; // 0x938(0x08)
	struct ARBEvalCorridor* evalCorridor; // 0x940(0x08)
	struct TArray<struct FRBPlayerCellCustomizationEntry> playerCellCustomization; // 0x948(0x10)
	char pad_958[0x4]; // 0x958(0x04)
	struct FMatchSettings MatchSettings; // 0x95c(0x20)
	char pad_97C[0x4]; // 0x97c(0x04)
	struct FMatchState MatchState; // 0x980(0x20)
	struct FFindPartyState FindPartyState; // 0x9a0(0x18)
	float playerReleaseAvailableServerTime; // 0x9b8(0x04)
	char pad_9BC[0x4]; // 0x9bc(0x04)

	void SetReadyToTravelToMatch(bool bInReadyToTravelToMatch); // Function OPP.RBLobbyPlayerState.SetReadyToTravelToMatch // (Final|Native|Public|BlueprintCallable) // @ game+0x1d92c60
	void SetLeavingForMatch(bool bInLeavingForMatch); // Function OPP.RBLobbyPlayerState.SetLeavingForMatch // (Final|Native|Public|BlueprintCallable) // @ game+0x1d92bd8
	void SetAllReadyToTravelToMatch(bool bInAllReadyToTravelToMatch); // Function OPP.RBLobbyPlayerState.SetAllReadyToTravelToMatch // (Final|Native|Public|BlueprintCallable) // @ game+0x1d92b50
	void OnRep_PlayerReleaseAvailableServerTime(); // Function OPP.RBLobbyPlayerState.OnRep_PlayerReleaseAvailableServerTime // (Final|Native|Private) // @ game+0x1d921a4
	void OnRep_PlayerCellCustomization(); // Function OPP.RBLobbyPlayerState.OnRep_PlayerCellCustomization // (Final|Native|Private) // @ game+0x1d92190
	void OnRep_PlayerCell(); // Function OPP.RBLobbyPlayerState.OnRep_PlayerCell // (Final|Native|Private) // @ game+0x1d9217c
	void OnRep_MatchState(); // Function OPP.RBLobbyPlayerState.OnRep_MatchState // (Final|Native|Private) // @ game+0x1d92168
	void OnRep_MatchSettings(); // Function OPP.RBLobbyPlayerState.OnRep_MatchSettings // (Final|Native|Private) // @ game+0x1d92154
	void OnRep_FindPartyState(); // Function OPP.RBLobbyPlayerState.OnRep_FindPartyState // (Final|Native|Private) // @ game+0x1d92140
	void OnRep_EvalCorridor(); // Function OPP.RBLobbyPlayerState.OnRep_EvalCorridor // (Final|Native|Private) // @ game+0x1d9212c
	void OnMatchSettingsUpdated__DelegateSignature(struct ARBLobbyPlayerState* RBLobbyPlayerState, struct FMatchSettings& MatchSettings); // DelegateFunction OPP.RBLobbyPlayerState.OnMatchSettingsUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x201e6d4
	bool IsReadyToTravelToMatch(); // Function OPP.RBLobbyPlayerState.IsReadyToTravelToMatch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d91a80
	bool IsMatchCountdownStarted(); // Function OPP.RBLobbyPlayerState.IsMatchCountdownStarted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d91a48
	bool IsLeavingForMatch(); // Function OPP.RBLobbyPlayerState.IsLeavingForMatch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d91a30
	bool IsInEvalCorridor(); // Function OPP.RBLobbyPlayerState.IsInEvalCorridor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d91a14
	bool IsFindingParty(); // Function OPP.RBLobbyPlayerState.IsFindingParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d919fc
	bool IsAllReadyToTravelToMatch(); // Function OPP.RBLobbyPlayerState.IsAllReadyToTravelToMatch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d919e4
	float GetPlayerReleaseAvailableServerTime(); // Function OPP.RBLobbyPlayerState.GetPlayerReleaseAvailableServerTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d919cc
	struct TArray<struct FRBPlayerCellCustomizationEntry> GetPlayerCellCustomization(); // Function OPP.RBLobbyPlayerState.GetPlayerCellCustomization // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d919b0
	struct ARBPlayerCell* GetPlayerCell(); // Function OPP.RBLobbyPlayerState.GetPlayerCell // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d91998
	struct FMatchState GetMatchState(); // Function OPP.RBLobbyPlayerState.GetMatchState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d91970
	float GetMatchStartServerTime(); // Function OPP.RBLobbyPlayerState.GetMatchStartServerTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d91958
	struct FMatchSettings GetMatchSettings(); // Function OPP.RBLobbyPlayerState.GetMatchSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d91930
	struct ARBLobbyPlayerState* GetMatchOwner(); // Function OPP.RBLobbyPlayerState.GetMatchOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d91918
	float GetMatchCancelationGracePeriodServerTime(); // Function OPP.RBLobbyPlayerState.GetMatchCancelationGracePeriodServerTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d91900
	struct ARBLobbyPlayerState* GetFindPartyOwner(); // Function OPP.RBLobbyPlayerState.GetFindPartyOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d918e8
	struct ARBEvalCorridor* GetEvalCorridor(); // Function OPP.RBLobbyPlayerState.GetEvalCorridor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d918a8
	bool CanFindPartyBeCanceled(); // Function OPP.RBLobbyPlayerState.CanFindPartyBeCanceled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d911d8
};

// Class OPP.RBLobbyStatBoard
// Size: 0x2c8 (Inherited: 0x248)
struct ARBLobbyStatBoard : AActor {
	char pad_248[0x20]; // 0x248(0x20)
	float RefreshFrequencySeconds; // 0x268(0x04)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct TArray<struct FRBLobbyStatBoardStatConfigEntry> StatConfigs; // 0x270(0x10)
	struct FName CurrentStatConfigId; // 0x280(0x08)
	enum class EPlayerStatContextType CurrentStatConfigContextType; // 0x288(0x01)
	char pad_289[0x7]; // 0x289(0x07)
	struct TArray<struct FRBLobbyStatBoardEntry> Entries; // 0x290(0x10)
	char pad_2A0[0x28]; // 0x2a0(0x28)

	void OnRep_Entries(); // Function OPP.RBLobbyStatBoard.OnRep_Entries // (Final|Native|Private) // @ game+0x1d92118
	void OnRep_CurrentStatConfigId(); // Function OPP.RBLobbyStatBoard.OnRep_CurrentStatConfigId // (Final|Native|Private) // @ game+0x1d92104
	void OnPlayerLeftGame(struct FUniqueNetIdRepl UniqueId); // Function OPP.RBLobbyStatBoard.OnPlayerLeftGame // (Final|Native|Private) // @ game+0x1d91d8c
	void OnPlayerJoinedGame(struct FUniqueNetIdRepl UniqueId); // Function OPP.RBLobbyStatBoard.OnPlayerJoinedGame // (Final|Native|Private) // @ game+0x1d91cdc
	void OnPlayerCellUpdated(struct ARBLobbyPlayerState* RBLobbyPlayerState, struct ARBPlayerCell* PlayerCell); // Function OPP.RBLobbyStatBoard.OnPlayerCellUpdated // (Final|Native|Private) // @ game+0x1d91c18
	void Event_Refresh(); // Function OPP.RBLobbyStatBoard.Event_Refresh // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_EntryUpdated(struct FRBLobbyStatBoardEntry& Entry, int32_t Index); // Function OPP.RBLobbyStatBoard.Event_EntryUpdated // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void Event_CurrentStatUpdated(); // Function OPP.RBLobbyStatBoard.Event_CurrentStatUpdated // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBLocalPlayerProximityComponent
// Size: 0xe8 (Inherited: 0xb8)
struct URBLocalPlayerProximityComponent : UActorComponent {
	float ProximityDistance; // 0xb8(0x04)
	bool bIsLocalPlayerInProximity; // 0xbc(0x01)
	char pad_BD[0x3]; // 0xbd(0x03)
	struct FMulticastInlineDelegate OnPlayerEnterProximity; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnPlayerExitProximity; // 0xd0(0x10)
	char pad_E0[0x8]; // 0xe0(0x08)
};

// Class OPP.RBLocalPlayerVisibilityComponent
// Size: 0x160 (Inherited: 0xb8)
struct URBLocalPlayerVisibilityComponent : UActorComponent {
	bool bIsVisibleByLocalPlayer; // 0xb8(0x01)
	char pad_B9[0x7]; // 0xb9(0x07)
	struct FMulticastInlineDelegate OnVisible; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnInvisible; // 0xd0(0x10)
	char pad_E0[0x80]; // 0xe0(0x80)
};

// Class OPP.RBLocalProfile
// Size: 0x180 (Inherited: 0x28)
struct URBLocalProfile : USaveGame {
	uint32_t Version; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
	struct FDateTime CreationTime; // 0x30(0x08)
	struct FDateTime LastSaveTime; // 0x38(0x08)
	struct FDateTime LastLoadTime; // 0x40(0x08)
	int32_t NumberOfSave; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct FTutorialManagerProfileData TutorialsData; // 0x50(0x58)
	bool bPlayedEvalCorridorTVAndVOsForTutorial; // 0xa8(0x01)
	bool bIsPlayingForFirstTime; // 0xa9(0x01)
	char pad_AA[0x6]; // 0xaa(0x06)
	struct TArray<enum class EMetaNPCType> VisitedNPCs; // 0xb0(0x10)
	struct TArray<enum class EMetaNPCType> NPCsUnlockAnnouncementPlayed; // 0xc0(0x10)
	struct TArray<struct FName> ItemsSeenInMenu; // 0xd0(0x10)
	struct TArray<struct FName> ItemsDisplayedInMenu; // 0xe0(0x10)
	struct TArray<struct FName> ProgramsSeenInMenu; // 0xf0(0x10)
	struct FUILevelInfo LastLevelGainedVoicelineInfo; // 0x100(0x10)
	struct TArray<struct FName> SeenDocuments; // 0x110(0x10)
	struct TArray<struct FRBPlayerCachedInfo> CachedPlayerInfo; // 0x120(0x10)
	struct FLastGameSessionDetails LastGameSessionDetails; // 0x130(0x30)
	struct FTrialEvaluationInfo LastTrialEvaluationInfo; // 0x160(0x1c)
	char pad_17C[0x4]; // 0x17c(0x04)

	void SetProgramSeenInMenu(struct FName& ProgramId); // Function OPP.RBLocalProfile.SetProgramSeenInMenu // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d96510
	void SetLastTrialEvaluationInfo(struct FTrialEvaluationInfo& evaluationInfo); // Function OPP.RBLocalProfile.SetLastTrialEvaluationInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d96460
	void SetHasVisitedNPC(enum class EMetaNPCType NPCType); // Function OPP.RBLocalProfile.SetHasVisitedNPC // (Final|Native|Public|BlueprintCallable) // @ game+0x1d963e0
	void SetHasItemBeenDisplayedInMenu(struct FName& OnlineID); // Function OPP.RBLocalProfile.SetHasItemBeenDisplayedInMenu // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d96320
	bool HasVisitedNPC(enum class EMetaNPCType NPCType); // Function OPP.RBLocalProfile.HasVisitedNPC // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d95fdc
	bool HasProgramBeenSeenInMenu(struct FName& ProgramId); // Function OPP.RBLocalProfile.HasProgramBeenSeenInMenu // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d95f20
	bool HasItemBeenDisplayedInMenu(struct FName& OnlineID); // Function OPP.RBLocalProfile.HasItemBeenDisplayedInMenu // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d95e88
	struct FTrialEvaluationInfo GetLastTrialEvaluationInfo(); // Function OPP.RBLocalProfile.GetLastTrialEvaluationInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d95d30
	void ClearVisitedNPCs(); // Function OPP.RBLocalProfile.ClearVisitedNPCs // (Final|Native|Public|BlueprintCallable) // @ game+0x1d95cc0
};

// Class OPP.RBLockable
// Size: 0x28 (Inherited: 0x28)
struct URBLockable : UInterface {

	void Unlock(struct ARBPawn* Pawn); // Function OPP.RBLockable.Unlock // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d54f7c
	void OnUnlocked(); // Function OPP.RBLockable.OnUnlocked // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x16ad1bc
	void OnLocked(); // Function OPP.RBLockable.OnLocked // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x16acf98
	void Lock(); // Function OPP.RBLockable.Lock // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d96128
	bool IsLocked(); // Function OPP.RBLockable.IsLocked // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d960bc
};

// Class OPP.RBUnlockedInteractionRequirement
// Size: 0x88 (Inherited: 0x88)
struct URBUnlockedInteractionRequirement : URBInteractionRequirement {
};

// Class OPP.RBLookAtInterface
// Size: 0x28 (Inherited: 0x28)
struct URBLookAtInterface : UInterface {

	void GetLookAtLocation(struct FVector& outLookAtLocation); // Function OPP.RBLookAtInterface.GetLookAtLocation // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d95d64
};

// Class OPP.RBLP
// Size: 0x258 (Inherited: 0x258)
struct URBLP : ULocalPlayer {
};

// Class OPP.RBMainMenuPlayerController
// Size: 0x8a8 (Inherited: 0x890)
struct ARBMainMenuPlayerController : ARBMenuPlayerController {
	struct FMulticastInlineDelegate OperationStatusDelegate; // 0x890(0x10)
	char pad_8A0[0x8]; // 0x8a0(0x08)

	bool IsCrossplayEnabled(); // Function OPP.RBMainMenuPlayerController.IsCrossplayEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d9607c
	void FindTutorialServer(); // Function OPP.RBMainMenuPlayerController.FindTutorialServer // (Final|Native|Public|BlueprintCallable) // @ game+0x1d95ce8
	void FindHub(); // Function OPP.RBMainMenuPlayerController.FindHub // (Final|Native|Public|BlueprintCallable) // @ game+0x1d95cd4
};

// Class OPP.RBMatchAcceptanceNotificationUserWidget
// Size: 0x2f0 (Inherited: 0x2d0)
struct URBMatchAcceptanceNotificationUserWidget : URBNotificationUserWidget {
	char pad_2D0[0x20]; // 0x2d0(0x20)

	int32_t GetPartyMemberCount(); // Function OPP.RBMatchAcceptanceNotificationUserWidget.GetPartyMemberCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d95de8
};

// Class OPP.RBMenuBrightnessCalibration
// Size: 0x328 (Inherited: 0x308)
struct URBMenuBrightnessCalibration : URBMenuWidget {
	bool bIsHDR; // 0x308(0x01)
	char pad_309[0x7]; // 0x309(0x07)
	struct URBMenuOptionsEntry* LastHoveredEntry; // 0x310(0x08)
	struct TArray<struct URBMenuOptionsEntry*> OptionsEntries; // 0x318(0x10)

	void OnEntryHovered(struct URBMenuOptionsEntry* Entry); // Function OPP.RBMenuBrightnessCalibration.OnEntryHovered // (Final|Native|Public) // @ game+0x1d9613c
	void Event_SetToDefaults(); // Function OPP.RBMenuBrightnessCalibration.Event_SetToDefaults // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBMenuCharacter
// Size: 0x2a0 (Inherited: 0x248)
struct ARBMenuCharacter : AActor {
	bool bVisible; // 0x248(0x01)
	bool bUnknown; // 0x249(0x01)
	char pad_24A[0x6]; // 0x24a(0x06)
	struct FRBPlayerCustomizationInfo customizationInfo; // 0x250(0x38)
	enum class EActiveSkillType ActiveSkillType; // 0x288(0x01)
	enum class ESocialMenuSceneActorSlot Slot; // 0x289(0x01)
	char pad_28A[0x6]; // 0x28a(0x06)
	struct ARBPlayerState* RBPlayerState; // 0x290(0x08)
	bool bIsFailureScene; // 0x298(0x01)
	bool bWaitingForCustomizationRessources; // 0x299(0x01)
	char pad_29A[0x6]; // 0x29a(0x06)

	void SetVisible(bool bVisible); // Function OPP.RBMenuCharacter.SetVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x1d965e4
	void Setup(bool bVisible, bool bUnknown, struct FRBPlayerCustomizationInfo& customizationInfo, enum class EActiveSkillType ActiveSkillType, enum class ESocialMenuSceneActorSlot Slot, struct ARBPlayerState* RBPlayerState, bool bInIsFailureScene); // Function OPP.RBMenuCharacter.Setup // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d96664
	bool IsWaitingForRessources(); // Function OPP.RBMenuCharacter.IsWaitingForRessources // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d96110
	bool IsVisible(); // Function OPP.RBMenuCharacter.IsVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d960f8
	bool IsUnknown(); // Function OPP.RBMenuCharacter.IsUnknown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d960e0
	bool IsFailureScene(); // Function OPP.RBMenuCharacter.IsFailureScene // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d80360
	enum class ESocialMenuSceneActorSlot GetSlot(); // Function OPP.RBMenuCharacter.GetSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d95e00
	struct FRBPlayerCustomizationInfo GetCustomizationInfo(); // Function OPP.RBMenuCharacter.GetCustomizationInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d95d14
	struct ARBPlayerState* GetAssociatedPlayerState(); // Function OPP.RBMenuCharacter.GetAssociatedPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d95cfc
	enum class EActiveSkillType GetActiveSkillType(); // Function OPP.RBMenuCharacter.GetActiveSkillType // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d74c74
	void Event_RefreshPlayerCustomization(); // Function OPP.RBMenuCharacter.Event_RefreshPlayerCustomization // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_RefreshPlayerActiveSkill(); // Function OPP.RBMenuCharacter.Event_RefreshPlayerActiveSkill // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnVisibleChanged(); // Function OPP.RBMenuCharacter.Event_OnVisibleChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnSetup(); // Function OPP.RBMenuCharacter.Event_OnSetup // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBMenuControlBinding
// Size: 0x340 (Inherited: 0x308)
struct URBMenuControlBinding : URBMenuWidget {
	struct URBMenuControlBindingEntry* EntryClass; // 0x308(0x08)
	struct UScrollBox* BindingsList; // 0x310(0x08)
	struct TArray<struct URBMenuControlBindingEntry*> BindingEntries; // 0x318(0x10)
	char pad_328[0x18]; // 0x328(0x18)

	void SetToDefaults(); // Function OPP.RBMenuControlBinding.SetToDefaults // (Final|Native|Public|BlueprintCallable) // @ game+0x1d965d0
	void OnInputKey(struct FKey Key, enum class EInputEvent EventType, bool bGamepad); // Function OPP.RBMenuControlBinding.OnInputKey // (Final|Native|Public) // @ game+0x1d961bc
	void InitBindingEntries(); // Function OPP.RBMenuControlBinding.InitBindingEntries // (Final|Native|Public|BlueprintCallable) // @ game+0x1d96068
	bool HasAnyUnsavedChanges(); // Function OPP.RBMenuControlBinding.HasAnyUnsavedChanges // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d95e18
	void Event_UpdateRebindStatus(bool isRebindInProgress); // Function OPP.RBMenuControlBinding.Event_UpdateRebindStatus // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnBindingCaptureEnded(); // Function OPP.RBMenuControlBinding.Event_OnBindingCaptureEnded // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void CaptureNewBinding(struct URBMenuControlBindingEntry* Entry); // Function OPP.RBMenuControlBinding.CaptureNewBinding // (Final|Native|Public) // @ game+0x1d95c2c
	void ApplyChanges(); // Function OPP.RBMenuControlBinding.ApplyChanges // (Final|Native|Public|BlueprintCallable) // @ game+0x1d95934
};

// Class OPP.RBMenuControlBindingEntry
// Size: 0x2b8 (Inherited: 0x268)
struct URBMenuControlBindingEntry : URBUserWidget {
	struct FText DisplayName; // 0x268(0x18)
	struct FName ActionName; // 0x280(0x08)
	float AxisScale; // 0x288(0x04)
	char pad_28C[0x4]; // 0x28c(0x04)
	struct FKey KeyCandidate; // 0x290(0x18)
	struct FMulticastInlineDelegate OnBindingClicked; // 0x2a8(0x10)

	void UpdateRebindStatus(bool bIsRebindInProgress); // Function OPP.RBMenuControlBindingEntry.UpdateRebindStatus // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void RevertCurrentChange(); // Function OPP.RBMenuControlBindingEntry.RevertCurrentChange // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9630c
	void RefreshValue(); // Function OPP.RBMenuControlBindingEntry.RefreshValue // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	bool HasValueChanged(); // Function OPP.RBMenuControlBindingEntry.HasValueChanged // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d95fb8
};

// Class OPP.RBMenuManager
// Size: 0x238 (Inherited: 0x28)
struct URBMenuManager : UObject {
	struct FMulticastInlineDelegate OnMenuInputSourceChanged; // 0x28(0x10)
	char pad_38[0x18]; // 0x38(0x18)
	struct FMulticastInlineDelegate OnMenuEnterDelegate; // 0x50(0x10)
	char pad_60[0x18]; // 0x60(0x18)
	struct FMulticastInlineDelegate OnMenuExitDelegate; // 0x78(0x10)
	char pad_88[0x60]; // 0x88(0x60)
	struct FMulticastInlineDelegate OnUpdateNewStatus; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnInputBindingsUpdated; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnMenuFocusActionSet; // 0x108(0x10)
	struct FMulticastInlineDelegate OnMenuFocusActionCleared; // 0x118(0x10)
	struct FMulticastInlineDelegate OnLoadoutItemHovered; // 0x128(0x10)
	struct FMulticastInlineDelegate OnLoadoutItemUnhovered; // 0x138(0x10)
	struct FMulticastInlineDelegate OnCurrentSubtitleUpdated; // 0x148(0x10)
	struct FMulticastInlineDelegate OnSubtitleUserConfigChangedEvent; // 0x158(0x10)
	bool bIsUsingGamepad; // 0x168(0x01)
	char pad_169[0x7]; // 0x169(0x07)
	struct TArray<struct FSubtitleData> SubtitleQueue; // 0x170(0x10)
	char pad_180[0x18]; // 0x180(0x18)
	struct TArray<struct URBMenuWidget*> MenuPages; // 0x198(0x10)
	struct TArray<struct URBMenuWidget*> ErrorMenuPages; // 0x1a8(0x10)
	struct URBLoadingScreenWidget* LoadingScreenWidget; // 0x1b8(0x08)
	struct URBPlayerGameSessionTransitionWidget* PlayerGameSessionTransitionWidget; // 0x1c0(0x08)
	struct URBMenuTransition* MainMenuTransitionWidget; // 0x1c8(0x08)
	struct URBTextChatWidget* TextChatWidget; // 0x1d0(0x08)
	struct URBUserWidget* SubtitleOverlayWidget; // 0x1d8(0x08)
	struct URBUserWidget* NDAOverlayWidget; // 0x1e0(0x08)
	struct URBGameInstance* GameInstance; // 0x1e8(0x08)
	struct TArray<struct URBMenuWidget*> PagesToPushAfterTransition; // 0x1f0(0x10)
	char pad_200[0x8]; // 0x200(0x08)
	struct TArray<struct URBMenuWidget*> PagesToPopAfterTransition; // 0x208(0x10)
	char pad_218[0x10]; // 0x218(0x10)
	struct TArray<struct URBNotificationUserWidget*> Notifications; // 0x228(0x10)

	void ClearTransitionStack(); // Function OPP.RBMenuManager.ClearTransitionStack // (Final|Native|Public|BlueprintCallable) // @ game+0x1d95cac
	void BP_ShowError(struct FText& Message, struct FText& SecondaryMessage, struct FString ErrorCode); // Function OPP.RBMenuManager.BP_ShowError // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d95ad8
	void BP_PushMenuPage(struct URBMenuWidget* Widget); // Function OPP.RBMenuManager.BP_PushMenuPage // (Final|Native|Public|BlueprintCallable) // @ game+0x1d95a58
	void BP_PopMenuPage(struct URBMenuWidget* Widget); // Function OPP.RBMenuManager.BP_PopMenuPage // (Final|Native|Public|BlueprintCallable) // @ game+0x1d95a58
	void BP_OnMenuTutorialSeen(); // Function OPP.RBMenuManager.BP_OnMenuTutorialSeen // (Final|Native|Public|BlueprintCallable) // @ game+0x1d95a3c
	bool BP_IsUsingGamepad(); // Function OPP.RBMenuManager.BP_IsUsingGamepad // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d95a24
	bool BP_IsInMenu(); // Function OPP.RBMenuManager.BP_IsInMenu // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d95a04
	struct URBMenuWidget* BP_GetMenuPage(struct URBMenuWidget*& MenuClass); // Function OPP.RBMenuManager.BP_GetMenuPage // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d9596c
	struct URBMenuWidget* BP_GetCurrentPage(); // Function OPP.RBMenuManager.BP_GetCurrentPage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d95948
};

// Class OPP.RBMenuWithTabsWidget
// Size: 0x348 (Inherited: 0x308)
struct URBMenuWithTabsWidget : URBMenuWidget {
	int32_t SelectedTabIndex; // 0x308(0x04)
	char pad_30C[0x4]; // 0x30c(0x04)
	struct TArray<struct URBMenuTabButton*> TabButtons; // 0x310(0x10)
	struct UWidgetSwitcher* TabSwitcher; // 0x320(0x08)
	struct FMulticastInlineDelegate OnMenuTabChangedCallback; // 0x328(0x10)
	int32_t TabIndexToSelect; // 0x338(0x04)
	bool bNeedsTransitionAnimation; // 0x33c(0x01)
	bool bAutoTabTransition; // 0x33d(0x01)
	char pad_33E[0xa]; // 0x33e(0x0a)

	void TryChangeTab(int32_t Index); // Function OPP.RBMenuWithTabsWidget.TryChangeTab // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9e548
	void TransitionDone(); // Function OPP.RBMenuWithTabsWidget.TransitionDone // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9e4f4
	void RequestNavigationBack(); // Function OPP.RBMenuWithTabsWidget.RequestNavigationBack // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9e400
	void PreviousTab(); // Function OPP.RBMenuWithTabsWidget.PreviousTab // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9e3ec
	bool PreNavigationChangeAction(); // Function OPP.RBMenuWithTabsWidget.PreNavigationChangeAction // (Native|Event|Public|BlueprintEvent) // @ game+0x16c9874
	void OnTabNavigationChanged(bool CanExitMenu); // Function OPP.RBMenuWithTabsWidget.OnTabNavigationChanged // (Final|Native|Private) // @ game+0x1d9e36c
	void OnTabButtonClicked(struct URBMenuTabButton* Button); // Function OPP.RBMenuWithTabsWidget.OnTabButtonClicked // (Final|Native|Public) // @ game+0x1d9e2ec
	void OnMenuCancelPressed(); // Function OPP.RBMenuWithTabsWidget.OnMenuCancelPressed // (Final|Native|Private) // @ game+0x1d80538
	void NextTab(); // Function OPP.RBMenuWithTabsWidget.NextTab // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9dd54
	struct URBMenuTabButton* GetSelectedTabButton(); // Function OPP.RBMenuWithTabsWidget.GetSelectedTabButton // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d9dc94
	void Event_UpdateNavigation(bool CanExitMenu); // Function OPP.RBMenuWithTabsWidget.Event_UpdateNavigation // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_StartTransitionOut(); // Function OPP.RBMenuWithTabsWidget.Event_StartTransitionOut // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_StartTransitionIn(); // Function OPP.RBMenuWithTabsWidget.Event_StartTransitionIn // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnMenuTabSwitched(int32_t previousIndex); // Function OPP.RBMenuWithTabsWidget.Event_OnMenuTabSwitched // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	bool CanExitMenu(); // Function OPP.RBMenuWithTabsWidget.CanExitMenu // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d9dbb4
	void BP_SetSelectedTabFromButton(struct URBMenuTabButton* Button); // Function OPP.RBMenuWithTabsWidget.BP_SetSelectedTabFromButton // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9da68
	void BP_SetSelectedTab(int32_t Index); // Function OPP.RBMenuWithTabsWidget.BP_SetSelectedTab // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d9e8
	void BP_Initialize(struct TArray<struct URBMenuTabButton*>& inTabButtons, struct UWidgetSwitcher* inTabSwitcher); // Function OPP.RBMenuWithTabsWidget.BP_Initialize // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d9d470
};

// Class OPP.RBMenuOptions
// Size: 0x368 (Inherited: 0x348)
struct URBMenuOptions : URBMenuWithTabsWidget {
	struct URBOptionsData* OptionsData; // 0x348(0x08)
	char pad_350[0x18]; // 0x350(0x18)

	void OnFullscreenOrDesktopSettingsChanged(); // Function OPP.RBMenuOptions.OnFullscreenOrDesktopSettingsChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_RefreshAllEntries(); // Function OPP.RBMenuOptions.Event_RefreshAllEntries // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBMenuOptionsDescription
// Size: 0x268 (Inherited: 0x268)
struct URBMenuOptionsDescription : URBUserWidget {

	void UpdateDescription(struct FOptionData OptionData); // Function OPP.RBMenuOptionsDescription.UpdateDescription // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBMenuOptionsEntry
// Size: 0x318 (Inherited: 0x268)
struct URBMenuOptionsEntry : URBUserWidget {
	enum class EOptionsMenuOption OptionType; // 0x268(0x01)
	char pad_269[0x7]; // 0x269(0x07)
	struct FString OptionKey; // 0x270(0x10)
	bool bIsGamepadOption; // 0x280(0x01)
	bool bValueChanged; // 0x281(0x01)
	bool bUpdateSlider; // 0x282(0x01)
	bool bForceHide; // 0x283(0x01)
	bool bForceDisable; // 0x284(0x01)
	char pad_285[0x3]; // 0x285(0x03)
	struct URBOptionsData* OptionsData; // 0x288(0x08)
	struct FMulticastInlineDelegate OnOptionValueChanged; // 0x290(0x10)
	struct FMulticastInlineDelegate OnSubButtonClicked; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnEntryHovered; // 0x2b0(0x10)
	struct FMulticastInlineDelegate OnQualityValueUpdated; // 0x2c0(0x10)
	struct FMulticastInlineDelegate OnHUDPresetChanged; // 0x2d0(0x10)
	struct FMulticastInlineDelegate OnVoiceChatSettingsUpdated; // 0x2e0(0x10)
	bool BoolCandidate; // 0x2f0(0x01)
	char pad_2F1[0x3]; // 0x2f1(0x03)
	int32_t IntegerCandidate; // 0x2f4(0x04)
	float FloatCandidate; // 0x2f8(0x04)
	struct FIntPoint IntPointCandidate; // 0x2fc(0x08)
	char pad_304[0x4]; // 0x304(0x04)
	struct FString StringCandidate; // 0x308(0x10)

	void UpdateValueChanged(); // Function OPP.RBMenuOptionsEntry.UpdateValueChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9a998
	void SetEntryToDefaults(bool bIsTabReset); // Function OPP.RBMenuOptionsEntry.SetEntryToDefaults // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9a77c
	void RevertCurrentChange(); // Function OPP.RBMenuOptionsEntry.RevertCurrentChange // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9a040
	void RefreshValue(bool forceUpdateSlider); // Function OPP.RBMenuOptionsEntry.RefreshValue // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d99e10
	void OnWindowModeChanged(struct URBMenuOptionsEntry* Entry); // Function OPP.RBMenuOptionsEntry.OnWindowModeChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99d30
	void OnResolutionChanged(struct URBMenuOptionsEntry* Entry); // Function OPP.RBMenuOptionsEntry.OnResolutionChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99d30
	bool IsSubButton(); // Function OPP.RBMenuOptionsEntry.IsSubButton // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d99710
	bool IsSliderNormalised(); // Function OPP.RBMenuOptionsEntry.IsSliderNormalised // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d996f0
	bool IsSlider(); // Function OPP.RBMenuOptionsEntry.IsSlider // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d996d0
	void HighlightEntry(); // Function OPP.RBMenuOptionsEntry.HighlightEntry // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	float GetSliderMin(); // Function OPP.RBMenuOptionsEntry.GetSliderMin // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d9960c
	float GetSliderMax(); // Function OPP.RBMenuOptionsEntry.GetSliderMax // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d995e4
	void Event_UpdateTitle(struct FText& newTitle); // Function OPP.RBMenuOptionsEntry.Event_UpdateTitle // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void Event_UpdateTextValue(struct FText& NewValue); // Function OPP.RBMenuOptionsEntry.Event_UpdateTextValue // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void Event_UpdateSubButtonText(struct FText& NewValue); // Function OPP.RBMenuOptionsEntry.Event_UpdateSubButtonText // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void Event_UpdateSliderValue(int32_t Value); // Function OPP.RBMenuOptionsEntry.Event_UpdateSliderValue // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void Event_RefreshEntry(); // Function OPP.RBMenuOptionsEntry.Event_RefreshEntry // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void DownplayEntry(); // Function OPP.RBMenuOptionsEntry.DownplayEntry // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
	void ChangeOptionValue(float Value, bool leftClicked); // Function OPP.RBMenuOptionsEntry.ChangeOptionValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1d990dc
	bool CanBeEdited(); // Function OPP.RBMenuOptionsEntry.CanBeEdited // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d990b8
	bool CanBeDisplayed(); // Function OPP.RBMenuOptionsEntry.CanBeDisplayed // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d99094
};

// Class OPP.RBMenuOptionsTab
// Size: 0x2f0 (Inherited: 0x280)
struct URBMenuOptionsTab : URBMenuTabWidget {
	struct UScrollBox* OptionsList; // 0x280(0x08)
	struct UButton* GlobalHoveringDetection; // 0x288(0x08)
	struct URBMenuOptionsDescription* Description; // 0x290(0x08)
	struct TArray<struct URBMenuOptionsEntry*> OptionsEntries; // 0x298(0x10)
	struct URBMenuOptionsEntry* LastHoveredEntry; // 0x2a8(0x08)
	struct FRBOptionTabData OptionsTabData; // 0x2b0(0x30)
	struct URBMenuOptionsEntry* EntryClass; // 0x2e0(0x08)
	char pad_2E8[0x8]; // 0x2e8(0x08)

	void SetToDefaults(); // Function OPP.RBMenuOptionsTab.SetToDefaults // (Native|Public|BlueprintCallable) // @ game+0x1d9a980
	void RunHardwareBenchmark(); // Function OPP.RBMenuOptionsTab.RunHardwareBenchmark // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9a068
	void RevertResolution(); // Function OPP.RBMenuOptionsTab.RevertResolution // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9a054
	void RevertAllUnsavedChanges(); // Function OPP.RBMenuOptionsTab.RevertAllUnsavedChanges // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9a02c
	void OnVoiceChatSettingsUpdated(); // Function OPP.RBMenuOptionsTab.OnVoiceChatSettingsUpdated // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99dd8
	void OnTabUnhovered(); // Function OPP.RBMenuOptionsTab.OnTabUnhovered // (Final|Native|Public) // @ game+0x1d99dc4
	void OnSubButtonClicked(struct URBMenuOptionsEntry* Entry); // Function OPP.RBMenuOptionsTab.OnSubButtonClicked // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void OnQualityValueUpdated(bool bIsPreset, int32_t NewValue); // Function OPP.RBMenuOptionsTab.OnQualityValueUpdated // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99c6c
	void OnOptionValueChanged(struct URBMenuOptionsEntry* Entry); // Function OPP.RBMenuOptionsTab.OnOptionValueChanged // (Final|Native|Public) // @ game+0x1d99a28
	struct URBMenuOptionsEntry* OnlineCreateRegionsEntries(); // Function OPP.RBMenuOptionsTab.OnlineCreateRegionsEntries // (Final|Native|Private|BlueprintCallable) // @ game+0x1d99dec
	void OnHUDPresetChanged(bool bIsPreset, int32_t NewValue); // Function OPP.RBMenuOptionsTab.OnHUDPresetChanged // (Final|Native|Public) // @ game+0x1d99950
	void OnEntryHovered(struct URBMenuOptionsEntry* Entry); // Function OPP.RBMenuOptionsTab.OnEntryHovered // (Final|Native|Public) // @ game+0x1d99854
	void OnEntriesSet(); // Function OPP.RBMenuOptionsTab.OnEntriesSet // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99840
	bool HasUnsavedChanges(); // Function OPP.RBMenuOptionsTab.HasUnsavedChanges // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99634
	void GetChangedOptions(struct TArray<struct FString>& optionsNames); // Function OPP.RBMenuOptionsTab.GetChangedOptions // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d99528
	void Event_ResolutionChanged(); // Function OPP.RBMenuOptionsTab.Event_ResolutionChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_AddRegionEntry(struct URBMenuOptionsEntry* Entry); // Function OPP.RBMenuOptionsTab.Event_AddRegionEntry // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void ConfirmResolution(); // Function OPP.RBMenuOptionsTab.ConfirmResolution // (Final|Native|Public|BlueprintCallable) // @ game+0x1d994d0
	void ApplyEntriesChanges(); // Function OPP.RBMenuOptionsTab.ApplyEntriesChanges // (Native|Public|BlueprintCallable) // @ game+0x1d80538
};

// Class OPP.RBMenuTransition
// Size: 0x298 (Inherited: 0x268)
struct URBMenuTransition : URBUserWidget {
	char pad_268[0x30]; // 0x268(0x30)

	void Event_TransitionOut(); // Function OPP.RBMenuTransition.Event_TransitionOut // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_TransitionIn(); // Function OPP.RBMenuTransition.Event_TransitionIn // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_TransitionOutDone(); // Function OPP.RBMenuTransition.BP_TransitionOutDone // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99078
	void BP_TransitionInDone(); // Function OPP.RBMenuTransition.BP_TransitionInDone // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9905c
};

// Class OPP.RBMenuTabButton
// Size: 0x288 (Inherited: 0x268)
struct URBMenuTabButton : URBUserWidget {
	struct UAkAudioEvent* TabOpenedSoundOverride; // 0x268(0x08)
	char bOverride_TabOpenedSound : 1; // 0x270(0x01)
	char pad_270_1 : 7; // 0x270(0x01)
	bool bDisabled; // 0x271(0x01)
	bool bSelected; // 0x272(0x01)
	char pad_273[0x5]; // 0x273(0x05)
	struct FMulticastInlineDelegate OnTabButtonClicked; // 0x278(0x10)

	void SetSelected(bool bInSelected); // Function OPP.RBMenuTabButton.SetSelected // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9e414
	void Event_OnSelectedChanged(); // Function OPP.RBMenuTabButton.Event_OnSelectedChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_ClickButton(); // Function OPP.RBMenuTabButton.BP_ClickButton // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d3e8
};

// Class OPP.RBMicrofilmPanelComponent
// Size: 0x7b0 (Inherited: 0x7a0)
struct URBMicrofilmPanelComponent : URBInteractiblePanelComponent {
	char pad_7A0[0x8]; // 0x7a0(0x08)
	int32_t currentIndex; // 0x7a8(0x04)
	char pad_7AC[0x4]; // 0x7ac(0x04)
};

// Class OPP.RBMicTestOptionsEntryWidget
// Size: 0x318 (Inherited: 0x318)
struct URBMicTestOptionsEntryWidget : URBMenuOptionsEntry {

	void ToggleMicrophoneTest(); // Function OPP.RBMicTestOptionsEntryWidget.ToggleMicrophoneTest // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9e4c0
	void StopMicrophoneTest(); // Function OPP.RBMicTestOptionsEntryWidget.StopMicrophoneTest // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9e494
	void OnEchoChannelStateChanged(); // Function OPP.RBMicTestOptionsEntryWidget.OnEchoChannelStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	float GetMicrophoneVolume(); // Function OPP.RBMicTestOptionsEntryWidget.GetMicrophoneVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d9dc58
	enum class ERBMicrophoneTestState GetMicrophoneTestState(); // Function OPP.RBMicTestOptionsEntryWidget.GetMicrophoneTestState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d9dc10
};

// Class OPP.RBRoomComponent
// Size: 0xb8 (Inherited: 0xb8)
struct URBRoomComponent : UActorComponent {
};

// Class OPP.RBMinigameRoomComponent
// Size: 0x3b8 (Inherited: 0xb8)
struct URBMinigameRoomComponent : URBRoomComponent {
	char pad_B8[0x18]; // 0xb8(0x18)
	struct FConfigurableBool ForceUseIfAllowed; // 0xd0(0x60)
	struct FConfigurableBool AllowedByDifficulty; // 0x130(0x60)
	struct TArray<struct TSoftObjectPtr<ARBOperatable>> LinkedMinigameOperatables; // 0x190(0x10)
	struct TSoftObjectPtr<ARBContainer> LinkedPrizeSpawner; // 0x1a0(0x28)
	struct TSoftObjectPtr<AActor> LinkedSpeaker; // 0x1c8(0x28)
	struct TSoftObjectPtr<AActor> LinkedCounter; // 0x1f0(0x28)
	struct TArray<struct TSoftObjectPtr<ARBTriggerable>> MinigameDeactivatedTriggerables; // 0x218(0x10)
	struct TArray<struct TSoftObjectPtr<ARBTriggerable>> MinigameActiveTriggerables; // 0x228(0x10)
	struct TArray<struct TSoftObjectPtr<ARBTriggerable>> MinigamePrizeAvailableTriggerables; // 0x238(0x10)
	struct TArray<struct TSoftObjectPtr<ARBTriggerable>> MinigameCompletedTriggerables; // 0x248(0x10)
	struct TArray<struct TSoftObjectPtr<AActor>> MinigameExternalMovables; // 0x258(0x10)
	struct TSoftObjectPtr<AActor> TutorialZone; // 0x268(0x28)
	struct FConfigurableInt ScoreToAchieve; // 0x290(0xc8)
	bool bStopToSlowExternals; // 0x358(0x01)
	char pad_359[0x7]; // 0x359(0x07)
	struct FText MinigameName; // 0x360(0x18)
	bool bScheduled; // 0x378(0x01)
	char pad_379[0x3]; // 0x379(0x03)
	int32_t MinigameScore; // 0x37c(0x04)
	struct ARBPickup* PrizeItemClass; // 0x380(0x08)
	enum class EMinigameState MinigameState; // 0x388(0x01)
	char pad_389[0x7]; // 0x389(0x07)
	struct ARBMinigameRoomsObjectiveCoordinator* AssociatedCoordinator; // 0x390(0x08)
	struct FMulticastInlineDelegate OnMinigameScoreChanged; // 0x398(0x10)
	struct FMulticastInlineDelegate OnMinigameStateChanged; // 0x3a8(0x10)

	void OnRep_Scheduled(); // Function OPP.RBMinigameRoomComponent.OnRep_Scheduled // (Final|Native|Public) // @ game+0x1d9e2b0
	void OnRep_MinigameState(); // Function OPP.RBMinigameRoomComponent.OnRep_MinigameState // (Final|Native|Public) // @ game+0x1d9e21c
	void OnRep_MinigameScore(); // Function OPP.RBMinigameRoomComponent.OnRep_MinigameScore // (Final|Native|Public) // @ game+0x1d9e208
	void OnOperatableStateChanged_Server(bool bIsOn, struct ARBOperatable* operatable); // Function OPP.RBMinigameRoomComponent.OnOperatableStateChanged_Server // (Final|Native|Public) // @ game+0x1d9e084
	void OnMinigameScoreScoreChanged(); // Function OPP.RBMinigameRoomComponent.OnMinigameScoreScoreChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void OnDoorFullyUnlocked_Server(struct ARBDoor* door); // Function OPP.RBMinigameRoomComponent.OnDoorFullyUnlocked_Server // (Final|Native|Public) // @ game+0x1d9dd68
};

// Class OPP.RBMinigameRoomsObjectiveCoordinator
// Size: 0x3b90 (Inherited: 0x3030)
struct ARBMinigameRoomsObjectiveCoordinator : ARBUseQuestItemsObjectiveCoordinator {
	struct ARBPickup* PrizeItemClass; // 0x3030(0x08)
	struct TSoftObjectPtr<AActor> PrizeReceiver; // 0x3038(0x28)
	struct TArray<struct FMinigameSectionConfig> RoomSections; // 0x3060(0x10)
	struct ARBContainer* ThrowableContainerClass; // 0x3070(0x08)
	struct TArray<struct TSoftObjectPtr<ARBContainer>> ThrowableContainerActors; // 0x3078(0x10)
	struct ARBDoor* MinigameRoomDoorReplacement; // 0x3088(0x08)
	float BoothDoorOpeningSpeedRatio; // 0x3090(0x04)
	float MovableSlowDownDurationWhenStopped; // 0x3094(0x04)
	bool bShowContainerIcons; // 0x3098(0x01)
	char pad_3099[0x7]; // 0x3099(0x07)
	struct FText WinObjectiveText; // 0x30a0(0x18)
	struct FText CollectObjectiveText; // 0x30b8(0x18)
	struct FText BringObjectiveText; // 0x30d0(0x18)
	struct UAkAudioEvent* ActiveMinigameRoomAudioLoop; // 0x30e8(0x08)
	struct UAkAudioEvent* ActiveMinigameRoomAudioLoopStop; // 0x30f0(0x08)
	struct UAkAudioEvent* TicketAvailableMinigameRoomAudioEvent; // 0x30f8(0x08)
	struct UAkAudioEvent* TicketAvailableMinigameRoomAudioLoop; // 0x3100(0x08)
	struct UAkAudioEvent* TicketAvailableMinigameRoomAudioLoopStop; // 0x3108(0x08)
	struct FObjectiveUISettings BoothUISettings; // 0x3110(0xa50)
	struct TArray<struct URBMinigameRoomComponent*> CompletedMinigameRooms; // 0x3b60(0x10)
	struct TArray<struct ARBContainer*> Containers; // 0x3b70(0x10)
	struct ARBPlayer* Client_LastLocalPlayer; // 0x3b80(0x08)
	char pad_3B88[0x8]; // 0x3b88(0x08)

	void OnRep_CompletedMinigameRooms(); // Function OPP.RBMinigameRoomsObjectiveCoordinator.OnRep_CompletedMinigameRooms // (Final|Native|Protected) // @ game+0x1d9e15c
	void OnNumberOfItemUsedChanged(struct URBInteractiblePanelComponent* panel, struct ARBPawn* Pawn); // Function OPP.RBMinigameRoomsObjectiveCoordinator.OnNumberOfItemUsedChanged // (Final|Native|Protected) // @ game+0x1d9df80
	void OnMinigameRoomStateChanged(struct URBMinigameRoomComponent* minigameRoom); // Function OPP.RBMinigameRoomsObjectiveCoordinator.OnMinigameRoomStateChanged // (Final|Native|Protected) // @ game+0x1d9de3c
};

// Class OPP.RBProjectile
// Size: 0x2e0 (Inherited: 0x248)
struct ARBProjectile : AActor {
	struct USceneComponent* MeshHolder; // 0x248(0x08)
	struct UStaticMeshComponent* ProjectileMesh; // 0x250(0x08)
	struct UParticleSystemComponent* Trail; // 0x258(0x08)
	struct UParticleSystem* ImpactParticleSystem; // 0x260(0x08)
	struct UParticleSystem* PawnImpactParticleSystem; // 0x268(0x08)
	struct UAkAudioEvent* ImpactAudioEvent; // 0x270(0x08)
	struct UAkAudioEvent* PawnImpactAudioEvent; // 0x278(0x08)
	struct ARBPawn* thrower; // 0x280(0x08)
	struct FProjectileSettings ProjectileSettings; // 0x288(0x0c)
	bool bLaunched; // 0x294(0x01)
	char pad_295[0x3]; // 0x295(0x03)
	float LaunchTime; // 0x298(0x04)
	struct FVector StartPosition; // 0x29c(0x0c)
	struct FRotator StartRotation; // 0x2a8(0x0c)
	struct FVector targetPosition; // 0x2b4(0x0c)
	struct FVector InitialVel; // 0x2c0(0x0c)
	char pad_2CC[0x4]; // 0x2cc(0x04)
	struct TArray<struct AActor*> HitIgnoreActors; // 0x2d0(0x10)

	void OnRep_Launched(); // Function OPP.RBProjectile.OnRep_Launched // (Final|Native|Protected) // @ game+0x1de78a8
	void DelayedDestroy(); // Function OPP.RBProjectile.DelayedDestroy // (Final|Native|Protected) // @ game+0x1de73b4
};

// Class OPP.RBMolotovProjectile
// Size: 0x310 (Inherited: 0x2e0)
struct ARBMolotovProjectile : ARBProjectile {
	float FirePointInterval; // 0x2e0(0x04)
	struct FVector FireCenter; // 0x2e4(0x0c)
	struct TArray<struct FVector> FirePoints; // 0x2f0(0x10)
	float FireStartedTimestamp; // 0x300(0x04)
	char pad_304[0x4]; // 0x304(0x04)
	struct URBRadialNavAreaComponent* NavModifierComp; // 0x308(0x08)

	void OnRep_FireStartedTimestamp(float OldValue); // Function OPP.RBMolotovProjectile.OnRep_FireStartedTimestamp // (Final|Native|Public) // @ game+0x1d9e184
	void Event_OnFireStarted(); // Function OPP.RBMolotovProjectile.Event_OnFireStarted // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnFireFinished(); // Function OPP.RBMolotovProjectile.Event_OnFireFinished // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBMonsterClosetReplaceClass
// Size: 0x28 (Inherited: 0x28)
struct URBMonsterClosetReplaceClass : UInterface {

	void OnMonsterClosetReplaced_Server(struct ARBMonsterCloset* MonsterCloset, struct AActor* replacementSource); // Function OPP.RBMonsterClosetReplaceClass.OnMonsterClosetReplaced_Server // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d9debc
};

// Class OPP.RBMonsterCloset
// Size: 0x388 (Inherited: 0x248)
struct ARBMonsterCloset : AActor {
	char pad_248[0x20]; // 0x248(0x20)
	bool bStartsEnabled; // 0x268(0x01)
	bool bCanSpawnNPCs; // 0x269(0x01)
	bool bCanUnspawnNPCs; // 0x26a(0x01)
	bool bCanSpawnPlayers; // 0x26b(0x01)
	bool bCustomBotExitNavigation; // 0x26c(0x01)
	char pad_26D[0x3]; // 0x26d(0x03)
	struct FGameplayTagContainer EnableOnlyForNPCTags; // 0x270(0x20)
	struct FGameplayTagContainer DisableForNPCTags; // 0x290(0x20)
	float NPCInsideSpawnDistance; // 0x2b0(0x04)
	float NPCInsideUnspawnDistance; // 0x2b4(0x04)
	float NPCOutsideUnspawnDestination; // 0x2b8(0x04)
	float StandardSpawningWarningDuration; // 0x2bc(0x04)
	float CloseDoorsDelay; // 0x2c0(0x04)
	char pad_2C4[0x4]; // 0x2c4(0x04)
	struct UAkAudioEvent* SpawnWarningSound; // 0x2c8(0x08)
	float SpawnWarningRepeatInterval; // 0x2d0(0x04)
	char pad_2D4[0x4]; // 0x2d4(0x04)
	struct URBRepulsionComponent* repulsionComponent; // 0x2d8(0x08)
	struct URBPositionComponent* PlayerSpawnPositionRef; // 0x2e0(0x08)
	struct URBSoundComponent* SoundComponent; // 0x2e8(0x08)
	struct UBoxComponent* ClosetSpawningZone; // 0x2f0(0x08)
	struct URBRoomAssociationComponent* AssociatedRoomComponent; // 0x2f8(0x08)
	struct URBNavLinkComponent* NavLinkComp; // 0x300(0x08)
	bool bCurrentlyEnabled; // 0x308(0x01)
	bool bShouldBeOpen; // 0x309(0x01)
	bool bSpawnWarningInProgress; // 0x30a(0x01)
	char pad_30B[0x5]; // 0x30b(0x05)
	struct ARBPlayer* PlayerInCloset; // 0x310(0x08)
	struct TArray<struct ARBNPC*> OpenReservations; // 0x318(0x10)
	char pad_328[0x8]; // 0x328(0x08)
	struct TArray<struct UObject*> DisabledBy; // 0x330(0x10)
	struct ARBController* PlayerRespawning; // 0x340(0x08)
	struct ARBRoom* AssociatedRoom; // 0x348(0x08)
	bool bForcedPlayerRespawnPoint; // 0x350(0x01)
	char pad_351[0x7]; // 0x351(0x07)
	bool bDynamicallyReplaced; // 0x358(0x01)
	char pad_359[0x7]; // 0x359(0x07)
	struct AActor* DynamicReplacementActor; // 0x360(0x08)
	char pad_368[0x20]; // 0x368(0x20)

	void OnRep_ShouldBeOpen(); // Function OPP.RBMonsterCloset.OnRep_ShouldBeOpen // (Final|Native|Public) // @ game+0x1d9e2c4
	void OnRep_PlayerInCloset(struct ARBPlayer* OldValue); // Function OPP.RBMonsterCloset.OnRep_PlayerInCloset // (Final|Native|Public) // @ game+0x1d9e230
	void OnRep_DynamicallyReplaced(); // Function OPP.RBMonsterCloset.OnRep_DynamicallyReplaced // (Final|Native|Protected) // @ game+0x1d9e170
	void OnRep_bSpawnWarningInProgress(); // Function OPP.RBMonsterCloset.OnRep_bSpawnWarningInProgress // (Final|Native|Public) // @ game+0x1d9e2d8
	void OnPlayerRespawnTransitionFinished(); // Function OPP.RBMonsterCloset.OnPlayerRespawnTransitionFinished // (Final|Native|Protected) // @ game+0x1d9e148
	void Multicast_TriggerNPCSpawnAnnouncement(enum class ENPCType NPCType); // Function OPP.RBMonsterCloset.Multicast_TriggerNPCSpawnAnnouncement // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d9dcd0
	void Event_TriggerNPCSpawnAnnouncement(enum class ENPCType NPCType); // Function OPP.RBMonsterCloset.Event_TriggerNPCSpawnAnnouncement // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_SetNPCSpawnWarningActive(bool bWarningActive); // Function OPP.RBMonsterCloset.Event_SetNPCSpawnWarningActive // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnPlayerInClosetChanged(struct ARBPlayer* oldPlayer); // Function OPP.RBMonsterCloset.Event_OnPlayerInClosetChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnNPCExit(struct ARBNPC* NPC); // Function OPP.RBMonsterCloset.Event_OnNPCExit // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnNPCEnter(struct ARBNPC* NPC); // Function OPP.RBMonsterCloset.Event_OnNPCEnter // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_ApplyOpenState(bool bOpen); // Function OPP.RBMonsterCloset.Event_ApplyOpenState // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	bool BP_Tick(float DeltaTime); // Function OPP.RBMonsterCloset.BP_Tick // (Native|Event|Public|BlueprintEvent) // @ game+0x1d9db18
	void BP_SetCurrentlyEnabled(bool bIsEnabled); // Function OPP.RBMonsterCloset.BP_SetCurrentlyEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d9d8c4
	void BP_FinishedOpening(); // Function OPP.RBMonsterCloset.BP_FinishedOpening // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d434
	void BP_FinishedClosing(); // Function OPP.RBMonsterCloset.BP_FinishedClosing // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d414
};

// Class OPP.RBMovementComponent
// Size: 0xef0 (Inherited: 0xd80)
struct URBMovementComponent : UCharacterMovementComponent {
	float LargeSlopeZ; // 0xd80(0x04)
	float FallingWalkableRadius; // 0xd84(0x04)
	float PositionAdjustmentDistanceThresholdSquared; // 0xd88(0x04)
	float NotCombiningDurationForWarning; // 0xd8c(0x04)
	float NetRotationYawErrorThreshold; // 0xd90(0x04)
	char pad_D94[0x4]; // 0xd94(0x04)
	struct ARBPawn* RBPawn; // 0xd98(0x08)
	struct ARBPlayer* RBPlayer; // 0xda0(0x08)
	struct ARBNPC* NPC; // 0xda8(0x08)
	struct FAdjustPositionData AdjustPosition; // 0xdb0(0xa4)
	char pad_E54[0x7c]; // 0xe54(0x7c)
	struct TArray<struct FHitResult> PhysHitResults; // 0xed0(0x10)
	char pad_EE0[0x10]; // 0xee0(0x10)
};

// Class OPP.RBMovieSubtitles
// Size: 0x38 (Inherited: 0x28)
struct URBMovieSubtitles : UObject {
	struct TArray<struct FMovieSubtitlePart> SubtitlesParts; // 0x28(0x10)
};

// Class OPP.RBMovieSubtitlePlayer
// Size: 0x58 (Inherited: 0x28)
struct URBMovieSubtitlePlayer : UObject {
	struct UAkAudioEvent* KeyAkEvent; // 0x28(0x08)
	struct URBMovieSubtitles* movieSubtitles; // 0x30(0x08)
	struct URBMenuManager* RBMenuManager; // 0x38(0x08)
	struct URBVOSoundComponent* NarratorSoundComponent; // 0x40(0x08)
	char pad_48[0x10]; // 0x48(0x10)

	void Update(float TimeSeconds); // Function OPP.RBMovieSubtitlePlayer.Update // (Final|Native|Public|BlueprintCallable) // @ game+0x1da84f4
	void Stop(); // Function OPP.RBMovieSubtitlePlayer.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x1da8490
	void Start(struct URBMovieSubtitles* movieSubtitles); // Function OPP.RBMovieSubtitlePlayer.Start // (Final|Native|Public|BlueprintCallable) // @ game+0x1da83c4
	bool IsStarted(); // Function OPP.RBMovieSubtitlePlayer.IsStarted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da5998
};

// Class OPP.RBNarrativeScreen
// Size: 0x2d0 (Inherited: 0x248)
struct ARBNarrativeScreen : AActor {
	char pad_248[0x8]; // 0x248(0x08)
	bool bUseGlobalObjectiveTexts; // 0x250(0x01)
	char pad_251[0x7]; // 0x251(0x07)
	struct TSoftObjectPtr<ARBNarrativeScreenChannel> DefaultChannel; // 0x258(0x28)
	bool bStartsOn; // 0x280(0x01)
	char pad_281[0x7]; // 0x281(0x07)
	struct FNarrativeScreenAnimationData StartingAnimationData; // 0x288(0x18)
	struct ARBNarrativeScreenChannel* LinkedChannel; // 0x2a0(0x08)
	bool bIsOn; // 0x2a8(0x01)
	char pad_2A9[0x7]; // 0x2a9(0x07)
	struct FMulticastInlineDelegate OnCurrentAnimationFinishedEvent; // 0x2b0(0x10)
	struct FMulticastInlineDelegate OnCurrentAnimationStartedEvent; // 0x2c0(0x10)

	void OnRep_LinkedChannel(struct ARBNarrativeScreenChannel* OldValue); // Function OPP.RBNarrativeScreen.OnRep_LinkedChannel // (Final|Native|Public) // @ game+0x1da7f78
	void OnRep_IsOn(); // Function OPP.RBNarrativeScreen.OnRep_IsOn // (Final|Native|Public) // @ game+0x1da7f64
	bool IsCurrentlyPlaying(); // Function OPP.RBNarrativeScreen.IsCurrentlyPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da58d0
	void Event_OnLinkedStatusChanged(); // Function OPP.RBNarrativeScreen.Event_OnLinkedStatusChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnIsOnChanged(); // Function OPP.RBNarrativeScreen.Event_OnIsOnChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_SetTVOn(bool bValue, bool bPropagateOnAllLinkedChannelTVs); // Function OPP.RBNarrativeScreen.BP_SetTVOn // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1da5298
	void BP_SetTVChannel(struct ARBNarrativeScreenChannel* Channel); // Function OPP.RBNarrativeScreen.BP_SetTVChannel // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1da5218
};

// Class OPP.RBNarrativeScreenChannel
// Size: 0x2e0 (Inherited: 0x248)
struct ARBNarrativeScreenChannel : AActor {
	char pad_248[0x8]; // 0x248(0x08)
	bool bStartsPlaying; // 0x250(0x01)
	char pad_251[0x7]; // 0x251(0x07)
	struct FNarrativeScreenAnimationData StartingAnimationData; // 0x258(0x18)
	struct FNarrativeScreenPlayingData CurrentlyPlayingData; // 0x270(0x20)
	struct TArray<struct FNarrativeScreenAnimationData> AnimationQueue; // 0x290(0x10)
	struct TArray<struct ARBNarrativeScreen*> LinkedScreens; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnCurrentAnimationFinishedEvent; // 0x2b0(0x10)
	struct FMulticastInlineDelegate OnCurrentAnimationStartedEvent; // 0x2c0(0x10)
	char pad_2D0[0x10]; // 0x2d0(0x10)

	void OnRep_CurrentlyPlayingData(); // Function OPP.RBNarrativeScreenChannel.OnRep_CurrentlyPlayingData // (Final|Native|Public) // @ game+0x1da7f50
	bool IsCurrentlyPlaying(); // Function OPP.RBNarrativeScreenChannel.IsCurrentlyPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da5900
	void Event_OnLinkedScreenRemoved(struct ARBNarrativeScreen* linkedScreen); // Function OPP.RBNarrativeScreenChannel.Event_OnLinkedScreenRemoved // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnLinkedScreenAdded(struct ARBNarrativeScreen* linkedScreen); // Function OPP.RBNarrativeScreenChannel.Event_OnLinkedScreenAdded // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnCurrentlyPlayingDataChanged(); // Function OPP.RBNarrativeScreenChannel.Event_OnCurrentlyPlayingDataChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_StopAnimation(bool bClearQueue); // Function OPP.RBNarrativeScreenChannel.BP_StopAnimation // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1da5470
	void BP_SetAllLinkedTVsOn(bool bValue); // Function OPP.RBNarrativeScreenChannel.BP_SetAllLinkedTVsOn // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1da5198
	void BP_PlayAnimation(struct FNarrativeScreenAnimationData& playingData, bool bQueueIfPlaying, bool bForceAllLinkedTVsOn); // Function OPP.RBNarrativeScreenChannel.BP_PlayAnimation // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1da503c
	void BP_NotifyAnimationStarted(); // Function OPP.RBNarrativeScreenChannel.BP_NotifyAnimationStarted // (Final|Native|Public|BlueprintCallable) // @ game+0x1da5000
	void BP_NotifyAnimationFinished(); // Function OPP.RBNarrativeScreenChannel.BP_NotifyAnimationFinished // (Final|Native|Public|BlueprintCallable) // @ game+0x1da4fec
	struct TArray<struct ARBNarrativeScreen*> BP_GetLinkedScreens(); // Function OPP.RBNarrativeScreenChannel.BP_GetLinkedScreens // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da4cac
};

// Class OPP.RBNavLinkComponent
// Size: 0x1d0 (Inherited: 0x198)
struct URBNavLinkComponent : UNavLinkCustomComponent {
	struct TArray<struct FRBNavLinkObstacle> Obstacles; // 0x198(0x10)
	float StartTraceDownDist; // 0x1a8(0x04)
	float EndTraceDownDist; // 0x1ac(0x04)
	char pad_1B0[0xc]; // 0x1b0(0x0c)
	float TraceZOffset; // 0x1bc(0x04)
	char pad_1C0[0x10]; // 0x1c0(0x10)
};

// Class OPP.RBNDAOverlayWidget
// Size: 0x2a8 (Inherited: 0x268)
struct URBNDAOverlayWidget : URBUserWidget {
	float MinRefreshFrequency; // 0x268(0x04)
	float MaxRefreshFrequency; // 0x26c(0x04)
	struct FString PlayerName; // 0x270(0x10)
	struct FString PlatformId; // 0x280(0x10)
	struct FString Date; // 0x290(0x10)
	char pad_2A0[0x8]; // 0x2a0(0x08)

	void Event_Setup(); // Function OPP.RBNDAOverlayWidget.Event_Setup // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBNetworkSoundActor
// Size: 0x2a0 (Inherited: 0x248)
struct ARBNetworkSoundActor : AActor {
	bool bNetworkAutoPost; // 0x248(0x01)
	bool bGlobal; // 0x249(0x01)
	char pad_24A[0x6]; // 0x24a(0x06)
	struct TArray<struct FNetworkSoundActorRTPCData> InitialRTPCData; // 0x250(0x10)
	struct TArray<struct FNetworkSoundActorSwitchStateData> InitialSwitchStateData; // 0x260(0x10)
	struct URBSoundComponent* SoundComponent; // 0x270(0x08)
	bool bAssociatedSoundPlaying; // 0x278(0x01)
	char pad_279[0x7]; // 0x279(0x07)
	struct TArray<struct FNetworkSoundActorRTPCData> RTPCData; // 0x280(0x10)
	struct TArray<struct FNetworkSoundActorSwitchStateData> SwitchStateData; // 0x290(0x10)

	void StopAssociatedSound(); // Function OPP.RBNetworkSoundActor.StopAssociatedSound // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1da84e0
	void SetSwitchState(struct FName Name, struct FName State); // Function OPP.RBNetworkSoundActor.SetSwitchState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1da8300
	void SetRTPC(struct FName Name, float Value); // Function OPP.RBNetworkSoundActor.SetRTPC // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1da8238
	void PostAssociatedSound(); // Function OPP.RBNetworkSoundActor.PostAssociatedSound // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1da8164
	void OnRep_SwitchStateData(struct TArray<struct FNetworkSoundActorSwitchStateData>& oldSwitchStateData); // Function OPP.RBNetworkSoundActor.OnRep_SwitchStateData // (Final|Native|Private|HasOutParms) // @ game+0x1da80b8
	void OnRep_RTPCData(struct TArray<struct FNetworkSoundActorRTPCData>& oldRTPCData); // Function OPP.RBNetworkSoundActor.OnRep_RTPCData // (Final|Native|Private|HasOutParms) // @ game+0x1da800c
	void OnRep_AssociatedSoundPlaying(); // Function OPP.RBNetworkSoundActor.OnRep_AssociatedSoundPlaying // (Final|Native|Private) // @ game+0x1da7f20
};

// Class OPP.RBNetworkSyncComponent
// Size: 0x110 (Inherited: 0xb8)
struct URBNetworkSyncComponent : UActorComponent {
	enum class ENetworkSyncType NetworkSyncType; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	float NetworkSyncInitialValue; // 0xbc(0x04)
	float NetworkSyncSpeed; // 0xc0(0x04)
	float PingPongLingeringRatioStart; // 0xc4(0x04)
	float PingPongLingeringRatioEnd; // 0xc8(0x04)
	bool bEnableWorldTick; // 0xcc(0x01)
	bool bEnableWorldTickWhenNotPlaying; // 0xcd(0x01)
	char pad_CE[0x2]; // 0xce(0x02)
	float Started_ServerTimetamp; // 0xd0(0x04)
	float Stopped_ServerTimetamp; // 0xd4(0x04)
	float SlowToStop_StartServerTimestamp; // 0xd8(0x04)
	float SlowToStop_StopServerTimestamp; // 0xdc(0x04)
	struct FMulticastInlineDelegate OnPlayingStateChanged; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnPingPongSideChanged; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnWorldTickEvent; // 0x100(0x10)

	void OnRep_PlayingChanged(); // Function OPP.RBNetworkSyncComponent.OnRep_PlayingChanged // (Final|Native|Private) // @ game+0x1da7ff8
	void BP_UntriggerNetworkSync(); // Function OPP.RBNetworkSyncComponent.BP_UntriggerNetworkSync // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1da5704
	void BP_TriggerNetworkSync(); // Function OPP.RBNetworkSyncComponent.BP_TriggerNetworkSync // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1da56f0
	void BP_SlowToStop(float duration); // Function OPP.RBNetworkSyncComponent.BP_SlowToStop // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1da53ec
	void BP_ResetNetworkSync(); // Function OPP.RBNetworkSyncComponent.BP_ResetNetworkSync // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1da5184
	bool BP_IsStopped(); // Function OPP.RBNetworkSyncComponent.BP_IsStopped // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da4fcc
	bool BP_IsPlaying(); // Function OPP.RBNetworkSyncComponent.BP_IsPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da4fac
	bool BP_IsFinished(); // Function OPP.RBNetworkSyncComponent.BP_IsFinished // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da4f88
	float BP_GetSyncValue(); // Function OPP.RBNetworkSyncComponent.BP_GetSyncValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da4f40
	void BP_GetSyncRotationFromSequence(struct TArray<struct FRotator>& Sequence, struct FRotator& OutRotation); // Function OPP.RBNetworkSyncComponent.BP_GetSyncRotationFromSequence // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1da4e50
	void BP_GetSyncLocationFromSequence(struct TArray<struct FVector>& Sequence, struct FVector& OutLocation); // Function OPP.RBNetworkSyncComponent.BP_GetSyncLocationFromSequence // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1da4d60
};

// Class OPP.RBNewsWidget
// Size: 0x2e0 (Inherited: 0x268)
struct URBNewsWidget : URBUserWidget {
	char pad_268[0x18]; // 0x268(0x18)
	enum class ENewsItemLocation Location; // 0x280(0x01)
	char pad_281[0x3]; // 0x281(0x03)
	float ItemDuration; // 0x284(0x04)
	char pad_288[0x58]; // 0x288(0x58)

	void SetActiveItem(int32_t Index); // Function OPP.RBNewsWidget.SetActiveItem // (Final|Native|Public|BlueprintCallable) // @ game+0x1da81b8
	bool HasCTA(); // Function OPP.RBNewsWidget.HasCTA // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da5850
	struct FString GetTitle(); // Function OPP.RBNewsWidget.GetTitle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da5810
	int32_t GetNumItems(); // Function OPP.RBNewsWidget.GetNumItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da57f8
	struct UTexture2DDynamic* GetImage(); // Function OPP.RBNewsWidget.GetImage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da57dc
	struct FString GetDescription(); // Function OPP.RBNewsWidget.GetDescription // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da578c
	int32_t GetCurrentItemIndex(); // Function OPP.RBNewsWidget.GetCurrentItemIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da5774
	void ExecuteCTA(); // Function OPP.RBNewsWidget.ExecuteCTA // (Final|Native|Public|BlueprintCallable) // @ game+0x1da5748
	void Event_Refresh(); // Function OPP.RBNewsWidget.Event_Refresh // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_NextItem(); // Function OPP.RBNewsWidget.Event_NextItem // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBNPCWeaponList
// Size: 0x38 (Inherited: 0x28)
struct URBNPCWeaponList : UObject {
	struct TArray<struct FNPCWeaponData> Weapons; // 0x28(0x10)
};

// Class OPP.RBNPCDebugIconWidget
// Size: 0x338 (Inherited: 0x330)
struct URBNPCDebugIconWidget : URBHUDWorldIconWidget {
	struct ARBNPC* NPC; // 0x330(0x08)

	float GetMeterValue(); // Function OPP.RBNPCDebugIconWidget.GetMeterValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dab324
	enum class EAIAwarenessStateType GetAwarenessStateType(); // Function OPP.RBNPCDebugIconWidget.GetAwarenessStateType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dab2cc
};

// Class OPP.RBNPCInterestPoint
// Size: 0x250 (Inherited: 0x248)
struct ARBNPCInterestPoint : AActor {
	struct URBNPCInterestPointComponent* InterestPointComponent; // 0x248(0x08)
};

// Class OPP.RBNPCInterestPointComponent
// Size: 0x240 (Inherited: 0x220)
struct URBNPCInterestPointComponent : USceneComponent {
	bool bEnabled; // 0x218(0x01)
	float BaseScore; // 0x21c(0x04)
	float MaxAngle; // 0x220(0x04)
	float MaxLateralDistance; // 0x224(0x04)
	float Radius; // 0x228(0x04)
	float MinInterestDistance; // 0x22c(0x04)
	float MaxInterestDistance; // 0x230(0x04)
	float MinimumLookDuration; // 0x234(0x04)
	float MaximumLookDuration; // 0x238(0x04)
	bool bDisableIfClosedDoor; // 0x23c(0x01)
};

// Class OPP.RBNPCArchetypeConfig
// Size: 0x98 (Inherited: 0x28)
struct URBNPCArchetypeConfig : UObject {
	struct TArray<struct FRandomNPCArchetype> Archetypes; // 0x28(0x10)
	struct TArray<struct FAISpawningCheatInfo> SpawnCheats; // 0x38(0x10)
	struct TSoftObjectPtr<URBAmbientConfig> SleeperScreamerStandingConfig; // 0x48(0x28)
	struct TSoftObjectPtr<URBAmbientConfig> SleeperScreamerOnFloorConfig; // 0x70(0x28)
};

// Class OPP.RBNPCRandomizationConfig
// Size: 0x1168 (Inherited: 0x28)
struct URBNPCRandomizationConfig : UObject {
	struct URBNPCRandomizationConfig* Parent; // 0x28(0x08)
	struct FString OverridesDescription; // 0x30(0x10)
	struct FNPCRandomizationConfigData Config; // 0x40(0x1128)
};

// Class OPP.RBNPCSeparatorTube
// Size: 0x2b8 (Inherited: 0x248)
struct ARBNPCSeparatorTube : AActor {
	struct UBoxComponent* BoxComponent; // 0x248(0x08)
	struct UCapsuleComponent* CapsuleComponent; // 0x250(0x08)
	struct TArray<struct UPrimitiveComponent*> DoorCollisionComponents; // 0x258(0x10)
	enum class ESeparatorTubeState TubeState; // 0x268(0x01)
	bool bIsLocked; // 0x269(0x01)
	char pad_26A[0x6]; // 0x26a(0x06)
	struct TArray<struct ARBPlayer*> PlayersInside; // 0x270(0x10)
	struct FMulticastInlineDelegate OnPlayerInside; // 0x280(0x10)
	struct FMulticastInlineDelegate OnPlayerOutside; // 0x290(0x10)
	char pad_2A0[0x8]; // 0x2a0(0x08)
	struct TArray<struct ARBPawn*> BotsInside; // 0x2a8(0x10)

	void UpdateTubeState_Server(); // Function OPP.RBNPCSeparatorTube.UpdateTubeState_Server // (Final|Native|Public|BlueprintCallable) // @ game+0x1dabba8
	void OnRep_TubeState(); // Function OPP.RBNPCSeparatorTube.OnRep_TubeState // (Final|Native|Private) // @ game+0x1dab9d4
	void OnRep_PlayersInside(); // Function OPP.RBNPCSeparatorTube.OnRep_PlayersInside // (Final|Native|Private) // @ game+0x1dab9c0
	void OnRep_Islocked(); // Function OPP.RBNPCSeparatorTube.OnRep_Islocked // (Final|Native|Private) // @ game+0x1dab92c
	void OnComponentCapsuleEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function OPP.RBNPCSeparatorTube.OnComponentCapsuleEndOverlap // (Final|Native|Public) // @ game+0x1dab750
	void OnComponentCapsuleBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBNPCSeparatorTube.OnComponentCapsuleBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0x1dab54c
	void OnComponentBoxBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBNPCSeparatorTube.OnComponentBoxBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0x1dab39c
	void Event_OnTubeStateChanged(); // Function OPP.RBNPCSeparatorTube.Event_OnTubeStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnPlayersInsideChanged(); // Function OPP.RBNPCSeparatorTube.Event_OnPlayersInsideChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_SetTubeState(enum class ESeparatorTubeState State); // Function OPP.RBNPCSeparatorTube.BP_SetTubeState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dab24c
	void BP_SetIsLocked(bool bValue); // Function OPP.RBNPCSeparatorTube.BP_SetIsLocked // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dab1cc
	void BP_OnDoorAnimationStarted(); // Function OPP.RBNPCSeparatorTube.BP_OnDoorAnimationStarted // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dab1a0
	void BP_OnDoorAnimationFinished(); // Function OPP.RBNPCSeparatorTube.BP_OnDoorAnimationFinished // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dab168
};

// Class OPP.RBNPCShopUserWidget
// Size: 0x278 (Inherited: 0x268)
struct URBNPCShopUserWidget : URBUserWidget {
	char pad_268[0x10]; // 0x268(0x10)

	void SetMetaNpcType(enum class EMetaNPCType metaNPCType); // Function OPP.RBNPCShopUserWidget.SetMetaNpcType // (Final|Native|Public|BlueprintCallable) // @ game+0x1daba6c
	void OnRelevantDataChanged(); // Function OPP.RBNPCShopUserWidget.OnRelevantDataChanged // (Final|Native|Private) // @ game+0x1dab900
	enum class EMetaNPCType GetMetaNPCType(); // Function OPP.RBNPCShopUserWidget.GetMetaNPCType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dab30c
	void Event_Refresh(); // Function OPP.RBNPCShopUserWidget.Event_Refresh // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnMetaNpcTypeChanged(); // Function OPP.RBNPCShopUserWidget.Event_OnMetaNpcTypeChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBNPCWeapon
// Size: 0x298 (Inherited: 0x248)
struct ARBNPCWeapon : AActor {
	bool bSharp; // 0x248(0x01)
	bool bTwoHanded; // 0x249(0x01)
	bool bLeftHanded; // 0x24a(0x01)
	char pad_24B[0x1]; // 0x24b(0x01)
	struct FName OverrideAttachmentSocketName; // 0x24c(0x08)
	enum class EItemType ItemType; // 0x254(0x01)
	enum class EDamageSoundMaterial SoundMaterial; // 0x255(0x01)
	char pad_256[0x2]; // 0x256(0x02)
	float MaxDamageDistance; // 0x258(0x04)
	float DistForFullDamage; // 0x25c(0x04)
	float SpreadAngle; // 0x260(0x04)
	bool bExponentialSpread; // 0x264(0x01)
	char pad_265[0x3]; // 0x265(0x03)
	int32_t AmmoCapacity; // 0x268(0x04)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct UParticleSystem* ImpactParticles; // 0x270(0x08)
	struct ARBProjectile* ProjectileClass; // 0x278(0x08)
	struct USceneComponent* DamageLocator; // 0x280(0x08)
	struct ARBNPC* WeaponHolder; // 0x288(0x08)
	int32_t ExpandedAmmo; // 0x290(0x04)
	char pad_294[0x4]; // 0x294(0x04)

	void Event_OnUnhidden(); // Function OPP.RBNPCWeapon.Event_OnUnhidden // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnHidden(); // Function OPP.RBNPCWeapon.Event_OnHidden // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_DeactivateEffects(); // Function OPP.RBNPCWeapon.Event_DeactivateEffects // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_ActivateEffects(); // Function OPP.RBNPCWeapon.Event_ActivateEffects // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void EquippedBy(struct ARBNPC* NPC); // Function OPP.RBNPCWeapon.EquippedBy // (Native|Event|Public|BlueprintEvent) // @ game+0x1d49188
};

// Class OPP.RBNVComponent
// Size: 0x530 (Inherited: 0x430)
struct URBNVComponent : USpotLightComponent {
	float PoweredOnIntensity; // 0x430(0x04)
	float NoBatteryIntensity; // 0x434(0x04)
	float PoweredOnAttenuationRadius; // 0x438(0x04)
	float NoBatteryAttenuationRadius; // 0x43c(0x04)
	float PoweredOnInnerConeAngle; // 0x440(0x04)
	float NoBatteryInnerConeAngle; // 0x444(0x04)
	float PoweredOnOuterConeAngle; // 0x448(0x04)
	float NoBatteryOuterConeAngle; // 0x44c(0x04)
	struct FVector translationOffset; // 0x450(0x0c)
	struct FRotator RotationOffset; // 0x45c(0x0c)
	struct UAkAudioEvent* TurnOnSoundEvent; // 0x468(0x08)
	struct UAkAudioEvent* TurnOnLowBatterySoundEvent; // 0x470(0x08)
	struct UAkAudioEvent* OutOfBatterySoundEvent; // 0x478(0x08)
	struct UAkAudioEvent* RepoweredSoundEvent; // 0x480(0x08)
	struct UAkAudioEvent* TurnOffSoundEvent; // 0x488(0x08)
	struct UAkAudioEvent* RemoteTurnOnSoundEvent; // 0x490(0x08)
	struct UAkAudioEvent* RemoteTurnOnLowBatterySoundEvent; // 0x498(0x08)
	struct UAkAudioEvent* RemoteOutOfBatterySoundEvent; // 0x4a0(0x08)
	struct UAkAudioEvent* RemoteRepoweredSoundEvent; // 0x4a8(0x08)
	struct UAkAudioEvent* RemoteTurnOffSoundEvent; // 0x4b0(0x08)
	struct UAkAudioEvent* StartLowBatterySoundEvent; // 0x4b8(0x08)
	struct UAkAudioEvent* RemoteStartLowBatterySoundEvent; // 0x4c0(0x08)
	struct UAkAudioEvent* StopLowBatterySoundEvent; // 0x4c8(0x08)
	struct UAkAudioEvent* RemoteStopLowBatterySoundEvent; // 0x4d0(0x08)
	float LowBatterySoundLoopOnDuration; // 0x4d8(0x04)
	float LowBatterySoundLoopOffDuration; // 0x4dc(0x04)
	struct FMulticastInlineDelegate OnNVStateChanged; // 0x4e0(0x10)
	struct FMulticastInlineDelegate OnLowBatteryStateChanged; // 0x4f0(0x10)
	struct ARBPawn* Owner; // 0x500(0x08)
	struct ARBSpectatorPawn* SpectatorOwner; // 0x508(0x08)
	bool bForcedDisabled; // 0x510(0x01)
	enum class ENVState NVState; // 0x511(0x01)
	bool bIsBatteryLow; // 0x512(0x01)
	char pad_513[0x1d]; // 0x513(0x1d)

	void TurnOn(bool bPowered); // Function OPP.RBNVComponent.TurnOn // (Final|Native|Public|BlueprintCallable) // @ game+0x1dabb24
	void TurnOff(); // Function OPP.RBNVComponent.TurnOff // (Final|Native|Public|BlueprintCallable) // @ game+0x1dabb10
	void Server_RequestNVState(enum class ENVState newState); // Function OPP.RBNVComponent.Server_RequestNVState // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1dab9e8
	void OnRep_NVState(enum class ENVState oldState); // Function OPP.RBNVComponent.OnRep_NVState // (Final|Native|Protected) // @ game+0x1dab940
	void OnRep_IsBatteryLow(); // Function OPP.RBNVComponent.OnRep_IsBatteryLow // (Final|Native|Protected) // @ game+0x1dab918
	bool IsNVOn(); // Function OPP.RBNVComponent.IsNVOn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dab368
	bool IsBatteryLow(); // Function OPP.RBNVComponent.IsBatteryLow // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dab350
	enum class ENVState GetCurrentState(); // Function OPP.RBNVComponent.GetCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dab2f4
};

// Class OPP.RBRoomAssociationComponent
// Size: 0x240 (Inherited: 0x220)
struct URBRoomAssociationComponent : USceneComponent {
	enum class ERoomAssociationType AssociationType; // 0x220(0x01)
	bool bInvalidateSpecialRoomIfObjective; // 0x221(0x01)
	char pad_222[0x6]; // 0x222(0x06)
	struct ARBRoom* Room; // 0x228(0x08)
	struct FMulticastInlineDelegate OnRoomAssociated; // 0x230(0x10)

	void BP_RefreshRoomAssociation(); // Function OPP.RBRoomAssociationComponent.BP_RefreshRoomAssociation // (Final|Native|Public|BlueprintCallable) // @ game+0x1df5bc0
};

// Class OPP.RBObjectiveActorComponent
// Size: 0x17a0 (Inherited: 0x240)
struct URBObjectiveActorComponent : URBRoomAssociationComponent {
	bool bIsHighPriorityObjective; // 0x240(0x01)
	bool bForceShowInSpectraVision; // 0x241(0x01)
	bool bDisableRandomInProximity; // 0x242(0x01)
	char pad_243[0x5]; // 0x243(0x05)
	struct TSoftObjectPtr<AVolume> HideVolume; // 0x248(0x28)
	bool bOverrideObjectiveTrackingPosition; // 0x270(0x01)
	char pad_271[0x3]; // 0x271(0x03)
	float ZWorldOffset; // 0x274(0x04)
	float FloorCompensationOffset; // 0x278(0x04)
	bool bHasBeenDiscovered; // 0x27c(0x01)
	char pad_27D[0xb]; // 0x27d(0x0b)
	struct ARBBaseObjectiveCoordinator* LinkedStartedCoordinator; // 0x288(0x08)
	bool bHasDiscoverySystemsInitialised; // 0x290(0x01)
	char pad_291[0x7]; // 0x291(0x07)
	struct FObjectiveUISettings RuntimeDisplaySettings; // 0x298(0xa50)
	char bOverride_DisplaySettings : 1; // 0xce8(0x01)
	char pad_CE8_1 : 7; // 0xce8(0x01)
	char pad_CE9[0x7]; // 0xce9(0x07)
	struct FObjectiveUISettings DisplaySettingsOverride; // 0xcf0(0xa50)
	bool bShouldForceDisplayCompletedIcon; // 0x1740(0x01)
	char pad_1741[0x7]; // 0x1741(0x07)
	struct TSoftObjectPtr<AActor> ObjectiveIconActorOverride; // 0x1748(0x28)
	struct FMulticastInlineDelegate OnObjectiveActorStarted; // 0x1770(0x10)
	struct FMulticastInlineDelegate OnObjectiveActorStopped; // 0x1780(0x10)
	bool bIsPinged; // 0x1790(0x01)
	char pad_1791[0xf]; // 0x1791(0x0f)

	bool BP_ShouldIconBeForcedHidden(); // Function OPP.RBObjectiveActorComponent.BP_ShouldIconBeForcedHidden // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dae5ac
};

// Class OPP.RBObjectiveCoordinatorGroup
// Size: 0xbc0 (Inherited: 0xba8)
struct ARBObjectiveCoordinatorGroup : ARBBaseObjectiveCoordinator {
	enum class EObjectiveGroupCompletionLogic CompletionLogic; // 0xba8(0x01)
	bool bForceCompleteRemainingCoordinators; // 0xba9(0x01)
	char pad_BAA[0x6]; // 0xbaa(0x06)
	struct TArray<struct TSoftObjectPtr<ARBBaseObjectiveCoordinator>> ConcurrentCoordinators; // 0xbb0(0x10)

	void OnConcurrentCoordinatorStateChanged(struct ARBBaseObjectiveCoordinator* coordinator, enum class EObjectiveCoordinatorState State); // Function OPP.RBObjectiveCoordinatorGroup.OnConcurrentCoordinatorStateChanged // (Final|Native|Private) // @ game+0x1daebac
};

// Class OPP.RBObjectiveManager
// Size: 0xd8 (Inherited: 0x28)
struct URBObjectiveManager : UObject {
	char pad_28[0x18]; // 0x28(0x18)
	struct FMulticastInlineDelegate OnObjectiveCoordinatorStateChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnCurrentWatchCoordinatorsChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnCurrentMissionMainObjectiveCountChanged; // 0x60(0x10)
	struct TArray<struct ARBBaseObjectiveCoordinator*> CurrentWatchObjectiveCoordinators; // 0x70(0x10)
	int32_t CurrentMissionMainObjectiveCount; // 0x80(0x04)
	int32_t CurrentMissionMainObjectiveCompleted; // 0x84(0x04)
	struct TArray<struct ARBBaseObjectiveCoordinator*> ObjectiveCoordinators; // 0x88(0x10)
	struct TArray<struct UObject*> AllPotentialObjectiveObjects_Server; // 0x98(0x10)
	char pad_A8[0x10]; // 0xa8(0x10)
	struct ARBPsychosisObjectiveCoordinator* PsychosisObjectiveCoordinator; // 0xb8(0x08)
	struct ARBReviveObjectiveCoordinator* ReviveObjectiveCoordinator; // 0xc0(0x08)
	char pad_C8[0x8]; // 0xc8(0x08)
	struct ARBBaseObjectiveCoordinator* CurrentDebugCoordinator; // 0xd0(0x08)

	void OnStageStarted(struct FRBStageID& StageID, struct FRBMissionID& MissionID); // Function OPP.RBObjectiveManager.OnStageStarted // (Final|Native|Private|HasOutParms) // @ game+0x1daf088
	void OnStageReady(struct FRBStageID& StageID, struct FRBMissionID& MissionID); // Function OPP.RBObjectiveManager.OnStageReady // (Final|Native|Private|HasOutParms) // @ game+0x1daefb0
	void OnObjectiveCoordinatorStateChanged_Callback(struct ARBBaseObjectiveCoordinator* coordinator, enum class EObjectiveCoordinatorState newState); // Function OPP.RBObjectiveManager.OnObjectiveCoordinatorStateChanged_Callback // (Final|Native|Private) // @ game+0x1daed54
	int32_t GetCurrentQuestItemLimit(); // Function OPP.RBObjectiveManager.GetCurrentQuestItemLimit // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dae760
	void BP_PlayObjectiveScreenAnim(struct FNarrativeScreenAnimationData animData, bool bPlayIntro); // Function OPP.RBObjectiveManager.BP_PlayObjectiveScreenAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x1dae418
	bool BP_HasStartedMainObjective(); // Function OPP.RBObjectiveManager.BP_HasStartedMainObjective // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dae3d0
	void BP_GetStartedObjectiveCoordinators(struct TArray<struct ARBBaseObjectiveCoordinator*>& outCoordinators); // Function OPP.RBObjectiveManager.BP_GetStartedObjectiveCoordinators // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dae338
	struct UTexture2D* BP_GetIntroObjectiveIcon(); // Function OPP.RBObjectiveManager.BP_GetIntroObjectiveIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dae2ac
	struct FString BP_GetFormattedCurrentObjectiveString(int32_t maxCharPerLine); // Function OPP.RBObjectiveManager.BP_GetFormattedCurrentObjectiveString // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dae208
	void BP_GetAllObjectiveCoordinators(struct TArray<struct ARBBaseObjectiveCoordinator*>& outCoordinators); // Function OPP.RBObjectiveManager.BP_GetAllObjectiveCoordinators // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dae100
	void BP_CompleteSingleObjective(struct ARBPawn* Player, struct AActor* objective); // Function OPP.RBObjectiveManager.BP_CompleteSingleObjective // (Final|Native|Public|BlueprintCallable) // @ game+0x1dade20
};

// Class OPP.RBObjectiveProximityComponent
// Size: 0x260 (Inherited: 0x220)
struct URBObjectiveProximityComponent : USceneComponent {
	bool bShouldBeIgnoreForRandomIfCloseToObjective; // 0x218(0x01)
	bool bShouldBeIgnoreIfInsideSpecialRoom; // 0x219(0x01)
	float CloseToObjectiveMaxZThreshold; // 0x21c(0x04)
	float CloseToObjectiveMinZThreshold; // 0x220(0x04)
	float CloseToObjective2DThreshold; // 0x224(0x04)
	float CloseToRailMaxZThreshold; // 0x228(0x04)
	float CloseToRailMinZThreshold; // 0x22c(0x04)
	float CloseToRail2DThreshold; // 0x230(0x04)
	struct ARBSplineMeshActor* AssociatedSpline; // 0x238(0x08)
	struct FVector AssociatedSplineLocation; // 0x240(0x0c)
	char pad_24E[0x2]; // 0x24e(0x02)
	struct URBObjectiveActorComponent* AssociatedObjectiveComponent; // 0x250(0x08)
	char pad_258[0x8]; // 0x258(0x08)
};

// Class OPP.RBObjectiveRandomizable
// Size: 0x28 (Inherited: 0x28)
struct URBObjectiveRandomizable : UInterface {

	int32_t GetObjectiveTypeIndex(); // Function OPP.RBObjectiveRandomizable.GetObjectiveTypeIndex // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1dae784
};

// Class OPP.RBObjectiveWidgetBase
// Size: 0x300 (Inherited: 0x2e8)
struct URBObjectiveWidgetBase : URBHUDElementWidget {
	char pad_2E8[0x10]; // 0x2e8(0x10)
	struct ARBBaseObjectiveCoordinator* ObjectiveCoordinator; // 0x2f8(0x08)

	void SetObjectiveCoordinator(struct ARBBaseObjectiveCoordinator* coordinator); // Function OPP.RBObjectiveWidgetBase.SetObjectiveCoordinator // (Final|Native|Public|BlueprintCallable) // @ game+0x1daf188
	void OnSingleObjectiveCompleted(struct ARBBaseObjectiveCoordinator* coordinator, struct AActor* Player, struct AActor* objective); // Function OPP.RBObjectiveWidgetBase.OnSingleObjectiveCompleted // (Final|Native|Private) // @ game+0x1daeeb8
	void OnObjectiveCoordinatorStateChanged(struct ARBBaseObjectiveCoordinator* coordinator, enum class EObjectiveCoordinatorState State); // Function OPP.RBObjectiveWidgetBase.OnObjectiveCoordinatorStateChanged // (Final|Native|Private) // @ game+0x1daec90
	void OnObjectiveCoordinatorStarted(); // Function OPP.RBObjectiveWidgetBase.OnObjectiveCoordinatorStarted // (Final|Native|Private) // @ game+0x1daec7c
	void OnCompletionInProgressChanged(bool isProgressionInProgress, bool isCompletedByLocalPlayer); // Function OPP.RBObjectiveWidgetBase.OnCompletionInProgressChanged // (Final|Native|Private) // @ game+0x1daeae8
	void Event_ProgressChanged(float progress, bool isPositiveProgress, struct FText& objectiveText); // Function OPP.RBObjectiveWidgetBase.Event_ProgressChanged // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void Event_IsMakingPositiveProgress(bool isMakingPositiveProgress); // Function OPP.RBObjectiveWidgetBase.Event_IsMakingPositiveProgress // (Event|Protected|BlueprintEvent) // @ game+0x201e6d4
	void Event_Completed(); // Function OPP.RBObjectiveWidgetBase.Event_Completed // (Event|Protected|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBObstacleVariatorComponent
// Size: 0xd8 (Inherited: 0xb8)
struct URBObstacleVariatorComponent : UActorComponent {
	enum class EObstacleVariatorType VariatorType; // 0xb8(0x01)
	bool bIsRandomized; // 0xb9(0x01)
	char pad_BA[0x6]; // 0xba(0x06)
	struct ARBTrapGroup* TrapGroup; // 0xc0(0x08)
	struct AActor* DisabledBy; // 0xc8(0x08)
	char pad_D0[0x8]; // 0xd0(0x08)
};

// Class OPP.RBOperatableInterface
// Size: 0x28 (Inherited: 0x28)
struct URBOperatableInterface : UInterface {

	void OnTriggerableDeactivated(struct ARBTriggerable* triggerable); // Function OPP.RBOperatableInterface.OnTriggerableDeactivated // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d346ec
	void OnTriggerableActivated(struct ARBTriggerable* triggerable); // Function OPP.RBOperatableInterface.OnTriggerableActivated // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d55934
	enum class ETriggerableActionBehavior GetTriggerActionBehavior(); // Function OPP.RBOperatableInterface.GetTriggerActionBehavior // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1db2f74
	float GetProgressionRatio(); // Function OPP.RBOperatableInterface.GetProgressionRatio // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1db2df4
};

// Class OPP.RBOperatableForObjectiveTrigger
// Size: 0x28 (Inherited: 0x28)
struct URBOperatableForObjectiveTrigger : UInterface {

	struct ARBTriggerable* GetLinkedTriggerable(); // Function OPP.RBOperatableForObjectiveTrigger.GetLinkedTriggerable // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1db2ab0
};

// Class OPP.RBOperatableTriggerObjectiveCoordinator
// Size: 0x1b30 (Inherited: 0xba8)
struct ARBOperatableTriggerObjectiveCoordinator : ARBBaseObjectiveCoordinator {
	struct AActor* OperatableClass; // 0xba8(0x08)
	struct TArray<struct TSoftObjectPtr<AActor>> SpecificOperatableActors; // 0xbb0(0x10)
	bool bUntriggerWhenCompleted; // 0xbc0(0x01)
	char pad_BC1[0x7]; // 0xbc1(0x07)
	struct FObjectiveUISettings ObjectiveUISettings; // 0xbc8(0xa50)
	struct FObjectiveRandomizationSetupData LinkedOperatablesRandomizationSetup; // 0x1618(0x4e8)
	struct TArray<struct AActor*> RemainingOperatablesToComplete; // 0x1b00(0x10)
	struct FMulticastInlineDelegate OnOperatableObjectiveCompleted; // 0x1b10(0x10)
	struct TArray<struct AActor*> AllSelectedOperatables; // 0x1b20(0x10)

	void OnRep_AllSelectedOperatables(); // Function OPP.RBOperatableTriggerObjectiveCoordinator.OnRep_AllSelectedOperatables // (Final|Native|Protected) // @ game+0x1db3518
	void OnPlayerCompletedOperatable(bool IsOn, struct ARBOperatable* operatable); // Function OPP.RBOperatableTriggerObjectiveCoordinator.OnPlayerCompletedOperatable // (Final|Native|Protected) // @ game+0x1db3228
	void GetRemainingOperatablesForTriggerable(struct ARBTriggerable* triggerable, struct TArray<struct AActor*>& outOperatables); // Function OPP.RBOperatableTriggerObjectiveCoordinator.GetRemainingOperatablesForTriggerable // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db2e1c
	struct ARBTriggerable* GetLinkedTriggerable(struct AActor* operatable); // Function OPP.RBOperatableTriggerObjectiveCoordinator.GetLinkedTriggerable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db2a0c
};

// Class OPP.RBOptionsData
// Size: 0x258 (Inherited: 0x30)
struct URBOptionsData : UDataAsset {
	struct TArray<struct FRBOptionTabData> OptionTabsData; // 0x30(0x10)
	struct TMap<enum class EOptionsErrorCode, struct FText> OptionsErrorMessage; // 0x40(0x50)
	struct TArray<struct FRBInterfacePresetData> HUDPresets; // 0x90(0x10)
	struct TArray<struct FText> HUDDisplayTypes; // 0xa0(0x10)
	struct TArray<struct FText> InventoryDisplayTypes; // 0xb0(0x10)
	struct TArray<struct FText> ObjectiveDisplayTypes; // 0xc0(0x10)
	struct TArray<struct FText> CrosshairDisplayTypes; // 0xd0(0x10)
	struct TArray<struct FText> TeammateStatusInWorldDisplayTypes; // 0xe0(0x10)
	struct TArray<struct FText> TeammateStatusOutsideLoSTypes; // 0xf0(0x10)
	struct TArray<struct FText> InvitationRequestsDisplayTypes; // 0x100(0x10)
	struct TMap<enum class EUIFontSize, struct FText> SubtitlesFontSizes; // 0x110(0x50)
	struct TArray<struct FText> QualityLevels; // 0x160(0x10)
	struct TArray<struct FText> AntiAliasingLevels; // 0x170(0x10)
	struct TArray<struct FText> FSR2Levels; // 0x180(0x10)
	struct TArray<struct FText> RTShadowsLevels; // 0x190(0x10)
	struct TArray<struct FText> RTReflectionsLevels; // 0x1a0(0x10)
	float MinGamma; // 0x1b0(0x04)
	float MaxGamma; // 0x1b4(0x04)
	struct TMap<enum class EWindowMode, struct FText> WindowModes; // 0x1b8(0x50)
	struct TMap<enum class UDLSSMode, struct FText> DLSSModes; // 0x208(0x50)
};

// Class OPP.RBOptionsMenu
// Size: 0x308 (Inherited: 0x308)
struct URBOptionsMenu : URBMenuWidget {

	bool CanViewCrossplaySetting(); // Function OPP.RBOptionsMenu.CanViewCrossplaySetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db29a0
	bool CanEditCrossplaySetting(); // Function OPP.RBOptionsMenu.CanEditCrossplaySetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db28e0
};

// Class OPP.RBOutlineComponent
// Size: 0x2b0 (Inherited: 0x220)
struct URBOutlineComponent : USceneComponent {
	bool bOutlineEnabledConfig; // 0x220(0x01)
	char pad_221[0x3]; // 0x221(0x03)
	int32_t OutlineColorIndex; // 0x224(0x04)
	char bOverride_DisplaySettings : 1; // 0x228(0x01)
	char pad_228_1 : 7; // 0x228(0x01)
	char pad_229[0x3]; // 0x229(0x03)
	struct FShimmerDisplaySettings DisplaySettingsOverride; // 0x22c(0x34)
	bool bOutlineOnIfCanInteract; // 0x260(0x01)
	bool bOutlineOnIfFocusGiven; // 0x261(0x01)
	bool bUseAllActorComponents; // 0x262(0x01)
	bool bOutlineAllAttachParentChilds; // 0x263(0x01)
	bool bOutlineOwnerAttachActors; // 0x264(0x01)
	bool bOutlineOnlySpecificComponents; // 0x265(0x01)
	bool bOutlineOnlyIfMeetRequirements; // 0x266(0x01)
	char pad_267[0x1]; // 0x267(0x01)
	struct TArray<struct FName> SpecificComponentsToOutline; // 0x268(0x10)
	struct URBInteractionZoneComponent* LinkedAssociatedInteractionZone; // 0x278(0x08)
	struct TArray<struct UPrimitiveComponent*> IgnoreComponents; // 0x280(0x10)
	struct URBOutlineComponent* OutlineComponentToCopy; // 0x290(0x08)
	char pad_298[0x18]; // 0x298(0x18)

	void BP_SetEnabled(bool bEnabledValue); // Function OPP.RBOutlineComponent.BP_SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1db2860
	bool BP_IsEnabled(); // Function OPP.RBOutlineComponent.BP_IsEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1db2828
};

// Class OPP.RBOverheadVoiceChatWidget
// Size: 0x290 (Inherited: 0x268)
struct URBOverheadVoiceChatWidget : URBUserWidget {
	struct ARBPlayerState* RBPlayerState; // 0x268(0x08)
	char pad_270[0x20]; // 0x270(0x20)

	void OnPlayerVoiceChatVolumeChanged(struct FProfileId& ProfileId, float Volume); // Function OPP.RBOverheadVoiceChatWidget.OnPlayerVoiceChatVolumeChanged // (Final|Native|Private|HasOutParms) // @ game+0x1db3438
	void OnPlayerBlockStateChanged(struct FProfileId& ProfileId, bool bBlocked); // Function OPP.RBOverheadVoiceChatWidget.OnPlayerBlockStateChanged // (Final|Native|Private|HasOutParms) // @ game+0x1db314c
	void OnMicrophoneVolumeChanged(float Volume); // Function OPP.RBOverheadVoiceChatWidget.OnMicrophoneVolumeChanged // (Final|Native|Private) // @ game+0x1db30c8
	bool IsVoiceChatConnected(); // Function OPP.RBOverheadVoiceChatWidget.IsVoiceChatConnected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db30b0
	bool IsSpeaking(); // Function OPP.RBOverheadVoiceChatWidget.IsSpeaking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db3068
	bool IsMuted(); // Function OPP.RBOverheadVoiceChatWidget.IsMuted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d74c74
	bool IsBlocked(); // Function OPP.RBOverheadVoiceChatWidget.IsBlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db303c
	void Init(struct FProfileId& ProfileId); // Function OPP.RBOverheadVoiceChatWidget.Init // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1db2fb0
	bool HasVoiceChatPrivilege(); // Function OPP.RBOverheadVoiceChatWidget.HasVoiceChatPrivilege // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db2f98
	bool HasVoiceChatEnabled(); // Function OPP.RBOverheadVoiceChatWidget.HasVoiceChatEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4d788
	void Event_Refresh(); // Function OPP.RBOverheadVoiceChatWidget.Event_Refresh // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBOverseer
// Size: 0x88 (Inherited: 0x28)
struct URBOverseer : UObject {
	char pad_28[0x40]; // 0x28(0x40)
	struct ARBPawn* FocusedPawn; // 0x68(0x08)
	char pad_70[0x8]; // 0x70(0x08)
	struct ARBPlayer* BackupSpectatorTarget; // 0x78(0x08)
	struct URBCheatManager* CheatMgr; // 0x80(0x08)
};

// Class OPP.RBPartyInviteNotificationUserWidget
// Size: 0x2d8 (Inherited: 0x2d0)
struct URBPartyInviteNotificationUserWidget : URBNotificationUserWidget {
	char pad_2D0[0x8]; // 0x2d0(0x08)
};

// Class OPP.RBPartyInviteRequestNotificationUserWidget
// Size: 0x2f0 (Inherited: 0x2d0)
struct URBPartyInviteRequestNotificationUserWidget : URBNotificationUserWidget {
	bool bIsOnBehalf; // 0x2d0(0x01)
	char pad_2D1[0x7]; // 0x2d1(0x07)
	struct FString SourcePlayerName; // 0x2d8(0x10)
	char pad_2E8[0x8]; // 0x2e8(0x08)
};

// Class OPP.RBPasscodeButtonComponent
// Size: 0x670 (Inherited: 0x600)
struct URBPasscodeButtonComponent : URBInteractibleComponent {
	int32_t Digit; // 0x5f8(0x04)
	float IdleOffset; // 0x5fc(0x04)
	float PressedOffset; // 0x600(0x04)
	struct FLinearColor ActiveDynamicColor; // 0x604(0x10)
	struct FLinearColor InactiveDynamicColor; // 0x614(0x10)
	struct FLinearColor OffDynamicColor; // 0x624(0x10)
	struct FMulticastInlineDelegate OnPasscodeButtonStateChanged; // 0x638(0x10)
	struct FMulticastInlineDelegate OnFocusChangedChanged; // 0x648(0x10)
	bool bFocused; // 0x658(0x01)
	char pad_65D[0x3]; // 0x65d(0x03)
	struct URBPasscodePadComponent* PasscodePadParent; // 0x660(0x08)
	float PressedTimestamp; // 0x668(0x04)
	bool bIsOn; // 0x66c(0x01)
	char pad_66D[0x3]; // 0x66d(0x03)

	void OnRep_Pressed(); // Function OPP.RBPasscodeButtonComponent.OnRep_Pressed // (Final|Native|Public) // @ game+0x1db3554
	void OnRep_IsOn(); // Function OPP.RBPasscodeButtonComponent.OnRep_IsOn // (Final|Native|Public) // @ game+0x1db3540
	bool BP_IsPressed(); // Function OPP.RBPasscodeButtonComponent.BP_IsPressed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db2840
};

// Class OPP.RBPasscodeNumberDecalActor
// Size: 0x2a0 (Inherited: 0x258)
struct ARBPasscodeNumberDecalActor : ADecalActor {
	char pad_258[0x10]; // 0x258(0x10)
	struct TArray<struct FRBPasscodeNumberDecals> PasscodeNumberDecals; // 0x268(0x10)
	enum class EGameDifficulty bDecalDifficulty; // 0x278(0x01)
	char pad_279[0x7]; // 0x279(0x07)
	struct UDecalComponent* OrderDecalComponent; // 0x280(0x08)
	struct FPasscodeDecalData DecalData; // 0x288(0x10)
	struct URBRoomAssociationComponent* AssociatedRoomComponent; // 0x298(0x08)

	void OnRep_DecalData(); // Function OPP.RBPasscodeNumberDecalActor.OnRep_DecalData // (Final|Native|Private) // @ game+0x1db352c
	struct URBPuzzleRoomComponent* GetLinkedPuzzleRoom(); // Function OPP.RBPasscodeNumberDecalActor.GetLinkedPuzzleRoom // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db29ec
	void Event_OnSelected(bool bSelected); // Function OPP.RBPasscodeNumberDecalActor.Event_OnSelected // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBPasscodePadComponent
// Size: 0x820 (Inherited: 0x7a0)
struct URBPasscodePadComponent : URBInteractiblePanelComponent {
	char pad_7A0[0x8]; // 0x7a0(0x08)
	struct URBRoomAssociationComponent* roomAssociationComponent; // 0x7a8(0x08)
	struct TArray<struct URBPasscodeButtonComponent*> Buttons; // 0x7b0(0x10)
	struct FMulticastInlineDelegate OnPasscodePadValidation; // 0x7c0(0x10)
	struct FMulticastInlineDelegate OnButtonsPressedChanged; // 0x7d0(0x10)
	struct FMulticastInlineDelegate OnRoomActivationStateChanged; // 0x7e0(0x10)
	struct FMulticastInlineDelegate OnRoomTimeLeftChanged; // 0x7f0(0x10)
	struct TArray<int32_t> ButtonsPressed; // 0x800(0x10)
	bool bButtonsScheduledForRelease; // 0x810(0x01)
	char pad_811[0x7]; // 0x811(0x07)
	struct URBInteractionZoneComponent* LastFocus; // 0x818(0x08)

	void ValidatePad_Server(); // Function OPP.RBPasscodePadComponent.ValidatePad_Server // (Final|Native|Public) // @ game+0x1dbc590
	void ReleaseAllButtons(); // Function OPP.RBPasscodePadComponent.ReleaseAllButtons // (Final|Native|Public) // @ game+0x1dbb920
	void OnRep_ButtonsPressed(); // Function OPP.RBPasscodePadComponent.OnRep_ButtonsPressed // (Final|Native|Private) // @ game+0x1dbb754
	void Multicast_OnPasscodePadValidation(bool bValid); // Function OPP.RBPasscodePadComponent.Multicast_OnPasscodePadValidation // (Net|Native|Event|NetMulticast|Public) // @ game+0x1dba050
	int32_t BP_GetPuzzleRoomTimeLeft(); // Function OPP.RBPasscodePadComponent.BP_GetPuzzleRoomTimeLeft // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db8fcc
};

// Class OPP.RBPathBlockingVolume
// Size: 0x2a8 (Inherited: 0x298)
struct ARBPathBlockingVolume : ANavModifierVolume {
	char pad_298[0x8]; // 0x298(0x08)
	bool bIsBlockingPath; // 0x2a0(0x01)
	char pad_2A1[0x7]; // 0x2a1(0x07)

	bool IsBlockingPath(); // Function OPP.RBPathBlockingVolume.IsBlockingPath // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d74d84
	void EnablePathBlocking(); // Function OPP.RBPathBlockingVolume.EnablePathBlocking // (Final|Native|Public|BlueprintCallable) // @ game+0x1db9a50
	void DisablePathBlocking(); // Function OPP.RBPathBlockingVolume.DisablePathBlocking // (Final|Native|Public|BlueprintCallable) // @ game+0x1db9a3c
};

// Class OPP.NavArea_ChaseOnly
// Size: 0x48 (Inherited: 0x48)
struct UNavArea_ChaseOnly : UNavArea {
};

// Class OPP.NavArea_Destroyable
// Size: 0x48 (Inherited: 0x48)
struct UNavArea_Destroyable : UNavArea {
};

// Class OPP.NavArea_Undestroyable
// Size: 0x48 (Inherited: 0x48)
struct UNavArea_Undestroyable : UNavArea {
};

// Class OPP.NavArea_UnlockedDoor
// Size: 0x48 (Inherited: 0x48)
struct UNavArea_UnlockedDoor : UNavArea {
};

// Class OPP.NavArea_LockedDoor
// Size: 0x48 (Inherited: 0x48)
struct UNavArea_LockedDoor : UNavArea {
};

// Class OPP.NavArea_OpenInvestigatedDoor
// Size: 0x48 (Inherited: 0x48)
struct UNavArea_OpenInvestigatedDoor : UNavArea {
};

// Class OPP.NavArea_UnlockedInvestigatedDoor
// Size: 0x48 (Inherited: 0x48)
struct UNavArea_UnlockedInvestigatedDoor : UNavArea {
};

// Class OPP.NavArea_LockedInvestigatedDoor
// Size: 0x48 (Inherited: 0x48)
struct UNavArea_LockedInvestigatedDoor : UNavArea {
};

// Class OPP.NavArea_Ledge
// Size: 0x48 (Inherited: 0x48)
struct UNavArea_Ledge : UNavArea {
};

// Class OPP.NavArea_KnownTrap
// Size: 0x48 (Inherited: 0x48)
struct UNavArea_KnownTrap : UNavArea {
};

// Class OPP.NavArea_CrouchUnder
// Size: 0x48 (Inherited: 0x48)
struct UNavArea_CrouchUnder : UNavArea {
};

// Class OPP.NavArea_MonsterCloset
// Size: 0x48 (Inherited: 0x48)
struct UNavArea_MonsterCloset : UNavArea {
};

// Class OPP.RBNavFilterBase
// Size: 0x48 (Inherited: 0x48)
struct URBNavFilterBase : UNavigationQueryFilter {
};

// Class OPP.RBNavFilter_Default
// Size: 0x48 (Inherited: 0x48)
struct URBNavFilter_Default : URBNavFilterBase {
};

// Class OPP.RBNavFilter_InChase
// Size: 0x48 (Inherited: 0x48)
struct URBNavFilter_InChase : URBNavFilterBase {
};

// Class OPP.RBNavFilter_UnawareInvestigation
// Size: 0x48 (Inherited: 0x48)
struct URBNavFilter_UnawareInvestigation : URBNavFilterBase {
};

// Class OPP.RBNavFilter_AwareInvestigation
// Size: 0x48 (Inherited: 0x48)
struct URBNavFilter_AwareInvestigation : URBNavFilterBase {
};

// Class OPP.RBNavFilter_NoNavLink
// Size: 0x48 (Inherited: 0x48)
struct URBNavFilter_NoNavLink : URBNavFilterBase {
};

// Class OPP.RBNavFilter_AvoidNavLinks
// Size: 0x48 (Inherited: 0x48)
struct URBNavFilter_AvoidNavLinks : URBNavFilterBase {
};

// Class OPP.RBNavFilter_IgnoreCosts
// Size: 0x48 (Inherited: 0x48)
struct URBNavFilter_IgnoreCosts : URBNavFilterBase {
};

// Class OPP.RBNavFilter_NoObstacles
// Size: 0x48 (Inherited: 0x48)
struct URBNavFilter_NoObstacles : URBNavFilterBase {
};

// Class OPP.RBNavFilter_MonsterCloset
// Size: 0x48 (Inherited: 0x48)
struct URBNavFilter_MonsterCloset : URBNavFilterBase {
};

// Class OPP.RBNavFilter_AttackClearance
// Size: 0x48 (Inherited: 0x48)
struct URBNavFilter_AttackClearance : URBNavFilterBase {
};

// Class OPP.RBRadialNavAreaComponent
// Size: 0x100 (Inherited: 0xe8)
struct URBRadialNavAreaComponent : UNavRelevantComponent {
	struct UNavArea* AreaClass; // 0xe8(0x08)
	float Radius; // 0xf0(0x04)
	float Height; // 0xf4(0x04)
	struct USceneComponent* OriginComponent; // 0xf8(0x08)
};

// Class OPP.RBPathFollowing
// Size: 0x2b0 (Inherited: 0x258)
struct URBPathFollowing : UPathFollowingComponent {
	struct ARBBot* bot; // 0x258(0x08)
	char pad_260[0x50]; // 0x260(0x50)
};

// Class OPP.RBPawnCustomizationManager
// Size: 0x138 (Inherited: 0x28)
struct URBPawnCustomizationManager : UObject {
	struct FMulticastInlineDelegate OnPawnCustomizationCompleted; // 0x28(0x10)
	struct TArray<struct FRBPawnCustomizationRequestInfo> RequestInfos; // 0x38(0x10)
	int32_t NextRequestIndex; // 0x48(0x04)
	char pad_4C[0xec]; // 0x4c(0xec)

	void UpdateStaticMeshComponent(struct UStaticMeshComponent* cmp, struct UStaticMesh* Mesh, struct TMap<struct FString, struct UMaterialInstanceConstant*>& materialOverrideMap); // Function OPP.RBPawnCustomizationManager.UpdateStaticMeshComponent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dc04dc
	void UpdateSkeletalMeshComponentFromCustomizationOption(struct USkeletalMeshComponent* cmp, struct URBPlayerCustomizationOption* Option, bool bIsFemale); // Function OPP.RBPawnCustomizationManager.UpdateSkeletalMeshComponentFromCustomizationOption // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc03e0
	void UpdateSkeletalMeshComponent(struct USkeletalMeshComponent* cmp, struct USkeletalMesh* Mesh, struct TMap<struct FString, struct UMaterialInstanceConstant*>& materialOverrideMap, bool bSetMasterPoseComponent); // Function OPP.RBPawnCustomizationManager.UpdateSkeletalMeshComponent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dc0050
	int32_t LoadPlayerCustomizationResourcesWithOutfitOverride(struct AActor* playerCustomizationOwner, struct URBCustomizationOutfit* Outfit); // Function OPP.RBPawnCustomizationManager.LoadPlayerCustomizationResourcesWithOutfitOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbf7c0
	int32_t LoadPlayerCustomizationResources(struct AActor* playerCustomizationOwner); // Function OPP.RBPawnCustomizationManager.LoadPlayerCustomizationResources // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbf448
	int32_t LoadPawnCustomizationResources(struct AActor* playerCustomizationOwner, struct TArray<struct FSoftObjectPath>& ResourcesToLoad, enum class EPawnCustomizationRequestType requestType); // Function OPP.RBPawnCustomizationManager.LoadPawnCustomizationResources // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1dbf238
	int32_t LoadNPCGruntResources(struct AActor* gruntOwner, struct FGruntCustomizationMeshesConfig& customizationMeshesConfig, struct FSelectedGruntCustomizationMeshesInfo& customizationMeshesInfo); // Function OPP.RBPawnCustomizationManager.LoadNPCGruntResources // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1dbf008
	int32_t LoadCustomResources(struct AActor* requestOwner, struct TArray<struct FSoftObjectPath>& ResourcesToLoad); // Function OPP.RBPawnCustomizationManager.LoadCustomResources // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1dbee84
	bool IsRequestIDActive(int32_t requestID); // Function OPP.RBPawnCustomizationManager.IsRequestIDActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dbedd4
	bool IsRequestActive(struct AActor* customizationOwner, enum class EPawnCustomizationRequestType requestType); // Function OPP.RBPawnCustomizationManager.IsRequestActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dbece8
	void CancelLoadCustomizationResources(int32_t requestID); // Function OPP.RBPawnCustomizationManager.CancelLoadCustomizationResources // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbeb9c
	void CancelAllLoadCustomizationResourcesOfType(struct AActor* customizationOwner, enum class EPawnCustomizationRequestType requestType); // Function OPP.RBPawnCustomizationManager.CancelAllLoadCustomizationResourcesOfType // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbead8
	void CancelAllLoadCustomizationResources(struct AActor* customizationOwner); // Function OPP.RBPawnCustomizationManager.CancelAllLoadCustomizationResources // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbea58
	void ApplySpecificPlayerCustomization(struct AActor* customizationOwner, struct FRBPlayerCustomizationInfo& RBPlayerCustomizationInfo); // Function OPP.RBPawnCustomizationManager.ApplySpecificPlayerCustomization // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dbe770
	void ApplyPlayerCustomizationWithOutfitOverride(struct AActor* customizationOwner, struct URBCustomizationOutfit* Outfit); // Function OPP.RBPawnCustomizationManager.ApplyPlayerCustomizationWithOutfitOverride // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dbe650
	void ApplyPlayerCustomization(struct AActor* customizationOwner); // Function OPP.RBPawnCustomizationManager.ApplyPlayerCustomization // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dbe588
	void AddExtraCustomizationMeshesForSlot(struct USkeletalMeshComponent* baseSlotSkeletalCompoment, struct TArray<struct USkeletalMesh*>& extraMeshes, enum class EPlayerCustomizationSlot Slot, struct TArray<struct USkeletalMeshComponent*>& outNewComponents); // Function OPP.RBPawnCustomizationManager.AddExtraCustomizationMeshesForSlot // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dbe420
};

// Class OPP.RBPharmaSkill
// Size: 0x458 (Inherited: 0x3d8)
struct ARBPharmaSkill : ARBActiveSkill {
	struct FRBGameplayAttribute EffectMultiplier; // 0x3d8(0x30)
	struct TArray<struct FRBPharmaSkillRuntimeInfo> PlayersInRadiusInfos; // 0x408(0x10)
	struct TArray<struct ARBPlayer*> PlayersInRadiusLocal; // 0x418(0x10)
	struct TArray<struct ARBPlayer*> PlayersAffected_Server; // 0x428(0x10)
	struct TArray<struct ARBNPC*> EnemiesSlowed_Server; // 0x438(0x10)
	char pad_448[0x10]; // 0x448(0x10)

	void OnRep_PawnInRadiusInfos(); // Function OPP.RBPharmaSkill.OnRep_PawnInRadiusInfos // (Final|Native|Protected) // @ game+0x1dc0008
	void Event_OnActiveQuietStop(); // Function OPP.RBPharmaSkill.Event_OnActiveQuietStop // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnActiveQuietStart(); // Function OPP.RBPharmaSkill.Event_OnActiveQuietStart // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnActiveOnPawn(struct ARBPawn* Pawn, bool bActive); // Function OPP.RBPharmaSkill.Event_OnActiveOnPawn // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnActiveLoudStop(); // Function OPP.RBPharmaSkill.Event_OnActiveLoudStop // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnActiveLoudStart(); // Function OPP.RBPharmaSkill.Event_OnActiveLoudStart // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	float BP_GetSkillRadius(); // Function OPP.RBPharmaSkill.BP_GetSkillRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dbe87c
};

// Class OPP.RBPhysicalMaterial
// Size: 0xb0 (Inherited: 0x80)
struct URBPhysicalMaterial : UPhysicalMaterial {
	struct FFootstepData FootstepData; // 0x80(0x28)
	bool bOverrideMaterialFromDecal; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)
};

// Class OPP.RBPhysicsVolume
// Size: 0x2b8 (Inherited: 0x280)
struct ARBPhysicsVolume : AVolume {
	bool bEnabled; // 0x280(0x01)
	bool bAllowCrouch; // 0x281(0x01)
	bool bAllowStand; // 0x282(0x01)
	bool bAllowRun; // 0x283(0x01)
	bool bAllowSprint; // 0x284(0x01)
	bool bAllowJump; // 0x285(0x01)
	bool bAllowSlide; // 0x286(0x01)
	bool bAllowItemConsume; // 0x287(0x01)
	bool bAllowLargeObject; // 0x288(0x01)
	char pad_289[0x3]; // 0x289(0x03)
	float OverrideWalkSpeed; // 0x28c(0x04)
	char bOverrideWalkSpeed : 1; // 0x290(0x01)
	char pad_290_1 : 7; // 0x290(0x01)
	char pad_291[0x3]; // 0x291(0x03)
	float OverrideRunSpeed; // 0x294(0x04)
	char bOverrideRunSpeed : 1; // 0x298(0x01)
	char pad_298_1 : 7; // 0x298(0x01)
	char pad_299[0x3]; // 0x299(0x03)
	float OverrideCrouchedWalkSpeed; // 0x29c(0x04)
	char bOverrideCrouchedWalkSpeed : 1; // 0x2a0(0x01)
	char pad_2A0_1 : 7; // 0x2a0(0x01)
	char pad_2A1[0x3]; // 0x2a1(0x03)
	float OverrideCrouchedRunSpeed; // 0x2a4(0x04)
	char bOverrideCrouchedRunSpeed : 1; // 0x2a8(0x01)
	char pad_2A8_1 : 7; // 0x2a8(0x01)
	char pad_2A9[0x3]; // 0x2a9(0x03)
	float OverrideSprintSpeed; // 0x2ac(0x04)
	char bOverrideSprintSpeed : 1; // 0x2b0(0x01)
	char pad_2B0_1 : 7; // 0x2b0(0x01)
	bool bCanDieOnLand; // 0x2b1(0x01)
	bool bCanReceiveDamageOnLand; // 0x2b2(0x01)
	bool bKill; // 0x2b3(0x01)
	char pad_2B4[0x4]; // 0x2b4(0x04)

	void BP_SetEnabled(bool bEnabledValue); // Function OPP.RBPhysicsVolume.BP_SetEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dbe8a8
};

// Class OPP.RBPickupSearchObjectiveCoordinator
// Size: 0x1668 (Inherited: 0xba8)
struct ARBPickupSearchObjectiveCoordinator : ARBBaseObjectiveCoordinator {
	struct TArray<struct FPickupObjectiveRuntimeData> PickupObjectives; // 0xba8(0x10)
	struct FPickupObjectiveRuntimeData LocalPickupObjective; // 0xbb8(0x30)
	struct TArray<struct FPickupObjectiveConfig> PickUpObjectiveConfigs; // 0xbe8(0x10)
	struct FObjectiveUISettings ObjectiveUISettings; // 0xbf8(0xa50)
	struct FText ObjectiveTutorialText; // 0x1648(0x18)
	char pad_1660[0x8]; // 0x1660(0x08)

	void OnRep_PickupObjectives(); // Function OPP.RBPickupSearchObjectiveCoordinator.OnRep_PickupObjectives // (Final|Native|Public) // @ game+0x1dcd5e0
	void OnPlayerRevived_Server(struct ARBPlayer* instigatorActor, struct ARBPlayer* subjectActor); // Function OPP.RBPickupSearchObjectiveCoordinator.OnPlayerRevived_Server // (Final|Native|Public) // @ game+0x1dcd228
	void OnPlayerPickedUpItem_Server(struct ARBPlayer* Player, struct ARBPickup* Item); // Function OPP.RBPickupSearchObjectiveCoordinator.OnPlayerPickedUpItem_Server // (Final|Native|Public) // @ game+0x1dcd164
	void OnPlayerDisconnect_Server(struct ARBPlayer* Player); // Function OPP.RBPickupSearchObjectiveCoordinator.OnPlayerDisconnect_Server // (Final|Native|Public) // @ game+0x1dcd0e4
	void OnPawnRespawned_Server(struct ARBPawn* Pawn); // Function OPP.RBPickupSearchObjectiveCoordinator.OnPawnRespawned_Server // (Final|Native|Public) // @ game+0x1dcd064
	void OnPawnKilled_Server(struct ARBPawn* instigatorActor, struct ARBPawn* Subject); // Function OPP.RBPickupSearchObjectiveCoordinator.OnPawnKilled_Server // (Final|Native|Public) // @ game+0x1dccfa0
};

// Class OPP.RBPipeModule
// Size: 0x260 (Inherited: 0x248)
struct ARBPipeModule : AActor {
	struct TArray<struct UActorComponent*> Connectors; // 0x248(0x10)
	struct USceneComponent* SceneRoot; // 0x258(0x08)

	void DestroyConnectors(); // Function OPP.RBPipeModule.DestroyConnectors // (Final|Native|Public|BlueprintCallable) // @ game+0x1dca2e0
	struct UStaticMeshComponent* AddStaticMesh(struct FTransform& Transforms, struct UStaticMesh* StaticMesh); // Function OPP.RBPipeModule.AddStaticMesh // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1dc783c
	struct USplineMeshComponent* AddSplineMeshComponent(); // Function OPP.RBPipeModule.AddSplineMeshComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x1dc7818
};

// Class OPP.RBPlayer
// Size: 0x7520 (Inherited: 0x4d70)
struct ARBPlayer : ARBPawn {
	float MovementSpeedBonusMultiplier; // 0x4d70(0x04)
	char pad_4D74[0x4]; // 0x4d74(0x04)
	struct FMulticastInlineDelegate OnActiveSkillActorChanged; // 0x4d78(0x10)
	char pad_4D88[0x70]; // 0x4d88(0x70)
	struct FMulticastInlineDelegate OnEnterLocomotionEvent; // 0x4df8(0x10)
	struct FMulticastInlineDelegate OnInventoryUpdateEvent; // 0x4e08(0x10)
	struct FMulticastInlineDelegate OnPlayerIndicatorTypeChanged; // 0x4e18(0x10)
	struct FMulticastInlineDelegate OnCompletingObjectiveChanged; // 0x4e28(0x10)
	struct FMulticastInlineDelegate OnMaxHealthChangedDelegate; // 0x4e38(0x10)
	struct FMulticastInlineDelegate OnStaminaChanged; // 0x4e48(0x10)
	struct FMulticastInlineDelegate OnMaxStaminaChangedDelegate; // 0x4e58(0x10)
	struct FMulticastInlineDelegate OnShoveCooldownRatioChanged; // 0x4e68(0x10)
	struct FMulticastInlineDelegate OnMaxNVBatteryChangedDelegate; // 0x4e78(0x10)
	struct FMulticastInlineDelegate OnBatteryLevelChangedDelegate; // 0x4e88(0x10)
	struct FMulticastInlineDelegate OnEffectivePsychosisMeterChanged; // 0x4e98(0x10)
	struct FMulticastInlineDelegate OnNoStaminaConsumptionStarted; // 0x4ea8(0x10)
	struct FMulticastInlineDelegate OnNoStaminaConsumptionEnded; // 0x4eb8(0x10)
	struct FMulticastInlineDelegate OnItemHeldChangedEvent; // 0x4ec8(0x10)
	struct FMulticastInlineDelegate OnPlayerCustomizationChanged; // 0x4ed8(0x10)
	struct FMulticastInlineDelegate OnPlayerShove; // 0x4ee8(0x10)
	struct FMulticastInlineDelegate OnActiveEffectsUpdated; // 0x4ef8(0x10)
	struct FMulticastInlineDelegate OnActiveEffectAdded; // 0x4f08(0x10)
	struct FMulticastInlineDelegate OnActiveEffectUpdated; // 0x4f18(0x10)
	struct FMulticastInlineDelegate OnActiveEffectRemoved; // 0x4f28(0x10)
	struct FMulticastInlineDelegate OnNVActiveStateChanged; // 0x4f38(0x10)
	struct FMulticastInlineDelegate OnNVAnimationDone; // 0x4f48(0x10)
	struct FMulticastInlineDelegate OnIsAimingThrowableChanged; // 0x4f58(0x10)
	struct FMulticastInlineDelegate OnWakeUp; // 0x4f68(0x10)
	float CurrentFOV; // 0x4f78(0x04)
	bool bIsGhost; // 0x4f7c(0x01)
	char pad_4F7D[0x3]; // 0x4f7d(0x03)
	int32_t PlayerSlot; // 0x4f80(0x04)
	char pad_4F84[0x134]; // 0x4f84(0x134)
	struct ARBPickup* UseItemQueued; // 0x50b8(0x08)
	struct FScheduledUObject ConsumeItemPreviousInteractable; // 0x50c0(0x88)
	struct ARBThrowableWeapon* GroundAndPoundEscapeItem; // 0x5148(0x08)
	char pad_5150[0x8]; // 0x5150(0x08)
	struct FCoopMoveData CoopMove; // 0x5158(0x98)
	struct FCoopMoveData ScheduledCoopMove; // 0x51f0(0x98)
	struct FNetworkFloat CoopMoveProgress; // 0x5288(0x10)
	char pad_5298[0x8]; // 0x5298(0x08)
	float StruggleRatio_Victim; // 0x52a0(0x04)
	float StruggleRatio_Helper; // 0x52a4(0x04)
	char pad_52A8[0x10]; // 0x52a8(0x10)
	float StruggleAction_Victim_Timestamp; // 0x52b8(0x04)
	float StruggleAction_Helper_Timestamp; // 0x52bc(0x04)
	struct ARBTrapDart* CoopTrapDart; // 0x52c0(0x08)
	float LastExitCustomInteractableTimeStamp; // 0x52c8(0x04)
	char pad_52CC[0x34]; // 0x52cc(0x34)
	struct TArray<struct FPlayerSpeedModifierData> SpeedModifiers; // 0x5300(0x10)
	char pad_5310[0xa0]; // 0x5310(0xa0)
	struct ARBCrouchUnderMarker* SlideUnderMarker; // 0x53b0(0x08)
	char pad_53B8[0x18]; // 0x53b8(0x18)
	struct ARBSlideDownVolume* slideDownVolume; // 0x53d0(0x08)
	char pad_53D8[0x1c]; // 0x53d8(0x1c)
	struct FNetworkVector2D PeekRatio; // 0x53f4(0x1c)
	struct URBPlayerInvestigationZoneComponent* CurrentInvestigation; // 0x5410(0x08)
	char pad_5418[0x8]; // 0x5418(0x08)
	struct URBPlayerInvestigationZoneComponent* LastInvestigationDone; // 0x5420(0x08)
	char pad_5428[0x8]; // 0x5428(0x08)
	struct TArray<struct ARBDoor*> KnownLockedDoors; // 0x5430(0x10)
	char pad_5440[0x50]; // 0x5440(0x50)
	struct FRotator MeshRotationOffset_Replicated; // 0x5490(0x0c)
	struct FVector MeshTranslationOffset_Replicated; // 0x549c(0x0c)
	char pad_54A8[0x24]; // 0x54a8(0x24)
	struct FVector DeadBodyExtent; // 0x54cc(0x0c)
	struct FVector DeadBodyOffset; // 0x54d8(0x0c)
	char pad_54E4[0x10]; // 0x54e4(0x10)
	int32_t TemporaryHealth; // 0x54f4(0x04)
	float TemporaryHealthF; // 0x54f8(0x04)
	int32_t TemporaryDamage; // 0x54fc(0x04)
	float TemporaryDamageF; // 0x5500(0x04)
	char pad_5504[0x18]; // 0x5504(0x18)
	float PainKillerEffectsDuration; // 0x551c(0x04)
	char pad_5520[0x8]; // 0x5520(0x08)
	float KnockeddownDuration; // 0x5528(0x04)
	char pad_552C[0xc4]; // 0x552c(0xc4)
	struct FRBGameplayAttribute TrapDamageReceivedMultiplier; // 0x55f0(0x30)
	char pad_5620[0x90]; // 0x5620(0x90)
	bool bCanBeRevived; // 0x56b0(0x01)
	char pad_56B1[0xf]; // 0x56b1(0x0f)
	struct TArray<struct FOwnedItemSettings> inventory; // 0x56c0(0x10)
	struct FOwnedItemSettings FistInventoryItem; // 0x56d0(0x58)
	struct FScheduledUObject CurrentEquippedItem; // 0x5728(0x88)
	struct FScheduledUObject SavedEquippedItem; // 0x57b0(0x88)
	char pad_5838[0x10]; // 0x5838(0x10)
	struct TArray<struct FRBGameplayAttributeModifierInfo> PlayerSpecificUpgrades; // 0x5848(0x10)
	struct TArray<struct FName> RegisteredPlayerSpecificUpgrades; // 0x5858(0x10)
	struct TArray<struct ARBPickup*> ItemsDropped_Server; // 0x5868(0x10)
	char pad_5878[0xd0]; // 0x5878(0xd0)
	struct ARBPickup* ItemHeld; // 0x5948(0x08)
	struct FScheduledUObject HoldConsumeActionItem; // 0x5950(0x88)
	char pad_59D8[0x8]; // 0x59d8(0x08)
	struct FScheduledBool bWantsToTrade; // 0x59e0(0x70)
	char pad_5A50[0x8]; // 0x5a50(0x08)
	struct ARBPickup* LastEquippedItem; // 0x5a58(0x08)
	char pad_5A60[0x8]; // 0x5a60(0x08)
	struct ARBDoor* LastDoorClosed; // 0x5a68(0x08)
	char pad_5A70[0x8]; // 0x5a70(0x08)
	struct ARBDoor* LastDoorInFocus; // 0x5a78(0x08)
	char pad_5A80[0x8]; // 0x5a80(0x08)
	struct ARBDoor* LastDoorCrossed; // 0x5a88(0x08)
	char pad_5A90[0x8]; // 0x5a90(0x08)
	struct URBInteractionZoneComponent* FocusInteractable; // 0x5a98(0x08)
	struct URBInteractionZoneComponent* ParentFocusInteractable; // 0x5aa0(0x08)
	struct ARBPawn* FocusInteractionPawn; // 0x5aa8(0x08)
	char pad_5AB0[0x34]; // 0x5ab0(0x34)
	enum class EPlayerIndicatorType playerIndicatorType; // 0x5ae4(0x01)
	char pad_5AE5[0x3]; // 0x5ae5(0x03)
	float PlayerIndicatorTimeLeft; // 0x5ae8(0x04)
	float PlayerIndicatorIconProgress; // 0x5aec(0x04)
	char pad_5AF0[0x18]; // 0x5af0(0x18)
	struct FScheduledUObject CurrentLargePickup; // 0x5b08(0x88)
	char pad_5B90[0x8]; // 0x5b90(0x08)
	bool bIsInAttackRestrictedZone; // 0x5b98(0x01)
	char pad_5B99[0x3]; // 0x5b99(0x03)
	struct FNetworkFloat DoorOperatingRatio; // 0x5b9c(0x10)
	char pad_5BAC[0x4]; // 0x5bac(0x04)
	struct URBDisplayMessageZoneComponent* FocusMessageDisplay; // 0x5bb0(0x08)
	struct FPlayerShoveData playerShove; // 0x5bb8(0x10)
	struct FPlayerHitReactionParams HitReactionParams; // 0x5bc8(0x48)
	struct FScheduledSpecialAnimData ScheduledSpecialAnimData; // 0x5c10(0x30)
	struct FDamageResult DelayedDamageResult; // 0x5c40(0x18)
	struct UBlendSpaceBase* PendingGnPEnterBS; // 0x5c58(0x08)
	char pad_5C60[0x8]; // 0x5c60(0x08)
	struct FScheduledBool bIsAimingThrowable; // 0x5c68(0x70)
	char pad_5CD8[0x4]; // 0x5cd8(0x04)
	struct FDizzinessData Dizzy; // 0x5cdc(0x154)
	float Replicated_DizzyMvmtOffset; // 0x5e30(0x04)
	float Replicated_DizzyAngleApproachCoeff; // 0x5e34(0x04)
	float Replicated_DizzyMvmtRandomMotion; // 0x5e38(0x04)
	char pad_5E3C[0xc]; // 0x5e3c(0x0c)
	int32_t EffectivePsychosisMeter; // 0x5e48(0x04)
	char pad_5E4C[0xc]; // 0x5e4c(0x0c)
	int32_t CurrentPsychosisBracket; // 0x5e58(0x04)
	char pad_5E5C[0x13c]; // 0x5e5c(0x13c)
	struct FRBGameplayAttribute maxStamina; // 0x5f98(0x30)
	char pad_5FC8[0x180]; // 0x5fc8(0x180)
	float stamina; // 0x6148(0x04)
	char pad_614C[0xc]; // 0x614c(0x0c)
	struct TArray<struct FStaminaRestoreData> StaminaRestoreData; // 0x6158(0x10)
	char pad_6168[0x8]; // 0x6168(0x08)
	struct TArray<float> DamageBoostPawnTimestamps; // 0x6170(0x10)
	char pad_6180[0x8]; // 0x6180(0x08)
	struct URBSoundComponent* WatchAKComponent; // 0x6188(0x08)
	struct URBSoundComponent* OverridePrimeAssetVOComponent; // 0x6190(0x08)
	float CurrentVisualDetectionMeter; // 0x6198(0x04)
	float CurrentAudioDetectionMeter; // 0x619c(0x04)
	float UINoiseMeter; // 0x61a0(0x04)
	enum class EUINoiseMeterStrength UINoiseMeterStrength; // 0x61a4(0x01)
	char pad_61A5[0x13]; // 0x61a5(0x13)
	float NightHunterNVInterference; // 0x61b8(0x04)
	bool bHasBotAwareOfPlayer; // 0x61bc(0x01)
	char pad_61BD[0x7]; // 0x61bd(0x07)
	float LastBotAwareTimeStamp_Server; // 0x61c4(0x04)
	struct TArray<struct ARBNPC*> ChaseNPCs; // 0x61c8(0x10)
	char pad_61D8[0x10]; // 0x61d8(0x10)
	struct TArray<struct FName> PreviousActiveEffectTrackingDataEntries; // 0x61e8(0x10)
	struct TArray<struct FActiveEffectTrackingData> activeEffectTrackingDataEntries; // 0x61f8(0x10)
	bool bAutoHealthRegenInProgress; // 0x6208(0x01)
	char pad_6209[0x7]; // 0x6209(0x07)
	struct FMulticastInlineDelegate OnAutoHealthRegenEnded; // 0x6210(0x10)
	struct FMulticastInlineDelegate OnInventorySizeChanged; // 0x6220(0x10)
	char pad_6230[0x18]; // 0x6230(0x18)
	struct URBAimAssistComponent* ThrowAimAssistTargetComp; // 0x6248(0x08)
	struct UCurveFloat* WakeUpEyeCurve; // 0x6250(0x08)
	struct AActor* FistItemClass; // 0x6258(0x08)
	struct FPlayerMemory Memory; // 0x6260(0x64)
	char pad_62C4[0x1c]; // 0x62c4(0x1c)
	struct TArray<struct UObject*> CachedCustomizationResources; // 0x62e0(0x10)
	char pad_62F0[0x70]; // 0x62f0(0x70)
	struct ARBPickup* ItemToDrop; // 0x6360(0x08)
	char pad_6368[0x8]; // 0x6368(0x08)
	struct FTransform ItemToDropTargetTransform; // 0x6370(0x30)
	char pad_63A0[0x38]; // 0x63a0(0x38)
	int32_t NumberOfTimeKnockedDown; // 0x63d8(0x04)
	bool bIsPushingObjectiveCart; // 0x63dc(0x01)
	bool bIsStalkingTarget; // 0x63dd(0x01)
	bool bIsInteractingWithHighProrityObjective; // 0x63de(0x01)
	bool bIsCompletingObjective_Client; // 0x63df(0x01)
	bool bIgnorePlayerToPlayerCollisions; // 0x63e0(0x01)
	char pad_63E1[0x3]; // 0x63e1(0x03)
	float EnvironmentLightingIntensity; // 0x63e4(0x04)
	struct URBPuzzleRoomComponent* ActivePuzzleRoom; // 0x63e8(0x08)
	char pad_63F0[0x28]; // 0x63f0(0x28)
	struct URBPlayerCamera* Camera; // 0x6418(0x08)
	struct URBPlayerCameraLocationComponent* PlayerCameraComponent; // 0x6420(0x08)
	char pad_6428[0x228]; // 0x6428(0x228)
	struct FRBGameplayAttribute MaxNVBattery; // 0x6650(0x30)
	char pad_6680[0x64]; // 0x6680(0x64)
	float NVBattery; // 0x66e4(0x04)
	struct FScheduledBool bIsNVActive; // 0x66e8(0x70)
	struct FScheduledBool bWantsNVActive; // 0x6758(0x70)
	enum class EItemType LastConsumedBatteryType; // 0x67c8(0x01)
	char pad_67C9[0xb]; // 0x67c9(0x0b)
	float NVAnimationDuration; // 0x67d4(0x04)
	float NVAnimationRatio; // 0x67d8(0x04)
	float NVAnimationTargetRatio; // 0x67dc(0x04)
	struct FRBAnimRef CurrentGoggleNVAnim; // 0x67e0(0x30)
	struct FRBAnimRef CurrentArmNVAnim; // 0x6810(0x30)
	bool bNVAnimationActive; // 0x6840(0x01)
	char pad_6841[0x337]; // 0x6841(0x337)
	struct FRBGameplayAttribute NoiseTrapNoiseMultiplier; // 0x6b78(0x30)
	char pad_6BA8[0x2d0]; // 0x6ba8(0x2d0)
	struct USkeletalMeshComponent* RigSkeletalMeshComp; // 0x6e78(0x08)
	struct USkeletalMeshComponent* CustomActionSkeletalMeshComp; // 0x6e80(0x08)
	struct USceneComponent* EyeLocationComp; // 0x6e88(0x08)
	struct URBNVComponent* NVComponent; // 0x6e90(0x08)
	struct USpotLightComponent* ProximityLight; // 0x6e98(0x08)
	struct USpotLightComponent* SpecLight; // 0x6ea0(0x08)
	struct ARBActiveSkill* activeSkillActor; // 0x6ea8(0x08)
	float DefaultProximityLightInsensity; // 0x6eb0(0x04)
	float HiddenProximityLightInsensity; // 0x6eb4(0x04)
	struct URBAnimInstance* AnimInstanceClass1P; // 0x6eb8(0x08)
	struct URBAnimInstance* AnimInstanceClass3P; // 0x6ec0(0x08)
	char pad_6EC8[0x8]; // 0x6ec8(0x08)
	struct FPostProcessSettings InfiniteStaminaPostProcessSettings; // 0x6ed0(0x5b0)
	int32_t InfiniteStaminaEffectPriority; // 0x7480(0x04)
	bool bUseInfiniteStaminaEffect; // 0x7484(0x01)
	char pad_7485[0x3]; // 0x7485(0x03)
	struct ARBHUD* RBHUD; // 0x7488(0x08)
	char pad_7490[0x14]; // 0x7490(0x14)
	bool bDebugChase; // 0x74a4(0x01)
	char pad_74A5[0xb]; // 0x74a5(0x0b)
	struct URBSASChairPanelComponent* ReservedSASChair_Server; // 0x74b0(0x08)
	struct ARBController* RBController; // 0x74b8(0x08)
	bool bIsAssociatedPlayerConnected; // 0x74c0(0x01)
	bool bIsControlledByGameMode; // 0x74c1(0x01)
	char pad_74C2[0x6]; // 0x74c2(0x06)
	struct FString FullPlayerName; // 0x74c8(0x10)
	struct ARBCrouchUnderMarker* InsideCrouchUnderMarker; // 0x74d8(0x08)
	char pad_74E0[0x30]; // 0x74e0(0x30)
	struct ARBPlayerStart* ForcedWakeUpPlayerStart; // 0x7510(0x08)
	char pad_7518[0x8]; // 0x7518(0x08)

	void UnderwaterStateChanged(bool bIsUnderwater); // Function OPP.RBPlayer.UnderwaterStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void TogglePlayerDepthTest(); // Function OPP.RBPlayer.TogglePlayerDepthTest // (Final|Exec|Native|Public) // @ game+0x1dcf56c
	void StartCustomAction(struct URBCustomActionAnimInstance* customActionAnimBP); // Function OPP.RBPlayer.StartCustomAction // (Final|Native|Public|BlueprintCallable) // @ game+0x1dcf464
	void ShowItemHeld(struct ARBPickup* pickup); // Function OPP.RBPlayer.ShowItemHeld // (Final|Native|Public|BlueprintCallable) // @ game+0x1dcf3e4
	void SetLastConsumedBatteryType(enum class EItemType batteryType); // Function OPP.RBPlayer.SetLastConsumedBatteryType // (Final|Native|Public|BlueprintCallable) // @ game+0x1dcf360
	void Server_UpdateMeshOffsets(struct FVector translationOffset, struct FRotator RotationOffset); // Function OPP.RBPlayer.Server_UpdateMeshOffsets // (Net|Native|Event|Protected|NetServer|HasDefaults) // @ game+0x1dcf2a0
	void Server_TryStartTrading(); // Function OPP.RBPlayer.Server_TryStartTrading // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dcf254
	void Server_TryDropItem(struct ARBPickup* Item); // Function OPP.RBPlayer.Server_TryDropItem // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1dcf1d0
	void Server_TalkWheel(enum class ETalkWheelAction action, struct FVector currentEyeLocation, struct FVector currentEyeForward); // Function OPP.RBPlayer.Server_TalkWheel // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x1dcf0d0
	void Server_StopTrading(); // Function OPP.RBPlayer.Server_StopTrading // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1dcf0b8
	void Server_StopInteractingWithPanelChild(); // Function OPP.RBPlayer.Server_StopInteractingWithPanelChild // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dcf06c
	void Server_SetWantsNVActive(bool bActive); // Function OPP.RBPlayer.Server_SetWantsNVActive // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1dcefe8
	void Server_SetSwitchPanelPartDesiredStatusValue(struct ARBSwitchPanelPart* panelPart, float Value); // Function OPP.RBPlayer.Server_SetSwitchPanelPartDesiredStatusValue // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dceef8
	void Server_SetSaveEquippedItem(struct ARBPickup* Item); // Function OPP.RBPlayer.Server_SetSaveEquippedItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dcee58
	void Server_SetObjectiveActorSeen(struct URBObjectiveActorComponent* objectiveActorComponent); // Function OPP.RBPlayer.Server_SetObjectiveActorSeen // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1dcedd4
	void Server_SetObjectiveActorPinged(struct URBObjectiveActorComponent* objectiveActorComponent, bool isPinged); // Function OPP.RBPlayer.Server_SetObjectiveActorPinged // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1dced08
	void Server_SetInteractiblePanelChildValue(struct URBInteractibleComponent* panelChild, float Value); // Function OPP.RBPlayer.Server_SetInteractiblePanelChildValue // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dcec18
	void Server_SetGodMode(bool bEnabled); // Function OPP.RBPlayer.Server_SetGodMode // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dceb68
	void Server_SetEquippedInventoryItem(struct ARBPickup* Item); // Function OPP.RBPlayer.Server_SetEquippedInventoryItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dceac8
	void Server_ScheduleHelperCollisionEnabled(struct URBEvalCorridorHelperComponent* corridorHelper, bool bEnable, float executionServerTime); // Function OPP.RBPlayer.Server_ScheduleHelperCollisionEnabled // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1dce9c4
	void Server_RequestExitSASChair(); // Function OPP.RBPlayer.Server_RequestExitSASChair // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dce978
	void Server_RemovePing(); // Function OPP.RBPlayer.Server_RemovePing // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1dce960
	void Server_RemoveInventoryItem(struct ARBPickup* Item, bool bDestroyItem); // Function OPP.RBPlayer.Server_RemoveInventoryItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dce868
	void Server_OnTortureInputPressed(struct URBTorturePanelComponent* panelCmp, float Timestamp, int32_t inputPressed); // Function OPP.RBPlayer.Server_OnTortureInputPressed // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dce740
	void Server_NotifyPanelUserReady(struct URBInteractiblePanelComponent* panel); // Function OPP.RBPlayer.Server_NotifyPanelUserReady // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dce6a0
	void Server_ExitCustomInteractable(); // Function OPP.RBPlayer.Server_ExitCustomInteractable // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dce654
	void Server_EscapeGroundAndPound(struct ARBThrowableWeapon* throwableWeapon); // Function OPP.RBPlayer.Server_EscapeGroundAndPound // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1dce5d0
	void Server_EnterCoopTrap_Victim(struct ARBTrapDart* trapDart); // Function OPP.RBPlayer.Server_EnterCoopTrap_Victim // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1dce530
	void Server_EnterCoopTrap_Helper(struct ARBPlayer* Victim); // Function OPP.RBPlayer.Server_EnterCoopTrap_Helper // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1dce490
	void Server_DebugSimultaneousJumpForward(); // Function OPP.RBPlayer.Server_DebugSimultaneousJumpForward // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dce444
	void Server_DebugSimultaneousInteraction(); // Function OPP.RBPlayer.Server_DebugSimultaneousInteraction // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dce3f8
	void Server_DebugMovementAlwaysDesync(); // Function OPP.RBPlayer.Server_DebugMovementAlwaysDesync // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dce3ac
	void Server_DebugKillSelf(); // Function OPP.RBPlayer.Server_DebugKillSelf // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dce360
	void Server_DebugInteractionDesync(); // Function OPP.RBPlayer.Server_DebugInteractionDesync // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dce314
	void Server_DebugHitReaction(enum class EPlayerHitReactionType hitReactionType, float relativeAngle); // Function OPP.RBPlayer.Server_DebugHitReaction // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dce228
	void Server_DebugDownSelf(); // Function OPP.RBPlayer.Server_DebugDownSelf // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dce1dc
	void Server_DebugChase(); // Function OPP.RBPlayer.Server_DebugChase // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dce190
	void Server_DeactivateActiveSkill(); // Function OPP.RBPlayer.Server_DeactivateActiveSkill // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dce144
	void Server_CheatStunSelf(); // Function OPP.RBPlayer.Server_CheatStunSelf // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dcde70
	void Server_CheatHurtSelf(float damageAmount, bool bHitReaction, int32_t hurtType); // Function OPP.RBPlayer.Server_CheatHurtSelf // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dcdd38
	void Server_Cheat_ToggleSilentForBots(); // Function OPP.RBPlayer.Server_Cheat_ToggleSilentForBots // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dce0f8
	void Server_Cheat_ToggleInvisibleToBots(); // Function OPP.RBPlayer.Server_Cheat_ToggleInvisibleToBots // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dce0ac
	void Server_Cheat_ToggleConditionalDebugActor(struct AActor* Actor); // Function OPP.RBPlayer.Server_Cheat_ToggleConditionalDebugActor // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dce00c
	void Server_Cheat_DumpDebugInfo(struct AActor* Actor); // Function OPP.RBPlayer.Server_Cheat_DumpDebugInfo // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dcdf6c
	void Server_Cheat_DebugCoopMove(bool bExceptLocal); // Function OPP.RBPlayer.Server_Cheat_DebugCoopMove // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dcdebc
	void Server_ActivateScreamerStun(float distRatio); // Function OPP.RBPlayer.Server_ActivateScreamerStun // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dcdc94
	void Server_ActivateActiveSkill(); // Function OPP.RBPlayer.Server_ActivateActiveSkill // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1dcdc48
	struct ARBPlayerState* RBPlayerState(); // Function OPP.RBPlayer.RBPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dcdc24
	void OnWantsToTradeChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBPlayer.OnWantsToTradeChangedCallback // (Final|Native|Public) // @ game+0x1dcdafc
	void OnWantsNVActiveChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBPlayer.OnWantsNVActiveChangedCallback // (Final|Native|Public) // @ game+0x1dcda7c
	void OnSavedEquippedItemChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBPlayer.OnSavedEquippedItemChangedCallback // (Final|Native|Public) // @ game+0x1dcd9fc
	void OnRep_WantsToTrade(); // Function OPP.RBPlayer.OnRep_WantsToTrade // (Final|Native|Public) // @ game+0x1dcd9e8
	void OnRep_WantsNVActive(); // Function OPP.RBPlayer.OnRep_WantsNVActive // (Final|Native|Public) // @ game+0x1dcd9cc
	void OnRep_UINoiseMeterStrength(); // Function OPP.RBPlayer.OnRep_UINoiseMeterStrength // (Final|Native|Public) // @ game+0x1dcd9b8
	void OnRep_TemporaryHealth(); // Function OPP.RBPlayer.OnRep_TemporaryHealth // (Final|Native|Public) // @ game+0x1dcd968
	void OnRep_TemporaryDamage(); // Function OPP.RBPlayer.OnRep_TemporaryDamage // (Final|Native|Public) // @ game+0x1dcd918
	void OnRep_StruggleRatio_Helper(float lastStruggleRatio_Helper); // Function OPP.RBPlayer.OnRep_StruggleRatio_Helper // (Final|Native|Public) // @ game+0x1dcd884
	void OnRep_StruggleAction_Victim_Timestamp(float lastTimestamp); // Function OPP.RBPlayer.OnRep_StruggleAction_Victim_Timestamp // (Final|Native|Public) // @ game+0x1dcd800
	void OnRep_StruggleAction_Helper_Timestamp(float lastTimestamp); // Function OPP.RBPlayer.OnRep_StruggleAction_Helper_Timestamp // (Final|Native|Public) // @ game+0x1dcd77c
	void OnRep_Stamina(float oldStamina); // Function OPP.RBPlayer.OnRep_Stamina // (Final|Native|Public) // @ game+0x1dcd6fc
	void OnRep_SlideDownVolume(struct ARBSlideDownVolume* slideDownVolume); // Function OPP.RBPlayer.OnRep_SlideDownVolume // (Final|Native|Public) // @ game+0x1dcd638
	void OnRep_SavedEquippedItem(); // Function OPP.RBPlayer.OnRep_SavedEquippedItem // (Final|Native|Public) // @ game+0x1dcd61c
	void OnRep_PlayerSpecificUpgrades(); // Function OPP.RBPlayer.OnRep_PlayerSpecificUpgrades // (Final|Native|Public) // @ game+0x1dcd608
	void OnRep_PlayerCameraComponent(); // Function OPP.RBPlayer.OnRep_PlayerCameraComponent // (Final|Native|Public) // @ game+0x1dcd5f4
	void OnRep_NVBattery(); // Function OPP.RBPlayer.OnRep_NVBattery // (Final|Native|Public) // @ game+0x1dcd5cc
	void OnRep_ItemHeld(); // Function OPP.RBPlayer.OnRep_ItemHeld // (Final|Native|Public) // @ game+0x1521dbc
	void OnRep_IsNVActive(); // Function OPP.RBPlayer.OnRep_IsNVActive // (Final|Native|Public) // @ game+0x1dcd5b0
	void OnRep_IsAimingThrowable(); // Function OPP.RBPlayer.OnRep_IsAimingThrowable // (Final|Native|Public) // @ game+0x1dcd594
	void OnRep_Inventory(); // Function OPP.RBPlayer.OnRep_Inventory // (Final|Native|Public) // @ game+0x1dcd580
	void OnRep_IgnorePlayerToPlayerCollisions(); // Function OPP.RBPlayer.OnRep_IgnorePlayerToPlayerCollisions // (Final|Native|Public) // @ game+0x1dcd56c
	void OnRep_HoldConsumeActionItem(); // Function OPP.RBPlayer.OnRep_HoldConsumeActionItem // (Final|Native|Public) // @ game+0x1dcd550
	void OnRep_EquippedInventory(); // Function OPP.RBPlayer.OnRep_EquippedInventory // (Final|Native|Public) // @ game+0x1dcd53c
	void OnRep_EffectivePsychosisMeter(int32_t OldValue); // Function OPP.RBPlayer.OnRep_EffectivePsychosisMeter // (Final|Native|Protected) // @ game+0x1dcd4bc
	void OnRep_DamageBoostPawnTimestamps(struct TArray<float>& oldDamageBoostPawnTimestamps); // Function OPP.RBPlayer.OnRep_DamageBoostPawnTimestamps // (Final|Native|Public|HasOutParms) // @ game+0x1dcd424
	void OnRep_CurrentPsychosisBracket(int32_t oldPsychosisBracket); // Function OPP.RBPlayer.OnRep_CurrentPsychosisBracket // (Final|Native|Protected) // @ game+0x17ed724
	void OnRep_CurrentLargePickup(); // Function OPP.RBPlayer.OnRep_CurrentLargePickup // (Final|Native|Public) // @ game+0x1dcd408
	void OnRep_CurrentEquippedItem(); // Function OPP.RBPlayer.OnRep_CurrentEquippedItem // (Final|Native|Public) // @ game+0x1dcd3ec
	void OnRep_CoopTrapDart(struct ARBTrapDart* lastTrapDart); // Function OPP.RBPlayer.OnRep_CoopTrapDart // (Final|Native|Protected) // @ game+0x1dcd36c
	void OnRep_ConsumeItemPreviousInteractable(); // Function OPP.RBPlayer.OnRep_ConsumeItemPreviousInteractable // (Final|Native|Public) // @ game+0x1dcd350
	void OnRep_ChaseNPCs(); // Function OPP.RBPlayer.OnRep_ChaseNPCs // (Final|Native|Public) // @ game+0x1dcd33c
	void OnRep_AutoHealthRegenInProgress(); // Function OPP.RBPlayer.OnRep_AutoHealthRegenInProgress // (Final|Native|Public) // @ game+0x1dcd328
	void OnRep_ActiveSkillActor(); // Function OPP.RBPlayer.OnRep_ActiveSkillActor // (Final|Native|Public) // @ game+0x1dcd314
	void OnRep_ActivePuzzleRoom(); // Function OPP.RBPlayer.OnRep_ActivePuzzleRoom // (Final|Native|Public) // @ game+0x1dcd300
	void OnRep_ActiveEffectTrackingDataEntries(); // Function OPP.RBPlayer.OnRep_ActiveEffectTrackingDataEntries // (Final|Native|Public) // @ game+0x1dcd2ec
	void OnPlayerCustomizationChanged__DelegateSignature(struct ARBPlayer* RBPlayer); // DelegateFunction OPP.RBPlayer.OnPlayerCustomizationChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	void OnMaxStaminaChanged(float OldValue); // Function OPP.RBPlayer.OnMaxStaminaChanged // (Final|Native|Public) // @ game+0x1dccf1c
	void OnMaxNVBatteryChanged(float OldValue); // Function OPP.RBPlayer.OnMaxNVBatteryChanged // (Final|Native|Public) // @ game+0x1dcce98
	void OnMaxHealthChanged(float OldValue); // Function OPP.RBPlayer.OnMaxHealthChanged // (Final|Native|Public) // @ game+0x1dcce14
	void OnItemHeldChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBPlayer.OnItemHeldChangedCallback // (Final|Native|Public) // @ game+0x1d32d30
	void OnIsNVActiveChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBPlayer.OnIsNVActiveChangedCallback // (Final|Native|Public) // @ game+0x1dccd94
	void OnIsAimingThrowableChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBPlayer.OnIsAimingThrowableChangedCallback // (Final|Native|Public) // @ game+0x1dccd14
	void OnInventorySlotCountChanged(float OldValue); // Function OPP.RBPlayer.OnInventorySlotCountChanged // (Final|Native|Public) // @ game+0x1dccc90
	void OnHoldConsumeActionItemChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBPlayer.OnHoldConsumeActionItemChangedCallback // (Final|Native|Public) // @ game+0x1dccb54
	void OnEffectiveNumberOfPlayersChanged(); // Function OPP.RBPlayer.OnEffectiveNumberOfPlayersChanged // (Final|Native|Public) // @ game+0x1dccb40
	void OnCurrentLargePickupChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBPlayer.OnCurrentLargePickupChangedCallback // (Final|Native|Public) // @ game+0x1dccac0
	void OnCurrentEquippedItemChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBPlayer.OnCurrentEquippedItemChangedCallback // (Final|Native|Public) // @ game+0x1dcca40
	void OnConsumeItemPreviousInteractableChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBPlayer.OnConsumeItemPreviousInteractableChangedCallback // (Final|Native|Public) // @ game+0x1d32d30
	void OnAffectedByPsychosisGas_BP(); // Function OPP.RBPlayer.OnAffectedByPsychosisGas_BP // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Muticast_OnPsychosisSpookActivated(); // Function OPP.RBPlayer.Muticast_OnPsychosisSpookActivated // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcca28
	void Multicast_TriggerTraversalBlendToLocomotionMode(); // Function OPP.RBPlayer.Multicast_TriggerTraversalBlendToLocomotionMode // (Net|Native|Event|NetMulticast|Public) // @ game+0x1dcca10
	void Multicast_ThrowWeapon(); // Function OPP.RBPlayer.Multicast_ThrowWeapon // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcc9f8
	void Multicast_TeleportPlayer(float teleportPawnTime, float teleportServerTime, struct FVector NewLoc, struct FRotator newRot, bool bIsInstant, bool bAdjustLocForFeets, bool bInterruptAction); // Function OPP.RBPlayer.Multicast_TeleportPlayer // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1dcc7e0
	void Multicast_TalkWheel(enum class ETalkWheelAction action, struct FVector currentEyeLocation, struct FVector currentEyeForward); // Function OPP.RBPlayer.Multicast_TalkWheel // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1dcc6e0
	void Multicast_StopHallucination(enum class EHallucinationType halluType, enum class HallucinationFadeOutType fadeOutType); // Function OPP.RBPlayer.Multicast_StopHallucination // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcc618
	void Multicast_StopAdrenaline(float stopPawnTime); // Function OPP.RBPlayer.Multicast_StopAdrenaline // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcc590
	void Multicast_StartHallucination(struct FHallucinationData halluData); // Function OPP.RBPlayer.Multicast_StartHallucination // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcc508
	void Multicast_StartDoorOperation(struct ARBDoor* door); // Function OPP.RBPlayer.Multicast_StartDoorOperation // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcc484
	void Multicast_SpecialAnimation(struct FScheduledSpecialAnimData SpecialAnimData); // Function OPP.RBPlayer.Multicast_SpecialAnimation // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcc3f4
	void Multicast_ShakeOffPushable(struct FVector pushedDir); // Function OPP.RBPlayer.Multicast_ShakeOffPushable // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1dcc374
	void Multicast_SetTraversalData(struct FTraversalMoveData moveData); // Function OPP.RBPlayer.Multicast_SetTraversalData // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcc2dc
	void Multicast_SetPainKillerEffectsDuration(float Value); // Function OPP.RBPlayer.Multicast_SetPainKillerEffectsDuration // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcc254
	void Multicast_SetGodMode(bool bEnabled); // Function OPP.RBPlayer.Multicast_SetGodMode // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcc1d0
	void Multicast_SetCoopMoveOfferingState(enum class ECoopMoveOfferState coopMoveOfferingState, struct ARBLedgeMarker* LedgeMarker, struct ARBPlayer* SpecificPlayer, enum class ECoopMoveType coopMoveOfferingType, enum class EBasicDirection BasicDirection); // Function OPP.RBPlayer.Multicast_SetCoopMoveOfferingState // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x1dcc04c
	void Multicast_ScheduleCoopMove(struct FCoopMoveData CoopMoveData, struct FScheduledSpecialMoveData ScheduledSpecialMoveData); // Function OPP.RBPlayer.Multicast_ScheduleCoopMove // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x1dcbf6c
	void Multicast_RemovePing(); // Function OPP.RBPlayer.Multicast_RemovePing // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcbf54
	void Multicast_QuickTest(struct FVector testLocation); // Function OPP.RBPlayer.Multicast_QuickTest // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1dcbed4
	void Multicast_PutDownLargeObject(struct ARBLargePickup* largePickup, struct FVector Location, struct FQuat Rotation, bool bPredicted); // Function OPP.RBPlayer.Multicast_PutDownLargeObject // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1dcbd98
	void Multicast_PlayPulledFromHidespot(struct FPairedTwoPhaseAnimData animData, struct ARBNPC* Attacker, struct URBHidespotComponent* hidespot, struct FVector TargetPos, struct FVector TargetDir); // Function OPP.RBPlayer.Multicast_PlayPulledFromHidespot // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1dcbc14
	void Multicast_PlayGrabbed(struct FPairedTwoPhaseAnimData animData, struct ARBNPC* Attacker, struct FVector TargetPos, struct FVector TargetDir); // Function OPP.RBPlayer.Multicast_PlayGrabbed // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1dcbac8
	void Multicast_PickupLargeObject(struct ARBLargePickup* largePickup, struct FVector Location, struct FVector Forward); // Function OPP.RBPlayer.Multicast_PickupLargeObject // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1dcb9c4
	void Multicast_PerformStandardFatality(struct FStandardFatalityData fatalityData); // Function OPP.RBPlayer.Multicast_PerformStandardFatality // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcb944
	void Multicast_OnTrapRoomFailed(); // Function OPP.RBPlayer.Multicast_OnTrapRoomFailed // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcb92c
	void Multicast_OnKnockedDown(struct AActor* knockDownInstigator); // Function OPP.RBPlayer.Multicast_OnKnockedDown // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcb8a8
	void Multicast_OnContinuousPsychosisGained(); // Function OPP.RBPlayer.Multicast_OnContinuousPsychosisGained // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcb890
	void Multicast_InteractDynamicObstacle(struct ARBDynamicObstacle* obstacle, struct FVector charLocationRef, struct FVector movementAcceleration); // Function OPP.RBPlayer.Multicast_InteractDynamicObstacle // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x1dcb78c
	void Multicast_HitReaction(struct FPlayerHitReactionParams hitReaction, bool bSchedule); // Function OPP.RBPlayer.Multicast_HitReaction // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcb6a8
	void Multicast_GhostPawn(bool bGhost, struct FVector camLoc, struct FRotator camRot); // Function OPP.RBPlayer.Multicast_GhostPawn // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1dcb594
	void Multicast_GetUpFromKnockedDown(); // Function OPP.RBPlayer.Multicast_GetUpFromKnockedDown // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcb57c
	void Multicast_GainCurrency(enum class ECurrencyType currencyType, int32_t amount); // Function OPP.RBPlayer.Multicast_GainCurrency // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcb4b4
	void Multicast_FlagAsFakePlayer(); // Function OPP.RBPlayer.Multicast_FlagAsFakePlayer // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcb49c
	void Multicast_ExitGroundAndPound(enum class ESpecialMove playerSM, enum class EDamageResultType DamageResult, struct UAnimSequence* playerExitAnimSeq); // Function OPP.RBPlayer.Multicast_ExitGroundAndPound // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcb3a0
	void Multicast_EnterGroundAndPoundVictim(struct ARBPawn* Attacker, struct FVector TargetPos, struct FVector ambushDir, struct UBlendSpaceBase* playerAnimBS); // Function OPP.RBPlayer.Multicast_EnterGroundAndPoundVictim // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1dcb260
	void Multicast_DrawDebugSphere(struct FVector Location, float Radius, struct FColor Color, float duration); // Function OPP.RBPlayer.Multicast_DrawDebugSphere // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1dcb124
	void Multicast_DrawDebugLine(struct FVector locationA, struct FVector locationB, struct FColor Color, float duration); // Function OPP.RBPlayer.Multicast_DrawDebugLine // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1dcafe4
	void Multicast_DoShove(struct FPlayerShoveData playerShove); // Function OPP.RBPlayer.Multicast_DoShove // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcaf5c
	void Multicast_DoItemPickup(struct ARBPickup* pickupItem); // Function OPP.RBPlayer.Multicast_DoItemPickup // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcaed8
	void Multicast_DoHealthRegenEffect(); // Function OPP.RBPlayer.Multicast_DoHealthRegenEffect // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcaec0
	void Multicast_DebugSimultaneousInteraction(); // Function OPP.RBPlayer.Multicast_DebugSimultaneousInteraction // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcaea8
	void Multicast_DebugInventory(bool bEnabled); // Function OPP.RBPlayer.Multicast_DebugInventory // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcae24
	void Multicast_ConsumeStaminaItem(float startPawnTimestamp, float noStaminaConsumptionDuration, float staminaRestoreAmount, float movementSpeedMultiplier); // Function OPP.RBPlayer.Multicast_ConsumeStaminaItem // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcace0
	void Multicast_ConsumeInventoryItem(struct ARBPickup* pickupItem); // Function OPP.RBPlayer.Multicast_ConsumeInventoryItem // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcac5c
	void Multicast_Command(struct FString MulticastCommand); // Function OPP.RBPlayer.Multicast_Command // (Net|NetReliableNative|Event|NetMulticast|Public|NetValidate) // @ game+0x1dcaba4
	void Multicast_Cheat_ToggleSilentForBots(bool bEnabled); // Function OPP.RBPlayer.Multicast_Cheat_ToggleSilentForBots // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcab20
	void Multicast_Cheat_ToggleInvisibleToBots(bool bEnabled); // Function OPP.RBPlayer.Multicast_Cheat_ToggleInvisibleToBots // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcaa9c
	void Multicast_CancelStateOnDamage(); // Function OPP.RBPlayer.Multicast_CancelStateOnDamage // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcaa84
	void Multicast_AddPingForDroppedItem(struct ARBPickup* droppedItem); // Function OPP.RBPlayer.Multicast_AddPingForDroppedItem // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1dcaa00
	void LogPlayerEvent_Server(enum class EPlayerEvent EventType, int32_t explicitValue); // Function OPP.RBPlayer.LogPlayerEvent_Server // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dca93c
	bool IsLocallySpectated(); // Function OPP.RBPlayer.IsLocallySpectated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca920
	bool IsLocallyControlledOrSpectated(); // Function OPP.RBPlayer.IsLocallyControlledOrSpectated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca8fc
	bool IsInSAS(); // Function OPP.RBPlayer.IsInSAS // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca8d8
	bool IsInPsychosis(); // Function OPP.RBPlayer.IsInPsychosis // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca8b4
	bool IsFollower(); // Function OPP.RBPlayer.IsFollower // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca88c
	bool IsFocusOnSwappingItem(struct ARBPickup* Item); // Function OPP.RBPlayer.IsFocusOnSwappingItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca7fc
	bool IsEyeLocationUnderwater(); // Function OPP.RBPlayer.IsEyeLocationUnderwater // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca7d8
	bool IsControllerInMenu(); // Function OPP.RBPlayer.IsControllerInMenu // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca7b8
	bool IsConsideredUsingSpectraActiveSkill(); // Function OPP.RBPlayer.IsConsideredUsingSpectraActiveSkill // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca794
	bool IsConsideredPeeking(bool bIgnoreNetworkFlag); // Function OPP.RBPlayer.IsConsideredPeeking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca70c
	bool IsConsideredMakingKnockedDownBloodTrail(); // Function OPP.RBPlayer.IsConsideredMakingKnockedDownBloodTrail // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca6e8
	bool IsConsideredKnockedDown(bool bConsiderDelay); // Function OPP.RBPlayer.IsConsideredKnockedDown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca658
	bool IsAssociatedPlayerConnected(); // Function OPP.RBPlayer.IsAssociatedPlayerConnected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca640
	bool HasHotPotato(); // Function OPP.RBPlayer.HasHotPotato // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca61c
	struct FUniqueNetIdRepl GetUniqueId(); // Function OPP.RBPlayer.GetUniqueId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca5e0
	float GetKnockoutBleedoutTime(); // Function OPP.RBPlayer.GetKnockoutBleedoutTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca5b8
	struct ARBPickup* GetItemHeld(); // Function OPP.RBPlayer.GetItemHeld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca5a0
	bool GetIsAimingThrowable(); // Function OPP.RBPlayer.GetIsAimingThrowable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca588
	struct ARBPickup* GetHoldConsumeActionItem(); // Function OPP.RBPlayer.GetHoldConsumeActionItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca564
	struct FString GetGamePlayerName(); // Function OPP.RBPlayer.GetGamePlayerName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca528
	int32_t GetCurrentEquippedOrHolsteredItemInventoryIndex(); // Function OPP.RBPlayer.GetCurrentEquippedOrHolsteredItemInventoryIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca504
	enum class EItemType GetCurrentEquippedItemType(); // Function OPP.RBPlayer.GetCurrentEquippedItemType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca4e0
	int32_t GetCurrentEquippedItemInventoryIndex(); // Function OPP.RBPlayer.GetCurrentEquippedItemInventoryIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca4bc
	struct FItemDefinition GetCurrentEquippedItemDefinition(); // Function OPP.RBPlayer.GetCurrentEquippedItemDefinition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca490
	struct ARBPickup* GetCurrentEquippedItem(); // Function OPP.RBPlayer.GetCurrentEquippedItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca46c
	enum class EActiveSkillType GetCurrentActiveSkillType(); // Function OPP.RBPlayer.GetCurrentActiveSkillType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca410
	float GetCoopMoveProgress(); // Function OPP.RBPlayer.GetCoopMoveProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dca3f8
	void ForceNightVision(bool bNVState, bool bDisableInput); // Function OPP.RBPlayer.ForceNightVision // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dca310
	void Event_StopSpectatingLocally(); // Function OPP.RBPlayer.Event_StopSpectatingLocally // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_StartSpectatingLocally(); // Function OPP.RBPlayer.Event_StartSpectatingLocally // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_PlayHitReactionEffects(struct FPlayerHitReactionParams& hitReaction, struct FVector& attackLoc, float hitRelativeAngle); // Function OPP.RBPlayer.Event_PlayHitReactionEffects // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnWakeUp(); // Function OPP.RBPlayer.Event_OnWakeUp // (Event|Protected|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnPlayerStateChanged(); // Function OPP.RBPlayer.Event_OnPlayerStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnPlayerPerspectiveChanged(); // Function OPP.RBPlayer.Event_OnPlayerPerspectiveChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnPlayerAnimInstanceChanged(); // Function OPP.RBPlayer.Event_OnPlayerAnimInstanceChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnNVAnimationNotify(bool bWantsNvOn, enum class ENightVisionAnimNotifyType Type); // Function OPP.RBPlayer.Event_OnNVAnimationNotify // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnLocalLookAt(); // Function OPP.RBPlayer.Event_OnLocalLookAt // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnLastConsumedBatteryTypeChanged(enum class EItemType batteryType); // Function OPP.RBPlayer.Event_OnLastConsumedBatteryTypeChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnHealthRestored(); // Function OPP.RBPlayer.Event_OnHealthRestored // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnCustomizationChanged(); // Function OPP.RBPlayer.Event_OnCustomizationChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnContinuousPsychosisGained(); // Function OPP.RBPlayer.Event_OnContinuousPsychosisGained // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnActiveSkillActorChanged(struct AActor* activeSkillActor); // Function OPP.RBPlayer.Event_OnActiveSkillActorChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnActiveEffectUpdated(struct FActiveEffectTrackingData& activeEffectTrackingDataEntry); // Function OPP.RBPlayer.Event_OnActiveEffectUpdated // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnActiveEffectsUpdated(); // Function OPP.RBPlayer.Event_OnActiveEffectsUpdated // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnActiveEffectRemoved(struct FName& EffectId); // Function OPP.RBPlayer.Event_OnActiveEffectRemoved // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnActiveEffectAdded(struct FActiveEffectTrackingData& activeEffectTrackingDataEntry); // Function OPP.RBPlayer.Event_OnActiveEffectAdded // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void Event_InitReplicated(); // Function OPP.RBPlayer.Event_InitReplicated // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void EndCustomAction(); // Function OPP.RBPlayer.EndCustomAction // (Final|Native|Public|BlueprintCallable) // @ game+0x1dca2f4
	void Debug_ForceSASChairInteraction(); // Function OPP.RBPlayer.Debug_ForceSASChairInteraction // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1521dbc
	void Client_TalkWheelThrottled(); // Function OPP.RBPlayer.Client_TalkWheelThrottled // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1dca2c8
	void Client_StopCameraShake(bool bInstantly, struct UObject* shakeOwner, bool bIgnoreOwnerCondition); // Function OPP.RBPlayer.Client_StopCameraShake // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1dca1c8
	void Client_StartVolumetricFogLightmapFade(bool bFadeIn); // Function OPP.RBPlayer.Client_StartVolumetricFogLightmapFade // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1dca144
	void Client_ShowCustomInteractionMessage(struct FText Message, enum class EMessagePriority Priority, float duration); // Function OPP.RBPlayer.Client_ShowCustomInteractionMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1dca034
	void Client_RemoveObjectiveIcon(struct AActor* inActor); // Function OPP.RBPlayer.Client_RemoveObjectiveIcon // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1dc9fb0
	void Client_PlayDisturbanceWarning(); // Function OPP.RBPlayer.Client_PlayDisturbanceWarning // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1dc9f98
	void Client_PlayDamageDealtEffects(struct FAttackStrike strike); // Function OPP.RBPlayer.Client_PlayDamageDealtEffects // (Net|Native|Event|Public|NetClient) // @ game+0x1dc9f18
	void Client_OnRepossessed(float PawnTime); // Function OPP.RBPlayer.Client_OnRepossessed // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1dc9e90
	void Client_OnAffectedByGas(); // Function OPP.RBPlayer.Client_OnAffectedByGas // (Net|Native|Event|Public|NetClient) // @ game+0x1dc9e78
	void Client_HideCustomInteractionMessage(); // Function OPP.RBPlayer.Client_HideCustomInteractionMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1dc9e60
	void Client_ForceNightVision(bool bNVState, bool bDisableInput); // Function OPP.RBPlayer.Client_ForceNightVision // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1dc9d94
	void Client_DebugSimultaneousJumpForward(); // Function OPP.RBPlayer.Client_DebugSimultaneousJumpForward // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1dc9d7c
	void Client_ActivateCameraShake(struct FCameraShakeData shakeData, struct FVector sourceLocation, struct UObject* shakeOwner); // Function OPP.RBPlayer.Client_ActivateCameraShake // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x1dc9c44
	void ClearInventory_Server(bool bIncludeActiveSkill); // Function OPP.RBPlayer.ClearInventory_Server // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dc9bc4
	void BP_TestHitReaction(enum class EPlayerHitReactionType hitReactionType, struct FVector& HitDirection); // Function OPP.RBPlayer.BP_TestHitReaction // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1dc9afc
	void BP_StopHallucination(bool bFadeOut); // Function OPP.RBPlayer.BP_StopHallucination // (Final|Native|Public|BlueprintCallable) // @ game+0x1dc9a48
	void BP_StopDizziness(bool bFadeOut); // Function OPP.RBPlayer.BP_StopDizziness // (Final|Native|Public|BlueprintCallable) // @ game+0x1dc99c8
	void BP_StopCameraShake(bool bInstantly, struct UObject* shakeOwner, bool bIgnoreOwnerCondition); // Function OPP.RBPlayer.BP_StopCameraShake // (Final|Native|Public|BlueprintCallable) // @ game+0x1dc9884
	void BP_StartHallucination(enum class EHallucinationType halluType, struct URBHallucinationConfig* Config); // Function OPP.RBPlayer.BP_StartHallucination // (Final|Native|Public|BlueprintCallable) // @ game+0x1dc97ac
	void BP_StartDizziness(struct URBDizzinessConfig* configAsset); // Function OPP.RBPlayer.BP_StartDizziness // (Final|Native|Public|BlueprintCallable) // @ game+0x1dc9720
	bool BP_ShouldShowStamina(); // Function OPP.RBPlayer.BP_ShouldShowStamina // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc96b4
	void BP_SetGodMode(bool bGod); // Function OPP.RBPlayer.BP_SetGodMode // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x12e20c0
	void BP_RemoveItem(struct ARBPickup* pickup, bool bDestroyItem); // Function OPP.RBPlayer.BP_RemoveItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dc95e4
	void BP_RemoveAndDropItem(struct ARBPickup* pickup, struct FTransform& dropTransform, bool bUseItemSpawnPointRef, bool bPredicted); // Function OPP.RBPlayer.BP_RemoveAndDropItem // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1dc93f8
	void BP_OnTrapRoomFailed(); // Function OPP.RBPlayer.BP_OnTrapRoomFailed // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	bool BP_IsUsingGamepad(); // Function OPP.RBPlayer.BP_IsUsingGamepad // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc93d8
	bool BP_IsNVOn(); // Function OPP.RBPlayer.BP_IsNVOn // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc93c0
	bool BP_IsNVBatteryRecharging(); // Function OPP.RBPlayer.BP_IsNVBatteryRecharging // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc9360
	bool BP_IsFlaggedAsFakePlayer(); // Function OPP.RBPlayer.BP_IsFlaggedAsFakePlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x150d484
	bool BP_IsExhausted(); // Function OPP.RBPlayer.BP_IsExhausted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc9348
	void BP_InstaKill(); // Function OPP.RBPlayer.BP_InstaKill // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dc9334
	void BP_InstaDown(); // Function OPP.RBPlayer.BP_InstaDown // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dc9320
	bool BP_HasInventoryItem(struct ARBPickup* ItemClass); // Function OPP.RBPlayer.BP_HasInventoryItem // (Final|Native|Public|BlueprintCallable) // @ game+0x1dc91fc
	struct ARBPickup* BP_GetPickupInFocus(bool& outIsSwap); // Function OPP.RBPlayer.BP_GetPickupInFocus // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1dc9164
	int32_t BP_GetNumberOfItemForCategory(enum class EItemCategory Category); // Function OPP.RBPlayer.BP_GetNumberOfItemForCategory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc90d8
	float BP_GetNoStaminaConsumptionDuration(); // Function OPP.RBPlayer.BP_GetNoStaminaConsumptionDuration // (Final|Native|Public|BlueprintCallable) // @ game+0x1dc90b0
	int32_t BP_GetMaxNumberOfItemForCategory(enum class EItemCategory Category); // Function OPP.RBPlayer.BP_GetMaxNumberOfItemForCategory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc9024
	enum class EItemType BP_GetLastConsumedBatteryType(); // Function OPP.RBPlayer.BP_GetLastConsumedBatteryType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc900c
	struct TArray<struct ARBPickup*> BP_GetItemsForCategory(enum class EItemCategory Category); // Function OPP.RBPlayer.BP_GetItemsForCategory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc8f48
	int32_t BP_GetItemIndexForSwap(enum class EItemCategory Category, struct ARBPickup* Item); // Function OPP.RBPlayer.BP_GetItemIndexForSwap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc8e6c
	struct ARBPickup* BP_GetItemFromIndex(int32_t itemIndex); // Function OPP.RBPlayer.BP_GetItemFromIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc8dc4
	int32_t BP_GetInventoryIndexFromItem(struct ARBPickup* Item); // Function OPP.RBPlayer.BP_GetInventoryIndexFromItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc8d34
	float BP_GetHealthF(); // Function OPP.RBPlayer.BP_GetHealthF // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc8d1c
	float BP_GetCurrentStamina(); // Function OPP.RBPlayer.BP_GetCurrentStamina // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc8d04
	void BP_ForceWakeUpSequence(struct ARBPlayerStart* PlayerStart); // Function OPP.RBPlayer.BP_ForceWakeUpSequence // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dc8c5c
	void BP_ForceTradeOnFakePlayer(); // Function OPP.RBPlayer.BP_ForceTradeOnFakePlayer // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dc8c44
	void BP_ForceSpecialAnimation(bool bCancelInteraction, struct AActor* targetLocation, struct UAnimSequence* Animation, bool bCollisionEnabled); // Function OPP.RBPlayer.BP_ForceSpecialAnimation // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dc89d8
	void BP_ForcePickupItem(struct ARBPickup* pickup); // Function OPP.RBPlayer.BP_ForcePickupItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dc8948
	void BP_ForceInteractionOnFakePlayer(float interval); // Function OPP.RBPlayer.BP_ForceInteractionOnFakePlayer // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d32350
	void BP_ForceHitReaction(bool bCancelInteraction, enum class EPlayerHitReactionType hitReactionType, struct FVector& HitDirection); // Function OPP.RBPlayer.BP_ForceHitReaction // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1dc883c
	void BP_ForceDropHeldObjectives(); // Function OPP.RBPlayer.BP_ForceDropHeldObjectives // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dc8828
	void BP_ForceCrouchOnFakePlayer(); // Function OPP.RBPlayer.BP_ForceCrouchOnFakePlayer // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dc87e8
	void BP_FlagAsFakePlayer(); // Function OPP.RBPlayer.BP_FlagAsFakePlayer // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dc87a0
	int32_t BP_FindFirstInventoryItemIndexFromClass(struct ARBPickup*& ItemClass, bool bAllowChildClasses); // Function OPP.RBPlayer.BP_FindFirstInventoryItemIndexFromClass // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc86c4
	int32_t BP_FindFirstInventoryItemIndex(enum class EItemCategory Category); // Function OPP.RBPlayer.BP_FindFirstInventoryItemIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc8634
	void BP_Debug_AdjustPlayerPosition(struct AActor* refActor, float offsetFwd, float offsetSide, float offsetHeight); // Function OPP.RBPlayer.BP_Debug_AdjustPlayerPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x1dc7f7c
	void BP_DamagePlayer(enum class EDamageType dmgType, struct AActor* SrcActor, float DmgAmount, bool bCanKill, bool bCanKnockdown); // Function OPP.RBPlayer.BP_DamagePlayer // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dc7de8
	void BP_ClearProgressivePsychosis(); // Function OPP.RBPlayer.BP_ClearProgressivePsychosis // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dc7dd4
	void BP_AddScoringPoints(int32_t nbPoints); // Function OPP.RBPlayer.BP_AddScoringPoints // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dc7d54
	void BP_AddProgressivePsychosis(float psychosisAmount, bool bGas, bool bBypassPlayerReductions); // Function OPP.RBPlayer.BP_AddProgressivePsychosis // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dc7c44
	void BP_ActivateCameraShake(struct FCameraShakeData shakeData, struct FVector sourceLocation, struct UObject* shakeOwner); // Function OPP.RBPlayer.BP_ActivateCameraShake // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1dc7a58
};

// Class OPP.RBPlayerCamera
// Size: 0x8c0 (Inherited: 0x28)
struct URBPlayerCamera : UObject {
	struct ARBPlayer* Player; // 0x28(0x08)
	char pad_30[0x230]; // 0x30(0x230)
	struct TArray<struct FCameraShakeData> AllShakes; // 0x260(0x10)
	char pad_270[0x650]; // 0x270(0x650)
};

// Class OPP.RBPlayerCameraLocationComponent
// Size: 0x870 (Inherited: 0x850)
struct URBPlayerCameraLocationComponent : UCameraComponent {
	bool bEnabled; // 0x850(0x01)
	bool bShowPreview; // 0x851(0x01)
	char pad_852[0x2]; // 0x852(0x02)
	struct FVector2D YawLimit; // 0x854(0x08)
	struct FVector2D PitchLimit; // 0x85c(0x08)
	char pad_864[0xc]; // 0x864(0x0c)
};

// Class OPP.RBPlayerTriggerVolume
// Size: 0x2d8 (Inherited: 0x280)
struct ARBPlayerTriggerVolume : AVolume {
	char pad_280[0x8]; // 0x280(0x08)
	bool InvertedState; // 0x288(0x01)
	enum class ETriggerComponentNetType NetType; // 0x289(0x01)
	char pad_28A[0x6]; // 0x28a(0x06)
	struct URBPlayerTriggerComponent* PlayerTriggerComponent; // 0x290(0x08)
	struct FMulticastInlineDelegate OnTriggeredEvent; // 0x298(0x10)
	struct FMulticastInlineDelegate OnUntriggeredEvent; // 0x2a8(0x10)
	struct FMulticastInlineDelegate OnPlayerEnteredEvent; // 0x2b8(0x10)
	struct FMulticastInlineDelegate OnPlayerExitedEvent; // 0x2c8(0x10)

	void OnUntriggeredEventBypass(struct URBPlayerTriggerComponent* Trigger); // Function OPP.RBPlayerTriggerVolume.OnUntriggeredEventBypass // (Final|Native|Public) // @ game+0x1de4534
	void OnTriggeredEventBypass(struct URBPlayerTriggerComponent* Trigger); // Function OPP.RBPlayerTriggerVolume.OnTriggeredEventBypass // (Final|Native|Public) // @ game+0x1de44b4
	void OnPlayerExitedEventBypass(struct ARBPlayer* Player); // Function OPP.RBPlayerTriggerVolume.OnPlayerExitedEventBypass // (Native|Public) // @ game+0x1de4328
	void OnPlayerEnteredEventBypass(struct ARBPlayer* Player); // Function OPP.RBPlayerTriggerVolume.OnPlayerEnteredEventBypass // (Final|Native|Public) // @ game+0x1de42a8
	bool IsEnabled(); // Function OPP.RBPlayerTriggerVolume.IsEnabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de3c30
	void BP_SetEnabled(bool Enabled); // Function OPP.RBPlayerTriggerVolume.BP_SetEnabled // (Native|Public|BlueprintCallable) // @ game+0x1de31b8
};

// Class OPP.RBPlayerCell
// Size: 0x3b8 (Inherited: 0x2d8)
struct ARBPlayerCell : ARBPlayerTriggerVolume {
	char pad_2D8[0x8]; // 0x2d8(0x08)
	struct URBCinematicZoneComponent* CinematicZone; // 0x2e0(0x08)
	struct URBObjectiveActorComponent* objectiveActorComponent; // 0x2e8(0x08)
	struct ARBPlayerStart* SelectedPlayerStart; // 0x2f0(0x08)
	struct TArray<struct AActor*> LinkedPlayerStarts; // 0x2f8(0x10)
	struct TArray<struct ARBBlockingVolume*> LinkedBlockingVolumes; // 0x308(0x10)
	struct TArray<struct ARBCollectibleDisplay*> LinkedCollectibleDisplays; // 0x318(0x10)
	struct TArray<struct ARBPlayerCellItem*> LinkedPlayerCellItems; // 0x328(0x10)
	struct TArray<struct ARBDoor*> LinkedDoors; // 0x338(0x10)
	struct TArray<struct ARBInteractible*> LinkedInteractibles; // 0x348(0x10)
	struct TArray<struct ARBCustomizationInterface*> LinkedCustomizationInterfaces; // 0x358(0x10)
	struct AActor* CellCustomizationCamera; // 0x368(0x08)
	struct ARBLobbyPlayerController* AssignedPlayer; // 0x370(0x08)
	struct ARBLobbyPlayerState* AssignedPlayerState; // 0x378(0x08)
	struct ARBLobbyPlayerState* OldAssignedPlayerState; // 0x380(0x08)
	struct TArray<struct ARBPawn*> PreviouslyAllowedPawns; // 0x388(0x10)
	struct AActor* CellMenuCharacter; // 0x398(0x08)
	struct ARBQuestGiver* CellQuestGiver; // 0x3a0(0x08)
	struct TArray<struct ARBPawn*> AllowedPawns; // 0x3a8(0x10)

	void RefreshCustomization(struct TArray<struct FRBPlayerCellCustomizationEntry>& playerCellCustomization); // Function OPP.RBPlayerCell.RefreshCustomization // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x1dd6660
	void OnPlayerCellCustomizationUpdated(struct ARBLobbyPlayerState* RBLobbyPlayerState, struct TArray<struct FRBPlayerCellCustomizationEntry>& playerCellCustomization); // Function OPP.RBPlayerCell.OnPlayerCellCustomizationUpdated // (Final|Native|Private|HasOutParms) // @ game+0x1dd6584
	void OnAssignedPlayerStateUpdated(); // Function OPP.RBPlayerCell.OnAssignedPlayerStateUpdated // (Final|Native|Private) // @ game+0x1dd6484
	void OnAllowedPawnsUpdated(); // Function OPP.RBPlayerCell.OnAllowedPawnsUpdated // (Final|Native|Private) // @ game+0x1dd6470
	struct TArray<struct AActor*> GetLinkedPlayerStarts(); // Function OPP.RBPlayerCell.GetLinkedPlayerStarts // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dd56a4
	struct TArray<struct ARBInteractible*> GetLinkedInteractibles(); // Function OPP.RBPlayerCell.GetLinkedInteractibles // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd5688
	struct TArray<struct ARBDoor*> GetLinkedDoors(); // Function OPP.RBPlayerCell.GetLinkedDoors // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd566c
	struct TArray<struct ARBCustomizationInterface*> GetLinkedCustomizationInterfaces(); // Function OPP.RBPlayerCell.GetLinkedCustomizationInterfaces // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd55f8
	struct TArray<struct ARBCollectibleDisplay*> GetLinkedCollectibleDisplays(); // Function OPP.RBPlayerCell.GetLinkedCollectibleDisplays // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd5584
	struct TArray<struct ARBPlayerCellItem*> GetLinkedCellItems(); // Function OPP.RBPlayerCell.GetLinkedCellItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd5510
	struct TArray<struct ARBBlockingVolume*> GetLinkedBlockingVolumes(); // Function OPP.RBPlayerCell.GetLinkedBlockingVolumes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd549c
	struct AActor* GetCellMenuCharacter(); // Function OPP.RBPlayerCell.GetCellMenuCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd50a8
	struct AActor* GetCellCustomizationCamera(); // Function OPP.RBPlayerCell.GetCellCustomizationCamera // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd5090
	struct ARBLobbyPlayerController* GetAssignedPlayer(); // Function OPP.RBPlayerCell.GetAssignedPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dd5078
};

// Class OPP.RBCustomizationOption
// Size: 0x70 (Inherited: 0x28)
struct URBCustomizationOption : UObject {
	struct FName ID; // 0x28(0x08)
	struct FName OnlineUnlockId; // 0x30(0x08)
	struct FText Name; // 0x38(0x18)
	struct FText Description; // 0x50(0x18)
	enum class EPlayerCustomizationRarity Rarity; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)

	bool IsUnlocked(struct ARBPlayerState* PlayerState); // Function OPP.RBCustomizationOption.IsUnlocked // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd63dc
	bool IsPartOfDLCContentPack(); // Function OPP.RBCustomizationOption.IsPartOfDLCContentPack // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd6328
	bool IsDevOption(); // Function OPP.RBCustomizationOption.IsDevOption // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd6300
	bool IsAcquired(struct ARBPlayerState* PlayerState); // Function OPP.RBCustomizationOption.IsAcquired // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd626c
};

// Class OPP.RBPlayerCellItemDefinition
// Size: 0x180 (Inherited: 0x70)
struct URBPlayerCellItemDefinition : URBCustomizationOption {
	struct FName Category; // 0x70(0x08)
	struct TSoftClassPtr<UObject> Actor; // 0x78(0x28)
	struct TSoftObjectPtr<UStaticMesh> Mesh; // 0xa0(0x28)
	struct TSoftObjectPtr<UMaterialInstanceConstant> Material; // 0xc8(0x28)
	struct FTransform Transform; // 0xf0(0x30)
	struct FTransform ThumbnailTransform; // 0x120(0x30)
	struct TSoftObjectPtr<UTexture2D> ThumbnailSoftRef; // 0x150(0x28)
	bool bIsDefault; // 0x178(0x01)
	bool bDisplayEmptyThumbnail; // 0x179(0x01)
	char pad_17A[0x6]; // 0x17a(0x06)
};

// Class OPP.RBPlayerCellCustomizationConfig
// Size: 0x48 (Inherited: 0x28)
struct URBPlayerCellCustomizationConfig : UObject {
	struct TArray<struct URBPlayerCellItemDefinition*> Items; // 0x28(0x10)
	struct TArray<struct FRBPlayerCellSlotDefinition> Slots; // 0x38(0x10)

	void RefreshItems(); // Function OPP.RBPlayerCellCustomizationConfig.RefreshItems // (Final|Native|Public) // @ game+0x1521dbc
	struct URBPlayerCellItemDefinition* GetPlayerCellItemDefinition(struct FName& ID); // Function OPP.RBPlayerCellCustomizationConfig.GetPlayerCellItemDefinition // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd58d8
	struct URBPlayerCellItemDefinition* GetDefaultPlayerCellItemForSlot(enum class ECustomizationMenuCategory Slot); // Function OPP.RBPlayerCellCustomizationConfig.GetDefaultPlayerCellItemForSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd521c
};

// Class OPP.RBPlayerCellItem
// Size: 0x250 (Inherited: 0x248)
struct ARBPlayerCellItem : AActor {
	enum class ECustomizationMenuCategory Slot; // 0x248(0x01)
	char pad_249[0x7]; // 0x249(0x07)

	void Event_UnassignedFromPlayer(); // Function OPP.RBPlayerCellItem.Event_UnassignedFromPlayer // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_AssignToPlayer(struct ARBLobbyPlayerState* RBLobbyPlayerState); // Function OPP.RBPlayerCellItem.Event_AssignToPlayer // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_AssignItem(struct URBPlayerCellItemDefinition* ItemDefinition); // Function OPP.RBPlayerCellItem.Event_AssignItem // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBPlayerCondition
// Size: 0x30 (Inherited: 0x28)
struct URBPlayerCondition : UObject {
	bool bInversed; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
};

// Class OPP.RBPlayerCondition_AllOfSubConditions
// Size: 0x40 (Inherited: 0x30)
struct URBPlayerCondition_AllOfSubConditions : URBPlayerCondition {
	struct TArray<struct URBPlayerCondition*> SubConditions; // 0x30(0x10)
};

// Class OPP.RBPlayerCondition_AnyOfSubConditions
// Size: 0x40 (Inherited: 0x30)
struct URBPlayerCondition_AnyOfSubConditions : URBPlayerCondition {
	struct TArray<struct URBPlayerCondition*> SubConditions; // 0x30(0x10)
};

// Class OPP.RBPlayerCondition_Blueprint
// Size: 0x50 (Inherited: 0x30)
struct URBPlayerCondition_Blueprint : URBPlayerCondition {
	struct FString ConditionDescription; // 0x30(0x10)
	struct FString ConditionDescriptionInversed; // 0x40(0x10)

	bool Event_EvaluateCondition(struct ARBPlayer* Player); // Function OPP.RBPlayerCondition_Blueprint.Event_EvaluateCondition // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBPlayerCondition_IsHidden
// Size: 0x30 (Inherited: 0x30)
struct URBPlayerCondition_IsHidden : URBPlayerCondition {
};

// Class OPP.RBPlayerCondition_IsBeingChased
// Size: 0xf8 (Inherited: 0x30)
struct URBPlayerCondition_IsBeingChased : URBPlayerCondition {
	struct FConfigurableFloat MaxTimeAgo; // 0x30(0xc8)
};

// Class OPP.RBPlayerCondition_RecentlySeen
// Size: 0xf8 (Inherited: 0x30)
struct URBPlayerCondition_RecentlySeen : URBPlayerCondition {
	struct FConfigurableFloat MaxTimeAgo; // 0x30(0xc8)
};

// Class OPP.RBPlayerCondition_Rushing
// Size: 0x100 (Inherited: 0x30)
struct URBPlayerCondition_Rushing : URBPlayerCondition {
	enum class EPlayerRushingStatus RushingStatus; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FConfigurableFloat MinDurationInStatus; // 0x38(0xc8)
};

// Class OPP.RBPlayerCondition_Proximity
// Size: 0x100 (Inherited: 0x30)
struct URBPlayerCondition_Proximity : URBPlayerCondition {
	enum class EPlayerProximityStatus ProximityStatus; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FConfigurableFloat MinDurationInStatus; // 0x38(0xc8)
};

// Class OPP.RBPlayerCustomizationOption
// Size: 0x210 (Inherited: 0x70)
struct URBPlayerCustomizationOption : URBCustomizationOption {
	enum class EPlayerCustomizationSlot Slot; // 0x70(0x01)
	bool bUseCustomESOPStraps; // 0x71(0x01)
	enum class ESkinColorType SkinColorType; // 0x72(0x01)
	bool bUseDefaultMaleMesh; // 0x73(0x01)
	char pad_74[0x4]; // 0x74(0x04)
	struct TSoftObjectPtr<USkeletalMesh> MaleSkeletalMesh; // 0x78(0x28)
	struct TSoftObjectPtr<UStaticMesh> MaleStaticMesh; // 0xa0(0x28)
	struct TArray<struct TSoftObjectPtr<USkeletalMesh>> MaleExtraSkeletalMeshes; // 0xc8(0x10)
	struct TArray<struct FRBPlayerCustomizationMaterialOverride> MaleMaterialOverrides; // 0xd8(0x10)
	bool bUseSeparateFemaleMesh; // 0xe8(0x01)
	bool bUseDefaultFemaleMesh; // 0xe9(0x01)
	char pad_EA[0x6]; // 0xea(0x06)
	struct TSoftObjectPtr<USkeletalMesh> FemaleSkeletalMesh; // 0xf0(0x28)
	struct TSoftObjectPtr<UStaticMesh> FemaleStaticMesh; // 0x118(0x28)
	struct TArray<struct TSoftObjectPtr<USkeletalMesh>> FemaleExtraSkeletalMeshes; // 0x140(0x10)
	struct TArray<struct FRBPlayerCustomizationMaterialOverride> FemaleMaterialOverrides; // 0x150(0x10)
	struct UCustomizationFoleyLegsMaterial* LegsFoley; // 0x160(0x08)
	struct UCustomizationFoleyTorsoMaterial* TorsoFoley; // 0x168(0x08)
	struct UCustomizationFoleyFootMaterial* LeftFootFoley; // 0x170(0x08)
	struct UCustomizationFoleyFootMaterial* RightFootFoley; // 0x178(0x08)
	struct UCustomizationFoleyFullBodyMaterial* FullBodyFoley; // 0x180(0x08)
	struct TSoftObjectPtr<UPoseAsset> FacePoseAsset; // 0x188(0x28)
	bool bEnabled; // 0x1b0(0x01)
	char pad_1B1[0x7]; // 0x1b1(0x07)
	struct URBCustomizationOutfit* LinkedOutfit; // 0x1b8(0x08)
	struct TSoftObjectPtr<UTexture2D> ThumbnailSoftRef; // 0x1c0(0x28)
	struct TSoftObjectPtr<UTexture2D> FemaleThumbnailSoftRef; // 0x1e8(0x28)

	struct TSoftObjectPtr<UStaticMesh> GetStaticMesh(bool bIsFemale); // Function OPP.RBPlayerCustomizationOption.GetStaticMesh // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd60e0
	struct TSoftObjectPtr<USkeletalMesh> GetSkeletalMesh(bool bIsFemale); // Function OPP.RBPlayerCustomizationOption.GetSkeletalMesh // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd5fa8
	struct TArray<struct FRBPlayerCustomizationMaterialOverride> GetMaterialOverrides(bool bIsFemale); // Function OPP.RBPlayerCustomizationOption.GetMaterialOverrides // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd56d0
	struct TArray<struct TSoftObjectPtr<USkeletalMesh>> GetExtraSkeletalMeshes(bool bIsFemale); // Function OPP.RBPlayerCustomizationOption.GetExtraSkeletalMeshes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd5354
	struct TMap<struct FString, struct UMaterialInstanceConstant*> BP_GetMaterialOverrideInstancesMap(bool bIsFemale); // Function OPP.RBPlayerCustomizationOption.BP_GetMaterialOverrideInstancesMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd4e14
	struct TArray<struct FSoftObjectPath> BP_GetAllResourcesToLoad(bool IsFemale); // Function OPP.RBPlayerCustomizationOption.BP_GetAllResourcesToLoad // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd4bf0
};

// Class OPP.RBVoiceCustomizationOption
// Size: 0x80 (Inherited: 0x70)
struct URBVoiceCustomizationOption : URBCustomizationOption {
	struct FString VoiceType; // 0x70(0x10)
};

// Class OPP.RBPlayerIconCustomizationOption
// Size: 0x98 (Inherited: 0x70)
struct URBPlayerIconCustomizationOption : URBCustomizationOption {
	struct TSoftObjectPtr<UTexture2D> Icon; // 0x70(0x28)
};

// Class OPP.RBCustomizationOutfit
// Size: 0xe8 (Inherited: 0x70)
struct URBCustomizationOutfit : URBCustomizationOption {
	bool bEnabled; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
	struct TArray<struct URBPlayerCustomizationOption*> OutfitCustomizationOptions; // 0x78(0x10)
	struct TArray<enum class EPlayerCustomizationSlot> HiddenSlots; // 0x88(0x10)
	struct TSoftObjectPtr<UTexture2D> ThumbnailSoftRef; // 0x98(0x28)
	struct TSoftObjectPtr<UTexture2D> FemaleThumbnailSoftRef; // 0xc0(0x28)

	bool IsSlotPartOfOutfit(enum class EPlayerCustomizationSlot Slot); // Function OPP.RBCustomizationOutfit.IsSlotPartOfOutfit // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd6350
	int32_t GetUnlockLevel(); // Function OPP.RBCustomizationOutfit.GetUnlockLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dd6188
	struct URBPlayerCustomizationOption* GetOutfitCustomizationOption(enum class EPlayerCustomizationSlot Slot); // Function OPP.RBCustomizationOutfit.GetOutfitCustomizationOption // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd5848
	void GetNonAcquiredOptions(struct ARBPlayerState* RBPlayerState, struct TArray<struct URBPlayerCustomizationOption*>& outOptions); // Function OPP.RBCustomizationOutfit.GetNonAcquiredOptions // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd5768
	void Editor_RefreshHiddenSlots(); // Function OPP.RBCustomizationOutfit.Editor_RefreshHiddenSlots // (Final|Native|Public) // @ game+0x1521dbc
	bool CanEquipSinglePieces(); // Function OPP.RBCustomizationOutfit.CanEquipSinglePieces // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd4f30
	struct TMap<enum class ECurrencyType, int32_t> BP_GetCost(struct ARBPlayerState* RBPlayerState); // Function OPP.RBCustomizationOutfit.BP_GetCost // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dd4ca4
	struct TArray<struct FSoftObjectPath> BP_GetAllResourcesToLoad(bool IsFemale); // Function OPP.RBCustomizationOutfit.BP_GetAllResourcesToLoad // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd4b10
};

// Class OPP.RBPlayerCustomizationConfig
// Size: 0x288 (Inherited: 0x28)
struct URBPlayerCustomizationConfig : UObject {
	struct FName HeadBodyTag; // 0x28(0x08)
	struct FName UpperBodyTag; // 0x30(0x08)
	struct FName LowerBodyTag; // 0x38(0x08)
	struct TArray<struct URBPlayerCustomizationOption*> Options; // 0x40(0x10)
	struct TArray<struct URBVoiceCustomizationOption*> voiceOptions; // 0x50(0x10)
	struct TArray<struct URBPlayerIconCustomizationOption*> playerIconOptions; // 0x60(0x10)
	struct TArray<struct URBCustomizationOutfit*> Outfits; // 0x70(0x10)
	struct TMap<enum class EPlayerCustomizationSlot, struct FRBDefaultCustomizationSlotInfo> DefaultSlotInfos; // 0x80(0x50)
	struct TMap<enum class EPlayerCustomizationSlot, struct FRBDefaultCustomizationSlotInfoList> DeadBodySlotInfos; // 0xd0(0x50)
	struct URBVoiceCustomizationOption* DefaultVoiceOption; // 0x120(0x08)
	struct URBPlayerIconCustomizationOption* DefaultPlayerIconOption; // 0x128(0x08)
	struct TArray<struct FRBHairColorOption> HairColorOptions; // 0x130(0x10)
	struct TMap<enum class EPlayerCustomizationSlot, struct FCustomizationSlotUIInfo> SlotUIInfos; // 0x140(0x50)
	struct TMap<enum class EPlayerCustomizationRarity, struct FCustomizationRarityUIInfo> RarityUIInfos; // 0x190(0x50)
	struct TArray<enum class EPlayerCustomizationSlot> PlayerActorCustomizationSlots; // 0x1e0(0x10)
	struct TArray<enum class EPlayerCustomizationSlot> SkinOverridableCustomizationSlots; // 0x1f0(0x10)
	struct TSoftObjectPtr<USkeletalMesh> DefaultFemaleESOPStrapMesh; // 0x200(0x28)
	struct TSoftObjectPtr<USkeletalMesh> DefaultMaleESOPStrapMesh; // 0x228(0x28)
	struct FRBPlayerCustomizationInfo DefaultMalePlayerCustomizationInfo; // 0x250(0x38)

	struct URBVoiceCustomizationOption* GetVoiceOption(struct FName& ID); // Function OPP.RBPlayerCustomizationConfig.GetVoiceOption // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd61ac
	struct FRBPlayerCustomizationInfo GetRandomDeadBodyCustomizationInfo(int32_t RandomSeed, bool bRandomSex, bool bIsFemale); // Function OPP.RBPlayerCustomizationConfig.GetRandomDeadBodyCustomizationInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd5e80
	struct FRBPlayerCustomizationInfo GetRandomCustomizationInfo(int32_t RandomSeed, enum class EPlayerCustomizationRarity maxRarity, bool bRandomSex, bool bIsFemale); // Function OPP.RBPlayerCustomizationConfig.GetRandomCustomizationInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd5d14
	struct URBPlayerIconCustomizationOption* GetRandomAcquiredPlayerIconCustomizationOption(struct ARBPlayerState* RBPlayerState); // Function OPP.RBPlayerCustomizationConfig.GetRandomAcquiredPlayerIconCustomizationOption // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd5c84
	struct URBPlayerCustomizationOption* GetRandomAcquiredCustomizationOption(struct ARBPlayerState* RBPlayerState, enum class EPlayerCustomizationSlot Slot, bool bIsFemale); // Function OPP.RBPlayerCustomizationConfig.GetRandomAcquiredCustomizationOption // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd5b84
	struct FRBPlayerCustomizationInfo GetRandomAcquiredCustomizationInfo(struct ARBPlayerState* RBPlayerState); // Function OPP.RBPlayerCustomizationConfig.GetRandomAcquiredCustomizationInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd5adc
	struct URBPlayerIconCustomizationOption* GetPlayerIconOption(struct FName& ID); // Function OPP.RBPlayerCustomizationConfig.GetPlayerIconOption // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd5a44
	struct URBPlayerCustomizationOption* GetPlayerCustomizationOption(struct FName& ID); // Function OPP.RBPlayerCustomizationConfig.GetPlayerCustomizationOption // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd59ac
	struct FRBHairColorOption GetHairColorOption(struct FName& ID); // Function OPP.RBPlayerCustomizationConfig.GetHairColorOption // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd53ec
	struct FRBPlayerCustomizationInfo GetDefaultPlayerCustomizationInfo(bool bIsFemale); // Function OPP.RBPlayerCustomizationConfig.GetDefaultPlayerCustomizationInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dd52ac
	struct URBPlayerCustomizationOption* GetDefaultCustomizationOption(enum class EPlayerCustomizationSlot Slot, bool bIsFemale); // Function OPP.RBPlayerCustomizationConfig.GetDefaultCustomizationOption // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd5158
	struct URBCustomizationOutfit* GetCustomizationOutfit(struct FName& ID); // Function OPP.RBPlayerCustomizationConfig.GetCustomizationOutfit // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd50c0
	struct TArray<struct URBPlayerCustomizationOption*> GetAllCustomizationOptions(enum class EPlayerCustomizationSlot Slot, enum class EPlayerCustomizationSexQueryType sexQueryType, bool bIncludeLegendaries); // Function OPP.RBPlayerCustomizationConfig.GetAllCustomizationOptions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd4f48
	void Editor_RebuildAutoGeneratedData(); // Function OPP.RBPlayerCustomizationConfig.Editor_RebuildAutoGeneratedData // (Final|Native|Public) // @ game+0x1521dbc
	void Editor_DumpUnmappedItemProgressionData(); // Function OPP.RBPlayerCustomizationConfig.Editor_DumpUnmappedItemProgressionData // (Final|Native|Public) // @ game+0x1521dbc
	void Editor_DumpMismatchedItemProgressionData(); // Function OPP.RBPlayerCustomizationConfig.Editor_DumpMismatchedItemProgressionData // (Final|Native|Public) // @ game+0x1521dbc
	void Editor_BuildOnlineIds(); // Function OPP.RBPlayerCustomizationConfig.Editor_BuildOnlineIds // (Final|Native|Public) // @ game+0x1521dbc
};

// Class OPP.RBPlayerCustomizationOwner
// Size: 0x28 (Inherited: 0x28)
struct URBPlayerCustomizationOwner : UInterface {

	void OnExtraCustomizationMeshesAddedForSlot(struct TArray<struct USkeletalMeshComponent*>& addedExtraMeshes, enum class EPlayerCustomizationSlot Slot); // Function OPP.RBPlayerCustomizationOwner.OnExtraCustomizationMeshesAddedForSlot // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1dd6498
	struct UStaticMeshComponent* GetWatchComponent(); // Function OPP.RBPlayerCustomizationOwner.GetWatchComponent // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1dd6244
	struct USkeletalMeshComponent* GetSkeletalMeshComponentForSlot(enum class EPlayerCustomizationSlot Slot); // Function OPP.RBPlayerCustomizationOwner.GetSkeletalMeshComponentForSlot // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1dd6050
	struct FRBPlayerCustomizationInfo GetPlayerCustomizationInfo(); // Function OPP.RBPlayerCustomizationOwner.GetPlayerCustomizationInfo // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1dd5970
	struct USkeletalMeshComponent* GetMainParentSkeletalMesh(); // Function OPP.RBPlayerCustomizationOwner.GetMainParentSkeletalMesh // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1db2ab0
};

// Class OPP.CustomizationFoleyTorsoMaterial
// Size: 0x40 (Inherited: 0x30)
struct UCustomizationFoleyTorsoMaterial : UDataAsset {
	struct FString SWITCH; // 0x30(0x10)
};

// Class OPP.CustomizationFoleyLegsMaterial
// Size: 0x40 (Inherited: 0x30)
struct UCustomizationFoleyLegsMaterial : UDataAsset {
	struct FString SWITCH; // 0x30(0x10)
};

// Class OPP.CustomizationFoleyFullBodyMaterial
// Size: 0x48 (Inherited: 0x30)
struct UCustomizationFoleyFullBodyMaterial : UDataAsset {
	struct FString SWITCH; // 0x30(0x10)
	int32_t Priority; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class OPP.CustomizationFoleyFootMaterial
// Size: 0x40 (Inherited: 0x30)
struct UCustomizationFoleyFootMaterial : UDataAsset {
	struct FString SWITCH; // 0x30(0x10)
};

// Class OPP.RBPlayerDetectionComponent
// Size: 0xb40 (Inherited: 0x220)
struct URBPlayerDetectionComponent : USceneComponent {
	struct FConfigurableFloat IdleDetectionDistance; // 0x218(0xc8)
	struct FConfigurableFloat IdleDetectionAngle; // 0x2e0(0xc8)
	struct FConfigurableFloat SuspiciousDetectionDistance; // 0x3a8(0xc8)
	struct FConfigurableFloat SuspiciousDetectionAngle; // 0x470(0xc8)
	struct FConfigurableFloat AlertedDetectionDistance; // 0x538(0xc8)
	struct FConfigurableFloat AlertedDetectionAngle; // 0x600(0xc8)
	bool bUseLineOfSightCheck; // 0x6c8(0x01)
	bool bYFacing; // 0x6c9(0x01)
	struct FConfigurableFloat SuspiciousMeterMax; // 0x6d0(0xc8)
	struct FConfigurableFloat SuspiciousMeterFillRate; // 0x798(0xc8)
	struct FConfigurableFloat SuspiciousMeterDecayRate; // 0x860(0xc8)
	struct FConfigurableFloat TimeBeforeAlertStateReset; // 0x928(0xc8)
	struct FConfigurableFloat MinIdleTime; // 0x9f0(0xc8)
	bool bCanDetectIncapacitatedPlayers; // 0xab8(0x01)
	char pad_ABB[0x5]; // 0xabb(0x05)
	struct FAlertedStateActions AlertedStateActions; // 0xac0(0x20)
	struct FName VisuallyTrackedBone; // 0xae0(0x08)
	enum class EPlayerComponentDetectionState CurrentState; // 0xae8(0x01)
	char pad_AE9[0x3]; // 0xae9(0x03)
	float CurrentSuspiciousMeter; // 0xaec(0x04)
	struct FVector LastPlayerVisuallyTrackedPosition; // 0xaf0(0x0c)
	char pad_AFC[0x4]; // 0xafc(0x04)
	struct ARBPlayer* CurrentlyTrackedPlayer; // 0xb00(0x08)
	struct FMulticastInlineDelegate OnDetectionStateChanged; // 0xb08(0x10)
	char pad_B18[0x28]; // 0xb18(0x28)

	void OnRep_CurrentState(enum class EPlayerComponentDetectionState oldState); // Function OPP.RBPlayerDetectionComponent.OnRep_CurrentState // (Final|Native|Protected) // @ game+0x1ddb224
	float GetCurrentDetectionDistance(); // Function OPP.RBPlayerDetectionComponent.GetCurrentDetectionDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dda078
	float GetCurrentDetectionAngle(); // Function OPP.RBPlayerDetectionComponent.GetCurrentDetectionAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dda050
	void Event_OnDetectionStateChanged(enum class EPlayerComponentDetectionState oldState, enum class EPlayerComponentDetectionState newState); // Function OPP.RBPlayerDetectionComponent.Event_OnDetectionStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_SetCurrentState_Server(enum class EPlayerComponentDetectionState newState); // Function OPP.RBPlayerDetectionComponent.BP_SetCurrentState_Server // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dd9690
};

// Class OPP.RBPlayerGameSessionManager
// Size: 0xb8 (Inherited: 0x28)
struct URBPlayerGameSessionManager : UObject {
	char pad_28[0x90]; // 0x28(0x90)

	void OnPartyMemberPlayerSlotsReservationProcessed(struct TArray<struct FProfileId>& members, bool bAccepted); // Function OPP.RBPlayerGameSessionManager.OnPartyMemberPlayerSlotsReservationProcessed // (Final|Native|Private|HasOutParms) // @ game+0x1ddae9c
	bool IsBusy(); // Function OPP.RBPlayerGameSessionManager.IsBusy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddad00
	enum class EPlayerGameSessionTransitionType GetTransitionType(); // Function OPP.RBPlayerGameSessionManager.GetTransitionType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddaa48
};

// Class OPP.RBPlayerGameSessionTransitionWidget
// Size: 0x270 (Inherited: 0x268)
struct URBPlayerGameSessionTransitionWidget : URBUserWidget {
	char pad_268[0x8]; // 0x268(0x08)

	void OnOutroCompleted(); // Function OPP.RBPlayerGameSessionTransitionWidget.OnOutroCompleted // (Final|Native|Public|BlueprintCallable) // @ game+0x1ddae88
	void Event_Show(); // Function OPP.RBPlayerGameSessionTransitionWidget.Event_Show // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_Hide(); // Function OPP.RBPlayerGameSessionTransitionWidget.Event_Hide // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBPlayerInvestigationZoneComponent
// Size: 0x5f0 (Inherited: 0x590)
struct URBPlayerInvestigationZoneComponent : URBDisplayMessageZoneComponent {
	float InvestigationInitialDelay; // 0x590(0x04)
	float InvestigationDuration; // 0x594(0x04)
	bool bShowClueOnScreenOnceInvestigated; // 0x598(0x01)
	char pad_599[0x7]; // 0x599(0x07)
	struct FText InvestigationDoneMessageText; // 0x5a0(0x18)
	struct FMulticastInlineDelegate Event_OnInvestigationDone; // 0x5b8(0x10)
	bool bInvestigated; // 0x5c8(0x01)
	char pad_5C9[0x7]; // 0x5c9(0x07)
	struct URBPlayerInvestigationZoneComponent* Master; // 0x5d0(0x08)
	struct TArray<struct URBPlayerInvestigationZoneComponent*> Slaves; // 0x5d8(0x10)
	char pad_5E8[0x8]; // 0x5e8(0x08)

	void Multicast_OnInvestigationDone(struct ARBPlayer* investigator); // Function OPP.RBPlayerInvestigationZoneComponent.Multicast_OnInvestigationDone // (Net|Native|Event|NetMulticast|Public) // @ game+0x1ddae04
	void BP_AddSlave_Server(struct URBPlayerInvestigationZoneComponent* newSlave); // Function OPP.RBPlayerInvestigationZoneComponent.BP_AddSlave_Server // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dd95c4
};

// Class OPP.RBPlayerLoadoutConfig
// Size: 0x140 (Inherited: 0x28)
struct URBPlayerLoadoutConfig : UObject {
	struct FActiveSkillCommonParams NoActiveSkillParams; // 0x28(0x78)
	struct TMap<enum class EActiveSkillType, struct FActiveSkillCommonParams> ActiveSkills; // 0xa0(0x50)
	char pad_F0[0x50]; // 0xf0(0x50)

	struct FActiveSkillCommonParams GetActiveSkillCommonParamsById(struct FName& ID); // Function OPP.RBPlayerLoadoutConfig.GetActiveSkillCommonParamsById // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd9c30
	struct FActiveSkillCommonParams GetActiveSkillCommonParams(enum class EActiveSkillType Type); // Function OPP.RBPlayerLoadoutConfig.GetActiveSkillCommonParams // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd9b98
};

// Class OPP.RBPlayerLoadoutManager
// Size: 0x2e0 (Inherited: 0x248)
struct ARBPlayerLoadoutManager : AInfo {
	struct FMulticastInlineDelegate OnItemPurchased; // 0x248(0x10)
	char pad_258[0x30]; // 0x258(0x30)
	struct ARBGameStateBase* RBGameStateBase; // 0x288(0x08)
	char pad_290[0x50]; // 0x290(0x50)

	void UpdatePlayerLoadout(struct ARBController* RBController, struct FRBPlayerLoadout& loadout); // Function OPP.RBPlayerLoadoutManager.UpdatePlayerLoadout // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1ddb400
	void OnPlayerProgressionReceived(struct ARBPlayerState* RBPlayerState); // Function OPP.RBPlayerLoadoutManager.OnPlayerProgressionReceived // (Final|Native|Private) // @ game+0x1ddaf88
	bool IsValidLoadout(struct ARBPlayerState* RBPlayerState, struct FRBPlayerLoadout& loadout); // Function OPP.RBPlayerLoadoutManager.IsValidLoadout // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddad20
};

// Class OPP.RBPlayerLoadoutUIBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct URBPlayerLoadoutUIBlueprintLibrary : UBlueprintFunctionLibrary {

	bool TogglePerkInMenuLoadout(struct FName& itemIdToEquip); // Function OPP.RBPlayerLoadoutUIBlueprintLibrary.TogglePerkInMenuLoadout // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ddb378
	bool ToggleActiveSkillInMenuloadout(enum class EActiveSkillType ActiveSkillType); // Function OPP.RBPlayerLoadoutUIBlueprintLibrary.ToggleActiveSkillInMenuloadout // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ddb2a4
	void InitMenuLoadout(); // Function OPP.RBPlayerLoadoutUIBlueprintLibrary.InitMenuLoadout // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ddaccc
	bool HasAcquiredRig(); // Function OPP.RBPlayerLoadoutUIBlueprintLibrary.HasAcquiredRig // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ddaca8
	struct FMenuUpgradeItemInfo GetUpgradeItemInfo(struct FName& ItemId); // Function OPP.RBPlayerLoadoutUIBlueprintLibrary.GetUpgradeItemInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1ddabe0
	struct FRBPlayerLoadout GetMenuLoadout(); // Function OPP.RBPlayerLoadoutUIBlueprintLibrary.GetMenuLoadout // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dda17c
	struct FMenuUpgradeItemInfo GetActiveSkillUpgradeItemInfo(enum class EActiveSkillType ActiveSkillType); // Function OPP.RBPlayerLoadoutUIBlueprintLibrary.GetActiveSkillUpgradeItemInfo // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dd9d78
	bool CanEquipPerkInMenuLoadout(struct FName& itemIdToEquip); // Function OPP.RBPlayerLoadoutUIBlueprintLibrary.CanEquipPerkInMenuLoadout // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dd9710
};

// Class OPP.RBPlayerOutlineComponent
// Size: 0x2b0 (Inherited: 0x2b0)
struct URBPlayerOutlineComponent : URBOutlineComponent {
	struct ARBPlayer* RBPlayer; // 0x2a8(0x08)
};

// Class OPP.RBPlayerProgressionData
// Size: 0x4e8 (Inherited: 0x28)
struct URBPlayerProgressionData : UObject {
	struct FName ID; // 0x28(0x08)
	bool bDefault; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct UDataTable* ActiveSkillSettingsDataTable; // 0x38(0x08)
	struct UDataTable* ItemProgressionDataTable; // 0x40(0x08)
	struct UDataTable* RewardDataTable; // 0x48(0x08)
	struct UDataTable* LevelingDataTable; // 0x50(0x08)
	struct UDataTable* RewardPoolsDataTable; // 0x58(0x08)
	struct UDataTable* PlayerUpgradeEffectDataTable; // 0x60(0x08)
	struct UDataTable* BadgeDataTable; // 0x68(0x08)
	struct UDataTable* ReleaseDataTable; // 0x70(0x08)
	int32_t MaxCharacterLevelOverride; // 0x78(0x04)
	int32_t ReleaseTokenCost; // 0x7c(0x04)
	int32_t StartingPerkSlotCount; // 0x80(0x04)
	int32_t MaxPerkSlotCount; // 0x84(0x04)
	char pad_88[0x460]; // 0x88(0x460)

	struct FItemUnlockInfo GetUnlockInfo(struct ARBPlayerState* RBPlayerState, struct FName& ItemId); // Function OPP.RBPlayerProgressionData.GetUnlockInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddaa60
	struct TArray<struct FRewardUIData> GetRewardUIDataFromRewards(struct ARBPlayerState* RBPlayerState, struct FRBRewardData& RewardData); // Function OPP.RBPlayerProgressionData.GetRewardUIDataFromRewards // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dda854
	struct TArray<struct FRewardUIData> GetRewardUIDataFromLevelData(struct ARBPlayerState* RBPlayerState, struct FPlayerProgressionLevelData& levelData); // Function OPP.RBPlayerProgressionData.GetRewardUIDataFromLevelData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dda6c4
	struct TArray<struct FRewardUIData> GetRewardUIDataFromGeneratedRewards(struct ARBPlayerState* RBPlayerState, struct FRBGeneratedRewardData& RewardData); // Function OPP.RBPlayerProgressionData.GetRewardUIDataFromGeneratedRewards // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dda5b0
	struct FRBRewardData GetRewardsForPlayerLevel(int32_t Level); // Function OPP.RBPlayerProgressionData.GetRewardsForPlayerLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dda990
	struct FRBRandomRewardPool GetRewardPool(struct FName& RewardPoolId); // Function OPP.RBPlayerProgressionData.GetRewardPool // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dda510
	struct FRBRewardData GetRewardData(struct FName& RewardDataId); // Function OPP.RBPlayerProgressionData.GetRewardData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dda470
	float GetPlayerUpgradeEffectSetting(struct FName& EffectId, struct FName& settingId, float DefaultValue); // Function OPP.RBPlayerProgressionData.GetPlayerUpgradeEffectSetting // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dda350
	struct FRBPlayerUpgradeEffectData GetPlayerUpgradeEffectData(struct FName& EffectId); // Function OPP.RBPlayerProgressionData.GetPlayerUpgradeEffectData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dda2b0
	int32_t GetPlayerLevelRequiredXP(int32_t Level); // Function OPP.RBPlayerProgressionData.GetPlayerLevelRequiredXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dda224
	int32_t GetPerkSlotRequiredLevel(int32_t perkSlotIndex); // Function OPP.RBPlayerProgressionData.GetPerkSlotRequiredLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dda198
	int32_t GetMaxPlayerLevel(); // Function OPP.RBPlayerProgressionData.GetMaxPlayerLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dda15c
	struct FPlayerProgressionLevelingData GetLevelingData(); // Function OPP.RBPlayerProgressionData.GetLevelingData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dda140
	struct FRBItemProgressionData GetItemProgressionData(struct FName& ItemId); // Function OPP.RBPlayerProgressionData.GetItemProgressionData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dda0a0
	struct TArray<struct FRBPlayerBadgeRow> GetBadges(); // Function OPP.RBPlayerProgressionData.GetBadges // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd9f74
	struct FRBPlayerBadgeRow GetBadge(struct FName& badgeId); // Function OPP.RBPlayerProgressionData.GetBadge // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd9e68
	struct FRBActiveSkillSettings GetActiveSkillSettings(enum class EActiveSkillType ActiveSkillType); // Function OPP.RBPlayerProgressionData.GetActiveSkillSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd9cd0
	struct TArray<struct FName> FilterItemProgressionDataIds(enum class EItemProgressionCategory Category, enum class EActiveSkillType AssociatedActiveSkillType, enum class EProfileUpgradeCategory ProfileUpgradeCategory, int32_t Rank, bool bFilterAvailable); // Function OPP.RBPlayerProgressionData.FilterItemProgressionDataIds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd99ec
	struct TArray<struct FRBItemProgressionData> FilterItemProgressionData(enum class EItemProgressionCategory Category, enum class EActiveSkillType AssociatedActiveSkillType, enum class EProfileUpgradeCategory ProfileUpgradeCategory, int32_t Rank, bool bFilterAvailable); // Function OPP.RBPlayerProgressionData.FilterItemProgressionData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd97f4
};

// Class OPP.RBPlayerProgressionManager
// Size: 0x290 (Inherited: 0x248)
struct ARBPlayerProgressionManager : AInfo {
	char pad_248[0x30]; // 0x248(0x30)
	struct ARBGameStateBase* RBGameStateBase; // 0x278(0x08)
	char pad_280[0x10]; // 0x280(0x10)

	bool CanReleaseCharacter(struct ARBController* RBController); // Function OPP.RBPlayerProgressionManager.CanReleaseCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddee10
};

// Class OPP.RBPlayerRespawner
// Size: 0x2b8 (Inherited: 0x248)
struct ARBPlayerRespawner : AActor {
	char pad_248[0x10]; // 0x248(0x10)
	struct URBRepulsionComponent* repulsionComponent; // 0x258(0x08)
	struct URBPositionComponent* SpawnPositionComponent; // 0x260(0x08)
	struct UBoxComponent* PlayerSpawnSafeZone; // 0x268(0x08)
	float TimeBeforeRepulsionZone; // 0x270(0x04)
	char pad_274[0x4]; // 0x274(0x04)
	struct TArray<struct FRBMissionID> ExclusiveMissionIds; // 0x278(0x10)
	bool bEnabled; // 0x288(0x01)
	char pad_289[0x7]; // 0x289(0x07)
	struct TArray<struct ARBController*> RestrictedToPlayers; // 0x290(0x10)
	enum class ERespawnerState State; // 0x2a0(0x01)
	char pad_2A1[0x7]; // 0x2a1(0x07)
	struct ARBController* PlayerRespawning; // 0x2a8(0x08)
	bool bCurrentlyEnabled; // 0x2b0(0x01)
	char pad_2B1[0x7]; // 0x2b1(0x07)

	void OnRespawnTransitionFinished(); // Function OPP.RBPlayerRespawner.OnRespawnTransitionFinished // (Final|Native|Protected) // @ game+0x1ddfb4c
	void OnRep_OnStateChanged(); // Function OPP.RBPlayerRespawner.OnRep_OnStateChanged // (Final|Native|Protected) // @ game+0x1ddf938
	bool IsInUse(); // Function OPP.RBPlayerRespawner.IsInUse // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ddf59c
	void Event_OnStateChanged(enum class ERespawnerState newState); // Function OPP.RBPlayerRespawner.Event_OnStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_SetEnabled(bool bValue); // Function OPP.RBPlayerRespawner.BP_SetEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dded88
	void BP_OnDoorOpened(); // Function OPP.RBPlayerRespawner.BP_OnDoorOpened // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dded60
	void BP_OnDoorClosed(); // Function OPP.RBPlayerRespawner.BP_OnDoorClosed // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dded38
};

// Class OPP.RBPlayerSeparatorVolume
// Size: 0x290 (Inherited: 0x280)
struct ARBPlayerSeparatorVolume : AVolume {
	struct AVolume* LinkedBlockingVolume; // 0x280(0x08)
	struct ARBPlayer* PlayerInside; // 0x288(0x08)

	void OnRep_PlayerInside(struct ARBPlayer* oldPlayerInside); // Function OPP.RBPlayerSeparatorVolume.OnRep_PlayerInside // (Final|Native|Private) // @ game+0x1ddf960
	void OnEndActorOverlap(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function OPP.RBPlayerSeparatorVolume.OnEndActorOverlap // (Final|Native|Public) // @ game+0x1ddf6c8
	void OnBeginActorOverlap(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function OPP.RBPlayerSeparatorVolume.OnBeginActorOverlap // (Final|Native|Public) // @ game+0x1ddf604
};

// Class OPP.RBPlayerSkelMeshComponent
// Size: 0xfb0 (Inherited: 0xfb0)
struct URBPlayerSkelMeshComponent : USkeletalMeshComponent {
	struct ARBPlayer* RBPlayer; // 0xfa8(0x08)
};

// Class OPP.RBPlayerSpawnPoint
// Size: 0x28 (Inherited: 0x28)
struct URBPlayerSpawnPoint : UInterface {

	void GetSpawnPointTransform(struct FVector& OutPosition, struct FRotator& OutRotation); // Function OPP.RBPlayerSpawnPoint.GetSpawnPointTransform // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1ddf274
};

// Class OPP.RBPlayerStart
// Size: 0x298 (Inherited: 0x278)
struct ARBPlayerStart : APlayerStart {
	bool bEnabled; // 0x278(0x01)
	char pad_279[0x7]; // 0x279(0x07)
	struct TArray<struct FStartAction> StartActions; // 0x280(0x10)
	struct URBGhostAnimInstance* WakeUpGhostAnimationInstanceClass; // 0x290(0x08)
};

// Class OPP.RBPlayerStartDynamic
// Size: 0x278 (Inherited: 0x278)
struct ARBPlayerStartDynamic : APlayerStart {
};

// Class OPP.RBPlayerStatsConfig
// Size: 0x138 (Inherited: 0x28)
struct URBPlayerStatsConfig : UObject {
	struct TArray<struct FRBPlayerStatConfig> PlayerStats; // 0x28(0x10)
	char pad_38[0x100]; // 0x38(0x100)

	struct FRBPlayerStatConfig GetPlayerStatConfigById(struct FName& ID); // Function OPP.RBPlayerStatsConfig.GetPlayerStatConfigById // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de3b40
	struct FRBPlayerStatConfig GetPlayerStatConfig(enum class EPlayerStat PlayerStat); // Function OPP.RBPlayerStatsConfig.GetPlayerStatConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de3aa8
};

// Class OPP.RBPlayerStatsTabWidget
// Size: 0x2a8 (Inherited: 0x280)
struct URBPlayerStatsTabWidget : URBCharacterSheetMenuTabWidget {
	char pad_280[0x28]; // 0x280(0x28)

	void OnPlayerStatsDataAvailable(struct TArray<struct FRBStatContext>& stats, struct TArray<struct FRBUIReleasedCharacterDetails>& releasedCharacterDetailsList); // Function OPP.RBPlayerStatsTabWidget.OnPlayerStatsDataAvailable // (Final|Native|Private|HasOutParms) // @ game+0x1de43ac
	bool IsDataPending(); // Function OPP.RBPlayerStatsTabWidget.IsDataPending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de3c18
	struct TArray<struct FRBStatContext> GetStats(); // Function OPP.RBPlayerStatsTabWidget.GetStats // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de3bfc
	struct TArray<struct FRBUIReleasedCharacterDetails> GetReleasedCharacterDetailsList(); // Function OPP.RBPlayerStatsTabWidget.GetReleasedCharacterDetailsList // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de3be0
	float GetGlobalStatValue(enum class EPlayerStat PlayerStat); // Function OPP.RBPlayerStatsTabWidget.GetGlobalStatValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de3a18
	int32_t GetBadgeProgress(struct TArray<enum class EPlayerStat>& PlayerStats, int32_t Threshold); // Function OPP.RBPlayerStatsTabWidget.GetBadgeProgress // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de388c
	void Event_Refresh(); // Function OPP.RBPlayerStatsTabWidget.Event_Refresh // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.PlayerTriggerCondition
// Size: 0x28 (Inherited: 0x28)
struct UPlayerTriggerCondition : UObject {
};

// Class OPP.AllPlayerPlayerTriggerCondition
// Size: 0x28 (Inherited: 0x28)
struct UAllPlayerPlayerTriggerCondition : UPlayerTriggerCondition {
};

// Class OPP.HalfOfAllPlayerPlayerTriggerCondition
// Size: 0x28 (Inherited: 0x28)
struct UHalfOfAllPlayerPlayerTriggerCondition : UPlayerTriggerCondition {
};

// Class OPP.SpecificNumberOfPlayerPlayerTriggerCondition
// Size: 0x30 (Inherited: 0x28)
struct USpecificNumberOfPlayerPlayerTriggerCondition : UPlayerTriggerCondition {
	int32_t NumberOfPlayer; // 0x28(0x04)
	bool bHasToBeRunning; // 0x2c(0x01)
	bool bHasToBeLanding; // 0x2d(0x01)
	bool bOnlyConsiderLocalPlayer; // 0x2e(0x01)
	char pad_2F[0x1]; // 0x2f(0x01)
};

// Class OPP.RBPlayerTriggerComponent
// Size: 0x160 (Inherited: 0xb8)
struct URBPlayerTriggerComponent : UActorComponent {
	enum class ETriggerComponentNetType NetType; // 0xb8(0x01)
	bool bEnabled; // 0xb9(0x01)
	char pad_BA[0x2]; // 0xba(0x02)
	int32_t TriggerCount; // 0xbc(0x04)
	struct TArray<struct UPlayerTriggerCondition*> TriggerConditions; // 0xc0(0x10)
	enum class ETriggerType TriggerType; // 0xd0(0x01)
	bool bClearConditions; // 0xd1(0x01)
	char pad_D2[0x6]; // 0xd2(0x06)
	struct TArray<struct ARBTriggerable*> LinkedTriggerables; // 0xd8(0x10)
	struct UPrimitiveComponent* LinkedTriggerCollision; // 0xe8(0x08)
	enum class EPlayerTriggerType AddNewPlayerTriggerType; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct UTexture2D* PlayerIndicatorOverride; // 0xf8(0x08)
	struct FMulticastInlineDelegate OnTriggeredEvent; // 0x100(0x10)
	struct FMulticastInlineDelegate OnUntriggeredEvent; // 0x110(0x10)
	struct FMulticastInlineDelegate OnPlayerEnteredEvent; // 0x120(0x10)
	struct FMulticastInlineDelegate OnPlayerExitedEvent; // 0x130(0x10)
	char pad_140[0x4]; // 0x140(0x04)
	bool bTriggered; // 0x144(0x01)
	char pad_145[0x3]; // 0x145(0x03)
	struct TArray<struct ARBPlayer*> PlayersInside; // 0x148(0x10)
	bool bCurrentlyEnabled; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	void OnPlayerRevived(struct ARBPlayer* instigatorActor, struct ARBPlayer* subjectActor); // Function OPP.RBPlayerTriggerComponent.OnPlayerRevived // (Final|Native|Public) // @ game+0x1de4170
	void OnPawnRespawned(struct ARBPawn* Pawn); // Function OPP.RBPlayerTriggerComponent.OnPawnRespawned // (Final|Native|Public) // @ game+0x1de422c
	void OnPawnKilled(struct ARBPawn* instigatorActor, struct ARBPawn* subjectActor); // Function OPP.RBPlayerTriggerComponent.OnPawnKilled // (Final|Native|Public) // @ game+0x1de4170
	void OnComponentEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function OPP.RBPlayerTriggerComponent.OnComponentEndOverlap // (Final|Native|Public) // @ game+0x1de4034
	void OnComponentBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBPlayerTriggerComponent.OnComponentBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0x1de3e10
	void OnActorOverlapped(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function OPP.RBPlayerTriggerComponent.OnActorOverlapped // (Final|Native|Public) // @ game+0x1de3d4c
	void OnActorLeft(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function OPP.RBPlayerTriggerComponent.OnActorLeft // (Final|Native|Public) // @ game+0x1de3c58
	bool IsEnabled(); // Function OPP.RBPlayerTriggerComponent.IsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d689cc
};

// Class OPP.RBPolicyDocumentMenuWidget
// Size: 0x318 (Inherited: 0x308)
struct URBPolicyDocumentMenuWidget : URBMenuWidget {
	char pad_308[0x10]; // 0x308(0x10)

	void Event_Setup(struct FString Content); // Function OPP.RBPolicyDocumentMenuWidget.Event_Setup // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Accept(); // Function OPP.RBPolicyDocumentMenuWidget.Accept // (Final|Native|Public|BlueprintCallable) // @ game+0x1de2f7c
};

// Class OPP.RBPopUpAnchorWidget
// Size: 0x2a0 (Inherited: 0x268)
struct URBPopUpAnchorWidget : URBUserWidget {
	char pad_268[0x38]; // 0x268(0x38)
};

// Class OPP.RBPopUpConfirmCancelWidget
// Size: 0x338 (Inherited: 0x318)
struct URBPopUpConfirmCancelWidget : URBPopUpWidget {
	struct FMulticastInlineDelegate OnConfirm; // 0x318(0x10)
	struct FMulticastInlineDelegate OnCancel; // 0x328(0x10)

	void Event_InitializePopup(struct FText& TitleText, struct FText& MainText, struct FText& ConfirmText, struct FText& CancelText); // Function OPP.RBPopUpConfirmCancelWidget.Event_InitializePopup // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void BP_Confirm(); // Function OPP.RBPopUpConfirmCancelWidget.BP_Confirm // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3094
	void BP_Cancel(); // Function OPP.RBPopUpConfirmCancelWidget.BP_Cancel // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3080
};

// Class OPP.RBPopUpWaitWidget
// Size: 0x328 (Inherited: 0x318)
struct URBPopUpWaitWidget : URBPopUpWidget {
	struct FMulticastInlineDelegate OnEndWait; // 0x318(0x10)

	void Event_InitializePopup(struct FText& TitleText, struct FText& MainText); // Function OPP.RBPopUpWaitWidget.Event_InitializePopup // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void BP_EndWait(); // Function OPP.RBPopUpWaitWidget.BP_EndWait // (Final|Native|Public|BlueprintCallable) // @ game+0x1de30a8
};

// Class OPP.RBPopUpInputTextWidget
// Size: 0x338 (Inherited: 0x318)
struct URBPopUpInputTextWidget : URBPopUpWidget {
	struct FString enteredText; // 0x318(0x10)
	struct FMulticastInlineDelegate OnTextEntered; // 0x328(0x10)

	void Event_InitializePopup(); // Function OPP.RBPopUpInputTextWidget.Event_InitializePopup // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnTextEntered(struct FString Text); // Function OPP.RBPopUpInputTextWidget.BP_OnTextEntered // (Final|Native|Public|BlueprintCallable) // @ game+0x1de30dc
};

// Class OPP.RBPopUpBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct URBPopUpBlueprintLibrary : UBlueprintFunctionLibrary {

	struct URBPopUpWaitWidget* CreatePopUpWait(struct UObject* WorldContextObject, struct URBPopUpWaitWidget* WidgetType, struct FText TitleText, struct FText MainText); // Function OPP.RBPopUpBlueprintLibrary.CreatePopUpWait // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1de3714
	struct URBPopUpInputTextWidget* CreatePopUpInputText(struct UObject* WorldContextObject, struct URBPopUpInputTextWidget* WidgetType); // Function OPP.RBPopUpBlueprintLibrary.CreatePopUpInputText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1de3650
	struct URBPopUpConfirmCancelWidget* CreatePopUpConfirmCancel(struct UObject* WorldContextObject, struct URBPopUpConfirmCancelWidget* WidgetType, struct FText TitleText, struct FText MainText, struct FText ConfirmText, struct FText CancelText); // Function OPP.RBPopUpBlueprintLibrary.CreatePopUpConfirmCancel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1de3418
	struct URBPopUpConfirmWidget* CreatePopUpConfirm(struct UObject* WorldContextObject, struct URBPopUpConfirmWidget* WidgetType, struct FText TitleText, struct FText MainText, struct FText ConfirmText); // Function OPP.RBPopUpBlueprintLibrary.CreatePopUpConfirm // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1de323c
};

// Class OPP.RBPosedDeadBody
// Size: 0x278 (Inherited: 0x248)
struct ARBPosedDeadBody : AActor {
	struct TSoftObjectPtr<UStaticMesh> StaticMeshToExport; // 0x248(0x28)
	struct FRBPosedDeadBodyCustomizationProxy UICustomizationProxy; // 0x270(0x08)
};

// Class OPP.RBPositionComponent
// Size: 0x220 (Inherited: 0x220)
struct URBPositionComponent : USceneComponent {
};

// Class OPP.RBPositionMarker
// Size: 0x248 (Inherited: 0x248)
struct ARBPositionMarker : AActor {
};

// Class OPP.RBPostProcessSettings
// Size: 0x5e0 (Inherited: 0x28)
struct URBPostProcessSettings : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FPostProcessSettings Settings; // 0x30(0x5b0)
};

// Class OPP.RBPostProcessUpdateManager
// Size: 0x248 (Inherited: 0x248)
struct ARBPostProcessUpdateManager : AActor {

	void OnExitNightVision(); // Function OPP.RBPostProcessUpdateManager.OnExitNightVision // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void OnEnterNightVision(); // Function OPP.RBPostProcessUpdateManager.OnEnterNightVision // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBPressurePanelComponent
// Size: 0x13d0 (Inherited: 0x7a0)
struct URBPressurePanelComponent : URBInteractiblePanelComponent {
	struct FConfigurableFloat TotalMeter; // 0x7a0(0xc8)
	struct FConfigurableFloat MeterGainPerSecond; // 0x868(0xc8)
	struct FConfigurableFloat MeterDecayPerSecond; // 0x930(0xc8)
	struct TArray<struct TSoftObjectPtr<AActor>> LinkedButtons; // 0x9f8(0x10)
	struct FConfigurableFloat InputRatioRange; // 0xa08(0xc8)
	struct FConfigurableFloat MinInputTargetRatioRange; // 0xad0(0xc8)
	struct FConfigurableFloat MaxInputTargetRatioRange; // 0xb98(0xc8)
	struct FConfigurableFloat InputRatioGainMaxSpeed; // 0xc60(0xc8)
	struct FRuntimeFloatCurve InputRatioGainSpeedMultiplier; // 0xd28(0x88)
	struct FConfigurableFloat InputRatioDecayMaxSpeed; // 0xdb0(0xc8)
	struct FRuntimeFloatCurve InputRatioDecaySpeedMultiplier; // 0xe78(0x88)
	bool bMajorDisturbanceOnWrongValve; // 0xf00(0x01)
	char pad_F01[0x7]; // 0xf01(0x07)
	struct FConfigurableFloat PlayerNoiseOnWrongValve; // 0xf08(0xc8)
	struct FConfigurableFloat PlayerNoiseFullyAudibleRange; // 0xfd0(0xc8)
	struct FConfigurableFloat PlayerNoiseMaxAudibleRange; // 0x1098(0xc8)
	float CurrentMeter; // 0x1160(0x04)
	float InputRatioTarget; // 0x1164(0x04)
	enum class EPressureValveType ValveType; // 0x1168(0x01)
	bool bLocked; // 0x1169(0x01)
	char pad_116A[0x6]; // 0x116a(0x06)
	struct TArray<struct URBCoopOperatableComponent*> UnlockingButtons; // 0x1170(0x10)
	struct FMulticastInlineDelegate OnInputRatioInZoneChanged; // 0x1180(0x10)
	struct FMulticastInlineDelegate OnPlayerHoldingInputChanged; // 0x1190(0x10)
	struct FMulticastInlineDelegate OnPanelSucceeded; // 0x11a0(0x10)
	struct FMulticastInlineDelegate OnCurrentMeterChanged; // 0x11b0(0x10)
	struct FMulticastInlineDelegate OnCurrentRatioChanged; // 0x11c0(0x10)
	struct FMulticastInlineDelegate OnInputRatioTargetChanged; // 0x11d0(0x10)
	struct FMulticastInlineDelegate OnValveTypeChanged; // 0x11e0(0x10)
	struct FMulticastInlineDelegate OnLockedStateChanged; // 0x11f0(0x10)
	struct FScheduledBool bInputHeld; // 0x1200(0x70)
	struct FScheduledFloat LastInputHeldStartedPawnTime; // 0x1270(0x78)
	struct FScheduledBool bInputRatioInZone; // 0x12e8(0x70)
	struct FScheduledFloat CurrentInputRatio; // 0x1358(0x78)

	void OnUnlockingButtonStateChanged_Server(struct URBCoopOperatableComponent* Component); // Function OPP.RBPressurePanelComponent.OnUnlockingButtonStateChanged_Server // (Final|Native|Public) // @ game+0x1de7b4c
	void OnRep_ValveType(); // Function OPP.RBPressurePanelComponent.OnRep_ValveType // (Final|Native|Protected) // @ game+0x1de794c
	void OnRep_Locked(); // Function OPP.RBPressurePanelComponent.OnRep_Locked // (Final|Native|Protected) // @ game+0x1de78f4
	void OnRep_LastInputHeldStartedPawnTime(); // Function OPP.RBPressurePanelComponent.OnRep_LastInputHeldStartedPawnTime // (Final|Native|Protected) // @ game+0x1de788c
	void OnRep_InputRatioTarget(); // Function OPP.RBPressurePanelComponent.OnRep_InputRatioTarget // (Final|Native|Protected) // @ game+0x1de7878
	void OnRep_InputRatioInZone(); // Function OPP.RBPressurePanelComponent.OnRep_InputRatioInZone // (Final|Native|Protected) // @ game+0x1de785c
	void OnRep_InputHeld(); // Function OPP.RBPressurePanelComponent.OnRep_InputHeld // (Final|Native|Protected) // @ game+0x1de7840
	void OnRep_CurrentMeter(); // Function OPP.RBPressurePanelComponent.OnRep_CurrentMeter // (Final|Native|Protected) // @ game+0x1de782c
	void OnRep_CurrentInputRatio(); // Function OPP.RBPressurePanelComponent.OnRep_CurrentInputRatio // (Final|Native|Protected) // @ game+0x1de7810
	void Multicast_OnPanelSucceeded(struct ARBPawn* Pawn); // Function OPP.RBPressurePanelComponent.Multicast_OnPanelSucceeded // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d0c848
	void LastInputHeldStartedPawnTimeChangedCallback(enum class EScheduledPropertyValueChangedType changeType); // Function OPP.RBPressurePanelComponent.LastInputHeldStartedPawnTimeChangedCallback // (Final|Native|Protected) // @ game+0x1d32d30
	bool IsCompleted(); // Function OPP.RBPressurePanelComponent.IsCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de7570
	void InputRatioInZoneChangedCallback(enum class EScheduledPropertyValueChangedType changeType); // Function OPP.RBPressurePanelComponent.InputRatioInZoneChangedCallback // (Final|Native|Protected) // @ game+0x1de74f0
	void InputHeldChangedCallback(enum class EScheduledPropertyValueChangedType changeType); // Function OPP.RBPressurePanelComponent.InputHeldChangedCallback // (Final|Native|Protected) // @ game+0x1de7470
	float GetUnlockedTimeLeftRatio(); // Function OPP.RBPressurePanelComponent.GetUnlockedTimeLeftRatio // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de7434
	float GetCurrentMeterRatio(); // Function OPP.RBPressurePanelComponent.GetCurrentMeterRatio // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de73c8
	void CurrentInputRatioChangedCallback(enum class EScheduledPropertyValueChangedType changeType); // Function OPP.RBPressurePanelComponent.CurrentInputRatioChangedCallback // (Final|Native|Protected) // @ game+0x1de7320
};

// Class OPP.RBProfilingLocation
// Size: 0x248 (Inherited: 0x248)
struct ARBProfilingLocation : AActor {
};

// Class OPP.RBPropOptimizerComponent
// Size: 0x120 (Inherited: 0xb8)
struct URBPropOptimizerComponent : UActorComponent {
	bool bPropOptimizerEnabled; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	float TickAnimationDistance; // 0xbc(0x04)
	bool bManageActorOwnerTick; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
	struct TArray<struct USkeletalMeshComponent*> ControlledSkeletalMeshes; // 0xc8(0x10)
	bool bAutomaticallyBindSkeletalMeshes; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
	struct FMulticastInlineDelegate OnTickEnabledChanged; // 0xe0(0x10)
	bool bTickEnabledOnProps; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct TArray<struct UCableComponent*> CableComponents; // 0xf8(0x10)
	struct TArray<struct UTimelineComponent*> TimelineComponents; // 0x108(0x10)
	char pad_118[0x8]; // 0x118(0x08)

	void SetOptimEnabled(bool bEnabled); // Function OPP.RBPropOptimizerComponent.SetOptimEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1de7cb8
	void SetForceUpdateAnims(bool bForced); // Function OPP.RBPropOptimizerComponent.SetForceUpdateAnims // (Final|Native|Public|BlueprintCallable) // @ game+0x1de7be0
};

// Class OPP.RBPsychosisMine
// Size: 0x350 (Inherited: 0x248)
struct ARBPsychosisMine : AActor {
	struct FVector DeployedTranslationOffset; // 0x248(0x0c)
	struct FVector PingIconOffset; // 0x254(0x0c)
	struct USkeletalMeshComponent* SkeletalDisplayMesh; // 0x260(0x08)
	float PsychosisMineActivationDuration; // 0x268(0x04)
	float PsychosisMineZoneDuration; // 0x26c(0x04)
	float PsychosisMineBrokenZoneDuration; // 0x270(0x04)
	float PsychosisMineZoneRadius; // 0x274(0x04)
	float PsychosisMineTriggerRadius; // 0x278(0x04)
	char pad_27C[0x4]; // 0x27c(0x04)
	struct FConfigurableFloat psychosisAmount; // 0x280(0xc8)
	enum class EPsychosisMineState State; // 0x348(0x01)
	enum class EPsychosisMineState ProcessedState; // 0x349(0x01)
	char pad_34A[0x6]; // 0x34a(0x06)

	void OnRep_State(); // Function OPP.RBPsychosisMine.OnRep_State // (Final|Native|Protected) // @ game+0x1de7938
	void Multicast_OnDeploy(struct ARBPawn* deployer, struct FTransform Transform); // Function OPP.RBPsychosisMine.Multicast_OnDeploy // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1de7594
	void InitPlacedInLevel_Server(); // Function OPP.RBPsychosisMine.InitPlacedInLevel_Server // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1de745c
	void Event_OnExpiredUnactivated(); // Function OPP.RBPsychosisMine.Event_OnExpiredUnactivated // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnDeployed(); // Function OPP.RBPsychosisMine.Event_OnDeployed // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnBreak(); // Function OPP.RBPsychosisMine.Event_OnBreak // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnActivate(); // Function OPP.RBPsychosisMine.Event_OnActivate // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_EffectFinished(); // Function OPP.RBPsychosisMine.Event_EffectFinished // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void DeinitPlacedInLevel_Server(); // Function OPP.RBPsychosisMine.DeinitPlacedInLevel_Server // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1de73a0
};

// Class OPP.RBPsychosisObjectiveCoordinator
// Size: 0x1668 (Inherited: 0x1668)
struct ARBPsychosisObjectiveCoordinator : ARBPickupSearchObjectiveCoordinator {
};

// Class OPP.RBPushableComponent
// Size: 0x720 (Inherited: 0x600)
struct URBPushableComponent : URBInteractibleComponent {
	char PushableDirection; // 0x600(0x01)
	char pad_601[0x7]; // 0x601(0x07)
	struct FRBComponentSelector HandIKComponent; // 0x608(0x40)
	struct FScheduledUObject PawnPushing; // 0x648(0x88)
	struct USceneComponent* Anchor; // 0x6d0(0x08)
	struct UPrimitiveComponent* PawnCollision; // 0x6d8(0x08)
	struct ARBBasePushable* pushable; // 0x6e0(0x08)
	struct FNetworkVector2D PushIntent; // 0x6e8(0x1c)
	struct FVector PushingPawnStopPosition_Server; // 0x704(0x0c)
	char pad_710[0x10]; // 0x710(0x10)

	void OnRep_PawnPushing(); // Function OPP.RBPushableComponent.OnRep_PawnPushing // (Final|Native|Private) // @ game+0x1de7908
	void OnPawnPushingChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBPushableComponent.OnPawnPushingChangedCallback // (Final|Native|Private) // @ game+0x1de7768
	struct ARBPawn* GetPawnPushing(); // Function OPP.RBPushableComponent.GetPawnPushing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de73f0
};

// Class OPP.RBPushCartGoalManager
// Size: 0x348 (Inherited: 0x250)
struct ARBPushCartGoalManager : ATriggerBox {
	char pad_250[0x10]; // 0x250(0x10)
	bool bUseSpawnerTriggerToComplete; // 0x260(0x01)
	char pad_261[0x7]; // 0x261(0x07)
	struct TArray<struct TSoftObjectPtr<AActor>> ToMatchActiveToggle; // 0x268(0x10)
	struct TArray<struct TSoftObjectPtr<AActor>> ToUntoggleOnActive; // 0x278(0x10)
	struct TArray<struct TSoftObjectPtr<ARBSplineMeshActor>> LinkedRails; // 0x288(0x10)
	struct TSoftObjectPtr<ARBMonsterCloset> MonsterClosetToReplace; // 0x298(0x28)
	struct AActor* MonsterClosetReplaceClass; // 0x2c0(0x08)
	struct TSoftObjectPtr<ARBPushCartSpawner> LinkedCartSpawner; // 0x2c8(0x28)
	bool bActive; // 0x2f0(0x01)
	bool bCartGoalReached; // 0x2f1(0x01)
	char pad_2F2[0x6]; // 0x2f2(0x06)
	struct ARBPushCartObjectiveCoordinator* LinkedObjectiveCoordinator; // 0x2f8(0x08)
	struct AActor* MonsterClosetReplaceActor; // 0x300(0x08)
	struct ATriggerBox* CustomTriggerBox; // 0x308(0x08)
	struct FMulticastInlineDelegate OnActiveChanged; // 0x310(0x10)
	struct FMulticastInlineDelegate OnCartGoalReachedChanged; // 0x320(0x10)
	struct FMulticastInlineDelegate OnLinkedObjectiveCoordinatorChanged; // 0x330(0x10)
	char pad_340[0x8]; // 0x340(0x08)

	void OnRep_LinkedObjectiveCoordinator(); // Function OPP.RBPushCartGoalManager.OnRep_LinkedObjectiveCoordinator // (Final|Native|Public) // @ game+0x1de78e0
	void OnRep_CartGoalReached(); // Function OPP.RBPushCartGoalManager.OnRep_CartGoalReached // (Final|Native|Public) // @ game+0x1de77fc
	void OnRep_Active(); // Function OPP.RBPushCartGoalManager.OnRep_Active // (Final|Native|Public) // @ game+0x1de77e8
};

// Class OPP.RBPushCartObjectiveCoordinator
// Size: 0x17d8 (Inherited: 0xba8)
struct ARBPushCartObjectiveCoordinator : ARBBaseObjectiveCoordinator {
	struct ARBBasePushable* PushableCartClass; // 0xba8(0x08)
	struct FConfigurableInt NumberOfUnlockableRailGates; // 0xbb0(0xc8)
	struct FConfigurableFloat MinDistanceBetweenUnlockableRailGates; // 0xc78(0xc8)
	bool bAutomaticalyEnablePushable; // 0xd40(0x01)
	bool bOnlyUseCartGoalManagers; // 0xd41(0x01)
	char pad_D42[0x6]; // 0xd42(0x06)
	struct FObjectiveUISettings PushCartUISettings; // 0xd48(0xa50)
	struct TArray<struct TSoftObjectPtr<AActor>> AutoUntoggleActors; // 0x1798(0x10)
	struct TArray<struct FPushCartInfo> PushCartInfos; // 0x17a8(0x10)
	struct TArray<struct AActor*> IconTargets_Local; // 0x17b8(0x10)
	struct TArray<struct FPushCartRollingGateReplacementInfo> ReplacementInfosToSetup_Server; // 0x17c8(0x10)

	void OnTargetTriggerBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBPushCartObjectiveCoordinator.OnTargetTriggerBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x1de7960
	void OnRep_PushCartInfos(); // Function OPP.RBPushCartObjectiveCoordinator.OnRep_PushCartInfos // (Final|Native|Protected) // @ game+0x1de7924
};

// Class OPP.RBPushCartRailStopper
// Size: 0x420 (Inherited: 0x420)
struct ARBPushCartRailStopper : ARBTriggerable {
};

// Class OPP.RBPushCartRailBlocker
// Size: 0x420 (Inherited: 0x420)
struct ARBPushCartRailBlocker : ARBTriggerable {
	struct ARBTriggerable* LinkedTriggerable; // 0x418(0x08)

	void OnLinkedTriggered(bool bIsOn, struct ARBTriggerable* triggerable); // Function OPP.RBPushCartRailBlocker.OnLinkedTriggered // (Final|Native|Public) // @ game+0x1de76a4
};

// Class OPP.RBPushCartSpawnerTrigger
// Size: 0x28 (Inherited: 0x28)
struct URBPushCartSpawnerTrigger : UInterface {

	struct UPrimitiveComponent* GetGoalTrigger(); // Function OPP.RBPushCartSpawnerTrigger.GetGoalTrigger // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1deaea4
	struct AActor* GetGoalIconActor(); // Function OPP.RBPushCartSpawnerTrigger.GetGoalIconActor // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1db2ab0
};

// Class OPP.RBPushCartSpawner
// Size: 0x348 (Inherited: 0x250)
struct ARBPushCartSpawner : ATriggerBox {
	char pad_250[0x10]; // 0x250(0x10)
	struct URBRoomAssociationComponent* RoomAssociation; // 0x260(0x08)
	bool bCanSpawn; // 0x268(0x01)
	char bUseLinkedSpawnerSpawnedCart : 1; // 0x269(0x01)
	char pad_269_1 : 7; // 0x269(0x01)
	char pad_26A[0x6]; // 0x26a(0x06)
	struct TSoftObjectPtr<ARBPushCartSpawner> LinkedPushableCartSpawner; // 0x270(0x28)
	bool bDisableCartAtObjectiveDestination; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)
	struct TArray<struct FPushCartPath> Paths; // 0x2a0(0x10)
	struct TArray<struct TSoftObjectPtr<AActor>> ActorsToToggleWhenSpawner; // 0x2b0(0x10)
	struct TArray<struct TSoftObjectPtr<AActor>> ActorsToUnToggleWhenSpawner; // 0x2c0(0x10)
	struct TArray<struct TSoftObjectPtr<AActor>> ActorsToToggleWhenGoal; // 0x2d0(0x10)
	struct TArray<struct TSoftObjectPtr<AActor>> ActorsToUnToggleWhenGoal; // 0x2e0(0x10)
	struct TSoftObjectPtr<AActor> CustomGoalTriggerActor; // 0x2f0(0x28)
	bool bCanDisableTrapsAroundSelectedPath; // 0x318(0x01)
	bool bScheduledForSpawn; // 0x319(0x01)
	bool bScheduledAsGoal; // 0x31a(0x01)
	char pad_31B[0x1]; // 0x31b(0x01)
	int32_t PathIdx; // 0x31c(0x04)
	struct ARBBasePushable* pushable; // 0x320(0x08)
	struct ARBPushCartGoalManager* LinkedCartGoalManager; // 0x328(0x08)
	struct FMulticastInlineDelegate OnPushCartSpawned; // 0x330(0x10)
	char pad_340[0x8]; // 0x340(0x08)

	void OnRep_ScheduledForSpawn(); // Function OPP.RBPushCartSpawner.OnRep_ScheduledForSpawn // (Final|Native|Public) // @ game+0x1deb550
	void OnRep_Pushable(); // Function OPP.RBPushCartSpawner.OnRep_Pushable // (Final|Native|Public) // @ game+0x1deb514
};

// Class OPP.RBPuzzleRoomComponent
// Size: 0x190 (Inherited: 0xb8)
struct URBPuzzleRoomComponent : URBRoomComponent {
	char pad_B8[0x10]; // 0xb8(0x10)
	struct TArray<struct ARBPasscodeNumberDecalActor*> LinkedPasscodeDecals; // 0xc8(0x10)
	struct TArray<struct URBPasscodePadComponent*> LinkedPasscodePads; // 0xd8(0x10)
	struct TArray<struct ARBPasscodeNumberDecalActor*> ChosenPasscodeDecals; // 0xe8(0x10)
	struct TArray<struct ARBLight*> LinkedLights; // 0xf8(0x10)
	struct ARBLargePickup* LinkedLargePickup; // 0x108(0x08)
	struct TArray<struct TSoftObjectPtr<AActor>> ActorsToMatchState; // 0x110(0x10)
	struct TArray<struct TSoftObjectPtr<AActor>> ReplaceableByDetectorDoor; // 0x120(0x10)
	struct TArray<struct TSoftObjectPtr<AActor>> ReplaceableByTradeWindow; // 0x130(0x10)
	bool bLockUnusedConnectors; // 0x140(0x01)
	char pad_141[0x3]; // 0x141(0x03)
	int32_t OrderSetIndex; // 0x144(0x04)
	struct TArray<int32_t> Passcode_Server; // 0x148(0x10)
	struct TArray<struct TSoftObjectPtr<ARBPlayer>> TrappedPlayers; // 0x158(0x10)
	bool bScheduled; // 0x168(0x01)
	char pad_169[0x3]; // 0x169(0x03)
	int32_t RandomPadIdx; // 0x16c(0x04)
	bool bActive; // 0x170(0x01)
	bool bActivatedOnce; // 0x171(0x01)
	char pad_172[0x2]; // 0x172(0x02)
	float PuzzleRoomTimerElapsedServerTimestamp; // 0x174(0x04)
	char pad_178[0x18]; // 0x178(0x18)

	void OnWorldPopulateFinished_Implementation(); // Function OPP.RBPuzzleRoomComponent.OnWorldPopulateFinished_Implementation // (Native|Public) // @ game+0x1deb564
	void OnRep_Scheduled(); // Function OPP.RBPuzzleRoomComponent.OnRep_Scheduled // (Final|Native|Public) // @ game+0x1deb53c
	void OnRep_RandomPadIdx(); // Function OPP.RBPuzzleRoomComponent.OnRep_RandomPadIdx // (Final|Native|Public) // @ game+0x1deb528
	void OnRep_Active(); // Function OPP.RBPuzzleRoomComponent.OnRep_Active // (Final|Native|Public) // @ game+0x1deb4ec
	void OnPawnEnterRoom(struct ARBPawn* Pawn); // Function OPP.RBPuzzleRoomComponent.OnPawnEnterRoom // (Final|Native|Public) // @ game+0x1deb334
	int32_t GetNumberOfDigitsToUnlock(); // Function OPP.RBPuzzleRoomComponent.GetNumberOfDigitsToUnlock // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1deaf10
	struct ARBLargePickup* GetLinkedLargePickup(); // Function OPP.RBPuzzleRoomComponent.GetLinkedLargePickup // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1deaecc
	void GetAllLinkedPasscodePads(struct TArray<struct URBPasscodePadComponent*>& outPads); // Function OPP.RBPuzzleRoomComponent.GetAllLinkedPasscodePads // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1deae0c
	void GetAllLinkedPasscodeDecals(struct TArray<struct ARBPasscodeNumberDecalActor*>& OutActors); // Function OPP.RBPuzzleRoomComponent.GetAllLinkedPasscodeDecals // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dead74
	void GetAllLinkedLights(struct TArray<struct ARBLight*>& outLights); // Function OPP.RBPuzzleRoomComponent.GetAllLinkedLights // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1deacdc
};

// Class OPP.RBPuzzleRoomLargeInteractObjectiveCoordinator
// Size: 0x2528 (Inherited: 0xba8)
struct ARBPuzzleRoomLargeInteractObjectiveCoordinator : ARBBaseObjectiveCoordinator {
	struct ARBLargePickup* LargePickupActors; // 0xba8(0x08)
	struct FConfigurableInt PuzzleRoomCount; // 0xbb0(0xc8)
	char bUseDefinedSections : 1; // 0xc78(0x01)
	char pad_C78_1 : 7; // 0xc78(0x01)
	char pad_C79[0x7]; // 0xc79(0x07)
	struct TArray<struct FPuzzleRoomSection> Sections; // 0xc80(0x10)
	struct ARBTriggerableDoorWayDetector* PuzzleRoomDoorClass; // 0xc90(0x08)
	struct FName SpecificObjectiveComponentTag; // 0xc98(0x08)
	struct ARBTradeWindow* PuzzleRoomTradeWindowReplacingDoorClass; // 0xca0(0x08)
	struct ARBTradeWindow* PuzzleRoomTradeWindowReplacingWindowClass; // 0xca8(0x08)
	struct FConfigurableInt NumberOfEasyDecals; // 0xcb0(0xc8)
	struct FConfigurableInt NumberOfNormalDecals; // 0xd78(0xc8)
	struct FConfigurableInt NumberOfHardDecals; // 0xe40(0xc8)
	struct FConfigurableInt NumberOfVeryHardDecals; // 0xf08(0xc8)
	struct TArray<struct FPasscodeOrderSet> PuzzleRoomPasscodeOrderSets; // 0xfd0(0x10)
	struct FConfigurableBool bPuzzleRoomPasscodeIsOrdered; // 0xfe0(0x60)
	struct FText GoToUsableObjectiveText; // 0x1040(0x18)
	char bUseLargePickupActorsRandomization : 1; // 0x1058(0x01)
	char pad_1058_1 : 7; // 0x1058(0x01)
	char pad_1059[0x7]; // 0x1059(0x07)
	struct FObjectiveUISettings DeliveryZoneUISettings; // 0x1060(0xa50)
	struct FObjectiveUISettings PickupObjectiveUISettings; // 0x1ab0(0xa50)
	struct URBLargeObjectInteractionPanelComponent* ObjectiveLargePanelInteractComponent; // 0x2500(0x08)
	struct TArray<struct ARBLargePickup*> AvailableLargePickups; // 0x2508(0x10)
	struct TArray<struct ARBLargePickup*> PreviousAvailablePickups; // 0x2518(0x10)

	void OnRep_AvailableLargePickups(); // Function OPP.RBPuzzleRoomLargeInteractObjectiveCoordinator.OnRep_AvailableLargePickups // (Final|Native|Protected) // @ game+0x1deb500
	void OnPickupHolderChanged(struct ARBPawn* Player, struct ARBLargePickup* largePickup); // Function OPP.RBPuzzleRoomLargeInteractObjectiveCoordinator.OnPickupHolderChanged // (Final|Native|Protected) // @ game+0x1deb428
	void OnLargePickupUsedOnObject(struct ARBPawn* interactor, struct ARBLargePickup* largePickup, struct URBLargeObjectInteractionPanelComponent* interactible); // Function OPP.RBPuzzleRoomLargeInteractObjectiveCoordinator.OnLargePickupUsedOnObject // (Final|Native|Protected) // @ game+0x1deb23c
	void OnLargeObjectInteractionDoAction(struct URBLargeObjectInteractionPanelComponent* largeObjectPanel, struct ARBLargePickup* largePickup, struct ARBPawn* interactor); // Function OPP.RBPuzzleRoomLargeInteractObjectiveCoordinator.OnLargeObjectInteractionDoAction // (Native|Protected) // @ game+0x1d8b534
	void OnInteractibleAddedToWorld(struct ARBInteractible* interactible); // Function OPP.RBPuzzleRoomLargeInteractObjectiveCoordinator.OnInteractibleAddedToWorld // (Final|Native|Protected) // @ game+0x1deb170
};

// Class OPP.RBQuestGiverConfig
// Size: 0x88 (Inherited: 0x28)
struct URBQuestGiverConfig : UObject {
	enum class EMetaNPCType metaNPCType; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float HailingRepetitionDelay; // 0x2c(0x04)
	float HailingLockedRepetitionDelay; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct FQuestGiverAnimations Animations; // 0x38(0x50)
};

// Class OPP.RBQuitMenu
// Size: 0x308 (Inherited: 0x308)
struct URBQuitMenu : URBMenuWidget {

	void ExitToMainMenu(); // Function OPP.RBQuitMenu.ExitToMainMenu // (Final|Native|Public|BlueprintCallable) // @ game+0x1deacb0
	void ExitGame(); // Function OPP.RBQuitMenu.ExitGame // (Final|Native|Public|BlueprintCallable) // @ game+0x1deac88
	void Event_Exiting(); // Function OPP.RBQuitMenu.Event_Exiting // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Cancel(); // Function OPP.RBQuitMenu.Cancel // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d7f0
};

// Class OPP.RBRadioDistraction
// Size: 0x4c8 (Inherited: 0x4c0)
struct ARBRadioDistraction : ARBInteractible {
	bool bIsBroken; // 0x4c0(0x01)
	bool bIsPlaying; // 0x4c1(0x01)
	char pad_4C2[0x6]; // 0x4c2(0x06)

	void Multicast_Break(struct ARBPawn* breakingPawn); // Function OPP.RBRadioDistraction.Multicast_Break // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1deb068
	void Event_Break(struct ARBPawn* breakingPawn); // Function OPP.RBRadioDistraction.Event_Break // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBRailForPushableComponent
// Size: 0xf0 (Inherited: 0xb8)
struct URBRailForPushableComponent : UActorComponent {
	char pad_B8[0x8]; // 0xb8(0x08)
	bool bIsCheckpoint; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
	struct TArray<struct TSoftObjectPtr<AActor>> LinkedActors; // 0xc8(0x10)
	struct TArray<struct TSoftObjectPtr<AActor>> InverseLinkedActors; // 0xd8(0x10)
	char pad_E8[0x8]; // 0xe8(0x08)
};

// Class OPP.RBRandomAmbientSound
// Size: 0x250 (Inherited: 0x248)
struct ARBRandomAmbientSound : AActor {
	struct URBRandomAmbientSoundComponent* RandomAmbientSoundComponent; // 0x248(0x08)
};

// Class OPP.RBRandomAmbientSoundComponent
// Size: 0x5f0 (Inherited: 0x580)
struct URBRandomAmbientSoundComponent : URBSoundComponent {
	struct TArray<struct UAkAudioEvent*> SmallEvents; // 0x580(0x10)
	struct TArray<struct UAkAudioEvent*> MediumEvents; // 0x590(0x10)
	struct TArray<struct UAkAudioEvent*> LargeEvents; // 0x5a0(0x10)
	struct TArray<struct UAkAudioEvent*> PsychosisSmallEvents; // 0x5b0(0x10)
	struct TArray<struct UAkAudioEvent*> PsychosisMediumEvents; // 0x5c0(0x10)
	struct TArray<struct UAkAudioEvent*> PsychosisLargeEvents; // 0x5d0(0x10)
	int32_t RandomSeed; // 0x5e0(0x04)
	char pad_5E4[0xc]; // 0x5e4(0x0c)
};

// Class OPP.RBRandomAudioFXManager
// Size: 0x2d8 (Inherited: 0x248)
struct ARBRandomAudioFXManager : AActor {
	char pad_248[0x8]; // 0x248(0x08)
	uint32_t RandomSoundTriggerCountMedium; // 0x250(0x04)
	float ServerTimeToTriggerMedium; // 0x254(0x04)
	uint32_t RandomSoundTriggerCountLarge; // 0x258(0x04)
	float ServerTimeToTriggerLarge; // 0x25c(0x04)
	struct TSoftObjectPtr<URBRandomAmbientSoundComponent> LastPlayedSmallSoundComponent; // 0x260(0x28)
	struct TSoftObjectPtr<URBRandomAmbientSoundComponent> LastPlayedMediumSoundComponent; // 0x288(0x28)
	struct TSoftObjectPtr<URBRandomAmbientSoundComponent> LastPlayedLargeSoundComponent; // 0x2b0(0x28)
};

// Class OPP.RBRandomGroup
// Size: 0x288 (Inherited: 0x248)
struct ARBRandomGroup : AActor {
	char pad_248[0x18]; // 0x248(0x18)
	enum class ERandomGroupIgnoreRule RandomIgnoreRule; // 0x260(0x01)
	char pad_261[0x7]; // 0x261(0x07)
	struct TArray<struct TSoftObjectPtr<AActor>> RandomActors; // 0x268(0x10)
	struct USceneComponent* RandomGroupRootComponent; // 0x278(0x08)
	struct URBRandomizableHelperComponent* RandomizableHelperComponent; // 0x280(0x08)

	void SelectLinkedActors(); // Function OPP.RBRandomGroup.SelectLinkedActors // (Final|Native|Public) // @ game+0x1521dbc
	void CenterOnLinkedActors(); // Function OPP.RBRandomGroup.CenterOnLinkedActors // (Final|Native|Public) // @ game+0x1deac74
	void AddSelectedActors(); // Function OPP.RBRandomGroup.AddSelectedActors // (Final|Native|Public) // @ game+0x1521dbc
};

// Class OPP.RBRandomizable
// Size: 0x28 (Inherited: 0x28)
struct URBRandomizable : UInterface {

	bool ShouldBeIgnoredForLots(); // Function OPP.RBRandomizable.ShouldBeIgnoredForLots // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1db2f74
	void SetState(bool bStateA); // Function OPP.RBRandomizable.SetState // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1deb7c8
	void SetShouldBeIgnoredForLots(bool bValue); // Function OPP.RBRandomizable.SetShouldBeIgnoredForLots // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1deb744
	void PrepareState(bool bStateA, struct AActor* randomOwner); // Function OPP.RBRandomizable.PrepareState // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1deb67c
	bool IsStateA(); // Function OPP.RBRandomizable.IsStateA // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1deb044
	bool GetStateName(struct FString& stateA, struct FString& stateB); // Function OPP.RBRandomizable.GetStateName // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1deaf34
};

// Class OPP.RBRandomizableDeferredDecal
// Size: 0x268 (Inherited: 0x258)
struct ARBRandomizableDeferredDecal : ADecalActor {
	char pad_258[0x8]; // 0x258(0x08)
	bool bEnabled; // 0x260(0x01)
	char pad_261[0x7]; // 0x261(0x07)

	void OnRep_Enabled(); // Function OPP.RBRandomizableDeferredDecal.OnRep_Enabled // (Final|Native|Public) // @ game+0x1d21684
};

// Class OPP.RBRandomizableHelperComponent
// Size: 0x198 (Inherited: 0xb8)
struct URBRandomizableHelperComponent : UActorComponent {
	char pad_B8[0x10]; // 0xb8(0x10)
	struct ARBRandomGroup* ParentRandomGroup; // 0xc8(0x08)
	enum class ERandomState RandomState; // 0xd0(0x01)
	bool bForceUseObjectiveInRandom; // 0xd1(0x01)
	char pad_D2[0x6]; // 0xd2(0x06)
	struct FConfigurableBool IsAllowedObjectiveForRandom; // 0xd8(0x60)
	bool bToggleActorOnStateA; // 0x138(0x01)
	bool bDisableRandomOnLinkedActors; // 0x139(0x01)
	bool bOnlyUseInverseMatchActorsOnStateA; // 0x13a(0x01)
	bool bDisableItemContainersIfStateA; // 0x13b(0x01)
	float DisabledItemContainerDistance; // 0x13c(0x04)
	struct FVector RelativeOffsetForDisabledItemContainer; // 0x140(0x0c)
	char pad_14C[0x4]; // 0x14c(0x04)
	struct TArray<struct TSoftObjectPtr<AActor>> ActorsToMatchState; // 0x150(0x10)
	struct TArray<struct TSoftObjectPtr<AActor>> ActorsToInverseMatchState; // 0x160(0x10)
	struct TArray<struct TSoftObjectPtr<AActor>> SharedActorsToMatchState; // 0x170(0x10)
	struct FMulticastInlineDelegate OnRandomStateChangedEvent; // 0x180(0x10)
	char pad_190[0x8]; // 0x190(0x08)

	void SnapToState(); // Function OPP.RBRandomizableHelperComponent.SnapToState // (Final|Native|Public|BlueprintCallable) // @ game+0x1def358
	void SelectSharedActors(); // Function OPP.RBRandomizableHelperComponent.SelectSharedActors // (Final|Native|Public|BlueprintCallable) // @ game+0x1521dbc
	void SelectLinkedActors(); // Function OPP.RBRandomizableHelperComponent.SelectLinkedActors // (Final|Native|Public|BlueprintCallable) // @ game+0x1521dbc
	void OnRep_RandomState(); // Function OPP.RBRandomizableHelperComponent.OnRep_RandomState // (Final|Native|Public) // @ game+0x1def358
	void IsolateSharedActorsToMatchState(); // Function OPP.RBRandomizableHelperComponent.IsolateSharedActorsToMatchState // (Final|Native|Public|BlueprintCallable) // @ game+0x1521dbc
	void Editor_TransferSharedActorToMatchActor(); // Function OPP.RBRandomizableHelperComponent.Editor_TransferSharedActorToMatchActor // (Final|Native|Public) // @ game+0x1521dbc
	bool BP_ShouldBeIgnoredForLots(); // Function OPP.RBRandomizableHelperComponent.BP_ShouldBeIgnoredForLots // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1def304
	void BP_SetShouldBeIgnoredForLots(bool bValue); // Function OPP.RBRandomizableHelperComponent.BP_SetShouldBeIgnoredForLots // (Final|Native|Public|BlueprintCallable) // @ game+0x1def284
	void BP_SetRandomState(enum class ERandomState newRandomState); // Function OPP.RBRandomizableHelperComponent.BP_SetRandomState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1def204
	void BP_SetIsStateA(bool bIsStateA); // Function OPP.RBRandomizableHelperComponent.BP_SetIsStateA // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1def180
	void BP_PrepareIsStateA(bool bIsStateA); // Function OPP.RBRandomizableHelperComponent.BP_PrepareIsStateA // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1def0d0
	bool BP_IsStateSet(); // Function OPP.RBRandomizableHelperComponent.BP_IsStateSet // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1def0b4
	bool BP_IsStateA(); // Function OPP.RBRandomizableHelperComponent.BP_IsStateA // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1def098
};

// Class OPP.RBRandomizableMeshActor
// Size: 0x260 (Inherited: 0x248)
struct ARBRandomizableMeshActor : AActor {
	char pad_248[0x8]; // 0x248(0x08)
	struct USceneComponent* BaseRootComponent; // 0x250(0x08)
	enum class ESoundConnectorSetup ShownSoundConnectorSetup; // 0x258(0x01)
	enum class ESoundConnectorSetup HiddenSoundConnectorSetup; // 0x259(0x01)
	enum class ELedgeMarkerSetup LegdeMarkerSetup; // 0x25a(0x01)
	bool bCastStaticShadow; // 0x25b(0x01)
	bool bVisible; // 0x25c(0x01)
	char pad_25D[0x3]; // 0x25d(0x03)

	void OnRep_Visible(); // Function OPP.RBRandomizableMeshActor.OnRep_Visible // (Final|Native|Public) // @ game+0x1def36c
};

// Class OPP.RBRandomPathMarker
// Size: 0x2a0 (Inherited: 0x270)
struct ARBRandomPathMarker : ARBSplineActor {
	bool bValidStation; // 0x270(0x01)
	char pad_271[0x7]; // 0x271(0x07)
	struct URBBackgroundCharacterStation* Station; // 0x278(0x08)
	float MinStayDuration; // 0x280(0x04)
	float MaxStayDuration; // 0x284(0x04)
	struct TArray<struct ARBRandomPathMarker*> ExtraLinks; // 0x288(0x10)
	bool bMustStopAtStation; // 0x298(0x01)
	bool bUseAlternateLocomotion; // 0x299(0x01)
	char pad_29A[0x6]; // 0x29a(0x06)
};

// Class OPP.RBRechargeStationPanelComponent
// Size: 0xc10 (Inherited: 0x7a0)
struct URBRechargeStationPanelComponent : URBInteractiblePanelComponent {
	struct FConfigurableInt MaxAmountOfEnergy; // 0x7a0(0xc8)
	struct FConfigurableInt MinEnergyToInteract; // 0x868(0xc8)
	struct FConfigurableInt EnergyTransferPerSec; // 0x930(0xc8)
	struct FConfigurableFloat EnergyRechargeCooldownTime; // 0x9f8(0xc8)
	struct FConfigurableInt EnergyRechargeRate; // 0xac0(0xc8)
	struct FText BatteryFullInteractionText; // 0xb88(0x18)
	struct FText NotEnoughEnergyInteractionText; // 0xba0(0x18)
	int32_t CurrentEnergy; // 0xbb8(0x04)
	bool bIsRecharging; // 0xbbc(0x01)
	bool bIsInCooldown; // 0xbbd(0x01)
	char pad_BBE[0x2]; // 0xbbe(0x02)
	struct FMulticastInlineDelegate OnCurrentEnergyChanged; // 0xbc0(0x10)
	struct FMulticastInlineDelegate OnIsRechargingChanged; // 0xbd0(0x10)
	struct FMulticastInlineDelegate OnIsInCooldownChanged; // 0xbe0(0x10)
	char pad_BF0[0x20]; // 0xbf0(0x20)

	void OnRep_IsRecharging(); // Function OPP.RBRechargeStationPanelComponent.OnRep_IsRecharging // (Final|Native|Private) // @ game+0x1def344
	void OnRep_IsInCooldown(); // Function OPP.RBRechargeStationPanelComponent.OnRep_IsInCooldown // (Final|Native|Private) // @ game+0x1def330
	void OnRep_CurrentEnergy(); // Function OPP.RBRechargeStationPanelComponent.OnRep_CurrentEnergy // (Final|Native|Private) // @ game+0x1def31c
};

// Class OPP.RBRegroupObjectiveInteractionRequirement
// Size: 0x88 (Inherited: 0x88)
struct URBRegroupObjectiveInteractionRequirement : URBInteractionRequirement {
};

// Class OPP.RBRegroupObjectiveActor
// Size: 0x28 (Inherited: 0x28)
struct URBRegroupObjectiveActor : UInterface {

	void OnTotalNumberOfPlayersChanged(int32_t numberOfPlayers); // Function OPP.RBRegroupObjectiveActor.OnTotalNumberOfPlayersChanged // (Native|Event|Public|BlueprintEvent) // @ game+0x1df3128
	void OnRegroupObjectiveStateChanged(enum class ERegroupObjectiveState newState); // Function OPP.RBRegroupObjectiveActor.OnRegroupObjectiveStateChanged // (Native|Event|Public|BlueprintEvent) // @ game+0x1df2f70
	void OnObjectiveStarted(struct ARBRegroupObjectiveCoordinator* coordinator); // Function OPP.RBRegroupObjectiveActor.OnObjectiveStarted // (Native|Event|Public|BlueprintEvent) // @ game+0x1df2c0c
	void OnObjectiveEnded(); // Function OPP.RBRegroupObjectiveActor.OnObjectiveEnded // (Native|Event|Public|BlueprintEvent) // @ game+0x1d96128
	void OnNumberOfPlayerInZoneChanged(int32_t numberOfPlayers); // Function OPP.RBRegroupObjectiveActor.OnNumberOfPlayerInZoneChanged // (Native|Event|Public|BlueprintEvent) // @ game+0x1df2b8c
};

// Class OPP.RBRegroupObjectiveCoordinator
// Size: 0x16f8 (Inherited: 0xba8)
struct ARBRegroupObjectiveCoordinator : ARBBaseObjectiveCoordinator {
	struct TSoftObjectPtr<AActor> CustomTargetTriggers; // 0xba8(0x28)
	bool bRespawnDeadPlayersOnStart; // 0xbd0(0x01)
	bool bStartWaitingForBP; // 0xbd1(0x01)
	bool bWaitToExitSeperatorTubes; // 0xbd2(0x01)
	char pad_BD3[0x5]; // 0xbd3(0x05)
	struct FText WaitingForPlayerInteractionText; // 0xbd8(0x18)
	struct FText WaitingForNpcsInteractionText; // 0xbf0(0x18)
	struct FText WaitingForBPInteractionText; // 0xc08(0x18)
	struct FText PlayersWaitingForYouReminderText; // 0xc20(0x18)
	float PlayersWaitingForYouReminderDelay; // 0xc38(0x04)
	char pad_C3C[0x4]; // 0xc3c(0x04)
	struct FObjectiveUISettings RegroupZoneUISettings; // 0xc40(0xa50)
	enum class ERegroupObjectiveState regroupState; // 0x1690(0x01)
	char pad_1691[0x3]; // 0x1691(0x03)
	int32_t NumberOfPlayerInZone; // 0x1694(0x04)
	int32_t TotalNumberOfPlayers; // 0x1698(0x04)
	char pad_169C[0x4]; // 0x169c(0x04)
	struct ARBRoom* RoomCache; // 0x16a0(0x08)
	struct UPrimitiveComponent* TriggerShapeCache; // 0x16a8(0x08)
	struct FMulticastInlineDelegate OnRegroupStateChanged; // 0x16b0(0x10)
	struct FMulticastInlineDelegate OnNumberOfPlayerInZoneChanged; // 0x16c0(0x10)
	struct FMulticastInlineDelegate OnTotalNumberOfPlayersChanged; // 0x16d0(0x10)
	char pad_16E0[0x8]; // 0x16e0(0x08)
	struct TArray<struct ARBNPCSeparatorTube*> SeperatorTubes_Server; // 0x16e8(0x10)

	void OnRep_TotalNumberOfPlayers(); // Function OPP.RBRegroupObjectiveCoordinator.OnRep_TotalNumberOfPlayers // (Final|Native|Protected) // @ game+0x1df3114
	void OnRep_RegroupState(); // Function OPP.RBRegroupObjectiveCoordinator.OnRep_RegroupState // (Final|Native|Protected) // @ game+0x1df30b0
	void OnRep_NumberOfPlayerInZone(); // Function OPP.RBRegroupObjectiveCoordinator.OnRep_NumberOfPlayerInZone // (Final|Native|Protected) // @ game+0x1df309c
	void OnPlayerSimpleDoAction(struct ARBPawn* Player, struct URBInteractibleComponent* Component); // Function OPP.RBRegroupObjectiveCoordinator.OnPlayerSimpleDoAction // (Final|Native|Protected) // @ game+0x1df2eac
	void OnPlayerDoAction(struct ARBPawn* Player, struct ARBInteractible* interactible); // Function OPP.RBRegroupObjectiveCoordinator.OnPlayerDoAction // (Final|Native|Protected) // @ game+0x1df2d50
	void OnOperatingFinished(struct URBOperatableComponent* Component, struct ARBPawn* Player); // Function OPP.RBRegroupObjectiveCoordinator.OnOperatingFinished // (Final|Native|Protected) // @ game+0x1df2c8c
	void BP_SetWaitingForBP(bool bValue); // Function OPP.RBRegroupObjectiveCoordinator.BP_SetWaitingForBP // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1df2300
};

// Class OPP.RBReleaseMenu
// Size: 0x310 (Inherited: 0x308)
struct URBReleaseMenu : URBMenuWidget {
	char pad_308[0x8]; // 0x308(0x08)

	void ReleaseCharacter(); // Function OPP.RBReleaseMenu.ReleaseCharacter // (Final|Native|Protected|BlueprintCallable) // @ game+0x1df31a8
	void OnReleaseButtonUp(); // Function OPP.RBReleaseMenu.OnReleaseButtonUp // (Final|Native|Protected|BlueprintCallable) // @ game+0x1df3060
	void OnReleaseButtonDown(); // Function OPP.RBReleaseMenu.OnReleaseButtonDown // (Final|Native|Protected|BlueprintCallable) // @ game+0x1df2ff0
	void OnPlayerReleaseStateUpdated(struct FPlayerReleaseState& PlayerReleaseState); // Function OPP.RBReleaseMenu.OnPlayerReleaseStateUpdated // (Final|Native|Private|HasOutParms) // @ game+0x1df2e14
	void Event_CharacterReleased(); // Function OPP.RBReleaseMenu.Event_CharacterReleased // (Event|Protected|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBRemoteDebuggingComponent
// Size: 0x1af8 (Inherited: 0xb8)
struct URBRemoteDebuggingComponent : UActorComponent {
	struct ARBController* RBController; // 0xb8(0x08)
	struct FRemoteDebuggingState debuggingState; // 0xc0(0x20)
	struct FPlayerDebugInfo CachedPlayerDebugInfo; // 0xe0(0x28)
	struct FBotDebugInfo CachedBotDebugInfo; // 0x108(0x308)
	struct FLevelStreamingInfo CachedServerStreamingInfo; // 0x410(0x98)
	struct FScoringDebugInfo CachedScoringDebugInfo; // 0x4a8(0x10)
	struct FMusicDebugInfo CachedMusicDebugInfo; // 0x4b8(0x18)
	struct FOverseerInfo CachedOverseerInfo; // 0x4d0(0x118)
	struct FAIConfigData CachedConfigOverrides; // 0x5e8(0x11bc)
	char pad_17A4[0x4]; // 0x17a4(0x04)
	struct FRandomNPCSpawningDebugInfo CachedNPCRandomizationInfo; // 0x17a8(0x10)
	struct FGameplayRandomizationDebugInfo CachedRandomizationDebugInfo; // 0x17b8(0x100)
	struct TArray<struct URBPartialAIConfig*> CachedAdditionalConfigs; // 0x18b8(0x10)
	struct FStatsRuntimeData PlayerStatsRuntimeData; // 0x18c8(0x200)
	char pad_1AC8[0x30]; // 0x1ac8(0x30)

	void Server_SetDebuggingState(struct FRemoteDebuggingState debuggingState); // Function OPP.RBRemoteDebuggingComponent.Server_SetDebuggingState // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1df3290
	void Client_UpdateServerStreamingInfo(struct FLevelStreamingInfo debugInfo); // Function OPP.RBRemoteDebuggingComponent.Client_UpdateServerStreamingInfo // (Net|Native|Event|Public|NetClient) // @ game+0x1df2968
	void Client_UpdateScoringDebugInfo(struct FScoringDebugInfo debugInfo); // Function OPP.RBRemoteDebuggingComponent.Client_UpdateScoringDebugInfo // (Net|Native|Event|Public|NetClient) // @ game+0x1df28d8
	void Client_UpdatePlayerDebugInfo(struct FPlayerDebugInfo debugInfo); // Function OPP.RBRemoteDebuggingComponent.Client_UpdatePlayerDebugInfo // (Net|Native|Event|Public|NetClient) // @ game+0x1df2834
	void Client_UpdateOverseerInfo(struct FOverseerInfo OverseerInfo); // Function OPP.RBRemoteDebuggingComponent.Client_UpdateOverseerInfo // (Net|Native|Event|Public|NetClient) // @ game+0x1df2778
	void Client_UpdateNPCRandomizationInfo(struct FRandomNPCSpawningDebugInfo npcRandomizationInfo); // Function OPP.RBRemoteDebuggingComponent.Client_UpdateNPCRandomizationInfo // (Net|Native|Event|Public|NetClient) // @ game+0x1df26e8
	void Client_UpdateMusicDebugInfo(struct FMusicDebugInfo debugInfo); // Function OPP.RBRemoteDebuggingComponent.Client_UpdateMusicDebugInfo // (Net|Native|Event|Public|NetClient) // @ game+0x1df2658
	void Client_UpdateGameplayRandomizationDebugInfo(struct FGameplayRandomizationDebugInfo debugInfo); // Function OPP.RBRemoteDebuggingComponent.Client_UpdateGameplayRandomizationDebugInfo // (Net|Native|Event|Public|NetClient) // @ game+0x1df25b4
	void Client_UpdateBotDebugInfo(struct FBotDebugInfo debugInfo); // Function OPP.RBRemoteDebuggingComponent.Client_UpdateBotDebugInfo // (Net|Native|Event|Public|NetClient) // @ game+0x1df2518
	void Client_SetRecentAnalyticsEvents(struct TArray<struct FString> RecentEvents); // Function OPP.RBRemoteDebuggingComponent.Client_SetRecentAnalyticsEvents // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1df2488
	void Client_SetAIConfigInfo(struct FAIConfigData addedOverrides, struct TArray<struct URBPartialAIConfig*> AdditionalConfigs); // Function OPP.RBRemoteDebuggingComponent.Client_SetAIConfigInfo // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1df239c
};

// Class OPP.RBRenderingStressTestAgent
// Size: 0x68 (Inherited: 0x40)
struct URBRenderingStressTestAgent : URBFunctionalTestAgent {
	char pad_40[0x28]; // 0x40(0x28)
};

// Class OPP.RBReplayTutorialMenu
// Size: 0x340 (Inherited: 0x308)
struct URBReplayTutorialMenu : URBMenuWidget {
	char pad_308[0x38]; // 0x308(0x38)

	bool IsOperationPending(); // Function OPP.RBReplayTutorialMenu.IsOperationPending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d10a40
	void FindTutorialServer(); // Function OPP.RBReplayTutorialMenu.FindTutorialServer // (Final|Native|Public|BlueprintCallable) // @ game+0x1df2a44
	void Event_Exiting(); // Function OPP.RBReplayTutorialMenu.Event_Exiting // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Cancel(); // Function OPP.RBReplayTutorialMenu.Cancel // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d7f0
};

// Class OPP.RBReportPlayerMenu
// Size: 0x318 (Inherited: 0x308)
struct URBReportPlayerMenu : URBMenuWidget {
	char pad_308[0x10]; // 0x308(0x10)

	void Send(enum class EPlayerReportReason Reason, struct FString reasonText); // Function OPP.RBReportPlayerMenu.Send // (Final|Native|Public|BlueprintCallable) // @ game+0x1df31bc
	struct FText GetPlayerReportReasonText(enum class EPlayerReportReason Reason); // Function OPP.RBReportPlayerMenu.GetPlayerReportReasonText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df2a78
	struct FString GetPlayerDisplayName(); // Function OPP.RBReportPlayerMenu.GetPlayerDisplayName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df2a58
	void Event_Refresh(); // Function OPP.RBReportPlayerMenu.Event_Refresh // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBRepulsionComponent
// Size: 0x2a0 (Inherited: 0x220)
struct URBRepulsionComponent : USceneComponent {
	bool bEnabled; // 0x218(0x01)
	float RepulsionForce; // 0x21c(0x04)
	bool bAlwaysSoftRepulsion; // 0x220(0x01)
	bool bScaleForceBy2DDistance; // 0x221(0x01)
	struct FVector ShapeSize; // 0x224(0x0c)
	enum class ECollisionChannel CollisionType; // 0x230(0x01)
	enum class ERepulsionShape RepulsionShape; // 0x231(0x01)
	char pad_235[0x3]; // 0x235(0x03)
	struct UShapeComponent* BlockingCollisionComponent; // 0x238(0x08)
	struct TArray<struct FRepulsionRule> RepulsionRules; // 0x240(0x10)
	struct TArray<struct AActor*> IgnoreCollisionActorWhileRepulsed; // 0x250(0x10)
	struct FMulticastInlineDelegate OnPawnRepulsionDone; // 0x260(0x10)
	bool bScheduledState; // 0x270(0x01)
	char pad_271[0x3]; // 0x271(0x03)
	float ScheduledTime; // 0x274(0x04)
	char pad_278[0x10]; // 0x278(0x10)
	struct TArray<struct TSoftObjectPtr<ARBPawn>> PawnsBeingRepulsed; // 0x288(0x10)
	char pad_298[0x8]; // 0x298(0x08)

	void SetOriginalSizeToCurrentSize(); // Function OPP.RBRepulsionComponent.SetOriginalSizeToCurrentSize // (Final|Native|Public|BlueprintCallable) // @ game+0x1df332c
	void OnRep_ScheduledTime(); // Function OPP.RBRepulsionComponent.OnRep_ScheduledTime // (Final|Native|Public) // @ game+0x1df3100
	void OnRep_ScheduledState(); // Function OPP.RBRepulsionComponent.OnRep_ScheduledState // (Final|Native|Public) // @ game+0x1df30ec
	void OnRep_RepulsionRules(); // Function OPP.RBRepulsionComponent.OnRep_RepulsionRules // (Final|Native|Public) // @ game+0x1df30c4
	void BP_SetEnabled(bool bNewValue, float delay, float duration); // Function OPP.RBRepulsionComponent.BP_SetEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1df21f4
	void AddPawnException(struct ARBPawn* Pawn); // Function OPP.RBRepulsionComponent.AddPawnException // (Final|Native|Public|BlueprintCallable) // @ game+0x1df2124
	void ActivateScheduledState(); // Function OPP.RBRepulsionComponent.ActivateScheduledState // (Final|Native|Public) // @ game+0x1df2110
};

// Class OPP.RBReviveObjectiveCoordinator
// Size: 0x1668 (Inherited: 0x1668)
struct ARBReviveObjectiveCoordinator : ARBPickupSearchObjectiveCoordinator {
};

// Class OPP.RBRewardRoomComponent
// Size: 0x180 (Inherited: 0xb8)
struct URBRewardRoomComponent : URBRoomComponent {
	char pad_B8[0x8]; // 0xb8(0x08)
	struct TArray<struct TSoftObjectPtr<ADecalActor>> LinkedRewardDecals; // 0xc0(0x10)
	struct TArray<struct TSoftObjectPtr<ATextRenderActor>> LinkedTexts; // 0xd0(0x10)
	bool bScheduled; // 0xe0(0x01)
	char pad_E1[0x7]; // 0xe1(0x07)
	struct TArray<struct ARBContainer*> ScheduledRewardContainers; // 0xe8(0x10)
	struct ARBDoor* LinkedRewardDoor; // 0xf8(0x08)
	struct TArray<struct AActor*> LinkedRewardButtons; // 0x100(0x10)
	struct TArray<struct AActor*> UnusedRewardButtons; // 0x110(0x10)
	struct ARBRoomGroup* ParentRoomGroup; // 0x120(0x08)
	struct TMap<struct AActor*, struct FRoomDetourPathData> RoomDetourPaths; // 0x128(0x50)
	bool bRoomDetoursValid; // 0x178(0x01)
	char pad_179[0x7]; // 0x179(0x07)

	void OnRep_Scheduled(); // Function OPP.RBRewardRoomComponent.OnRep_Scheduled // (Final|Native|Public) // @ game+0x1df30d8
	void OnRep_LinkedRewardDoor(); // Function OPP.RBRewardRoomComponent.OnRep_LinkedRewardDoor // (Final|Native|Public) // @ game+0x1df3088
	void OnLinkedDoorUnlocked(struct ARBPawn* Pawn); // Function OPP.RBRewardRoomComponent.OnLinkedDoorUnlocked // (Final|Native|Private) // @ game+0x1df2b0c
};

// Class OPP.RBRichTextBlockInputWidgetDecorator
// Size: 0x40 (Inherited: 0x28)
struct URBRichTextBlockInputWidgetDecorator : URichTextBlockDecorator {
	struct TArray<struct UWidget*> InputWidgets; // 0x28(0x10)
	struct UDataTable* DataTable; // 0x38(0x08)
};

// Class OPP.RBRoom
// Size: 0x470 (Inherited: 0x280)
struct ARBRoom : AVolume {
	char pad_280[0x10]; // 0x280(0x10)
	enum class ERoomType RoomType; // 0x290(0x01)
	char pad_291[0x3]; // 0x291(0x03)
	int32_t MinimumAccessCount; // 0x294(0x04)
	bool bNoHidespotAllowed; // 0x298(0x01)
	bool bIgnorePlayersInRoom; // 0x299(0x01)
	bool bIgnoreMapCheck; // 0x29a(0x01)
	bool bRewardRoom; // 0x29b(0x01)
	bool bPuzzleRoom; // 0x29c(0x01)
	bool bMinigameRoom; // 0x29d(0x01)
	enum class ERoomSize RoomSize; // 0x29e(0x01)
	char pad_29F[0x1]; // 0x29f(0x01)
	struct URBPuzzleRoomComponent* PuzzleRoomComponent; // 0x2a0(0x08)
	struct URBRewardRoomComponent* RewardRoomComponent; // 0x2a8(0x08)
	struct URBMinigameRoomComponent* minigameRoomComponent; // 0x2b0(0x08)
	struct FMulticastInlineDelegate OnPawnEntered; // 0x2b8(0x10)
	struct FMulticastInlineDelegate OnPawnExited; // 0x2c8(0x10)
	struct TArray<struct URBRoomConnectorComponent*> LinkedRoomConnectors; // 0x2d8(0x10)
	struct TMap<enum class ERoomAssociationType, struct FRoomAssociationComponentList> AssociatedComponentsMap; // 0x2e8(0x50)
	struct TArray<struct URBRoomComponent*> RoomComponents; // 0x338(0x10)
	struct TSoftObjectPtr<ARBRoom> AddLinkedRoom; // 0x348(0x28)
	struct TSoftObjectPtr<ARBRoomGroup> AddToRoomGroup; // 0x370(0x28)
	struct TArray<struct ARBDoor*> LinkedDoors; // 0x398(0x10)
	struct TArray<struct ARBTriggerableGate*> LinkedTriggerableGates; // 0x3a8(0x10)
	struct TArray<struct ARBBreakableWindow*> LinkedBreakableWindows; // 0x3b8(0x10)
	struct TArray<struct ARBWindowShutter*> LinkedShutters; // 0x3c8(0x10)
	struct TArray<struct ARBTriggerableDoorWayDetector*> LinkedDoorWayDetector; // 0x3d8(0x10)
	struct TSoftObjectPtr<ARBSoundVolume> LinkedSoundVolume; // 0x3e8(0x28)
	struct TArray<struct TSoftObjectPtr<ARBRoom>> SlaveRooms; // 0x410(0x10)
	struct TSoftObjectPtr<ARBRoom> MasterRoom; // 0x420(0x28)
	struct ARBRoomGroup* LinkedMissionRoomGroup; // 0x448(0x08)
	struct URBRewardRoomComponent* UsedByRewardComponent; // 0x450(0x08)
	bool bUsedForRegroup; // 0x458(0x01)
	char pad_459[0x7]; // 0x459(0x07)
	struct TArray<struct URBRoomConnectorComponent*> EnabledRoomConnectors; // 0x460(0x10)

	void OnActorExitRoom(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function OPP.RBRoom.OnActorExitRoom // (Final|Native|Protected) // @ game+0x1df6094
	void OnActorEnterRoom(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function OPP.RBRoom.OnActorEnterRoom // (Final|Native|Protected) // @ game+0x1df5f34
	bool IsSlaveRoom(); // Function OPP.RBRoom.IsSlaveRoom // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5f10
	struct ARBRoomGroup* GetLinkedMissionRoomGroup(); // Function OPP.RBRoom.GetLinkedMissionRoomGroup // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5ebc
	void GetAllOverlappingActors(struct TSet<struct AActor*>& OutActors); // Function OPP.RBRoom.GetAllOverlappingActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5dac
	void Editor_SetAsRoomLinkMaster(); // Function OPP.RBRoom.Editor_SetAsRoomLinkMaster // (Final|Native|Public) // @ game+0x1521dbc
	void Editor_SelectCurrentRoomGroups(); // Function OPP.RBRoom.Editor_SelectCurrentRoomGroups // (Final|Native|Public) // @ game+0x1521dbc
	void Editor_SelectAllLinkedRooms(); // Function OPP.RBRoom.Editor_SelectAllLinkedRooms // (Final|Native|Public) // @ game+0x1521dbc
	void Editor_SelectAllConnectors(); // Function OPP.RBRoom.Editor_SelectAllConnectors // (Final|Native|Public) // @ game+0x1521dbc
	void Editor_PreviewPrizeAvailable(); // Function OPP.RBRoom.Editor_PreviewPrizeAvailable // (Final|Native|Public) // @ game+0x1521dbc
	void Editor_PreviewDeactivated(); // Function OPP.RBRoom.Editor_PreviewDeactivated // (Final|Native|Public) // @ game+0x1521dbc
	void Editor_PreviewCompleted(); // Function OPP.RBRoom.Editor_PreviewCompleted // (Final|Native|Public) // @ game+0x1521dbc
	void Editor_PreviewActivated(); // Function OPP.RBRoom.Editor_PreviewActivated // (Final|Native|Public) // @ game+0x1521dbc
	void Editor_LinkAllSelectedRooms(); // Function OPP.RBRoom.Editor_LinkAllSelectedRooms // (Final|Native|Public) // @ game+0x1521dbc
	void Editor_ClearRoomLink(); // Function OPP.RBRoom.Editor_ClearRoomLink // (Final|Native|Public) // @ game+0x1521dbc
	void Editor_ClearFromRoomGroups(); // Function OPP.RBRoom.Editor_ClearFromRoomGroups // (Final|Native|Public) // @ game+0x1521dbc
	void BP_GetPossibleObjectivesInside(struct TArray<struct AActor*>& outObjectiveActors); // Function OPP.RBRoom.BP_GetPossibleObjectivesInside // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1df5a24
	void BP_GetActiveObjectivesInside(struct TArray<struct AActor*>& outObjectiveActors); // Function OPP.RBRoom.BP_GetActiveObjectivesInside // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1df58c4
};

// Class OPP.RBRoomConnectorComponent
// Size: 0x250 (Inherited: 0x220)
struct URBRoomConnectorComponent : USceneComponent {
	bool bConnectorEnabled; // 0x220(0x01)
	enum class ERoomConnectionType ConnectorType; // 0x221(0x01)
	bool bShowInEditor; // 0x222(0x01)
	char pad_223[0x1]; // 0x223(0x01)
	float ConnectionDepth; // 0x224(0x04)
	bool bAllowNoConnection; // 0x228(0x01)
	char pad_229[0x7]; // 0x229(0x07)
	struct ARBRoom* LinkedRoomFront; // 0x230(0x08)
	struct ARBRoom* LinkedRoomBack; // 0x238(0x08)
	enum class ERoomConnectionState ConnectionState; // 0x240(0x01)
	char pad_241[0x7]; // 0x241(0x07)
	bool bIsMissionRoomGroupConnector; // 0x248(0x01)
	char pad_249[0x7]; // 0x249(0x07)

	void SetConnectionState(enum class ERoomConnectionState newState); // Function OPP.RBRoomConnectorComponent.SetConnectionState // (Final|Native|Public|BlueprintCallable) // @ game+0x1df66dc
	struct ARBRoom* GetRoomInFront(); // Function OPP.RBRoomConnectorComponent.GetRoomInFront // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5ef8
	struct ARBRoom* GetRoomInBack(); // Function OPP.RBRoomConnectorComponent.GetRoomInBack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5ee0
};

// Class OPP.RBRoomGroup
// Size: 0x2ed8 (Inherited: 0x248)
struct ARBRoomGroup : AActor {
	char pad_248[0x10]; // 0x248(0x10)
	struct FRBTrialSectionConfigData SectionData; // 0x258(0x2ac8)
	struct URBTrialSectionConfig* TrialSectionConfig; // 0x2d20(0x08)
	bool bUseRandomManagerForRollingGateRandomization; // 0x2d28(0x01)
	char pad_2D29[0x7]; // 0x2d29(0x07)
	struct TArray<enum class EObstacleVariatorType> AllowedObstacleVariatorTypes; // 0x2d30(0x10)
	struct TArray<enum class EObstacleVariatorType> ExcludedObstacleVariatorTypes; // 0x2d40(0x10)
	struct TArray<struct FSectionAIConfigOverride> SectionAIConfigOverrides; // 0x2d50(0x10)
	bool bStartsClosedOff; // 0x2d60(0x01)
	bool bIsMissionSection; // 0x2d61(0x01)
	char pad_2D62[0x6]; // 0x2d62(0x06)
	struct TArray<struct FSectionItemSpawningOverride> ItemSpawningOverrides; // 0x2d68(0x10)
	struct TArray<struct TSoftObjectPtr<ARBRoom>> Rooms; // 0x2d78(0x10)
	struct TArray<struct TSoftObjectPtr<ARBRoom>> AvailableRewardRooms; // 0x2d88(0x10)
	struct TArray<struct TSoftObjectPtr<AActor>> ForcedBlockedConnectionActors; // 0x2d98(0x10)
	struct USceneComponent* RoomGroupRootComponent; // 0x2da8(0x08)
	bool bIsMissionRoomGroup; // 0x2db0(0x01)
	bool bIsClosedOff; // 0x2db1(0x01)
	bool bBuiltCaches; // 0x2db2(0x01)
	char pad_2DB3[0x5]; // 0x2db3(0x05)
	struct FObstacleRandomizationRuntimeData ObstacleRandomizationRuntimeData; // 0x2db8(0xc0)
	struct TArray<struct FRoomGroupConnectionInfo> ConnectionInfos; // 0x2e78(0x10)
	struct TArray<struct ARBMonsterCloset*> SectionMonsterClosets; // 0x2e88(0x10)
	struct TArray<struct ARBRoom*> SectionRooms; // 0x2e98(0x10)
	struct TArray<struct ARBContainer*> SectionContainers; // 0x2ea8(0x10)
	struct TArray<struct URBRoomConnectorComponent*> RoomConnectorsToOutsideMissionRooms; // 0x2eb8(0x10)
	struct TArray<struct URBRoomConnectorComponent*> RoomConnectorsInsideRoomGroup; // 0x2ec8(0x10)

	void OnRep_IsMissionRoomGroup(); // Function OPP.RBRoomGroup.OnRep_IsMissionRoomGroup // (Final|Native|Public) // @ game+0x1df6490
	void Editor_UnlinkAllSelectedRooms(); // Function OPP.RBRoomGroup.Editor_UnlinkAllSelectedRooms // (Final|Native|Public) // @ game+0x1521dbc
	void Editor_SelectedAllLinkedRooms(); // Function OPP.RBRoomGroup.Editor_SelectedAllLinkedRooms // (Final|Native|Public) // @ game+0x1521dbc
	void Editor_LinkAllSelectedRooms(); // Function OPP.RBRoomGroup.Editor_LinkAllSelectedRooms // (Final|Native|Public) // @ game+0x1521dbc
	void Editor_ClearInvalidRooms(); // Function OPP.RBRoomGroup.Editor_ClearInvalidRooms // (Final|Native|Public) // @ game+0x1521dbc
	void BP_SetSectionClosedOff(bool bClosedOff, bool bSnapToState); // Function OPP.RBRoomGroup.BP_SetSectionClosedOff // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1df5c54
	struct TArray<struct AVolume*> BP_GetVolumeList(); // Function OPP.RBRoomGroup.BP_GetVolumeList // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5b84
	void BP_GetPossibleObjectivesInside(struct TArray<struct AActor*>& outObjectiveActors); // Function OPP.RBRoomGroup.BP_GetPossibleObjectivesInside // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1df5abc
	void BP_GetActiveObjectivesInside(struct TArray<struct AActor*>& outObjectiveActors); // Function OPP.RBRoomGroup.BP_GetActiveObjectivesInside // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1df595c
};

// Class OPP.RBRubbishScatterer
// Size: 0x270 (Inherited: 0x248)
struct ARBRubbishScatterer : AActor {
	struct FFootstepData FootstepData; // 0x248(0x28)
};

// Class OPP.RBSAS
// Size: 0x2f0 (Inherited: 0x248)
struct ARBSAS : AActor {
	struct ARBSASTransitionZone* SASEntranceTransitionZone; // 0x248(0x08)
	struct ARBSASTransitionZone* SASExitTransitionZone; // 0x250(0x08)
	struct TArray<struct AActor*> SASChairActors; // 0x258(0x10)
	struct ARBPlayerTriggerVolume* SASTriggerVolume; // 0x268(0x08)
	bool bNeedToLeaveSASBeforeStarting; // 0x270(0x01)
	char pad_271[0x7]; // 0x271(0x07)
	struct TArray<struct URBSASChairPanelComponent*> SASChairPanels; // 0x278(0x10)
	enum class ESASState CurrentState; // 0x288(0x01)
	char pad_289[0x7]; // 0x289(0x07)
	struct TArray<struct ARBSASTransitionZone*> ConnectedEntranceTransitionZones; // 0x290(0x10)
	struct TArray<struct ARBSASTransitionZone*> ConnectedExitTransitionZones; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnSASStateChanged; // 0x2b0(0x10)
	struct FMulticastInlineDelegate OnCleanSAS; // 0x2c0(0x10)
	struct TArray<struct ARBPlayer*> PlayersInSAS; // 0x2d0(0x10)
	char pad_2E0[0x10]; // 0x2e0(0x10)

	void OnStageReady(struct FRBStageID& StageID, struct FRBMissionID& MissionID); // Function OPP.RBSAS.OnStageReady // (Final|Native|Protected|HasOutParms) // @ game+0x1df65dc
	void OnStageEnded(struct FRBStageID& StageID, struct FRBMissionID& MissionID, bool isRestarting); // Function OPP.RBSAS.OnStageEnded // (Final|Native|Protected|HasOutParms) // @ game+0x1df64b8
	void OnRep_CurrentState(); // Function OPP.RBSAS.OnRep_CurrentState // (Final|Native|Protected) // @ game+0x1cfe9e0
	void OnPlayerExitedEvent(struct ARBPlayer* Player); // Function OPP.RBSAS.OnPlayerExitedEvent // (Final|Native|Protected) // @ game+0x1df63d8
	void OnPlayerEnteredEvent(struct ARBPlayer* Player); // Function OPP.RBSAS.OnPlayerEnteredEvent // (Final|Native|Protected) // @ game+0x1df6358
	void OnPawnRespawned(struct ARBPawn* Player); // Function OPP.RBSAS.OnPawnRespawned // (Final|Native|Protected) // @ game+0x1df6274
	void OnGamePhaseUpdated(enum class EGamePhase gamePhase); // Function OPP.RBSAS.OnGamePhaseUpdated // (Final|Native|Protected) // @ game+0x1df616c
	void Event_OnCleanSAS(); // Function OPP.RBSAS.Event_OnCleanSAS // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnStateChanged(enum class ESASState State); // Function OPP.RBSAS.BP_OnStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_Cheat_ForceSASState(enum class ESASState State); // Function OPP.RBSAS.BP_Cheat_ForceSASState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d32d30
};

// Class OPP.RBSASChairInteractionRequirement
// Size: 0x90 (Inherited: 0x88)
struct URBSASChairInteractionRequirement : URBInteractionRequirement {
	struct URBSASChairPanelComponent* ParentPanel; // 0x88(0x08)
};

// Class OPP.RBSASChairPanelComponent
// Size: 0x930 (Inherited: 0x7a0)
struct URBSASChairPanelComponent : URBInteractiblePanelComponent {
	struct FText CanExitChairText; // 0x7a0(0x18)
	struct FText NeedEndStageFailedInteractionText; // 0x7b8(0x18)
	struct FText EndOfStageInteractionText; // 0x7d0(0x18)
	struct FText BeginStageInteractionText; // 0x7e8(0x18)
	float MaxInteractionDistanceOverride; // 0x800(0x04)
	char pad_804[0x4]; // 0x804(0x04)
	struct ARBNarrativeScreen* LinkedNarrativeScreen; // 0x808(0x08)
	struct USceneComponent* ForceSitTeleportRef; // 0x810(0x08)
	float ChairTurnSafeTime; // 0x818(0x04)
	char pad_81C[0x4]; // 0x81c(0x04)
	struct FScheduledBool CanSitInChair; // 0x820(0x70)
	struct FScheduledBool CanLeaveChair; // 0x890(0x70)
	struct ARBSAS* ParentSAS; // 0x900(0x08)
	bool bPlayerHasPlayedEnterAnimation; // 0x908(0x01)
	char pad_909[0x7]; // 0x909(0x07)
	struct FMulticastInlineDelegate OnShouldFaceTVChanged; // 0x910(0x10)
	struct ARBPlayer* ReservedFor_Server; // 0x920(0x08)
	bool bShouldFaceTV_Server; // 0x928(0x01)
	char pad_929[0x7]; // 0x929(0x07)

	bool ShouldFaceTV(); // Function OPP.RBSASChairPanelComponent.ShouldFaceTV // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df675c
	void OnRep_ShouldFaceTV(); // Function OPP.RBSASChairPanelComponent.OnRep_ShouldFaceTV // (Final|Native|Private) // @ game+0x1df64a4
	void OnRep_CanSitInChair(); // Function OPP.RBSASChairPanelComponent.OnRep_CanSitInChair // (Final|Native|Private) // @ game+0x1df6474
	void OnRep_CanLeaveChair(); // Function OPP.RBSASChairPanelComponent.OnRep_CanLeaveChair // (Final|Native|Private) // @ game+0x1df6458
	void OnGamePhaseUpdated(enum class EGamePhase gamePhase); // Function OPP.RBSASChairPanelComponent.OnGamePhaseUpdated // (Final|Native|Private) // @ game+0x1df61f8
	void OnForceExitCallback(); // Function OPP.RBSASChairPanelComponent.OnForceExitCallback // (Final|Native|Private) // @ game+0x1df6158
	void OnCanSitInChairChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBSASChairPanelComponent.OnCanSitInChairChangedCallback // (Final|Native|Private) // @ game+0x1d32d30
	void OnCanLeaveChairChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBSASChairPanelComponent.OnCanLeaveChairChangedCallback // (Final|Native|Private) // @ game+0x1d32d30
	bool GetCanSitInChair(); // Function OPP.RBSASChairPanelComponent.GetCanSitInChair // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5ea4
	bool GetCanLeaveChair(); // Function OPP.RBSASChairPanelComponent.GetCanLeaveChair // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5e8c
	void Debug_ForceAllowedToSit(float delay); // Function OPP.RBSASChairPanelComponent.Debug_ForceAllowedToSit // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1d32350
	void BP_StartExitSequence(); // Function OPP.RBSASChairPanelComponent.BP_StartExitSequence // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1df5d98
	void BP_SetShouldFaceTV(bool bValue); // Function OPP.RBSASChairPanelComponent.BP_SetShouldFaceTV // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1df5d18
	void BP_SetIsInDrugSequence(bool bValue); // Function OPP.RBSASChairPanelComponent.BP_SetIsInDrugSequence // (Final|Native|Public|BlueprintCallable) // @ game+0x1df5bd4
};

// Class OPP.RBSASTransitionZone
// Size: 0x330 (Inherited: 0x248)
struct ARBSASTransitionZone : AActor {
	enum class ESASTransitionDirection TransitionDirection; // 0x248(0x01)
	bool bCanBeEntrance; // 0x249(0x01)
	bool bCanBeExit; // 0x24a(0x01)
	char pad_24B[0x5]; // 0x24b(0x05)
	struct TArray<struct FMissionTransitionDirection> MissionSpecificOverrides; // 0x250(0x10)
	struct TArray<struct TSoftObjectPtr<AActor>> RandomActorToDisableForLots; // 0x260(0x10)
	bool bIsSASDoor; // 0x270(0x01)
	bool bNeedTransitionFeedback; // 0x271(0x01)
	bool bUsePlayerStartPointsIfNoConnection; // 0x272(0x01)
	bool bCanCountAsPlayerRespawner; // 0x273(0x01)
	char pad_274[0x4]; // 0x274(0x04)
	struct ARBSASTransitionZone* CustomConnection; // 0x278(0x08)
	bool bEnabledBasicNPCSpawningExclusionZone; // 0x280(0x01)
	char pad_281[0x3]; // 0x281(0x03)
	float NPCSpawningExclusionDistance; // 0x284(0x04)
	float NPCSpawningExclusionHeight; // 0x288(0x04)
	char pad_28C[0x4]; // 0x28c(0x04)
	struct AVolume* NPCSpawningExclusionVolume; // 0x290(0x08)
	struct TArray<struct TSoftObjectPtr<AActor>> SpecificNPCSpawningExcludedActors; // 0x298(0x10)
	bool bIsEnabled; // 0x2a8(0x01)
	enum class ESASTransitionDirection CurrentTransitionDirection; // 0x2a9(0x01)
	char pad_2AA[0x6]; // 0x2aa(0x06)
	struct TArray<struct ARBSASTransitionZone*> ConnectedTransitionZones; // 0x2b0(0x10)
	struct TArray<int32_t> ExclusivePlayerSlots; // 0x2c0(0x10)
	struct ARBSAS* ParentSAS; // 0x2d0(0x08)
	bool bIsActive; // 0x2d8(0x01)
	char pad_2D9[0x57]; // 0x2d9(0x57)

	void OnRep_IsActive(); // Function OPP.RBSASTransitionZone.OnRep_IsActive // (Final|Native|Protected) // @ game+0x1dfb900
	void OnRep_CurrentTransitionDirection(); // Function OPP.RBSASTransitionZone.OnRep_CurrentTransitionDirection // (Final|Native|Protected) // @ game+0x1dfb8d8
	bool IsSASDoor(); // Function OPP.RBSASTransitionZone.IsSASDoor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dab30c
	void Event_OnCurrentDirectionChanged(); // Function OPP.RBSASTransitionZone.Event_OnCurrentDirectionChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_SetEnabled(bool bEnabled); // Function OPP.RBSASTransitionZone.BP_SetEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1df9b14
	void BP_SetActivated(bool bActivated); // Function OPP.RBSASTransitionZone.BP_SetActivated // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1df9a90
	void BP_OnDeactivate(); // Function OPP.RBSASTransitionZone.BP_OnDeactivate // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnActivate(); // Function OPP.RBSASTransitionZone.BP_OnActivate // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_ExecuteTranstion(struct ARBPlayer* Player); // Function OPP.RBSASTransitionZone.BP_ExecuteTranstion // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1df9834
};

// Class OPP.RBSASPlayerStartTransitionZone
// Size: 0x340 (Inherited: 0x330)
struct ARBSASPlayerStartTransitionZone : ARBSASTransitionZone {
	struct TArray<struct AActor*> PlayerStartPoints; // 0x330(0x10)

	bool BP_ExecuteTransitionOnPlayersInside(struct AVolume* Volume); // Function OPP.RBSASPlayerStartTransitionZone.BP_ExecuteTransitionOnPlayersInside // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1df97a4
};

// Class OPP.RBSASTube
// Size: 0x4d0 (Inherited: 0x420)
struct ARBSASTube : ARBTriggerable {
	struct UBoxComponent* BoxComponent; // 0x420(0x08)
	struct UCapsuleComponent* CapsuleComponent; // 0x428(0x08)
	struct URBPositionComponent* SpawnPositionComponent; // 0x430(0x08)
	struct USceneComponent* BackwardsTransitionRef; // 0x438(0x08)
	bool bResetStateWithStageReset; // 0x440(0x01)
	char pad_441[0x3]; // 0x441(0x03)
	float TimeForTransitionProcess; // 0x444(0x04)
	bool IsInvulnerableDuringTransition; // 0x448(0x01)
	bool bAutoOpenWhenPlayerInside; // 0x449(0x01)
	bool bAutoCloseWhenPlayerInside; // 0x44a(0x01)
	bool bIsOpened; // 0x44b(0x01)
	char pad_44C[0x4]; // 0x44c(0x04)
	struct ARBSASTubesDoor* DoorOwner; // 0x450(0x08)
	bool bTubeFacingForward; // 0x458(0x01)
	char pad_459[0x7]; // 0x459(0x07)
	struct TArray<struct ARBPlayer*> PlayersInside; // 0x460(0x10)
	struct TArray<struct ARBPawn*> BotsInside; // 0x470(0x10)
	enum class AutoDoorState DoorState; // 0x480(0x01)
	char pad_481[0x7]; // 0x481(0x07)
	struct FMulticastInlineDelegate OnPlayersInsideChanged; // 0x488(0x10)
	struct ARBSASTube* TransitionConnectedTube; // 0x498(0x08)
	bool bIsTransitionTarget; // 0x4a0(0x01)
	char pad_4A1[0xf]; // 0x4a1(0x0f)
	struct ARBPlayer* PlayerInTransition; // 0x4b0(0x08)
	struct ARBPlayer* PlayerToAlign; // 0x4b8(0x08)
	char pad_4C0[0x10]; // 0x4c0(0x10)

	void OnRep_TubeFacingForward(); // Function OPP.RBSASTube.OnRep_TubeFacingForward // (Final|Native|Private) // @ game+0x1dfb93c
	void OnRep_PlayersInside(); // Function OPP.RBSASTube.OnRep_PlayersInside // (Final|Native|Private) // @ game+0x1dfb928
	void OnRep_IsOpened(); // Function OPP.RBSASTube.OnRep_IsOpened // (Final|Native|Private) // @ game+0x1dfb914
	void OnRep_DoorState(); // Function OPP.RBSASTube.OnRep_DoorState // (Final|Native|Private) // @ game+0x1dfb8ec
	void OnComponentCapsuleEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function OPP.RBSASTube.OnComponentCapsuleEndOverlap // (Final|Native|Public) // @ game+0x1dfb700
	void OnComponentCapsuleBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBSASTube.OnComponentCapsuleBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0x1dfb4fc
	void OnComponentBoxBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBSASTube.OnComponentBoxBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0x1dfb34c
	enum class AutoDoorState GetDoorState(); // Function OPP.RBSASTube.GetDoorState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df9f1c
	void Event_OnTubeFacingForwardChanged(); // Function OPP.RBSASTube.Event_OnTubeFacingForwardChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnDoorStateChanged(); // Function OPP.RBSASTube.Event_OnDoorStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnPreBeginPlay(); // Function OPP.RBSASTube.BP_OnPreBeginPlay // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnPlayersInsideChanged(); // Function OPP.RBSASTube.BP_OnPlayersInsideChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnOpen(); // Function OPP.RBSASTube.BP_OnOpen // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnDoorAnimationFinished(); // Function OPP.RBSASTube.BP_OnDoorAnimationFinished // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1521dbc
	void BP_OnClose(); // Function OPP.RBSASTube.BP_OnClose // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_ForceAutoDoorState(enum class AutoDoorState inDoorState); // Function OPP.RBSASTube.BP_ForceAutoDoorState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1df9914
};

// Class OPP.RBSASTubesDoor
// Size: 0x360 (Inherited: 0x330)
struct ARBSASTubesDoor : ARBSASTransitionZone {
	struct ARBSASTube* TubeClass; // 0x330(0x08)
	struct TArray<struct USceneComponent*> TubeRefs; // 0x338(0x10)
	bool bStartsTubeFacingForward; // 0x348(0x01)
	bool bAutoFlipTubes; // 0x349(0x01)
	char pad_34A[0x2]; // 0x34a(0x02)
	float PlayerTeleportDelayTime; // 0x34c(0x04)
	struct TArray<struct ARBSASTube*> Tubes; // 0x350(0x10)

	void OnRep_Tubes(); // Function OPP.RBSASTubesDoor.OnRep_Tubes // (Final|Native|Protected) // @ game+0x1dfb950
	void Event_OnTubesChanged(); // Function OPP.RBSASTubesDoor.Event_OnTubesChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_ForceAlwaysOpen(); // Function OPP.RBSASTubesDoor.BP_ForceAlwaysOpen // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1df98bc
};

// Class OPP.RBSawPanelComponent
// Size: 0xb20 (Inherited: 0x7a0)
struct URBSawPanelComponent : URBInteractiblePanelComponent {
	float Side; // 0x7a0(0x04)
	float ConsideredMovingMinimumSpeed; // 0x7a4(0x04)
	struct FConfigurableFloat SawDistanceToAchieve; // 0x7a8(0xc8)
	struct FConfigurableFloat SawSpeed; // 0x870(0xc8)
	struct FConfigurableFloat OnePlayerMultiplier; // 0x938(0xc8)
	struct FConfigurableFloat TwoPlayerMultiplier; // 0xa00(0xc8)
	float SawMaxOffset; // 0xac8(0x04)
	float SawAccumulatedDistance; // 0xacc(0x04)
	float SawCurrentOffset_Server; // 0xad0(0x04)
	float SawCurrentOffset_Local; // 0xad4(0x04)
	float SawPushDelta; // 0xad8(0x04)
	float CurrentSawMoveSpeed; // 0xadc(0x04)
	struct FNetworkFloat CurrentPawnPushingIntentRatio; // 0xae0(0x10)
	struct URBSawPanelComponent* MasterComponent; // 0xaf0(0x08)
	struct URBSawPanelComponent* SlaveComponent; // 0xaf8(0x08)
	struct FMulticastInlineDelegate Event_OnSawMovingStarted; // 0xb00(0x10)
	struct FMulticastInlineDelegate Event_OnSawMovingStopped; // 0xb10(0x10)

	void OnSlavePanelPawnInteractingChanged(struct URBInteractiblePanelComponent* panel, struct ARBPawn* Pawn); // Function OPP.RBSawPanelComponent.OnSlavePanelPawnInteractingChanged // (Final|Native|Public) // @ game+0x1dfb964
	bool IsMaster(); // Function OPP.RBSawPanelComponent.IsMaster // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dfb330
	bool BP_IsSawConsideredMoving(); // Function OPP.RBSawPanelComponent.BP_IsSawConsideredMoving // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df9a70
	float BP_GetSawPushDelta(); // Function OPP.RBSawPanelComponent.BP_GetSawPushDelta // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df9a50
	float BP_GetSawOffsetRatioForSide(); // Function OPP.RBSawPanelComponent.BP_GetSawOffsetRatioForSide // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df9a14
	float BP_GetSawMovingSpeed(); // Function OPP.RBSawPanelComponent.BP_GetSawMovingSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df99f4
	float BP_GetSawCurrentOffset(); // Function OPP.RBSawPanelComponent.BP_GetSawCurrentOffset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df99d4
	float BP_GetSawAccumulatedDistance(); // Function OPP.RBSawPanelComponent.BP_GetSawAccumulatedDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df99b4
	float BP_GetPawnPushingIntentRatio(); // Function OPP.RBSawPanelComponent.BP_GetPawnPushingIntentRatio // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df999c
};

// Class OPP.RBScheduledBotSpawnCommand
// Size: 0x28 (Inherited: 0x28)
struct URBScheduledBotSpawnCommand : UObject {
};

// Class OPP.RBScheduledBotSpawnAtMonsterClosetCommand
// Size: 0x70 (Inherited: 0x28)
struct URBScheduledBotSpawnAtMonsterClosetCommand : URBScheduledBotSpawnCommand {
	struct FScheduledBotSpawnAtMonserClosetData SpawningData; // 0x28(0x48)
};

// Class OPP.RBScheduledSpawnerSpawnAICommand
// Size: 0x1228 (Inherited: 0x28)
struct URBScheduledSpawnerSpawnAICommand : URBScheduledBotSpawnCommand {
	struct FScheduledSpawnerSpawnAIData SpawningData; // 0x28(0x11f0)
	char pad_1218[0x10]; // 0x1218(0x10)
};

// Class OPP.RBScheduledBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct URBScheduledBlueprintLibrary : UBlueprintFunctionLibrary {

	void SetValue_ScheduledUObject(struct FScheduledUObject& ScheduledProperty, struct UObject* Value); // Function OPP.RBScheduledBlueprintLibrary.SetValue_ScheduledUObject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfc92c
	void SetValue_ScheduledTransform(struct FScheduledTransform& ScheduledProperty, struct FTransform Value); // Function OPP.RBScheduledBlueprintLibrary.SetValue_ScheduledTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1dfc7d0
	void SetValue_ScheduledInt(struct FScheduledInt& ScheduledProperty, int32_t Value); // Function OPP.RBScheduledBlueprintLibrary.SetValue_ScheduledInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfc6d8
	void SetValue_ScheduledFloat(struct FScheduledFloat& ScheduledProperty, float Value); // Function OPP.RBScheduledBlueprintLibrary.SetValue_ScheduledFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfc5dc
	void SetValue_ScheduledBool(struct FScheduledBool& ScheduledProperty, bool Value); // Function OPP.RBScheduledBlueprintLibrary.SetValue_ScheduledBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfc4e4
	void SetInitialValue_ScheduledUObject(struct FScheduledUObject& ScheduledProperty, struct UObject* Value); // Function OPP.RBScheduledBlueprintLibrary.SetInitialValue_ScheduledUObject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfc3f0
	void SetInitialValue_ScheduledTransform(struct FScheduledTransform& ScheduledProperty, struct FTransform Value); // Function OPP.RBScheduledBlueprintLibrary.SetInitialValue_ScheduledTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1dfc298
	void SetInitialValue_ScheduledInt(struct FScheduledInt& ScheduledProperty, int32_t Value); // Function OPP.RBScheduledBlueprintLibrary.SetInitialValue_ScheduledInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfc1a8
	void SetInitialValue_ScheduledFloat(struct FScheduledFloat& ScheduledProperty, float Value); // Function OPP.RBScheduledBlueprintLibrary.SetInitialValue_ScheduledFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfc0ac
	void SetInitialValue_ScheduledBool(struct FScheduledBool& ScheduledProperty, bool Value); // Function OPP.RBScheduledBlueprintLibrary.SetInitialValue_ScheduledBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfbfb8
	void ScheduleValue_ScheduledUObject(struct FScheduledUObject& ScheduledProperty, struct UObject* Value); // Function OPP.RBScheduledBlueprintLibrary.ScheduleValue_ScheduledUObject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfbeb8
	void ScheduleValue_ScheduledTransform(struct FScheduledTransform& ScheduledProperty, struct FTransform Value); // Function OPP.RBScheduledBlueprintLibrary.ScheduleValue_ScheduledTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1dfbd54
	void ScheduleValue_ScheduledInt(struct FScheduledInt& ScheduledProperty, int32_t Value); // Function OPP.RBScheduledBlueprintLibrary.ScheduleValue_ScheduledInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfbc54
	void ScheduleValue_ScheduledFloat(struct FScheduledFloat& ScheduledProperty, float Value); // Function OPP.RBScheduledBlueprintLibrary.ScheduleValue_ScheduledFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfbb34
	void ScheduleValue_ScheduledBool(struct FScheduledBool& ScheduledProperty, bool Value); // Function OPP.RBScheduledBlueprintLibrary.ScheduleValue_ScheduledBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfba34
	void Initialize_ScheduledUObject_Component(struct FScheduledUObject& ScheduledProperty, struct UActorComponent* Owner, struct FDelegate InDelegate, struct FName PropertyName); // Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledUObject_Component // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfb190
	void Initialize_ScheduledUObject(struct FScheduledUObject& ScheduledProperty, struct AActor* Owner, struct FDelegate InDelegate, struct FName PropertyName); // Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledUObject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfaffc
	void Initialize_ScheduledTransform_Component(struct FScheduledTransform& ScheduledProperty, struct UActorComponent* Owner, struct FDelegate InDelegate, struct FName PropertyName); // Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledTransform_Component // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfae24
	void Initialize_ScheduledTransform(struct FScheduledTransform& ScheduledProperty, struct AActor* Owner, struct FDelegate InDelegate, struct FName PropertyName); // Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledTransform // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfac58
	void Initialize_ScheduledInt_Component(struct FScheduledInt& ScheduledProperty, struct UActorComponent* Owner, struct FDelegate InDelegate, struct FName PropertyName); // Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledInt_Component // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfaab8
	void Initialize_ScheduledInt(struct FScheduledInt& ScheduledProperty, struct AActor* Owner, struct FDelegate InDelegate, struct FName PropertyName); // Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfa924
	void Initialize_ScheduledFloat_Component(struct FScheduledFloat& ScheduledProperty, struct UActorComponent* Owner, struct FDelegate InDelegate, struct FName PropertyName); // Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledFloat_Component // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfa784
	void Initialize_ScheduledFloat(struct FScheduledFloat& ScheduledProperty, struct AActor* Owner, struct FDelegate InDelegate, struct FName PropertyName); // Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfa5f0
	void Initialize_ScheduledBool_Component(struct FScheduledBool& ScheduledProperty, struct UActorComponent* Owner, struct FDelegate InDelegate, struct FName PropertyName); // Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledBool_Component // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfa450
	void Initialize_ScheduledBool(struct FScheduledBool& ScheduledProperty, struct AActor* Owner, struct FDelegate InDelegate, struct FName PropertyName); // Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfa2bc
	struct UObject* GetInitialValue_ScheduledUObject(struct FScheduledUObject& ScheduledProperty); // Function OPP.RBScheduledBlueprintLibrary.GetInitialValue_ScheduledUObject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1dfa210
	struct FTransform GetInitialValue_ScheduledTransform(struct FScheduledTransform& ScheduledProperty); // Function OPP.RBScheduledBlueprintLibrary.GetInitialValue_ScheduledTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1dfa12c
	int32_t GetInitialValue_ScheduledInt(struct FScheduledInt& ScheduledProperty); // Function OPP.RBScheduledBlueprintLibrary.GetInitialValue_ScheduledInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1dfa084
	float GetInitialValue_ScheduledFloat(struct FScheduledFloat& ScheduledProperty); // Function OPP.RBScheduledBlueprintLibrary.GetInitialValue_ScheduledFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1df9fdc
	bool GetInitialValue_ScheduledBool(struct FScheduledBool& ScheduledProperty); // Function OPP.RBScheduledBlueprintLibrary.GetInitialValue_ScheduledBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1df9f34
	struct UObject* GetCurrentValue_ScheduledUObject(struct FScheduledUObject& ScheduledProperty); // Function OPP.RBScheduledBlueprintLibrary.GetCurrentValue_ScheduledUObject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1df9e70
	struct FTransform GetCurrentValue_ScheduledTransform(struct FScheduledTransform& ScheduledProperty); // Function OPP.RBScheduledBlueprintLibrary.GetCurrentValue_ScheduledTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1df9d8c
	int32_t GetCurrentValue_ScheduledInt(struct FScheduledInt& ScheduledProperty); // Function OPP.RBScheduledBlueprintLibrary.GetCurrentValue_ScheduledInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1df9ce4
	float GetCurrentValue_ScheduledFloat(struct FScheduledFloat& ScheduledProperty); // Function OPP.RBScheduledBlueprintLibrary.GetCurrentValue_ScheduledFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1df9c3c
	bool GetCurrentValue_ScheduledBool(struct FScheduledBool& ScheduledProperty); // Function OPP.RBScheduledBlueprintLibrary.GetCurrentValue_ScheduledBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1df9b94
};

// Class OPP.RBScoringConfig
// Size: 0x310 (Inherited: 0x28)
struct URBScoringConfig : UObject {
	struct FConfigurableInt PlayerStartingScore; // 0x28(0xc8)
	struct FConfigurableInt PlayerMaxScore; // 0xf0(0xc8)
	int32_t TimeElapsedScoreLossFrequencySeconds; // 0x1b8(0x04)
	char pad_1BC[0x4]; // 0x1bc(0x04)
	struct FConfigurableInt DefaultTimeToCompleteSeconds; // 0x1c0(0xc8)
	struct TArray<struct FScoringStageConfig> StageConfigs; // 0x288(0x10)
	struct UDataTable* RulesDataTable; // 0x298(0x08)
	struct TArray<struct FScoringTextValueMapping> PercentageBasedScoreTextValuesPositive; // 0x2a0(0x10)
	struct TArray<struct FScoringTextValueMapping> PercentageBasedScoreTextValuesNegative; // 0x2b0(0x10)
	char pad_2C0[0x50]; // 0x2c0(0x50)

	struct FText GetTextValue(struct FRecordedScoringEvent& scoringEvent); // Function OPP.RBScoringConfig.GetTextValue // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dfeea0
	struct FRBScoringRuleRow GetScoringRule(struct FName& ruleId); // Function OPP.RBScoringConfig.GetScoringRule // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dfee00
	struct TArray<struct FRecordedScoringEvent> FilterScoringEvents(struct TArray<struct FRecordedScoringEvent>& scoringEvents, int32_t maxEvents); // Function OPP.RBScoringConfig.FilterScoringEvents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dfecfc
};

// Class OPP.RBScriptedAnimStation
// Size: 0x2b8 (Inherited: 0x248)
struct ARBScriptedAnimStation : AActor {
	struct TMap<struct USkeletalMeshComponent*, struct UObject*> Slots; // 0x248(0x50)
	bool PlayOnGameStart; // 0x298(0x01)
	bool bOnlyPlayWhenBotAttached; // 0x299(0x01)
	bool bStartsHidden; // 0x29a(0x01)
	bool bPrimeAssetStation; // 0x29b(0x01)
	bool bAllowRootMotion; // 0x29c(0x01)
	bool bShouldBePlaying; // 0x29d(0x01)
	bool bStationHidden; // 0x29e(0x01)
	bool bScriptedSequencePlaying; // 0x29f(0x01)
	bool bForceClientMeshUpdate; // 0x2a0(0x01)
	char pad_2A1[0x7]; // 0x2a1(0x07)
	struct TArray<struct USkeletalMeshComponent*> AllSkeletalMeshes; // 0x2a8(0x10)

	void SetForceClientMeshUpdate(bool bValue); // Function OPP.RBScriptedAnimStation.SetForceClientMeshUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x1dfef80
	void OnRep_StationHidden(); // Function OPP.RBScriptedAnimStation.OnRep_StationHidden // (Final|Native|Public) // @ game+0x1dfef6c
	void OnRep_ShouldBePlaying(); // Function OPP.RBScriptedAnimStation.OnRep_ShouldBePlaying // (Final|Native|Public) // @ game+0x1dfef58
	void Event_StoppedScriptedAnim(); // Function OPP.RBScriptedAnimStation.Event_StoppedScriptedAnim // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_StartedScriptedAnim(); // Function OPP.RBScriptedAnimStation.Event_StartedScriptedAnim // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	bool BP_WillSkeletalMeshTick(struct USkeletalMeshComponent* Mesh); // Function OPP.RBScriptedAnimStation.BP_WillSkeletalMeshTick // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dfec4c
	void BP_StopScriptedSequence(); // Function OPP.RBScriptedAnimStation.BP_StopScriptedSequence // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dfec38
	void BP_StartScriptedSequence(); // Function OPP.RBScriptedAnimStation.BP_StartScriptedSequence // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dfec24
	void BP_SetStationHidden(bool bValue); // Function OPP.RBScriptedAnimStation.BP_SetStationHidden // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1dfeba4
};

// Class OPP.RBSettings
// Size: 0x28 (Inherited: 0x28)
struct URBSettings : UObject {
};

// Class OPP.RBSettings_Anim
// Size: 0x2b0 (Inherited: 0x28)
struct URBSettings_Anim : UObject {
	int32_t MinimumNumberOfSecondsBetweenFirstPersonIdleBreakers; // 0x28(0x04)
	int32_t MaximumNumberOfSecondsBetweenFirstPersonIdleBreakers; // 0x2c(0x04)
	struct FName SingleEvalBlendSpaceName; // 0x30(0x08)
	struct FName CameraBoneName; // 0x38(0x08)
	struct FName HeadBoneName; // 0x40(0x08)
	struct FName HipsBoneName; // 0x48(0x08)
	struct FName RootBoneName; // 0x50(0x08)
	struct FName LeftHandBoneName; // 0x58(0x08)
	struct FName RightHandBoneName; // 0x60(0x08)
	struct FName LeftItemBoneName; // 0x68(0x08)
	struct FName RightItemBoneName; // 0x70(0x08)
	struct FName LeftFootBoneName; // 0x78(0x08)
	struct FName RightFootBoneName; // 0x80(0x08)
	struct FName AIVisionBoneName; // 0x88(0x08)
	struct FName HoldObjectSocketName; // 0x90(0x08)
	struct FName IKHandsBoneName; // 0x98(0x08)
	struct FName IKHandsChestBoneName; // 0xa0(0x08)
	struct FName AnchorBoneName; // 0xa8(0x08)
	struct FName ChestBoneName; // 0xb0(0x08)
	struct FName ESOPApparatusBoneName; // 0xb8(0x08)
	struct FName SpineBoneName; // 0xc0(0x08)
	struct FName TurnCurveName; // 0xc8(0x08)
	struct FName AnimatedStartCurveName; // 0xd0(0x08)
	struct FName AnimatedStopCurveName; // 0xd8(0x08)
	float MinimumEyeDistanceToWall; // 0xe0(0x04)
	float JumpOverBaseHeight; // 0xe4(0x04)
	float JumpOverBaseLowHeight; // 0xe8(0x04)
	float JumpOverBigGruntBaseHeight; // 0xec(0x04)
	float JumpOverBigGruntBaseWidth; // 0xf0(0x04)
	float JumpOverClearanceDist; // 0xf4(0x04)
	float JumpOverWalkingExpectedDist; // 0xf8(0x04)
	float JumpOverRunningExpectedDist; // 0xfc(0x04)
	float JumpThroughWindowWalkingExpectedDist; // 0x100(0x04)
	float JumpThroughWindowRunningExpectedDist; // 0x104(0x04)
	float JumpOverMinimumFallHeight; // 0x108(0x04)
	float JumpOverLargeWidth; // 0x10c(0x04)
	float JumpOverWalkMaxHeight; // 0x110(0x04)
	float JumpOverHandMinWidth; // 0x114(0x04)
	float ClimbOverBaseWidth; // 0x118(0x04)
	float ClimbOntoWalkingExpectedDist; // 0x11c(0x04)
	float ClimbOntoRunningExpectedDist; // 0x120(0x04)
	float LedgePullLeaderExpectedDist; // 0x124(0x04)
	float LedgePullFollowerExpectedDist; // 0x128(0x04)
	float LedgePullExpectedHeight; // 0x12c(0x04)
	float LegUpLeaderExpectedDist; // 0x130(0x04)
	float LegUpFollowerExpectedDist; // 0x134(0x04)
	float LedgeCatchLeaderExpectedDist; // 0x138(0x04)
	float LedgeCatchFarHeightLimit; // 0x13c(0x04)
	float ClimbDownTraversalDist; // 0x140(0x04)
	float ClimbDownPathLookAheadTime; // 0x144(0x04)
	float ClimbDownDetectionDist; // 0x148(0x04)
	float ClimbDownMaxHeight; // 0x14c(0x04)
	float PushFromLedgeDetectionDist; // 0x150(0x04)
	float SlideOverBaseHeight; // 0x154(0x04)
	float SlideOverShortDepth; // 0x158(0x04)
	float SlideOverShortSpeed; // 0x15c(0x04)
	float SlideOverLongDepth; // 0x160(0x04)
	float SlideOverLongSpeed; // 0x164(0x04)
	float SlideOverRunDesiredSpeed; // 0x168(0x04)
	float SlideOverWalkDesiredSpeed; // 0x16c(0x04)
	float BigGruntDefaultDistanceScale; // 0x170(0x04)
	float CrouchUnderMetric; // 0x174(0x04)
	float MinimumLookDownWhileHoldingLargeObject; // 0x178(0x04)
	float ClosePouncerPeekDistance; // 0x17c(0x04)
	float MediumPouncerPeekDistance; // 0x180(0x04)
	float FarPouncerPeekDistance; // 0x184(0x04)
	float MaxPouncerPeekDistance; // 0x188(0x04)
	float ItemPickupForwardDistFromCamera; // 0x18c(0x04)
	float KnockdownStairsSlidingStopAnimationDistance2D; // 0x190(0x04)
	float MinNormalAttackPlayRate; // 0x194(0x04)
	float MaxNormalAttackPlayRate; // 0x198(0x04)
	float EnterAttackStanceApproachCoeff1P; // 0x19c(0x04)
	float EnterAttackStanceApproachCoeff3P; // 0x1a0(0x04)
	float LeaveAttackStanceApproachCoeff1P; // 0x1a4(0x04)
	float LeaveAttackStanceApproachCoeff3P; // 0x1a8(0x04)
	float StartChargingApproachCoeff; // 0x1ac(0x04)
	float StopChargingApproachCoeff; // 0x1b0(0x04)
	float SlideDownInterpDuration; // 0x1b4(0x04)
	float RunningThroughPrePlayAnimDuration; // 0x1b8(0x04)
	float ItemDropDuration; // 0x1bc(0x04)
	struct FInvestigationAnalysisSettings InvestigationAnalysis; // 0x1c0(0x28)
	bool bEnablePawnAnimOptimsOnClient; // 0x1e8(0x01)
	bool bEnablePawnAnimOptimsOnStandalone; // 0x1e9(0x01)
	char pad_1EA[0x2]; // 0x1ea(0x02)
	float PawnAnimOptimCloseDistance; // 0x1ec(0x04)
	float PawnAnimOptimMediumDistance; // 0x1f0(0x04)
	float PawnAnimOptimFarDistance; // 0x1f4(0x04)
	int32_t BudgetNumPawnsVeryHigh; // 0x1f8(0x04)
	int32_t BudgetNumPawnsHigh; // 0x1fc(0x04)
	int32_t PawnAnimOptimHighTickRate; // 0x200(0x04)
	int32_t PawnAnimOptimMedTickRate; // 0x204(0x04)
	int32_t PawnAnimOptimLowTickRate; // 0x208(0x04)
	int32_t PawnAnimOptimVeryLowTickRate; // 0x20c(0x04)
	bool bPawnAnimOptimHighInterpolates; // 0x210(0x01)
	bool bPawnAnimOptimMediumInterpolates; // 0x211(0x01)
	bool bPawnAnimOptimLowInterpolates; // 0x212(0x01)
	bool bPawnAnimOptimVeryLowInterpolates; // 0x213(0x01)
	int32_t PawnAnimOptimVeryLowPositionUpdateInterval; // 0x214(0x04)
	float DeadBodyContainerSkeletalMeshTickDistance; // 0x218(0x04)
	float StandingEyeZ; // 0x21c(0x04)
	float CrouchedEyeZ; // 0x220(0x04)
	float ImposterDoorTraversalDistance; // 0x224(0x04)
	float ImposterDoorTraversalSpeed; // 0x228(0x04)
	char pad_22C[0x4]; // 0x22c(0x04)
	struct TArray<struct FString> CameraHeadMismatchInclusionFilter; // 0x230(0x10)
	struct TArray<struct FString> CameraHeadMismatchExclusionFilter; // 0x240(0x10)
	struct TArray<struct FString> NoRootMotionInclusionFilter; // 0x250(0x10)
	struct TArray<struct FString> NoRootMotionExclusionFilter; // 0x260(0x10)
	struct TArray<struct FString> NoSimultaneousRotationTranslationRootMotionInclusionFilter; // 0x270(0x10)
	struct TArray<struct FString> NoSimultaneousRotationTranslationRootMotionExclusionFilter; // 0x280(0x10)
	struct TArray<struct TSoftClassPtr<UObject>> AdditionalAnimInstanceToCheck; // 0x290(0x10)
	struct TArray<struct TSoftClassPtr<UObject>> AdditionalNPCToCheck; // 0x2a0(0x10)
};

// Class OPP.RBSettings_Audio
// Size: 0x920 (Inherited: 0x28)
struct URBSettings_Audio : UObject {
	bool bPlayLocalVoiceGlobal; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	struct FName IntercomGroupName; // 0x2c(0x08)
	struct FName WatchGroupName; // 0x34(0x08)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct TArray<struct FString> GameManagedSwitchGroups; // 0x40(0x10)
	struct FVoiceChatPlayerAudioEventNames VoiceChatPlayerAudioEventNames[0x8]; // 0x50(0x480)
	struct FString LocalStartTalking3DEventName; // 0x4d0(0x10)
	struct FString LocalStopTalking3DEventName; // 0x4e0(0x10)
	struct FString GlobalVoiceChatVolumeRTPCName; // 0x4f0(0x10)
	float AutomaticRadioMinDistance; // 0x500(0x04)
	float AutomaticRadioMaxDistance; // 0x504(0x04)
	float RadioDistanceEffectMinDistance; // 0x508(0x04)
	float RadioDistanceEffectMaxDistance; // 0x50c(0x04)
	float DamageLingeringDuration; // 0x510(0x04)
	struct FName PlayerHealthRTPC; // 0x514(0x08)
	struct FName PlayerNVRTPC; // 0x51c(0x08)
	struct FName PlayerEnvironmentBrightnessRTPC; // 0x524(0x08)
	float PlayerLowDamageVOThreshold; // 0x52c(0x04)
	float PlayerHighDamageVOThreshold; // 0x530(0x04)
	float BreathLongStopMinRunDuration; // 0x534(0x04)
	float BreathStopMaxDelay; // 0x538(0x04)
	float BreathCrawlMinSpeed; // 0x53c(0x04)
	float BreathCrawlStartDelay; // 0x540(0x04)
	float BreathPainMaxHealth; // 0x544(0x04)
	struct FName PlayerBreathTypeRTPC; // 0x548(0x08)
	float BreathRTPCValueForRun; // 0x550(0x04)
	float BreathRTPCValueForExhausted; // 0x554(0x04)
	float BreathRTPCValueForPain; // 0x558(0x04)
	float BreathRTPCValueForCrawl; // 0x55c(0x04)
	struct FName MasterVolumeRTPC; // 0x560(0x08)
	struct FName MusicVolumeRTPC; // 0x568(0x08)
	struct FName SFXVolumeRTPC; // 0x570(0x08)
	struct FName FadeRTPC; // 0x578(0x08)
	struct FName PlayerSpeedRTPC; // 0x580(0x08)
	struct FName PlayerHurtRTPC; // 0x588(0x08)
	struct FName PlayerStaminaRTPC; // 0x590(0x08)
	struct FName PlayerCrouchedRTPC; // 0x598(0x08)
	struct FString PlayerHurtTypeVORTPC; // 0x5a0(0x10)
	struct FString Foley_NPC_FullbodySpeedRTPC; // 0x5b0(0x10)
	struct FString Foley_Player_FullbodySpeedRTPC; // 0x5c0(0x10)
	struct FName PanelSwitchSpeed_RTPC; // 0x5d0(0x08)
	struct FName PanelSwitchCloseToActive_RTPC; // 0x5d8(0x08)
	struct FName DistanceToEntity_RTPC; // 0x5e0(0x08)
	float DistanceToEntity_RTPC_MaxDistance; // 0x5e8(0x04)
	float DistanceToEntity_RTPC_MinDistance; // 0x5ec(0x04)
	float AudioOcclusionFactorForThreatLevel; // 0x5f0(0x04)
	struct FName ThreatLevelRTPC; // 0x5f4(0x08)
	struct FName PlayerHidingRTPC; // 0x5fc(0x08)
	char pad_604[0x4]; // 0x604(0x04)
	struct FString DoorMovementRTPCName; // 0x608(0x10)
	float DoorMovementRTPCMaxAngleSpeed; // 0x618(0x04)
	struct FName ProgressivePsychosisRTPC; // 0x61c(0x08)
	struct FName ScreamerStunRTPC; // 0x624(0x08)
	float ScreamerStunUpCoeff; // 0x62c(0x04)
	float ScreamerStunDownCoeff; // 0x630(0x04)
	struct FName JumpScareRTPC; // 0x634(0x08)
	float JumpScareRTPCMinimumDistance; // 0x63c(0x04)
	float JumpScareRTPCMaximumDistance; // 0x640(0x04)
	struct FName DistanceToPrimeAsset_RTPC; // 0x644(0x08)
	float DistanceToPrimeAsset_RTPC_MinDistance; // 0x64c(0x04)
	float DistanceToPrimeAsset_RTPC_MaxDistance; // 0x650(0x04)
	float KnockDownFadeToBlackRatio; // 0x654(0x04)
	float FoleyDamageMinInterval; // 0x658(0x04)
	struct FName FoleyDamageGroupName; // 0x65c(0x08)
	struct FName HidespotSwitchGroupName; // 0x664(0x08)
	struct FName DoorSwitchGroupName; // 0x66c(0x08)
	struct FName FoleyPawnSwitchGroupName; // 0x674(0x08)
	char pad_67C[0x4]; // 0x67c(0x04)
	struct FString FoleyPlayerLegsSwitchGroupName; // 0x680(0x10)
	struct FString FoleyPlayerTorsoSwitchGroupName; // 0x690(0x10)
	struct FString FoleyPlayerFullBodySwitchGroupName; // 0x6a0(0x10)
	struct FString FoleyPlayerFootSwitchGroupName; // 0x6b0(0x10)
	struct FString ItemPickupSwitchGroupName; // 0x6c0(0x10)
	struct FString InteractableContainerSwitchGroupName; // 0x6d0(0x10)
	struct FName Damage_None; // 0x6e0(0x08)
	struct FName Damage_Unarmed; // 0x6e8(0x08)
	struct FName Damage_Berserker; // 0x6f0(0x08)
	struct FName Damage_Blade_Large; // 0x6f8(0x08)
	struct FName Damage_Blade_Small; // 0x700(0x08)
	struct FName Damage_Blunt_DenseMetal; // 0x708(0x08)
	struct FName Damage_Blunt_HollowMetal; // 0x710(0x08)
	struct FName Damage_Blunt_Wood; // 0x718(0x08)
	struct FName Damage_Blunt_Electric; // 0x720(0x08)
	struct FName Damage_Brick; // 0x728(0x08)
	struct FName Damage_Electric; // 0x730(0x08)
	struct FName Damage_Fire; // 0x738(0x08)
	struct FName Damage_PsychosisEntity; // 0x740(0x08)
	struct FName Damage_Grinder; // 0x748(0x08)
	bool FootstepSpamPreventionSystem; // 0x750(0x01)
	char pad_751[0x3]; // 0x751(0x03)
	float MinimumTimeBetweenMismatchedFootsteps; // 0x754(0x04)
	float MinimumTimeBetweenFootsteps; // 0x758(0x04)
	struct FName FootStepSurfaceSwitchGroup; // 0x75c(0x08)
	struct FFootStepSurfaceData FootstepDefaultSurfaceData; // 0x764(0x10)
	char pad_774[0x4]; // 0x774(0x04)
	struct TArray<struct FFootStepSurfaceData> FootstepSurfaces; // 0x778(0x10)
	struct FName FootStepModifierSwitchGroup; // 0x788(0x08)
	struct FName FootStepModifierRTPCName; // 0x790(0x08)
	struct FFootStepSurfaceModiferData FootStepSurfaceModifierDefault; // 0x798(0x18)
	struct TArray<struct FFootStepSurfaceModiferData> FootstepModifiers; // 0x7b0(0x10)
	float DeepWaterFootstepDepth; // 0x7c0(0x04)
	char pad_7C4[0x4]; // 0x7c4(0x04)
	struct FString PushingGroupName; // 0x7c8(0x10)
	struct FString PushingStuckGroupName; // 0x7d8(0x10)
	struct FString PlayerCrouchedSwitchGroup; // 0x7e8(0x10)
	struct FString PlayerCrouchedSwitchCrouched; // 0x7f8(0x10)
	struct FString PlayerCrouchedSwitchUncrouched; // 0x808(0x10)
	struct FString VolumeTypeGroupName; // 0x818(0x10)
	struct FName MusicAIStateGroupName; // 0x828(0x08)
	struct FName MusicAIStateNone; // 0x830(0x08)
	struct FName MusicAIStateUnaware; // 0x838(0x08)
	struct FName MusicAIStateSuspicious; // 0x840(0x08)
	struct FName MusicAIStateAlerted; // 0x848(0x08)
	struct FName MusicAIStateChase; // 0x850(0x08)
	struct FName MusicAIStateChaseProximity; // 0x858(0x08)
	struct FName NPCCharacterTypeGroupName; // 0x860(0x08)
	struct FName PlayerCharacterTypeGroupName; // 0x868(0x08)
	struct UAkAuxBus* DefaultReverbEnvironment; // 0x870(0x08)
	bool bLineOfSightRemovesOcclusion; // 0x878(0x01)
	char pad_879[0x3]; // 0x879(0x03)
	float DefaultOpenConnectorOcclusionFactor; // 0x87c(0x04)
	float DefaultClosedConnectorOcclusionFactor; // 0x880(0x04)
	float DefaultVolumeOcclusionFactor; // 0x884(0x04)
	float DefaultOpenDoorOcclusionFactor; // 0x888(0x04)
	float DefaultClosedDoorOcclusionFactor; // 0x88c(0x04)
	float DefaultObstructionNoOcclusion; // 0x890(0x04)
	float DefaultObstructionHighOcclusion; // 0x894(0x04)
	float MaxOcclusionForVirtualisationNode; // 0x898(0x04)
	float ClosedHidingSpotOcclusion; // 0x89c(0x04)
	float PeekingHidingSpotOcclusion; // 0x8a0(0x04)
	bool bEnableSoundVirtualization; // 0x8a4(0x01)
	char pad_8A5[0x3]; // 0x8a5(0x03)
	float OcclusionApproachCoeff; // 0x8a8(0x04)
	float ObstructionApproachCoeff; // 0x8ac(0x04)
	float FreePathingDist; // 0x8b0(0x04)
	float BotToPlayerDistThreshForChaseRelevancy; // 0x8b4(0x04)
	float TargetToPlayerDistThreshForChaseRelevancy; // 0x8b8(0x04)
	float TargetToPlayerDistThreshForChaseProximity; // 0x8bc(0x04)
	float TargetToPlayerDistThreshForUnaware; // 0x8c0(0x04)
	float BotToPlayerDistThreshForInvestigateRelevancy; // 0x8c4(0x04)
	float TargetToPlayerDistThreshForInvestigateRelevancy; // 0x8c8(0x04)
	float MaxChaseToLKPDurationAfterLastSight; // 0x8cc(0x04)
	float ChaseMusicTimeDelay; // 0x8d0(0x04)
	float AIMinProximity; // 0x8d4(0x04)
	float AIMaxProximity; // 0x8d8(0x04)
	float MinDelayBetweenDisturbanceSnd; // 0x8dc(0x04)
	float MinDelayAfterChaseForDisturbanceSnd; // 0x8e0(0x04)
	int32_t InterruptedVOFadeOutTimeMS; // 0x8e4(0x04)
	bool bRandomFxSystemEnabled; // 0x8e8(0x01)
	char pad_8E9[0x3]; // 0x8e9(0x03)
	float SmallFxDistance; // 0x8ec(0x04)
	float MediumFxDistance; // 0x8f0(0x04)
	float LargeFxDistance; // 0x8f4(0x04)
	float SmallFxMinIntervalDelay; // 0x8f8(0x04)
	float SmallFxMaxIntervalDelay; // 0x8fc(0x04)
	float MediumFxMinIntervalDelay; // 0x900(0x04)
	float MediumFxMaxIntervalDelay; // 0x904(0x04)
	float LargeFxMinIntervalDelay; // 0x908(0x04)
	float LargeFxMaxIntervalDelay; // 0x90c(0x04)
	float StageIntroVOPreDelay; // 0x910(0x04)
	float StageOutroVOPreDelay; // 0x914(0x04)
	float PrimeAssetIntroVOPreDelay; // 0x918(0x04)
	float ObjectiveIntroVOPreDelay; // 0x91c(0x04)
};

// Class OPP.RBSettings_DevDecals
// Size: 0x38 (Inherited: 0x28)
struct URBSettings_DevDecals : UObject {
	struct TArray<struct FDevDecalData> Decals; // 0x28(0x10)
};

// Class OPP.RBSettings_DevTools
// Size: 0x58 (Inherited: 0x28)
struct URBSettings_DevTools : UObject {
	struct FString GridlyAPIKey; // 0x28(0x10)
	struct FString GridlyViewId; // 0x38(0x10)
	struct TArray<struct FString> ClassNamesToIgnore; // 0x48(0x10)
};

// Class OPP.RBSettings_DevUser
// Size: 0x48 (Inherited: 0x28)
struct URBSettings_DevUser : UObject {
	bool bNoSound; // 0x28(0x01)
	bool bNoVibration; // 0x29(0x01)
	bool bGenerateReportsOnEditorClose; // 0x2a(0x01)
	bool bEnableWWWRecording; // 0x2b(0x01)
	bool bEnableWWWRecordingInGyms; // 0x2c(0x01)
	bool bEnableWWWBotDebugInfoRecording; // 0x2d(0x01)
	bool bAutoSaveWWWData; // 0x2e(0x01)
	char pad_2F[0x1]; // 0x2f(0x01)
	int32_t MaxCountWWWAutosaves; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<struct FString> ExtraWWWSearchLocations; // 0x38(0x10)
};

// Class OPP.RBSettings_Gameplay
// Size: 0x59b0 (Inherited: 0x28)
struct URBSettings_Gameplay : UObject {
	float MaxLedgeCosAngle; // 0x28(0x04)
	float MinimumGamepadMoveSpeed; // 0x2c(0x04)
	float LargeCarryJumpRatioPenalty; // 0x30(0x04)
	float ExhaustedJumpRatioPenalty; // 0x34(0x04)
	float MinimumJumpIntervalWithStamina; // 0x38(0x04)
	float MinimumJumpIntervalWithoutStamina; // 0x3c(0x04)
	float MinimumJumpIntervalWithLargeObject; // 0x40(0x04)
	float WalkJumpPush; // 0x44(0x04)
	float RunJumpPush; // 0x48(0x04)
	float ForwardSpeedForJumpWalking; // 0x4c(0x04)
	float ForwardSpeedForJumpRunning; // 0x50(0x04)
	float JumpClearanceWalking; // 0x54(0x04)
	float JumpClearanceRunning; // 0x58(0x04)
	float DefaultGravityScale; // 0x5c(0x04)
	float WallClimbHeightThreshold; // 0x60(0x04)
	float AlignTraversalHeightThreshold; // 0x64(0x04)
	float FallingDelayBeforeCantJump; // 0x68(0x04)
	float JumpingHorizontalGapMaxDistance; // 0x6c(0x04)
	float JumpingHorizontalGapHeightThresh; // 0x70(0x04)
	float SlidingCameraRotationSpeedMultiplier; // 0x74(0x04)
	float JumpingCameraRotationSpeedMultiplier; // 0x78(0x04)
	float MinLookSensitivityMultiplier; // 0x7c(0x04)
	float MaxLookSensitivityMultiplier; // 0x80(0x04)
	float SlidingRunMimimumDuration; // 0x84(0x04)
	float SlidingStoppedRunningMaxDuration; // 0x88(0x04)
	float SlidingMinimumSpeed; // 0x8c(0x04)
	float SlideConsecutiveDelay; // 0x90(0x04)
	float FreeSlideDistance; // 0x94(0x04)
	float MinimumFreeSlideClearance; // 0x98(0x04)
	float MaximumDistanceToSlideUnderMarker; // 0x9c(0x04)
	float DistanceCheckForQuickFreeSlideBlocked; // 0xa0(0x04)
	float MaxJumpOverWidth; // 0xa4(0x04)
	float BotExtraJumpOverReach; // 0xa8(0x04)
	float ClimbOntoLargePickupMaxHeight; // 0xac(0x04)
	float MaxSlideOverHeight; // 0xb0(0x04)
	float MinSlideOverWidth; // 0xb4(0x04)
	float MaxSlideOverWidth; // 0xb8(0x04)
	bool bEnablePawnSeparationMeshOffset; // 0xbc(0x01)
	bool bEnableNPCWallSeparation; // 0xbd(0x01)
	char pad_BE[0x2]; // 0xbe(0x02)
	float NPCMeshOffsetApproachCoeff; // 0xc0(0x04)
	float RunningJumpOverPlayRate; // 0xc4(0x04)
	float AutoHideItemDelaySeconds; // 0xc8(0x04)
	float RaiseToThrowFromHolsterDelay; // 0xcc(0x04)
	float HealthAfterRespawn; // 0xd0(0x04)
	float HealthAfterRevived; // 0xd4(0x04)
	float HealthAfterHelpedUp; // 0xd8(0x04)
	float HealthRegenDelay; // 0xdc(0x04)
	float HealthRegenRate; // 0xe0(0x04)
	float FullHealthBracketCapacity; // 0xe4(0x04)
	float TemporaryHealthDegenRate; // 0xe8(0x04)
	float TemporaryDamageDegenRate; // 0xec(0x04)
	struct TArray<struct FConfigurableFloat> KnockdownBleedOutTimes; // 0xf0(0x10)
	struct FConfigurableInt NumberOfKnockDownBeforeDeath; // 0x100(0xc8)
	struct FVector2D HealthPPSValueLimits; // 0x1c8(0x08)
	float NonFatalHealthLimit; // 0x1d0(0x04)
	char pad_1D4[0x4]; // 0x1d4(0x04)
	struct FRuntimeFloatCurve HealthEffectCurve; // 0x1d8(0x88)
	float MaxHealthBoostLimit; // 0x260(0x04)
	char pad_264[0x4]; // 0x264(0x04)
	struct FConfigurableFloat PlayerDefaultMaxHealth; // 0x268(0xc8)
	struct FPawnSpeedSettings SpeedSetting; // 0x330(0x30)
	float DecelApproachFactor; // 0x360(0x04)
	float AccelApproachFactor; // 0x364(0x04)
	float ExhaustedAccelApproachFactor; // 0x368(0x04)
	float FallHeightForSpeedPenalty; // 0x36c(0x04)
	float SmallLandingPenaltyDuration; // 0x370(0x04)
	char pad_374[0x4]; // 0x374(0x04)
	struct FConfigurableFloat DamageBoostSpeedBonus; // 0x378(0xc8)
	struct FConfigurableFloat DamageBoostDuration; // 0x440(0xc8)
	float SpeedPenaltyBackwards; // 0x508(0x04)
	float SpeedPenaltyStrafe; // 0x50c(0x04)
	float SprintPenaltyTurningFactor; // 0x510(0x04)
	float MaxSpeedPenaltyForUpSlopeRunning; // 0x514(0x04)
	float MaxSpeedGainForDownSlopeRunning; // 0x518(0x04)
	float MaxSpeedPenaltyForUpSlopeWalking; // 0x51c(0x04)
	float MaxSpeedGainForDownSlopeWalking; // 0x520(0x04)
	float CameraPitchRotationRateMultiplierInKnockedDownLocomotionMode; // 0x524(0x04)
	float MaxYawRotationRateInKnockedDownLocomotionMode; // 0x528(0x04)
	float KnockedDownSideSpeedScalingRatio; // 0x52c(0x04)
	float JustLandedSpeedMultiplier; // 0x530(0x04)
	float DefaultFOV; // 0x534(0x04)
	float RunningFOV; // 0x538(0x04)
	float AimingFOV; // 0x53c(0x04)
	float AimingMouseMultiplier; // 0x540(0x04)
	float AimingGamepadMultiplier; // 0x544(0x04)
	struct TMap<enum class EBasicDirection, struct FHelpUpCameraLimit> HelpedUpCameraLimit; // 0x548(0x50)
	struct TMap<enum class EBasicDirection, struct FHelpUpCameraLimit> HelpingUpCameraLimit; // 0x598(0x50)
	struct TMap<enum class EBasicDirection, struct FVector2D> RevivingCameraLimitYaw; // 0x5e8(0x50)
	struct TMap<enum class EBasicDirection, struct FVector2D> RevivingCameraLimitPitch; // 0x638(0x50)
	float CameraSpringStiffness; // 0x688(0x04)
	float ViewLimitsSoftZone; // 0x68c(0x04)
	float GamepadLookDeadZone; // 0x690(0x04)
	float GamepadSpringDelay; // 0x694(0x04)
	float MaxStabilizationRatio; // 0x698(0x04)
	float PeekRollAngle; // 0x69c(0x04)
	float PeekSideOffset; // 0x6a0(0x04)
	float PeekVerticalOffset; // 0x6a4(0x04)
	float CrouchHeightMetric; // 0x6a8(0x04)
	float MaxDistanceForPickable; // 0x6ac(0x04)
	float DefaultDistanceForInteractingWithPawn; // 0x6b0(0x04)
	float DistanceForTradingWithPawn; // 0x6b4(0x04)
	float MaxDistanceForInteractible; // 0x6b8(0x04)
	float MaxDistanceForDisplayMessage; // 0x6bc(0x04)
	float MaxTraversalLedgeDist; // 0x6c0(0x04)
	float MaxJumpOverDistWalking; // 0x6c4(0x04)
	float MaxJumpOverDistRunning; // 0x6c8(0x04)
	float MaxClimbDistWalking; // 0x6cc(0x04)
	float MaxClimbDistRunning; // 0x6d0(0x04)
	float MaxTraversalDistFalling; // 0x6d4(0x04)
	float MaxDistanceForAcceptLedgeCatch; // 0x6d8(0x04)
	float MaxDistanceForAcceptLedgeThrow; // 0x6dc(0x04)
	float HidespotClearanceShortSide; // 0x6e0(0x04)
	float HidespotClearanceLongSide; // 0x6e4(0x04)
	float HidespotClearanceHeight; // 0x6e8(0x04)
	float MaxDistanceForLandOnto; // 0x6ec(0x04)
	float LandOntoGroundFromJumpCheckHeight; // 0x6f0(0x04)
	float BaseLandOntoGroundCheckHeight; // 0x6f4(0x04)
	float TraversalLedgeMinRelativeZ; // 0x6f8(0x04)
	float TraversalLedgeMaxRelativeZ; // 0x6fc(0x04)
	float MinClimbDownClearanceRunning; // 0x700(0x04)
	float MinClimbDownClearanceWalking; // 0x704(0x04)
	float TraversalZOffset; // 0x708(0x04)
	float InitialTraversalZOffsetWithSecondChance; // 0x70c(0x04)
	float TraversalCapsuleHalfHeight; // 0x710(0x04)
	float MinResultScreenTime; // 0x714(0x04)
	float TimeBeforeTutorialReturnToLobby; // 0x718(0x04)
	float ForcedReturnToLobbyTime; // 0x71c(0x04)
	float ForcedReturnToLobbyTimeStageFailed; // 0x720(0x04)
	float ForcedReturnToLobbyTimeReleaseReagent; // 0x724(0x04)
	float StageFailedRestartTime; // 0x728(0x04)
	float MinTimeForLoadingStage; // 0x72c(0x04)
	float MinTimeForLoadingReagentReleaseTrial; // 0x730(0x04)
	float StageReadyDelay; // 0x734(0x04)
	bool bEnableStageReset; // 0x738(0x01)
	char pad_739[0x3]; // 0x739(0x03)
	int32_t NumberOfLevelsPerGame; // 0x73c(0x04)
	float TimeBeforeRestartAfterTeamWipe; // 0x740(0x04)
	bool bDisableSystemicSpawning; // 0x744(0x01)
	bool bAllowPlayerRespawnInStage; // 0x745(0x01)
	char pad_746[0x2]; // 0x746(0x02)
	struct FConfigurableFloat MaxTimeForRevive; // 0x748(0xc8)
	float MinTimeSinceNPCUseForPlayerRespawn; // 0x810(0x04)
	float MinDistanceFromNPCForPlayerRespawn; // 0x814(0x04)
	float SASConfinementStartTime; // 0x818(0x04)
	float TimeBeforeForcedOutOfSAS; // 0x81c(0x04)
	bool CanUseItemsInSAS; // 0x820(0x01)
	char pad_821[0x3]; // 0x821(0x03)
	float TimeBeforeDamageAtEndOfStage; // 0x824(0x04)
	float TimeBeforeLastWarningAtEndOfStage; // 0x828(0x04)
	float EndOfStageDamagePerSec; // 0x82c(0x04)
	float RespawnImmunityTime; // 0x830(0x04)
	char pad_834[0x4]; // 0x834(0x04)
	struct FConfigurableInt NumberOfExtraChances; // 0x838(0xc8)
	struct TMap<enum class EGameDifficulty, struct FDifficultyConfig> DifficultyConfigs; // 0x900(0x50)
	float StageIntroDuration; // 0x950(0x04)
	float StageIntroFadeOutDuration; // 0x954(0x04)
	float TimeBetweenObjectives; // 0x958(0x04)
	char pad_95C[0x4]; // 0x95c(0x04)
	struct FConfigurableFloat MaxWatchDistance; // 0x960(0xc8)
	float WatchCloseToObjectiveDistance; // 0xa28(0x04)
	float MinDistanceBetweenSASAndObjectives; // 0xa2c(0x04)
	float MinDistanceBetweenSASSeperatedAndObjectives; // 0xa30(0x04)
	float MinDistanceBetweenDifferentMainObjectivesActors; // 0xa34(0x04)
	float MinDistanceBetweenSameMainObjectivesActors; // 0xa38(0x04)
	float MinDistanceBetweenSameSecondaryObjectivesActors; // 0xa3c(0x04)
	float MinDistanceBetweenSecondaryObjectivesActorsAndMainActors; // 0xa40(0x04)
	float MinZDistanceBetweenObjectives; // 0xa44(0x04)
	float MatchCountdownCancelGracePeriod; // 0xa48(0x04)
	float MatchCountdownCancelGracePeriodRelease; // 0xa4c(0x04)
	float MatchCountdownTime; // 0xa50(0x04)
	float TimeBeforeSuccessResultScreen; // 0xa54(0x04)
	float CartObjectiveStopperDistance; // 0xa58(0x04)
	char pad_A5C[0x4]; // 0xa5c(0x04)
	struct TArray<struct FIngameItemConfig> ItemSpawningConfigs; // 0xa60(0x10)
	struct FSoftObjectPath DefaultItemSpawningManagerConfig; // 0xa70(0x18)
	struct FSoftObjectPath FistItemClassPath; // 0xa88(0x18)
	float RespawnImmunityMaximumDistance; // 0xaa0(0x04)
	char pad_AA4[0x4]; // 0xaa4(0x04)
	struct FConfigurableFloat NightVisionMaxBattery; // 0xaa8(0xc8)
	float NightVisionBaseConsumption; // 0xb70(0x04)
	char pad_B74[0x4]; // 0xb74(0x04)
	struct FConfigurableFloat NightVisionRechargeableEnergy; // 0xb78(0xc8)
	struct FConfigurableFloat NightVisionRechargeDelay; // 0xc40(0xc8)
	struct FConfigurableFloat NightVisionRechargeableRate; // 0xd08(0xc8)
	float NightVisionLowBatteryThreshold; // 0xdd0(0x04)
	bool bAllowNightHunterInterference; // 0xdd4(0x01)
	char pad_DD5[0x3]; // 0xdd5(0x03)
	struct FRuntimeFloatCurve NightHuntersNVInterferenceCurve; // 0xdd8(0x88)
	struct FConfigurableFloat MolotovFireRadius; // 0xe60(0xc8)
	struct FConfigurableFloat MolotovFireDuration; // 0xf28(0xc8)
	float MolotovFireMaxHeight; // 0xff0(0x04)
	float MolotovFireMaxSpreadTop; // 0xff4(0x04)
	float MolotovFireMaxSpreadBottom; // 0xff8(0x04)
	char pad_FFC[0x4]; // 0xffc(0x04)
	struct FConfigurableFloat MolotovDamagePerSec; // 0x1000(0xc8)
	float GamepadTurnRate; // 0x10c8(0x04)
	float GamepadLookUpRate; // 0x10cc(0x04)
	struct FName PeekLeftAxisName; // 0x10d0(0x08)
	struct FName PeekRightAxisName; // 0x10d8(0x08)
	float GamepadInteractionZoneHorizontalPadding; // 0x10e0(0x04)
	float GamepadInteractionZoneVerticalPadding; // 0x10e4(0x04)
	float BaseShoveRange; // 0x10e8(0x04)
	float BaseShoveAngle; // 0x10ec(0x04)
	float HeadTargetRadius; // 0x10f0(0x04)
	char pad_10F4[0x4]; // 0x10f4(0x04)
	struct FConfigurableFloat GroundAndPoundCounterMashingRatio; // 0x10f8(0xc8)
	float GroundAndPoundCounterDelayWithThrowable; // 0x11c0(0x04)
	float PulledOutOfHidingSpotDamage; // 0x11c4(0x04)
	float FatalityEyeClosingDuration; // 0x11c8(0x04)
	float FatalityEyeClosingOffsetFromDeath; // 0x11cc(0x04)
	bool bHitReactionsFromAnimNotifies; // 0x11d0(0x01)
	char pad_11D1[0x3]; // 0x11d1(0x03)
	float ShoveAngle; // 0x11d4(0x04)
	float ShoveExtraPushDist; // 0x11d8(0x04)
	char pad_11DC[0x4]; // 0x11dc(0x04)
	struct FConfigurableFloat PlayerStunDurationAtFullRange; // 0x11e0(0xc8)
	struct FConfigurableFloat PlayerStunDurationAtMaxRange; // 0x12a8(0xc8)
	struct FConfigurableFloat PlayerStunCamShakeRelativeDuration; // 0x1370(0xc8)
	float PlayerStunCamShakeFadeOutDurationRatio; // 0x1438(0x04)
	char pad_143C[0x4]; // 0x143c(0x04)
	struct FConfigurableFloat PlayerStunMaxSpeedLimit; // 0x1440(0xc8)
	float PlayerStunSpeedLimitFadeOutDurationRatio; // 0x1508(0x04)
	char pad_150C[0x4]; // 0x150c(0x04)
	struct FConfigurableFloat PlayerStunSpeedLimitFadeOutExponent; // 0x1510(0xc8)
	struct FConfigurableFloat PlayerStunMaxRotationRate; // 0x15d8(0xc8)
	float PlayerStunRotationLimitFadeOutDurationRatio; // 0x16a0(0x04)
	char pad_16A4[0x4]; // 0x16a4(0x04)
	struct FConfigurableFloat PlayerStunRotationLimitFadeOutExponent; // 0x16a8(0xc8)
	struct FConfigurableFloat PlayerStunRetriggerImmunityDuration; // 0x1770(0xc8)
	struct FConfigurableInt DefaultNumberOfItemsSlots; // 0x1838(0xc8)
	float QuickInventoryShowDuration; // 0x1900(0x04)
	float PickupItemInventoryShowDuration; // 0x1904(0x04)
	float SelectingItemInventoryShowDuration; // 0x1908(0x04)
	float SelectingCombiningItemInventoryShowDuration; // 0x190c(0x04)
	struct FConfigurableFloat PercentChanceOfKeepingLockpickAfterUse; // 0x1910(0xc8)
	struct FConfigurableFloat PercentChanceOfKeepingMasterKeyAfterUse; // 0x19d8(0xc8)
	struct FConfigurableFloat PercentChanceOfKeepingSyringeAfterUse; // 0x1aa0(0xc8)
	int32_t ThrowableGibsCountLimit; // 0x1b68(0x04)
	float BaseHelpingUpDuration; // 0x1b6c(0x04)
	float DamagedMaxHelpingUpDuration; // 0x1b70(0x04)
	float DamagedMaxHelpingUpSlowdownDuration; // 0x1b74(0x04)
	float BaseReviveDuration; // 0x1b78(0x04)
	float DamagedMaxReviveDuration; // 0x1b7c(0x04)
	float DamagedMaxReviveSlowdownDuration; // 0x1b80(0x04)
	float QuickHoldInputDuration; // 0x1b84(0x04)
	float HoldInputDuration; // 0x1b88(0x04)
	float HoldInputDropItemDuration; // 0x1b8c(0x04)
	float CancelHoldInputDuration; // 0x1b90(0x04)
	float MaxDoorInteractionDistance2D; // 0x1b94(0x04)
	bool bAllowHidespotWhileInPsychosis; // 0x1b98(0x01)
	bool bAllowLargeObjectWhileInPsychosis; // 0x1b99(0x01)
	char pad_1B9A[0x2]; // 0x1b9a(0x02)
	float TalkWheelHoldDuration; // 0x1b9c(0x04)
	float MaxTradeDistance; // 0x1ba0(0x04)
	struct FDestructiblesSettings DestructibleSettings; // 0x1ba4(0x120)
	float DamageToBreakableForCoopMove; // 0x1cc4(0x04)
	float MinCrouchNoiseSpeed; // 0x1cc8(0x04)
	float CrouchLoudness; // 0x1ccc(0x04)
	float CrouchFullLoudnessDistance; // 0x1cd0(0x04)
	float CrouchMaxHearingDistance; // 0x1cd4(0x04)
	float MinMovementSpeedForNoise; // 0x1cd8(0x04)
	float WalkingLoudness; // 0x1cdc(0x04)
	float WalkingFullLoudnessDistance; // 0x1ce0(0x04)
	float WalkingMaxHearingDistance; // 0x1ce4(0x04)
	float RunningLoudness; // 0x1ce8(0x04)
	float RunningFullLoudnessDistance; // 0x1cec(0x04)
	float RunningMaxHearingDistance; // 0x1cf0(0x04)
	float PushCartWalkingLoudness; // 0x1cf4(0x04)
	float PushCartWalkingFullLoudnessDistance; // 0x1cf8(0x04)
	float PushCartWalkingMaxHearingDistance; // 0x1cfc(0x04)
	float PushCartRunningLoudness; // 0x1d00(0x04)
	float PushCartRunningFullLoudnessDistance; // 0x1d04(0x04)
	float PushCartRunningMaxHearingDistance; // 0x1d08(0x04)
	float MinorAudioFullLoudnessDistance; // 0x1d0c(0x04)
	float MinorAudioMaxHearingDistance; // 0x1d10(0x04)
	float NormalAudioFullLoudnessDistance; // 0x1d14(0x04)
	float NormalAudioMaxHearingDistance; // 0x1d18(0x04)
	float ObviousAudioFullLoudnessDistance; // 0x1d1c(0x04)
	float ObviousAudioMaxHearingDistance; // 0x1d20(0x04)
	float HighPriorityFullLoudnessDistance; // 0x1d24(0x04)
	float HighPriorityMaxHearingDistance; // 0x1d28(0x04)
	enum class ETriggeringStimulusType BigLandingStimulus; // 0x1d2c(0x01)
	enum class ETriggeringStimulusType DisarmingDoorTrapNoise; // 0x1d2d(0x01)
	enum class ETriggeringStimulusType DebrisWalkOverNoise; // 0x1d2e(0x01)
	enum class ETriggeringStimulusType DebrisWalkOverSlowNoise; // 0x1d2f(0x01)
	enum class ETriggeringStimulusType SoundTrapNoise; // 0x1d30(0x01)
	char pad_1D31[0x3]; // 0x1d31(0x03)
	float UINoiseEventForgetTime; // 0x1d34(0x04)
	float UINoiseDetectedForgetTime; // 0x1d38(0x04)
	float MinimumStaminaCost; // 0x1d3c(0x04)
	float SmallStaminaCost; // 0x1d40(0x04)
	float MediumStaminaCost; // 0x1d44(0x04)
	float HighStaminaCost; // 0x1d48(0x04)
	float VeryHighStaminaCost; // 0x1d4c(0x04)
	float MaximumStaminaCost; // 0x1d50(0x04)
	float StaminaCost_ContinuousRunning; // 0x1d54(0x04)
	float StaminaCost_ContinuousWalkingUpStairs; // 0x1d58(0x04)
	float StaminaCost_ContinuousRunningUpStairs; // 0x1d5c(0x04)
	float StaminaCost_ContinuousWalkingWhilePushing; // 0x1d60(0x04)
	float StaminaCost_ContinuousRunningWhilePushing; // 0x1d64(0x04)
	float StaminaCost_ContinuousWalkingWithLargeObject; // 0x1d68(0x04)
	float StaminaCost_ContinuousRunningWithLargeObject; // 0x1d6c(0x04)
	float StaminaCost_HighClimbOntoHeight; // 0x1d70(0x04)
	float StaminaCost_MediumClimbOntoHeight; // 0x1d74(0x04)
	float StaminaCost_JumpingWithLargeObject; // 0x1d78(0x04)
	float StaminaCost_JumpRunningWithLargeObject; // 0x1d7c(0x04)
	enum class EStaminaCostType StaminaCost_ClimbOntoLow; // 0x1d80(0x01)
	enum class EStaminaCostType StaminaCost_ClimbOntoMedium; // 0x1d81(0x01)
	enum class EStaminaCostType StaminaCost_ClimbOntoHigh; // 0x1d82(0x01)
	char pad_1D83[0x1]; // 0x1d83(0x01)
	float StaminaCost_HighJumpOverHeight; // 0x1d84(0x04)
	float StaminaCost_MediumJumpOverHeight; // 0x1d88(0x04)
	enum class EStaminaCostType StaminaCost_JumpOverLow; // 0x1d8c(0x01)
	enum class EStaminaCostType StaminaCost_JumpOverMedium; // 0x1d8d(0x01)
	enum class EStaminaCostType StaminaCost_JumpOverHigh; // 0x1d8e(0x01)
	enum class EStaminaCostType StaminaCost_SlideUnder; // 0x1d8f(0x01)
	enum class EStaminaCostType StaminaCost_JumpWalk; // 0x1d90(0x01)
	enum class EStaminaCostType StaminaCost_JumpRun; // 0x1d91(0x01)
	enum class EStaminaCostType StaminaCost_ShoveFailed; // 0x1d92(0x01)
	enum class EStaminaCostType StaminaCost_ShoveSuccess; // 0x1d93(0x01)
	enum class EStaminaCostType StaminaCost_ShoveBigGrunt; // 0x1d94(0x01)
	enum class EStaminaCostType StaminaCost_BashBreakable; // 0x1d95(0x01)
	enum class EStaminaCostType StaminaCost_BashDoor; // 0x1d96(0x01)
	char pad_1D97[0x1]; // 0x1d97(0x01)
	float StaminaCost_ContinuousHoldingGarageDoor; // 0x1d98(0x04)
	enum class EStaminaCostType StaminaCost_CoopMoveHelper; // 0x1d9c(0x01)
	enum class EStaminaCostType StaminaCost_CoopMoveJumper; // 0x1d9d(0x01)
	enum class EStaminaCostType StaminaCost_ThrowSmallObject; // 0x1d9e(0x01)
	enum class EStaminaCostType StaminaCost_DynamicObstacle; // 0x1d9f(0x01)
	bool bCanRunWhileExhausted; // 0x1da0(0x01)
	bool bCanSprintWhileExhausted; // 0x1da1(0x01)
	char pad_1DA2[0x2]; // 0x1da2(0x02)
	float ExhaustedSpeedSlowdownRatio; // 0x1da4(0x04)
	float ExhaustedMinimumDuration; // 0x1da8(0x04)
	char pad_1DAC[0x4]; // 0x1dac(0x04)
	struct FConfigurableFloat DefaultMaxStamina; // 0x1db0(0xc8)
	float StaminaReplenishRateWhileMoving; // 0x1e78(0x04)
	float StaminaReplenishRate; // 0x1e7c(0x04)
	float StaminaReplenishDurationAfterExhaustion; // 0x1e80(0x04)
	float StaminaRatioRequiredToStartRunning; // 0x1e84(0x04)
	float StaminaDepletedFOVBaseValueRatio; // 0x1e88(0x04)
	float StaminaDepletedFOVRangeRatio; // 0x1e8c(0x04)
	float StaminaDepleted_StaminaStartFX; // 0x1e90(0x04)
	float StaminaDepleted_StaminaFullFX; // 0x1e94(0x04)
	float StaminaDepleted_PowFX; // 0x1e98(0x04)
	float FOVTwinkleSpeed; // 0x1e9c(0x04)
	float TraversalSpeedRecoveryRatioWhenExhausted; // 0x1ea0(0x04)
	char pad_1EA4[0x4]; // 0x1ea4(0x04)
	struct TArray<struct FRBGameplayAttributeModifier> AdrenalineAttributeModifiers; // 0x1ea8(0x10)
	float RadioRTPCMinDistance; // 0x1eb8(0x04)
	float RadioRTPCMaxDistance; // 0x1ebc(0x04)
	float CoopHighJumpMaxFollowerDistance; // 0x1ec0(0x04)
	float CoopHighJumpMaxThrowerDistanceWalking; // 0x1ec4(0x04)
	float CoopHighJumpMaxThrowerDistanceRunning; // 0x1ec8(0x04)
	float CoopHighJumpMaxCatcherDistanceWalking; // 0x1ecc(0x04)
	float CoopHighJumpMaxCatcherDistanceRunning; // 0x1ed0(0x04)
	float CoopHighJumpMaxCatchEyePitch; // 0x1ed4(0x04)
	float HighJumpCatchMinPitchCS; // 0x1ed8(0x04)
	float LongJumpMaxCatchDistance; // 0x1edc(0x04)
	float CoopHighJumpMaxDistanceFromLeader; // 0x1ee0(0x04)
	float CoopLongJumpMaxHelperDistanceWalking; // 0x1ee4(0x04)
	float CoopLongJumpMaxHelperDistanceRunning; // 0x1ee8(0x04)
	float LongJumpHelperMaxHeight; // 0x1eec(0x04)
	float LongJumpHelperMinHeight; // 0x1ef0(0x04)
	float CoopLongJumpMaxFollowerDistance; // 0x1ef4(0x04)
	bool bShowCoopMoveInteractIcon; // 0x1ef8(0x01)
	char pad_1EF9[0x3]; // 0x1ef9(0x03)
	float DelayBeforeKickCoopSignal; // 0x1efc(0x04)
	float FallHeightSmallLanding; // 0x1f00(0x04)
	float FallHeightMediumLanding; // 0x1f04(0x04)
	float FallHeightHardLanding; // 0x1f08(0x04)
	float FallHeightForInstantDeath; // 0x1f0c(0x04)
	float FallHeightToStartReceiveDamage; // 0x1f10(0x04)
	float FallHeightForMaxDamage; // 0x1f14(0x04)
	float FallHeightMinDamage; // 0x1f18(0x04)
	float FallHeightMinSpeedForPenalty; // 0x1f1c(0x04)
	float FallHeightMaxSpeedForPenalty; // 0x1f20(0x04)
	float FallHeightMaxSpeedMetersPenalty; // 0x1f24(0x04)
	float StaticLightingMultiplier; // 0x1f28(0x04)
	float DynamicLightingMultiplier; // 0x1f2c(0x04)
	float DarknessUpdateIntervalPlayers; // 0x1f30(0x04)
	float DarknessUpdateIntervalBots; // 0x1f34(0x04)
	struct FConfigurableFloat CoopTrapVictimMashingRatio; // 0x1f38(0xc8)
	struct FConfigurableFloat CoopTrapHelperMashingRatio; // 0x2000(0xc8)
	struct FConfigurableBool CoopTrapCanKill; // 0x20c8(0x60)
	struct FConfigurableFloat CoopTrapTriggerBracketInterval; // 0x2128(0xc8)
	struct FConfigurableFloat CoopTrapInitialDamage; // 0x21f0(0xc8)
	struct FConfigurableFloat CoopTrapDamage; // 0x22b8(0xc8)
	struct FConfigurableFloat CoopTrapPsychosisInitialBracketAmount; // 0x2380(0xc8)
	struct FConfigurableFloat CoopTrapPsychosisBracketAmount; // 0x2448(0xc8)
	struct FConfigurableFloat ContainerTrapDelay; // 0x2510(0xc8)
	float RoomConnectorSameFloorZLimit; // 0x25d8(0x04)
	float RewardButtonMaximumProximity2D; // 0x25dc(0x04)
	struct TArray<struct FPuzzleRoomRewardConfig> PuzzleRoomRequiredRewards; // 0x25e0(0x10)
	struct TArray<struct FPuzzleRoomRewardConfig> PuzzleRoomRandomRewards; // 0x25f0(0x10)
	struct FConfigurableInt FiveStarRewardCount; // 0x2600(0xc8)
	struct FConfigurableInt FourStarRewardCount; // 0x26c8(0xc8)
	struct FConfigurableInt ThreeStarRewardCount; // 0x2790(0xc8)
	struct FConfigurableInt TwoStarRewardCount; // 0x2858(0xc8)
	struct FConfigurableInt OneStarRewardCount; // 0x2920(0xc8)
	struct FConfigurableFloat PuzzleRoomDuration; // 0x29e8(0xc8)
	struct FConfigurableFloat PuzzleRoom5StarTime; // 0x2ab0(0xc8)
	struct FConfigurableFloat PuzzleRoom4StarTime; // 0x2b78(0xc8)
	struct FConfigurableFloat PuzzleRoom3StarTime; // 0x2c40(0xc8)
	struct FConfigurableFloat PuzzleRoom2StarTime; // 0x2d08(0xc8)
	struct FConfigurableFloat PuzzleRoom1StarTime; // 0x2dd0(0xc8)
	bool bPuzzleRoomShowEscapeMessage; // 0x2e98(0x01)
	char pad_2E99[0x7]; // 0x2e99(0x07)
	struct FText PuzzleRoomEscapeMessageTitle; // 0x2ea0(0x18)
	struct FText PuzzleRoomEscapeMessageText; // 0x2eb8(0x18)
	struct FRandomSettings DoorRandomizationBlockedCount; // 0x2ed0(0x320)
	struct FRandomSettings DoorRandomizationReplacedCount; // 0x31f0(0x320)
	struct FRandomSettings DoorRandomizationTrappedCount; // 0x3510(0x320)
	struct FRandomSettings DoorRandomizationLockedCount; // 0x3830(0x320)
	struct FRandomSettings DoorRandomizationOpenCount; // 0x3b50(0x320)
	struct FConfigurableFloat DoorRandomization_MaxDetourPathDistance; // 0x3e70(0xc8)
	struct FConfigurableBool DoorRandomization_bAllowFloorChange; // 0x3f38(0x60)
	struct FConfigurableFloat DoorRandomization_MinimumDistanceToClosedGate; // 0x3f98(0xc8)
	struct FConfigurableFloat DoorRandomization_MinimumDistanceToBlockedDoor; // 0x4060(0xc8)
	struct FConfigurableFloat TrapRoomDuration; // 0x4128(0xc8)
	struct FConfigurableFloat TrapRoomDamageInterval; // 0x41f0(0xc8)
	struct FConfigurableFloat TrapRoomDamageAmount; // 0x42b8(0xc8)
	struct FConfigurableBool TrapRoomDamageCanKnockDown; // 0x4380(0x60)
	struct FConfigurableFloat TrapRoomPsychosisAmountPerSecond; // 0x43e0(0xc8)
	struct FConfigurableFloat TrapRoomFailedPsychosisAmount; // 0x44a8(0xc8)
	struct FConfigurableFloat HidespotRandomization_DisabledRatio; // 0x4570(0xc8)
	struct FConfigurableInt HidespotRandomization_MinimumHidespotPerRoom; // 0x4638(0xc8)
	struct FConfigurableFloat HidespotRandomization_MaximumDistanceBetweenHidespotOfSameRoom; // 0x4700(0xc8)
	struct TMap<enum class ECurrencyType, struct FCurencySettings> CurrencySettings; // 0x47c8(0x50)
	float LoadoutCheatActiveSkillUpgradePercentChance; // 0x4818(0x04)
	struct FShimmerDisplaySettings ShimmerDisplaySettings; // 0x481c(0x34)
	bool bUseDitherForPawnCollisionPenetration; // 0x4850(0x01)
	char pad_4851[0x3]; // 0x4851(0x03)
	float Distance2DForDitherEffect; // 0x4854(0x04)
	float DistanceZForDitherEffect; // 0x4858(0x04)
	float DitherBlendTime; // 0x485c(0x04)
	float PlayerDeadIndicatorDuration; // 0x4860(0x04)
	bool bShowPlayerIndicator; // 0x4864(0x01)
	char pad_4865[0x3]; // 0x4865(0x03)
	float PlayerIndicatorVisibilityCheckDistance; // 0x4868(0x04)
	float PlayerNameVisibilityCheckDistance; // 0x486c(0x04)
	float ObjectiveShowDuration; // 0x4870(0x04)
	float HealthBarKeptVisibleWhenChasedFromNPCDistance; // 0x4874(0x04)
	float TimeForTransitionFadeToBlack; // 0x4878(0x04)
	bool bAlwaysDisplayGotoIcons; // 0x487c(0x01)
	bool bAlwaysDisplayPlayersHealthWidgets; // 0x487d(0x01)
	char pad_487E[0x2]; // 0x487e(0x02)
	float MaxSimulatedMouseRadialValue; // 0x4880(0x04)
	float InventoryCategoryButtonHoldTimeForWheel; // 0x4884(0x04)
	struct TArray<struct FUnalterableBinding> UnalterableBindings; // 0x4888(0x10)
	float UINoiseAccumulatorRampUpMultiplier; // 0x4898(0x04)
	float UINoiseAccumulatorCooldownRate; // 0x489c(0x04)
	float UINoiseBeatDuration; // 0x48a0(0x04)
	float UINoiseSmoothingUpCoeff; // 0x48a4(0x04)
	float UINoiseSmoothingDownCoeff; // 0x48a8(0x04)
	float SubtitleMaxDistance; // 0x48ac(0x04)
	float SubtitleMaxDistanceOccluded; // 0x48b0(0x04)
	float SubtitleOcclusionThreshold; // 0x48b4(0x04)
	float SubtitleObstructionThreshold; // 0x48b8(0x04)
	float SubtitleMinVisibleDuration; // 0x48bc(0x04)
	struct FConfigurableFloat ObjectiveIconDiscoverDistance; // 0x48c0(0xc8)
	struct FConfigurableFloat DiscoveryTimerInitialDelay; // 0x4988(0xc8)
	struct FConfigurableFloat DiscoveryTimerRepetition; // 0x4a50(0xc8)
	struct FConfigurableFloat DiscoveryDistanceIncrease; // 0x4b18(0xc8)
	struct FConfigurableFloat ObjectiveIconLOSDiscoveryMaxRange; // 0x4be0(0xc8)
	float ShowInventoryWheelChangeDuration; // 0x4ca8(0x04)
	float ReviveTransitionFeedbackDuration; // 0x4cac(0x04)
	struct FConfigurableInt NumberOfBonusVariators; // 0x4cb0(0xc8)
	struct FConfigurableInt NumberOfChallengeVariators; // 0x4d78(0xc8)
	struct FConfigurableFloat ChanceOfObstacleVariator; // 0x4e40(0xc8)
	struct FConfigurableFloat ChanceOfRollingGateVariator; // 0x4f08(0xc8)
	struct FConfigurableFloat PercentageOfRollingGatesForVariator; // 0x4fd0(0xc8)
	struct FConfigurableFloat ChanceOfSASVariator; // 0x5098(0xc8)
	float HallucinationVisibilityDistance; // 0x5160(0x04)
	float HallucinationVisibilityHysteresis; // 0x5164(0x04)
	struct FConfigurableInt PusherDrugPsychosisAmount; // 0x5168(0xc8)
	struct FConfigurableFloat PsychosisCooldownDelay; // 0x5230(0xc8)
	struct FConfigurableFloat ProgressivePsychosisCooldownRate; // 0x52f8(0xc8)
	struct FConfigurableFloat PsychosisContinuousGainValue; // 0x53c0(0xc8)
	struct FConfigurableFloat PsychosisContinuousGainDelay; // 0x5488(0xc8)
	int32_t PsychosisAudioEffectsStartThresh; // 0x5550(0x04)
	int32_t PsychosisVisualEffectsStartThresh; // 0x5554(0x04)
	struct FConfigurableInt PsychosisCommunicationEffectStartThresh; // 0x5558(0xc8)
	struct FConfigurableFloat MinimumFullPsychosisInterval; // 0x5620(0xc8)
	struct FConfigurableFloat PsychosisContinuousGainDelayAfterFull; // 0x56e8(0xc8)
	struct FConfigurableInt PsychosisLevelAfterSpectre; // 0x57b0(0xc8)
	float PsychosisProgressiveLSDEffectMinPct; // 0x5878(0x04)
	float PsychosisProgressiveLSDEffectMaxPct; // 0x587c(0x04)
	float PsychosisBoostDuration; // 0x5880(0x04)
	float PsychosisBoostIntensity; // 0x5884(0x04)
	float PsychosisIconEffectsStartThresh; // 0x5888(0x04)
	float PsychosisIconFadeOutStartDistance; // 0x588c(0x04)
	float PsychosisIconFadeOutMaxDistance; // 0x5890(0x04)
	float PsychosisIconFadeDistanceInterval; // 0x5894(0x04)
	bool bAllowNPCSeePlayerInPsychosis; // 0x5898(0x01)
	bool bUseTraversalAnimsForSpectreCrouchUnder; // 0x5899(0x01)
	bool bUseTraversalAnimsForSpectreAtLedge; // 0x589a(0x01)
	char pad_589B[0x1]; // 0x589b(0x01)
	float PsychosisPlayerMovementMaxAcceleration; // 0x589c(0x04)
	float ThrowReach; // 0x58a0(0x04)
	float ThrowGravity; // 0x58a4(0x04)
	float ThrowGravityEaseInStartTime; // 0x58a8(0x04)
	float ThrowGravityEaseInFinishTime; // 0x58ac(0x04)
	float ThrowableAimAssistAdjustmentSpeed; // 0x58b0(0x04)
	float ActiveChargeMax; // 0x58b4(0x04)
	float TrackingFootstepInterval; // 0x58b8(0x04)
	char pad_58BC[0x4]; // 0x58bc(0x04)
	struct TMap<enum class ECustomizationMenuCategory, struct FCustomizationMenuCategoryParams> CustomizationMenuCategoryParams; // 0x58c0(0x50)
	int32_t SmallRoomArea; // 0x5910(0x04)
	int32_t MediumRoomArea; // 0x5914(0x04)
	int32_t LargeRoomArea; // 0x5918(0x04)
	float VoiceWheelRequestQuota; // 0x591c(0x04)
	float VoiceWheelRestoreRate; // 0x5920(0x04)
	float TradeVoiceRequestQuota; // 0x5924(0x04)
	float TradeVoiceRestoreRate; // 0x5928(0x04)
	float InvestigationNotifyHighDuration; // 0x592c(0x04)
	bool bAutoOpenDoorAtEndOfSlowOpen; // 0x5930(0x01)
	char pad_5931[0x3]; // 0x5931(0x03)
	float SlowDoorOpenThresholdRatio; // 0x5934(0x04)
	float BehindDoorAngle; // 0x5938(0x04)
	float NoDoorInteractionWhenBlockingNPC; // 0x593c(0x04)
	float NoDoorInteractionWhenBlockingNPCDistance; // 0x5940(0x04)
	float DoorCenterOffsetTowardOpenDoor; // 0x5944(0x04)
	float DoorCenterAmbiguousZoneSize; // 0x5948(0x04)
	struct FName WaterLocationZParameterName; // 0x594c(0x08)
	float DeathDelayDuration; // 0x5954(0x04)
	bool bNeedPlayerInputToSpectate; // 0x5958(0x01)
	bool bNeedPlayerInputToRespawn; // 0x5959(0x01)
	char pad_595A[0x6]; // 0x595a(0x06)
	struct TMap<enum class EMetaNPCType, int32_t> MetaNPCsUnlockLevels; // 0x5960(0x50)

	struct FIngameItemConfig GetIngameItemConfig(enum class EItemType ItemType); // Function OPP.RBSettings_Gameplay.GetIngameItemConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e00108
};

// Class OPP.RBSettings_GlobalConfigs
// Size: 0x1d0 (Inherited: 0x28)
struct URBSettings_GlobalConfigs : UObject {
	struct FSoftObjectPath GameStructureConfigPath; // 0x28(0x18)
	struct FSoftObjectPath TasksConfigPath; // 0x40(0x18)
	struct FSoftObjectPath PlayerCustomizationConfigPath; // 0x58(0x18)
	struct FSoftObjectPath PlayerCellCustomizationConfigPath; // 0x70(0x18)
	struct FSoftObjectPath CollectibleDocumentsConfigPath; // 0x88(0x18)
	struct FSoftObjectPath PlayerLoadoutConfigPath; // 0xa0(0x18)
	struct TArray<struct FSoftObjectPath> PlayerProgressionDataPaths; // 0xb8(0x10)
	struct FSoftObjectPath NPCArchetypesConfigPath; // 0xc8(0x18)
	struct FSoftObjectPath GlobalUIConfigPath; // 0xe0(0x18)
	struct FSoftObjectPath GlobalAudioConfigPath; // 0xf8(0x18)
	struct FSoftObjectPath GlobalAnimConfigPath; // 0x110(0x18)
	struct FSoftObjectPath PlayerStatsConfigPath; // 0x128(0x18)
	struct FSoftObjectPath AchievementsConfigPath; // 0x140(0x18)
	struct FSoftObjectPath ScoringConfigPath; // 0x158(0x18)
	struct FSoftClassPath DebugMenuClass; // 0x170(0x18)
	struct FSoftClassPath DebugWWWMenuClass; // 0x188(0x18)
	struct FSoftClassPath DefaultPlayerClass; // 0x1a0(0x18)
	struct FSoftClassPath PostProcessUpdateManager; // 0x1b8(0x18)
};

// Class OPP.RBSettings_Rendering
// Size: 0x130 (Inherited: 0x28)
struct URBSettings_Rendering : UObject {
	struct FSoftObjectPath PPSDefault; // 0x28(0x18)
	struct FSoftObjectPath PPSNightVision; // 0x40(0x18)
	struct FSoftObjectPath PPSNightVisionLowBattery; // 0x58(0x18)
	struct FSoftObjectPath PPSNightVisionInterference; // 0x70(0x18)
	struct FSoftObjectPath PPSSpectreProximity; // 0x88(0x18)
	struct FSoftObjectPath PPSPsychosisStep1; // 0xa0(0x18)
	struct FSoftObjectPath PPSPsychosisStep2; // 0xb8(0x18)
	struct FSoftObjectPath PPSPsychosisStep3; // 0xd0(0x18)
	struct FSoftObjectPath PPSInfiniteStamina; // 0xe8(0x18)
	struct FSoftObjectPath PPSExhausted; // 0x100(0x18)
	struct FSoftObjectPath PPSCalibrationScreen; // 0x118(0x18)
};

// Class OPP.RBSettings_Texts
// Size: 0x1880 (Inherited: 0x28)
struct URBSettings_Texts : UObject {
	float InventoryFailUseMessageDuration; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
	struct FText InventoryFull; // 0x30(0x18)
	struct FText CantUsePainKiller; // 0x48(0x18)
	struct FText CantUseItemTypeAnymore; // 0x60(0x18)
	struct FText CantUseBandage; // 0x78(0x18)
	struct FText CantUseSyringe; // 0x90(0x18)
	struct FText NoBatteryToReload; // 0xa8(0x18)
	struct FText CantUseBattery; // 0xc0(0x18)
	struct FText CantUsePsychosisAntidote; // 0xd8(0x18)
	struct FText CantUseQuestItem; // 0xf0(0x18)
	struct FText GenericCantUseRightNow; // 0x108(0x18)
	struct FText GenericCantUseWhileHidden; // 0x120(0x18)
	struct FText CantUseActiveSkillRechargeItem; // 0x138(0x18)
	struct FText CantUseSinceNoRig; // 0x150(0x18)
	float CantTradeInPsychosisMessageDuration; // 0x168(0x04)
	char pad_16C[0x4]; // 0x16c(0x04)
	struct FText CantTradeInPsychosis; // 0x170(0x18)
	struct FText CantTradeWithNoItems; // 0x188(0x18)
	struct FText CantEquipRig; // 0x1a0(0x18)
	struct FText OfferHighJump; // 0x1b8(0x18)
	struct FText OfferingHighJumpGeneric; // 0x1d0(0x18)
	struct FText OfferingHighJumpSpecific; // 0x1e8(0x18)
	struct FText AcceptHighJump; // 0x200(0x18)
	struct FText OfferLongJump; // 0x218(0x18)
	struct FText OfferingLongJumpGeneric; // 0x230(0x18)
	struct FText OfferingLongJumpSpecific; // 0x248(0x18)
	struct FText AcceptLongJump; // 0x260(0x18)
	struct FText BeingHelpedFromKnockedDown; // 0x278(0x18)
	struct FText HelpPlayerFromKnockedDown; // 0x290(0x18)
	struct FText HelpingPlayerFromKnockedDown; // 0x2a8(0x18)
	struct FText BeingRevived; // 0x2c0(0x18)
	struct FText MissingItemForRevive; // 0x2d8(0x18)
	struct FText RevivePlayer; // 0x2f0(0x18)
	struct FText RevivePlayerHasNearbySyringe; // 0x308(0x18)
	struct FText ReviveChatMessage; // 0x320(0x18)
	struct FText RevivingPlayer; // 0x338(0x18)
	struct FText PsychosisPlayerWithAntidote; // 0x350(0x18)
	struct FText MissingItemAntidote; // 0x368(0x18)
	struct FText PsychosisChatMessage; // 0x380(0x18)
	struct FText HelpPlayerFromCoopTrap; // 0x398(0x18)
	struct FText CoopTrapHelpYourself; // 0x3b0(0x18)
	struct FText CoopTrapHelpOther; // 0x3c8(0x18)
	struct FText CoopDoorBashRequiresCoop; // 0x3e0(0x18)
	struct FText CoopOfferTradeGeneric; // 0x3f8(0x18)
	struct FText CoopOfferTradeSpecific; // 0x410(0x18)
	struct FText CoopOnlyAcceptTrade; // 0x428(0x18)
	struct FText CoopTradeOnlyCatchItemInteractionText; // 0x440(0x18)
	struct FText CoopTradeOnlyUseItemInteractionText; // 0x458(0x18)
	struct FText CoopTradeCatchOrUseItemInteractionText; // 0x470(0x18)
	struct FText CoopTradeOnlySwapItemInteractionText; // 0x488(0x18)
	struct FText CoopTradeSwapOrUseItemInteractionText; // 0x4a0(0x18)
	struct FText WakeUp; // 0x4b8(0x18)
	struct FText SavePlayerFromGroundAndPound; // 0x4d0(0x18)
	struct FText SavePlayerFromFatality; // 0x4e8(0x18)
	struct FText Shove; // 0x500(0x18)
	struct FText Activate; // 0x518(0x18)
	struct FText DropLargeObject; // 0x530(0x18)
	struct FText AimingThrowableMouse; // 0x548(0x18)
	struct FText AimingThrowableGamepad; // 0x560(0x18)
	struct FText NoItemCounterGroundAndPoundText; // 0x578(0x18)
	struct FText ThrowableCounterGroundAndPoundText; // 0x590(0x18)
	struct FText ExitHidespot; // 0x5a8(0x18)
	struct FText PeekFromHidespot; // 0x5c0(0x18)
	struct FText HidespotDenyInteractionLargeObject; // 0x5d8(0x18)
	struct FText OnlyPickupItemInteractionText; // 0x5f0(0x18)
	struct FText PickupOrUseItemInteractionText; // 0x608(0x18)
	struct FText OnlySwapItemInteractionText; // 0x620(0x18)
	struct FText SwapOrUseItemInteractionText; // 0x638(0x18)
	struct FText OnlyUseItemInteractionText; // 0x650(0x18)
	struct FText LoadoutDispenserEquipText; // 0x668(0x18)
	struct FText LoadoutDispenserReloadText; // 0x680(0x18)
	struct FText DoorBashBlocked; // 0x698(0x18)
	struct FText CantOperateDoorWithLargeObject; // 0x6b0(0x18)
	struct FText ForcedDoorSlowOpenInteractionText; // 0x6c8(0x18)
	struct FText ForcedDoorSlowOpenInteractingKeyboardText; // 0x6e0(0x18)
	struct FText ForcedDoorSlowOpenInteractingGamepadText; // 0x6f8(0x18)
	struct FText CantOperateGarageDoorWithLargeObject; // 0x710(0x18)
	struct FText HackPanelLockpickInteract; // 0x728(0x18)
	struct FText HackPanelLockpickUse; // 0x740(0x18)
	struct FText HackPanelMasterKeyInteract; // 0x758(0x18)
	struct FText HackPanelMasterKeyUse; // 0x770(0x18)
	struct FText HackPanelNoItems; // 0x788(0x18)
	struct FText HackPanelInteracting; // 0x7a0(0x18)
	struct FText PressurePanelOperating; // 0x7b8(0x18)
	struct FText PressurePanelLocked; // 0x7d0(0x18)
	struct FText CorpseSearchPressInput; // 0x7e8(0x18)
	struct FText CorpseSearchMoveCursorKBM; // 0x800(0x18)
	struct FText CorpseSearchMoveCursorGamepad; // 0x818(0x18)
	struct FText ZoneTimingPanelDoInteraction; // 0x830(0x18)
	struct FText TortureDeviceTemporaryDamage; // 0x848(0x18)
	struct FText TortureDeviceButtonPressText; // 0x860(0x18)
	struct FText NotOwnCellInteractionDenied; // 0x878(0x18)
	float MissingItemsInCartMessageDuration; // 0x890(0x04)
	char pad_894[0x4]; // 0x894(0x04)
	struct FText WatchObjectiveTrackingTutorial; // 0x898(0x18)
	struct FText DoorBashTutorial; // 0x8b0(0x18)
	struct FText DoorBashInteraction; // 0x8c8(0x18)
	struct FText PuzzleRoomTutorial; // 0x8e0(0x18)
	struct FText InventorySelectionFailGeneric; // 0x8f8(0x18)
	struct FText InventorySelectionFailLargePickup; // 0x910(0x18)
	struct FText RandomMissionDisplayName; // 0x928(0x18)
	struct FText RegroupNoObjectiveStarted; // 0x940(0x18)
	struct FOnlineErrorTexts OnlineErrorTexts; // 0x958(0xa18)
	struct FText TasksDaysExpiration; // 0x1370(0x18)
	struct FText TasksHoursExpiration; // 0x1388(0x18)
	struct FText TasksMinutesExpiration; // 0x13a0(0x18)
	struct FText TasksSoonExpiration; // 0x13b8(0x18)
	struct FText TasksDetailledExpiration; // 0x13d0(0x18)
	struct FText TasksCounterProgress; // 0x13e8(0x18)
	struct FText TasksObjectiveProgress; // 0x1400(0x18)
	struct FPresenceTexts PresenceTexts; // 0x1418(0x120)
	struct FTalkWheelTexts TalkWheelTexts; // 0x1538(0x288)
	struct FText InvestigationDoneDefaultText; // 0x17c0(0x18)
	struct FText GoToSpectator; // 0x17d8(0x18)
	struct FText SoloRespawn; // 0x17f0(0x18)
	struct FText SoloRespawnLastLife; // 0x1808(0x18)
	struct FText SoloRespawnInfiniteLives; // 0x1820(0x18)
	struct FText OnValueText; // 0x1838(0x18)
	struct FText OffValueText; // 0x1850(0x18)
	struct FText NotApplicableValueText; // 0x1868(0x18)
};

// Class OPP.RBSimpleInteractionComponent
// Size: 0x760 (Inherited: 0x660)
struct URBSimpleInteractionComponent : URBBareBonesInteractionComponent {
	struct URBGhostAnimInstance* GhostAnimationInstanceClass; // 0x658(0x08)
	struct FInteractionData PlayerInteractionData; // 0x660(0x50)
	struct FInteractionData NPCInteractionData; // 0x6b0(0x50)
	enum class ESpecialMove DefaultSpecialMove; // 0x700(0x01)
	bool bIgnoreCollisionWhileInteracting; // 0x701(0x01)
	bool bIgnoreCollisionWithThisActorWhileInteracting; // 0x702(0x01)
	bool bTestPhysicalClearance; // 0x703(0x01)
	bool bTestInteractionAngle; // 0x704(0x01)
	bool bCanBeInteractedWhileMovingLargeObject; // 0x705(0x01)
	bool bDropLargeObjectOnInteraction; // 0x706(0x01)
	struct FVector2D CameraYawLimit; // 0x708(0x08)
	struct FVector2D CameraPitchLimit; // 0x710(0x08)
	bool bUseAnimAnchorForPosition; // 0x718(0x01)
	bool bUseParentActorForAnchorReference; // 0x719(0x01)
	char bDisplayTutorial : 1; // 0x71a(0x01)
	struct FHUDTutorialTextData tutorialData; // 0x720(0x38)
	char pad_759_1 : 7; // 0x759(0x01)
	char pad_75A[0x6]; // 0x75a(0x06)
};

// Class OPP.RBSimpleObjectiveActor
// Size: 0x668 (Inherited: 0x658)
struct ARBSimpleObjectiveActor : ARBOperatable {
	char pad_658[0x8]; // 0x658(0x08)
	bool bIsInWorld; // 0x660(0x01)
	char pad_661[0x7]; // 0x661(0x07)

	void OnRep_IsInWorld(); // Function OPP.RBSimpleObjectiveActor.OnRep_IsInWorld // (Final|Native|Public) // @ game+0x1e06704
};

// Class OPP.RBSimpleObjectiveCoordinator
// Size: 0x1640 (Inherited: 0xba8)
struct ARBSimpleObjectiveCoordinator : ARBBaseObjectiveCoordinator {
	enum class ESimpleObjectiveType SimpleObjectiveType; // 0xba8(0x01)
	char pad_BA9[0x7]; // 0xba9(0x07)
	struct TArray<struct TSoftObjectPtr<AActor>> TargetTriggers; // 0xbb0(0x10)
	bool bOnlyOneObjectivePerLinkedOperatable; // 0xbc0(0x01)
	bool bOnlyActivateObjectivesWhenStarted; // 0xbc1(0x01)
	char pad_BC2[0x6]; // 0xbc2(0x06)
	struct FObjectiveUISettings ObjectiveUISettings; // 0xbc8(0xa50)
	struct FText SingleObjectiveCompletedTextChatMessage; // 0x1618(0x18)
	struct TArray<struct AActor*> DelayedActivatedTriggers; // 0x1630(0x10)

	void OnUsedOnObject(struct ARBPawn* interactor, struct ARBLargePickup* largePickup, struct URBLargeObjectInteractionPanelComponent* panel); // Function OPP.RBSimpleObjectiveCoordinator.OnUsedOnObject // (Final|Native|Protected) // @ game+0x1e06dd4
	void OnTriggeredVolumeEvent(struct URBPlayerTriggerComponent* Trigger); // Function OPP.RBSimpleObjectiveCoordinator.OnTriggeredVolumeEvent // (Final|Native|Protected) // @ game+0x1e06d54
	void OnTriggered(bool IsOn, struct ARBTriggerable* triggerable); // Function OPP.RBSimpleObjectiveCoordinator.OnTriggered // (Final|Native|Protected) // @ game+0x1e06c90
	void OnTargetTriggerBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBSimpleObjectiveCoordinator.OnTargetTriggerBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x1e06aa4
	void OnPlayerSimpleDoAction(struct ARBPawn* Player, struct URBInteractibleComponent* Component); // Function OPP.RBSimpleObjectiveCoordinator.OnPlayerSimpleDoAction // (Final|Native|Protected) // @ game+0x1e06624
	void OnPlayerDoAction(struct ARBPawn* Player, struct ARBInteractible* interactible); // Function OPP.RBSimpleObjectiveCoordinator.OnPlayerDoAction // (Final|Native|Protected) // @ game+0x1df2d50
	void OnPlayerCompletedOperatable(bool IsOn, struct ARBOperatable* operatable); // Function OPP.RBSimpleObjectiveCoordinator.OnPlayerCompletedOperatable // (Final|Native|Protected) // @ game+0x1e06310
	void Multicast_ShowSimpleObjectiveTutorial(struct ARBPawn* Player, struct URBSimpleInteractionComponent* simpleComponent); // Function OPP.RBSimpleObjectiveCoordinator.Multicast_ShowSimpleObjectiveTutorial // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1e05fe0
	void Multicast_OnSimpleDoActionCompleted(struct ARBPawn* Player, struct URBInteractibleComponent* Component); // Function OPP.RBSimpleObjectiveCoordinator.Multicast_OnSimpleDoActionCompleted // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1e05f18
};

// Class OPP.RBSinglePlayerHelperComponent
// Size: 0x240 (Inherited: 0x220)
struct URBSinglePlayerHelperComponent : USceneComponent {
	struct AActor* ReplacementActorClass; // 0x218(0x08)
	bool bToggleActorOnSinglePlayer; // 0x220(0x01)
	bool bInverseToggle; // 0x221(0x01)
	bool bUseReplacementActorInMulti; // 0x222(0x01)
	bool bIsInSinglePlayer; // 0x223(0x01)
	struct FMulticastInlineDelegate OnSinglePlayerChangedEvent; // 0x228(0x10)
	struct AActor* ReplacementActor_Server; // 0x238(0x08)
};

// Class OPP.RBSlideDownVolume
// Size: 0x2a0 (Inherited: 0x280)
struct ARBSlideDownVolume : AVolume {
	float SlideDownSpeed; // 0x280(0x04)
	char pad_284[0x4]; // 0x284(0x04)
	struct ARBSplineActor* SlideDownSpline; // 0x288(0x08)
	struct UAkAudioEvent* SlideDownStartEvent; // 0x290(0x08)
	struct UAkAudioEvent* SlideDownStopEvent; // 0x298(0x08)

	void OnPlayerEntered(struct ARBPlayer* Player); // Function OPP.RBSlideDownVolume.OnPlayerEntered // (Final|Native|Public) // @ game+0x1e06494
	void OnBrushComponentBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBSlideDownVolume.OnBrushComponentBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0x1e060a8
};

// Class OPP.RBSlidingLock
// Size: 0x5f8 (Inherited: 0x4c0)
struct ARBSlidingLock : ARBInteractible {
	char pad_4C0[0x8]; // 0x4c0(0x08)
	enum class EDoorLockType LockType; // 0x4c8(0x01)
	char pad_4C9[0x3]; // 0x4c9(0x03)
	struct FVector FrontDoorOffset; // 0x4cc(0x0c)
	struct FVector BackDoorOffset; // 0x4d8(0x0c)
	struct FRotator FrontRotationOffset; // 0x4e4(0x0c)
	struct FRotator BackRotationOffset; // 0x4f0(0x0c)
	bool bShouldAttachToDoor; // 0x4fc(0x01)
	bool bLocksOnBothSide; // 0x4fd(0x01)
	bool bDoubleDoorOnly; // 0x4fe(0x01)
	bool bCanBeDestroyedByKicks; // 0x4ff(0x01)
	bool bUseDoorForTransform; // 0x500(0x01)
	bool bCanBeUsedByBots; // 0x501(0x01)
	char pad_502[0x6]; // 0x502(0x06)
	struct AActor* SinglePlayerReplacementActorClass; // 0x508(0x08)
	bool bSinglePlayerReplacementRemoveDoorFrame; // 0x510(0x01)
	char pad_511[0x3]; // 0x511(0x03)
	float ExtraHitPointsOnDoor; // 0x514(0x04)
	bool bAnimatesWithInteractor; // 0x518(0x01)
	char pad_519[0x7]; // 0x519(0x07)
	struct UAnimSequenceBase* InverseAnimSequence; // 0x520(0x08)
	struct UAnimSequenceBase* FlippedAnimSequence; // 0x528(0x08)
	struct UAnimSequenceBase* FlippedInverseAnimSequence; // 0x530(0x08)
	struct FText InverseInteractionText; // 0x538(0x18)
	struct FText UnlockAndOpenInteractionText; // 0x550(0x18)
	struct UStaticMeshComponent* LockBar; // 0x568(0x08)
	struct URBOutlineComponent* OutlineComponent; // 0x570(0x08)
	struct ARBDoor* DoorOwner; // 0x578(0x08)
	bool bLockFromFront; // 0x580(0x01)
	char pad_581[0x7]; // 0x581(0x07)
	struct FScheduledBool bIsLocked; // 0x588(0x70)

	void OnRep_Islocked(); // Function OPP.RBSlidingLock.OnRep_Islocked // (Final|Native|Protected) // @ game+0x1e06718
	void IsLockedChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBSlidingLock.IsLockedChangedCallback // (Final|Native|Protected) // @ game+0x1e05d5c
	void BP_SetLocked(bool bLocked); // Function OPP.RBSlidingLock.BP_SetLocked // (Final|Native|Public|BlueprintCallable) // @ game+0x1e05830
	void BP_PostDoorInitialization(); // Function OPP.RBSlidingLock.BP_PostDoorInitialization // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	struct FTransform BP_OverrideEditorCompTranform(struct FName compName, bool bLocked, struct FTransform& Transform); // Function OPP.RBSlidingLock.BP_OverrideEditorCompTranform // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnUnlock(); // Function OPP.RBSlidingLock.BP_OnUnlock // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnLock(); // Function OPP.RBSlidingLock.BP_OnLock // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnDoorOwnerChanged(); // Function OPP.RBSlidingLock.BP_OnDoorOwnerChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnDoorDestroyed(); // Function OPP.RBSlidingLock.BP_OnDoorDestroyed // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	bool BP_IsLocked(); // Function OPP.RBSlidingLock.BP_IsLocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05818
	bool BP_IsInFront(); // Function OPP.RBSlidingLock.BP_IsInFront // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05800
	void BP_ApplyAnimatedTransform(float curveValue, struct ARBPawn* interactorPawn); // Function OPP.RBSlidingLock.BP_ApplyAnimatedTransform // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBSocialMenuEntry
// Size: 0x460 (Inherited: 0x268)
struct URBSocialMenuEntry : URBUserWidget {
	struct FMulticastInlineDelegate OnSocialMenuEntryLoadStateChanged; // 0x268(0x10)
	struct FMulticastInlineDelegate OnSocialMenuEntryActionRequested; // 0x278(0x10)
	struct FMulticastInlineDelegate OnSocialMenuEntryCustomizationUpdated; // 0x288(0x10)
	char pad_298[0x160]; // 0x298(0x160)
	struct ARBPlayerState* RBPlayerState; // 0x3f8(0x08)
	char pad_400[0x58]; // 0x400(0x58)
	struct UTexture2D* PlayerIcon; // 0x458(0x08)

	void ShowCharacter(); // Function OPP.RBSocialMenuEntry.ShowCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x1e071f8
	bool ShouldDisplayPresence(); // Function OPP.RBSocialMenuEntry.ShouldDisplayPresence // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e071d8
	void SetVoiceChatVolume(float Volume); // Function OPP.RBSocialMenuEntry.SetVoiceChatVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x1e07050
	void SetVoiceChatOutputVolume(float Volume); // Function OPP.RBSocialMenuEntry.SetVoiceChatOutputVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x1e06fdc
	void Setup(struct URBSocialMenuManager* Parent, struct FRBSocialMenuEntryDetails& entryDetails); // Function OPP.RBSocialMenuEntry.Setup // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1e070d4
	bool RequiresInvite(); // Function OPP.RBSocialMenuEntry.RequiresInvite // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e06fbc
	void RequestOpenContextualMenu(); // Function OPP.RBSocialMenuEntry.RequestOpenContextualMenu // (Final|Native|Public|BlueprintCallable) // @ game+0x1e06f50
	void RequestAction(enum class ERBSocialMenuEntryAction action); // Function OPP.RBSocialMenuEntry.RequestAction // (Final|Native|Public|BlueprintCallable) // @ game+0x1e06ed0
	void OnSocialMenuPartyInviteWidgetVisibilityUpdated(bool bVisible); // Function OPP.RBSocialMenuEntry.OnSocialMenuPartyInviteWidgetVisibilityUpdated // (Final|Native|Private) // @ game+0x1e06a1c
	void OnSocialMenuEntryActionStarted(struct URBSocialMenuEntry* Entry, enum class ERBSocialMenuEntryAction action); // Function OPP.RBSocialMenuEntry.OnSocialMenuEntryActionStarted // (Final|Native|Private) // @ game+0x1e068a8
	void OnSocialMenuEntryActionCompleted(struct URBSocialMenuEntry* Entry, enum class ERBSocialMenuEntryAction action); // Function OPP.RBSocialMenuEntry.OnSocialMenuEntryActionCompleted // (Final|Native|Private) // @ game+0x1e06734
	void OnPlayerPartyStateUpdated(struct ARBPlayerState* RBPlayerState); // Function OPP.RBSocialMenuEntry.OnPlayerPartyStateUpdated // (Final|Native|Private) // @ game+0x1e065a4
	void OnPlayerLevelChanged(); // Function OPP.RBSocialMenuEntry.OnPlayerLevelChanged // (Final|Native|Private) // @ game+0x1e06590
	void OnPlayerLeaving(enum class EPlayerLeaveTarget Target); // Function OPP.RBSocialMenuEntry.OnPlayerLeaving // (Final|Native|Private) // @ game+0x1e06514
	void OnPlayerCustomizationUpdated(struct FRBPlayerCustomizationInfo& customizationInfo); // Function OPP.RBSocialMenuEntry.OnPlayerCustomizationUpdated // (Final|Native|Private|HasOutParms) // @ game+0x1e063e8
	void OnCurrentLoadoutChanged(); // Function OPP.RBSocialMenuEntry.OnCurrentLoadoutChanged // (Final|Native|Private) // @ game+0x1e0627c
	bool IsVoiceChatEnabled(); // Function OPP.RBSocialMenuEntry.IsVoiceChatEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05e90
	bool IsPartyOwner(); // Function OPP.RBSocialMenuEntry.IsPartyOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05e2c
	bool IsPartyInviteWidgetShown(); // Function OPP.RBSocialMenuEntry.IsPartyInviteWidgetShown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05e14
	bool IsOperationPending(); // Function OPP.RBSocialMenuEntry.IsOperationPending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05dfc
	bool IsOnline(); // Function OPP.RBSocialMenuEntry.IsOnline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05ddc
	bool IsJoinable(); // Function OPP.RBSocialMenuEntry.IsJoinable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05d38
	bool IsInYourParty(); // Function OPP.RBSocialMenuEntry.IsInYourParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05d14
	bool IsInYourGame(); // Function OPP.RBSocialMenuEntry.IsInYourGame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05cf8
	bool IsInGame(); // Function OPP.RBSocialMenuEntry.IsInGame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05cd4
	bool IsCompatibleBuild(); // Function OPP.RBSocialMenuEntry.IsCompatibleBuild // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05c70
	bool IsBlocked(); // Function OPP.RBSocialMenuEntry.IsBlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05bec
	void HideCharacter(); // Function OPP.RBSocialMenuEntry.HideCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x1e05bbc
	bool HasPlayerLevel(); // Function OPP.RBSocialMenuEntry.HasPlayerLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05b90
	bool HasFlag(enum class ERBSocialMenuEntryFlag Flag); // Function OPP.RBSocialMenuEntry.HasFlag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05afc
	float GetVoiceChatVolume(); // Function OPP.RBSocialMenuEntry.GetVoiceChatVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05ad4
	float GetVoiceChatOutputVolume(); // Function OPP.RBSocialMenuEntry.GetVoiceChatOutputVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05aac
	enum class ERBSocialMenuEntryListType GetSocialMenuEntryListType(); // Function OPP.RBSocialMenuEntry.GetSocialMenuEntryListType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d74d84
	int32_t GetSessionMemberCount(); // Function OPP.RBSocialMenuEntry.GetSessionMemberCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05a8c
	int32_t GetSessionMaxMemberCount(); // Function OPP.RBSocialMenuEntry.GetSessionMaxMemberCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05a74
	enum class EActiveSkillType GetSelectedActiveSkill(); // Function OPP.RBSocialMenuEntry.GetSelectedActiveSkill // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05a50
	struct FProfileId GetProfileId(); // Function OPP.RBSocialMenuEntry.GetProfileId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05a34
	struct FText GetPresenceText(); // Function OPP.RBSocialMenuEntry.GetPresenceText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e059f8
	int32_t GetPlayerLevel(); // Function OPP.RBSocialMenuEntry.GetPlayerLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e059cc
	struct UTexture2D* GetPlayerIcon(); // Function OPP.RBSocialMenuEntry.GetPlayerIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e059b4
	enum class EProfilePlatform GetPlatform(); // Function OPP.RBSocialMenuEntry.GetPlatform // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05994
	struct FString GetName(); // Function OPP.RBSocialMenuEntry.GetName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05978
	int32_t GetFlags(); // Function OPP.RBSocialMenuEntry.GetFlags // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d3a7bc
	struct TArray<enum class ERBSocialMenuEntryAction> GetAvailableActions(); // Function OPP.RBSocialMenuEntry.GetAvailableActions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05934
	void Event_Refresh(); // Function OPP.RBSocialMenuEntry.Event_Refresh // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OpenContextualMenu(); // Function OPP.RBSocialMenuEntry.Event_OpenContextualMenu // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_CloseContextualMenu(); // Function OPP.RBSocialMenuEntry.Event_CloseContextualMenu // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_ActionRequested(); // Function OPP.RBSocialMenuEntry.Event_ActionRequested // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	bool CanUpdateVoiceChatVolume(); // Function OPP.RBSocialMenuEntry.CanUpdateVoiceChatVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e05910
	bool CanSendPartyInvite(); // Function OPP.RBSocialMenuEntry.CanSendPartyInvite // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e058ec
	bool CanOpenContextualMenu(); // Function OPP.RBSocialMenuEntry.CanOpenContextualMenu // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e058b0
};

// Class OPP.RBSocialMenuEntryContextualMenu
// Size: 0x270 (Inherited: 0x268)
struct URBSocialMenuEntryContextualMenu : URBUserWidget {
	struct URBSocialMenuEntry* AssociatedEntry; // 0x268(0x08)

	void Setup(struct URBSocialMenuEntry* AssociatedEntry); // Function OPP.RBSocialMenuEntryContextualMenu.Setup // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0b034
	void RequestAction(enum class ERBSocialMenuEntryAction action); // Function OPP.RBSocialMenuEntryContextualMenu.RequestAction // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0ad30
	struct TArray<enum class ERBSocialMenuEntryAction> GetAvailableActions(); // Function OPP.RBSocialMenuEntryContextualMenu.GetAvailableActions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e09f54
	struct URBSocialMenuEntry* GetAssociatedEntry(); // Function OPP.RBSocialMenuEntryContextualMenu.GetAssociatedEntry // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e09f3c
	void Event_Refresh(); // Function OPP.RBSocialMenuEntryContextualMenu.Event_Refresh // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBSocialMenuEntryListWidget
// Size: 0x368 (Inherited: 0x268)
struct URBSocialMenuEntryListWidget : URBUserWidget {
	bool bEnableSingleCharacterDisplay; // 0x268(0x01)
	char pad_269[0x3]; // 0x269(0x03)
	int32_t NumRows; // 0x26c(0x04)
	int32_t NumColumns; // 0x270(0x04)
	enum class ERBSocialMenuEntryListType ListType; // 0x274(0x01)
	char pad_275[0x3]; // 0x275(0x03)
	int32_t CurrentPageIndex; // 0x278(0x04)
	int32_t NumPages; // 0x27c(0x04)
	struct URBSocialMenuEntry* EntryClass; // 0x280(0x08)
	struct URBUserWidget* EmptyEntryClass; // 0x288(0x08)
	char pad_290[0x98]; // 0x290(0x98)
	struct TArray<struct URBSocialMenuEntry*> Entries; // 0x328(0x10)
	struct TArray<struct URBSocialMenuEntry*> VisibleEntries; // 0x338(0x10)
	char pad_348[0x8]; // 0x348(0x08)
	struct TArray<struct URBSocialMenuEntry*> EntriesPendingRemoval; // 0x350(0x10)
	char pad_360[0x1]; // 0x360(0x01)
	enum class ERBSocialMenuEntryFilter Filter; // 0x361(0x01)
	char pad_362[0x6]; // 0x362(0x06)

	void SetFilter(enum class ERBSocialMenuEntryFilter Filter); // Function OPP.RBSocialMenuEntryListWidget.SetFilter // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0a624
	void PreviousPage(); // Function OPP.RBSocialMenuEntryListWidget.PreviousPage // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0acec
	void OnPlayerLeftGame(struct FUniqueNetIdRepl UniqueId); // Function OPP.RBSocialMenuEntryListWidget.OnPlayerLeftGame // (Final|Native|Private) // @ game+0x1e0a880
	void OnPlayerJoinedGame(struct FUniqueNetIdRepl UniqueId); // Function OPP.RBSocialMenuEntryListWidget.OnPlayerJoinedGame // (Final|Native|Private) // @ game+0x1e0a6a8
	void OnFilterChanged(enum class ERBSocialMenuEntryFilter Filter); // Function OPP.RBSocialMenuEntryListWidget.OnFilterChanged // (Final|Native|Private) // @ game+0x1e0a624
	void OnEntryActionRequested(struct URBSocialMenuEntry* Entry, enum class ERBSocialMenuEntryAction action); // Function OPP.RBSocialMenuEntryListWidget.OnEntryActionRequested // (Final|Native|Private) // @ game+0x1e0a49c
	void NextPage(); // Function OPP.RBSocialMenuEntryListWidget.NextPage // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0a46c
	bool IsOperationPending(); // Function OPP.RBSocialMenuEntryListWidget.IsOperationPending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0a2a0
	bool IsEmpty(); // Function OPP.RBSocialMenuEntryListWidget.IsEmpty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0a268
	bool IsDataPending(); // Function OPP.RBSocialMenuEntryListWidget.IsDataPending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0a238
	enum class ERBSocialMenuEntryFilter GetFilter(); // Function OPP.RBSocialMenuEntryListWidget.GetFilter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e09ff4
	void Event_UpdateEntry(struct URBUserWidget* Entry, int32_t column, int32_t row); // Function OPP.RBSocialMenuEntryListWidget.Event_UpdateEntry // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_RemoveEntry(struct URBUserWidget* Entry); // Function OPP.RBSocialMenuEntryListWidget.Event_RemoveEntry // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnEmptyStateChanged(bool bIsEmpty); // Function OPP.RBSocialMenuEntryListWidget.Event_OnEmptyStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnDataPending(bool bIsDataPending); // Function OPP.RBSocialMenuEntryListWidget.Event_OnDataPending // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_Clear(); // Function OPP.RBSocialMenuEntryListWidget.Event_Clear // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Deactivate(); // Function OPP.RBSocialMenuEntryListWidget.Deactivate // (Final|Native|Public|BlueprintCallable) // @ game+0x1e09f14
	void Activate(struct URBSocialMenuManager* Parent); // Function OPP.RBSocialMenuEntryListWidget.Activate // (Final|Native|Public|BlueprintCallable) // @ game+0x1e09d2c
};

// Class OPP.RBSocialMenuManager
// Size: 0x138 (Inherited: 0x28)
struct URBSocialMenuManager : UObject {
	struct FMulticastInlineDelegate OnSocialMenuEntryActionStarted; // 0x28(0x10)
	struct FMulticastInlineDelegate OnSocialMenuEntryActionCompleted; // 0x38(0x10)
	struct FMulticastInlineDelegate OnSocialMenuPartyInviteWidgetVisibilityUpdated; // 0x48(0x10)
	struct FMulticastInlineDelegate OnFilterChanged; // 0x58(0x10)
	char pad_68[0x8]; // 0x68(0x08)
	struct UAkAudioEvent* NotificationSoundEvent; // 0x70(0x08)
	struct URBReportPlayerMenu* ReportPlayerMenuClass; // 0x78(0x08)
	char pad_80[0x98]; // 0x80(0x98)
	struct URBSocialMenuEntry* ActiveContextualMenuEntry; // 0x118(0x08)
	char pad_120[0x8]; // 0x120(0x08)
	struct URBSocialMenuEntry* ShownCharacterEntry; // 0x128(0x08)
	char pad_130[0x8]; // 0x130(0x08)

	bool ShouldEnableFindFriendMenuOption(); // Function OPP.RBSocialMenuManager.ShouldEnableFindFriendMenuOption // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0b0d4
	void SetFilter(enum class ERBSocialMenuEntryFilter Filter); // Function OPP.RBSocialMenuManager.SetFilter // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0ae68
	void OpenPartyInviteWidget(); // Function OPP.RBSocialMenuManager.OpenPartyInviteWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0abdc
	void OnFilterChanged__DelegateSignature(enum class ERBSocialMenuEntryFilter Filter); // DelegateFunction OPP.RBSocialMenuManager.OnFilterChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x201e6d4
	bool IsPartyInviteWidgetShown(); // Function OPP.RBSocialMenuManager.IsPartyInviteWidgetShown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0a2ec
	bool IsCrossplayEnabled(); // Function OPP.RBSocialMenuManager.IsCrossplayEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0a1a8
	bool HasPendingFriendRequest(); // Function OPP.RBSocialMenuManager.HasPendingFriendRequest // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0a174
	bool HasContextualMenuOpen(); // Function OPP.RBSocialMenuManager.HasContextualMenuOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0a158
	enum class ERBSocialMenuEntryFilter GetFilter(); // Function OPP.RBSocialMenuManager.GetFilter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0a00c
	void ClosePartyInviteWidget(); // Function OPP.RBSocialMenuManager.ClosePartyInviteWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x1e09f00
	void CloseContextualMenu(); // Function OPP.RBSocialMenuManager.CloseContextualMenu // (Final|Native|Public|BlueprintCallable) // @ game+0x1e09eec
};

// Class OPP.RBSocialMenuPartyWidget
// Size: 0x348 (Inherited: 0x268)
struct URBSocialMenuPartyWidget : URBUserWidget {
	struct URBSocialMenuEntry* SelfEntryClass; // 0x268(0x08)
	struct URBSocialMenuEntry* EntryClass; // 0x270(0x08)
	struct URBSocialMenuEntry* EmptyEntryClass; // 0x278(0x08)
	bool bManageSceneActor; // 0x280(0x01)
	char pad_281[0x87]; // 0x281(0x87)
	struct TArray<struct URBSocialMenuEntry*> Entries; // 0x308(0x10)
	char pad_318[0x8]; // 0x318(0x08)
	struct TArray<struct URBSocialMenuEntry*> EntriesPendingRemoval; // 0x320(0x10)
	char pad_330[0x18]; // 0x330(0x18)

	bool ShouldShowPartyOptions(); // Function OPP.RBSocialMenuPartyWidget.ShouldShowPartyOptions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0b10c
	bool ShouldDisplayCrossplaySetting(); // Function OPP.RBSocialMenuPartyWidget.ShouldDisplayCrossplaySetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1db29a0
	void SetPartyPrivacy(enum class EPartyPrivacy privacy); // Function OPP.RBSocialMenuPartyWidget.SetPartyPrivacy // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0af80
	void SetPartyInviteFilter(int32_t PartyInviteFilter); // Function OPP.RBSocialMenuPartyWidget.SetPartyInviteFilter // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0aee4
	void SetAllowPartyMemberInvites(bool bAllowPartyMemberInvites); // Function OPP.RBSocialMenuPartyWidget.SetAllowPartyMemberInvites // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0adb0
	void OnSocialMenuEntryCustomizationUpdated(struct URBSocialMenuEntry* Entry); // Function OPP.RBSocialMenuPartyWidget.OnSocialMenuEntryCustomizationUpdated // (Final|Native|Private) // @ game+0x1e0ab60
	void OnSocialMenuEntryActionStarted(struct URBSocialMenuEntry* Entry, enum class ERBSocialMenuEntryAction action); // Function OPP.RBSocialMenuPartyWidget.OnSocialMenuEntryActionStarted // (Final|Native|Private) // @ game+0x1e0aaa0
	void OnSocialMenuEntryActionCompleted(struct URBSocialMenuEntry* Entry, enum class ERBSocialMenuEntryAction action); // Function OPP.RBSocialMenuPartyWidget.OnSocialMenuEntryActionCompleted // (Final|Native|Private) // @ game+0x1e0a9e0
	void OnPlayerLeftGame(struct FUniqueNetIdRepl UniqueId); // Function OPP.RBSocialMenuPartyWidget.OnPlayerLeftGame // (Final|Native|Private) // @ game+0x1e0a930
	void OnPlayerLeaving(enum class EPlayerLeaveTarget Target); // Function OPP.RBSocialMenuPartyWidget.OnPlayerLeaving // (Final|Native|Private) // @ game+0x1e0a808
	void OnPlayerJoinedGame(struct FUniqueNetIdRepl UniqueId); // Function OPP.RBSocialMenuPartyWidget.OnPlayerJoinedGame // (Final|Native|Private) // @ game+0x1e0a758
	void OnEntryActionRequested(struct URBSocialMenuEntry* Entry, enum class ERBSocialMenuEntryAction action); // Function OPP.RBSocialMenuPartyWidget.OnEntryActionRequested // (Final|Native|Private) // @ game+0x1e0a560
	void LeaveParty(); // Function OPP.RBSocialMenuPartyWidget.LeaveParty // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0a454
	bool IsPartyOwner(); // Function OPP.RBSocialMenuPartyWidget.IsPartyOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0a304
	bool IsOperationPending(); // Function OPP.RBSocialMenuPartyWidget.IsOperationPending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0a2cc
	bool IsEmpty(); // Function OPP.RBSocialMenuPartyWidget.IsEmpty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0a284
	bool IsDataPending(); // Function OPP.RBSocialMenuPartyWidget.IsDataPending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0a250
	bool IsCrossplayEnabled(); // Function OPP.RBSocialMenuPartyWidget.IsCrossplayEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0a1f0
	enum class EPartyPrivacy GetPartyPrivacy(); // Function OPP.RBSocialMenuPartyWidget.GetPartyPrivacy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0a0cc
	int32_t GetPartyInviteFilter(); // Function OPP.RBSocialMenuPartyWidget.GetPartyInviteFilter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0a0b4
	void Event_UpdateEntry(struct URBUserWidget* Entry, int32_t column, int32_t row); // Function OPP.RBSocialMenuPartyWidget.Event_UpdateEntry // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_RemoveEntry(struct URBUserWidget* Entry); // Function OPP.RBSocialMenuPartyWidget.Event_RemoveEntry // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_RefreshPartyOptions(); // Function OPP.RBSocialMenuPartyWidget.Event_RefreshPartyOptions // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnDataPending(bool bIsDataPending); // Function OPP.RBSocialMenuPartyWidget.Event_OnDataPending // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_EntriesUpdated(); // Function OPP.RBSocialMenuPartyWidget.Event_EntriesUpdated // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_Clear(); // Function OPP.RBSocialMenuPartyWidget.Event_Clear // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Deactivate(); // Function OPP.RBSocialMenuPartyWidget.Deactivate // (Final|Native|Public|BlueprintCallable) // @ game+0x1e09f28
	bool CanLeaveParty(); // Function OPP.RBSocialMenuPartyWidget.CanLeaveParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e09ed4
	bool AllowPartyMemberInvites(); // Function OPP.RBSocialMenuPartyWidget.AllowPartyMemberInvites // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e09e2c
	void Activate(struct URBSocialMenuManager* Parent); // Function OPP.RBSocialMenuPartyWidget.Activate // (Final|Native|Public|BlueprintCallable) // @ game+0x1e09dac
};

// Class OPP.RBSocialMenuSceneActor
// Size: 0x2d8 (Inherited: 0x248)
struct ARBSocialMenuSceneActor : ARBClientOnlyActor {
	struct URBPositionComponent* SinglePositionComponent; // 0x248(0x08)
	struct URBPositionComponent* PartySlot1PositionComponent; // 0x250(0x08)
	struct URBPositionComponent* PartySlot2PositionComponent; // 0x258(0x08)
	struct URBPositionComponent* PartySlot3PositionComponent; // 0x260(0x08)
	struct URBPositionComponent* PartySlot4PositionComponent; // 0x268(0x08)
	struct ARBMenuCharacter* CharacterClass; // 0x270(0x08)
	enum class ESocialMenuSceneActorType Type; // 0x278(0x01)
	char pad_279[0x7]; // 0x279(0x07)
	struct TMap<enum class ESocialMenuSceneActorSlot, struct ARBMenuCharacter*> SpawnedCharacters; // 0x280(0x50)
	bool bIsFailureScene; // 0x2d0(0x01)
	char pad_2D1[0x7]; // 0x2d1(0x07)

	bool IsFailureScene(); // Function OPP.RBSocialMenuSceneActor.IsFailureScene // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e0a250
	enum class ESocialMenuSceneActorType GetType(); // Function OPP.RBSocialMenuSceneActor.GetType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0a140
	struct ARBMenuCharacter* GetMenuCharacter(enum class ESocialMenuSceneActorSlot Slot); // Function OPP.RBSocialMenuSceneActor.GetMenuCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0a024
	void Event_UpdateNumDisplayedSlots(int32_t Num); // Function OPP.RBSocialMenuSceneActor.Event_UpdateNumDisplayedSlots // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_Deactivate(); // Function OPP.RBSocialMenuSceneActor.Event_Deactivate // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_Activate(); // Function OPP.RBSocialMenuSceneActor.Event_Activate // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBSoundConnectorActor
// Size: 0x270 (Inherited: 0x248)
struct ARBSoundConnectorActor : AActor {
	char pad_248[0x10]; // 0x248(0x10)
	bool bEnabledSoundConnector; // 0x258(0x01)
	bool bEnabledRoomConnector; // 0x259(0x01)
	char pad_25A[0x6]; // 0x25a(0x06)
	struct URBSoundConnectorComponent* SoundConnectorComp; // 0x260(0x08)
	struct URBRoomConnectorComponent* RoomConnectorComp; // 0x268(0x08)

	void Editor_RefreshConnection(); // Function OPP.RBSoundConnectorActor.Editor_RefreshConnection // (Final|Native|Public) // @ game+0x1521dbc
};

// Class OPP.RBSoundConnectorComponent
// Size: 0x2e0 (Inherited: 0x220)
struct URBSoundConnectorComponent : USceneComponent {
	bool bOpen; // 0x218(0x01)
	bool bSpherical; // 0x219(0x01)
	float SphereRadius; // 0x21c(0x04)
	float BoxDepth; // 0x220(0x04)
	float BoxWidth; // 0x224(0x04)
	float BoxHeight; // 0x228(0x04)
	bool bAllowSourceVirtualization; // 0x22c(0x01)
	float ClosedOcclusionFactorOverride; // 0x230(0x04)
	float OpenedOcclusionFactor; // 0x234(0x04)
	bool bDoorConnector; // 0x238(0x01)
	bool bOcclusionPassthrough; // 0x239(0x01)
	bool bEnabled; // 0x23a(0x01)
	char pad_23E[0x2]; // 0x23e(0x02)
	struct FScheduledBool IsOpened; // 0x240(0x70)
	float DynamicClosedOcclusionFactorOverride; // 0x2b0(0x04)
	char pad_2B4[0x4]; // 0x2b4(0x04)
	struct TArray<struct ARBSoundVolume*> ConnectedVolumes; // 0x2b8(0x10)
	struct ARBSoundVolume* SurroundingVolume; // 0x2c8(0x08)
	char pad_2D0[0x10]; // 0x2d0(0x10)

	void SetOpen_Internal(bool bOpenValue); // Function OPP.RBSoundConnectorComponent.SetOpen_Internal // (Final|Native|Private|BlueprintCallable) // @ game+0x1e0c7b8
	void SetEnabled(bool bEnabledValue); // Function OPP.RBSoundConnectorComponent.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0c738
	void OnRep_IsOpened(); // Function OPP.RBSoundConnectorComponent.OnRep_IsOpened // (Final|Native|Private) // @ game+0x1e0c71c
	void OnRep_Enabled(); // Function OPP.RBSoundConnectorComponent.OnRep_Enabled // (Final|Native|Public) // @ game+0x1e0c6f0
	void IsOpenedChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBSoundConnectorComponent.IsOpenedChangedCallback // (Final|Native|Public) // @ game+0x1e0c1f0
	void Editor_RefreshConnection(); // Function OPP.RBSoundConnectorComponent.Editor_RefreshConnection // (Final|Native|Public) // @ game+0x1521dbc
	void BP_OpenConnector(); // Function OPP.RBSoundConnectorComponent.BP_OpenConnector // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e0c1dc
	void BP_CloseConnector(); // Function OPP.RBSoundConnectorComponent.BP_CloseConnector // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e0c1c8
};

// Class OPP.RBSoundReferences
// Size: 0x660 (Inherited: 0x28)
struct URBSoundReferences : UObject {
	struct FRBSoundReferencesData SoundRefs; // 0x28(0x630)
	struct URBSoundReferences* Parent; // 0x658(0x08)
};

// Class OPP.RBSoundTrap
// Size: 0x260 (Inherited: 0x248)
struct ARBSoundTrap : AActor {
	char pad_248[0x8]; // 0x248(0x08)
	struct FMulticastSparseDelegate OnBeginOverlapWithPawn; // 0x250(0x01)
	char pad_251[0x7]; // 0x251(0x07)
	struct UCapsuleComponent* CollisionCapsule; // 0x258(0x08)

	void OnCapsuleBeginOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBSoundTrap.OnCapsuleBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0x1e0c270
	void Multicast_OnTrapTriggered(struct ARBPawn* Source); // Function OPP.RBSoundTrap.Multicast_OnTrapTriggered // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x1d49188
	void BP_OnHitByThrowable(struct FVector& HitLocation, struct ARBThrowableWeapon* throwableWeapon); // Function OPP.RBSoundTrap.BP_OnHitByThrowable // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x201e6d4
	struct UCapsuleComponent* BP_GetCollisionCapsule(); // Function OPP.RBSoundTrap.BP_GetCollisionCapsule // (Event|Public|BlueprintEvent|Const) // @ game+0x201e6d4
};

// Class OPP.RBSoundVolume
// Size: 0x320 (Inherited: 0x298)
struct ARBSoundVolume : AAkSpatialAudioVolume {
	char pad_298[0x8]; // 0x298(0x08)
	bool bEnabled; // 0x2a0(0x01)
	enum class ESoundVolumeType SoundVolumeType; // 0x2a1(0x01)
	char pad_2A2[0x2]; // 0x2a2(0x02)
	float FadeDistance; // 0x2a4(0x04)
	float OcclusionFactorOverride; // 0x2a8(0x04)
	float ObstructionFactorOverride; // 0x2ac(0x04)
	float MaxHighQualityObstructionFactor; // 0x2b0(0x04)
	char pad_2B4[0x4]; // 0x2b4(0x04)
	struct TArray<struct FSoundTriggerEvent> Events; // 0x2b8(0x10)
	bool bCurrentlyEnabled; // 0x2c8(0x01)
	char pad_2C9[0x7]; // 0x2c9(0x07)
	struct TSoftObjectPtr<ARBRoom> LinkedRoom; // 0x2d0(0x28)
	char pad_2F8[0x8]; // 0x2f8(0x08)
	struct TArray<struct URBSoundConnectorComponent*> Connections; // 0x300(0x10)
	struct TArray<struct FSoundTriggerEvent> DynamicEvents; // 0x310(0x10)

	void RemoveDynamicEvent(struct FSoundTriggerEvent SoundTriggerEvent); // Function OPP.RBSoundVolume.RemoveDynamicEvent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e100ac
	void Editor_RefreshConnection(); // Function OPP.RBSoundVolume.Editor_RefreshConnection // (Final|Native|Public) // @ game+0x1521dbc
	void AddDynamicEvent(struct FSoundTriggerEvent SoundTriggerEvent); // Function OPP.RBSoundVolume.AddDynamicEvent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e0f6cc
};

// Class OPP.RBAreaExitPoint
// Size: 0x78 (Inherited: 0x28)
struct URBAreaExitPoint : UObject {
	char pad_28[0x30]; // 0x28(0x30)
	struct ARBDoor* door; // 0x58(0x08)
	struct URBRoomConnectorComponent* RoomConnector; // 0x60(0x08)
	struct ARBRoom* RoomVolume; // 0x68(0x08)
	char pad_70[0x8]; // 0x70(0x08)
};

// Class OPP.RBSpatialReasoning
// Size: 0x180 (Inherited: 0x28)
struct URBSpatialReasoning : UObject {
	struct TArray<struct URBAreaExitPoint*> ExitPoints; // 0x28(0x10)
	struct TMap<struct AActor*, struct ARBRoom*> MapActorToRoom; // 0x38(0x50)
	struct TArray<struct FRoomPathingNode> RoomPathNodes; // 0x88(0x10)
	struct TMap<struct AActor*, float> LastInvalidRoomForFindPath; // 0x98(0x50)
	char pad_E8[0x98]; // 0xe8(0x98)
};

// Class OPP.RBSpectatorMenu
// Size: 0x310 (Inherited: 0x308)
struct URBSpectatorMenu : URBMenuWidget {
	struct ARBPlayer* SpectatedPlayer; // 0x308(0x08)

	void TogglePreviousSpectator(); // Function OPP.RBSpectatorMenu.TogglePreviousSpectator // (Final|Native|Public|BlueprintCallable) // @ game+0x1e10148
	void ToggleNextSpectator(); // Function OPP.RBSpectatorMenu.ToggleNextSpectator // (Final|Native|Public|BlueprintCallable) // @ game+0x1e10134
	void Event_OnSpectatorChanged(); // Function OPP.RBSpectatorMenu.Event_OnSpectatorChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	bool CanCycleSpectators(); // Function OPP.RBSpectatorMenu.CanCycleSpectators // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0fcfc
};

// Class OPP.RBSpectatorPawn
// Size: 0x310 (Inherited: 0x2b8)
struct ARBSpectatorPawn : APawn {
	char pad_2B8[0x28]; // 0x2b8(0x28)
	struct ARBController* RBController; // 0x2e0(0x08)
	struct USceneComponent* EyeLocationComp; // 0x2e8(0x08)
	struct URBNVComponent* NVComponent; // 0x2f0(0x08)
	struct URBSoundComponent* VoiceAKComponent; // 0x2f8(0x08)
	struct URBSoundComponent* FoleyAKComponent; // 0x300(0x08)
	struct ARBPlayer* DefaultPlayerClass; // 0x308(0x08)

	void Event_OnSetupFinished(); // Function OPP.RBSpectatorPawn.Event_OnSetupFinished // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBSpectraSkill
// Size: 0x488 (Inherited: 0x3d8)
struct ARBSpectraSkill : ARBActiveSkill {
	struct URBPostProcessSettings* PostProcessSettings; // 0x3d8(0x08)
	struct UMaterial* MeshOverrideMaterial; // 0x3e0(0x08)
	struct UMaterial* ActiveTagOverrideMaterial; // 0x3e8(0x08)
	struct UMaterial* TagOverrideMaterial; // 0x3f0(0x08)
	float FadeDistance; // 0x3f8(0x04)
	float CloseFadeDistance; // 0x3fc(0x04)
	float MinAlpha; // 0x400(0x04)
	bool bUsePPS; // 0x404(0x01)
	char pad_405[0x3]; // 0x405(0x03)
	struct UMaterialInstanceDynamic* DynPPSMat; // 0x408(0x08)
	struct TArray<struct FRBTaggedVisionActorClientData> ClientActiveVisionActors; // 0x410(0x10)
	struct TArray<struct FRBTaggedVisionActorServerData> ServerActiveVisionActors; // 0x420(0x10)
	struct TArray<struct ARBNPC*> TaggedEnemies; // 0x430(0x10)
	char pad_440[0x48]; // 0x440(0x48)

	void Event_OnVisionFullEffectStateChanged(bool bFullEffect); // Function OPP.RBSpectraSkill.Event_OnVisionFullEffectStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnVisionActorRemoved(struct AActor* visionActor); // Function OPP.RBSpectraSkill.Event_OnVisionActorRemoved // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnVisionActorAdded(struct AActor* visionActor); // Function OPP.RBSpectraSkill.Event_OnVisionActorAdded // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnVisionActiveChanged(bool IsActive, bool bFullEffect); // Function OPP.RBSpectraSkill.Event_OnVisionActiveChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBOverrideDialSkill
// Size: 0x488 (Inherited: 0x488)
struct ARBOverrideDialSkill : ARBSpectraSkill {
};

// Class OPP.RBSplashScreenMenu
// Size: 0x308 (Inherited: 0x308)
struct URBSplashScreenMenu : URBMenuWidget {

	void OnSplashScreenAnimationsEnded(); // Function OPP.RBSplashScreenMenu.OnSplashScreenAnimationsEnded // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1e10094
	void Event_TryFadeInSkipButton(); // Function OPP.RBSplashScreenMenu.Event_TryFadeInSkipButton // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_SkipSplashScreenAnimations(); // Function OPP.RBSplashScreenMenu.Event_SkipSplashScreenAnimations // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBSplineFollowingActor
// Size: 0x490 (Inherited: 0x420)
struct ARBSplineFollowingActor : ARBTriggerable {
	struct URBNetworkSyncComponent* NetworkSync; // 0x420(0x08)
	struct USplineComponent* SplineComp; // 0x428(0x08)
	bool bPingPong; // 0x430(0x01)
	char pad_431[0x7]; // 0x431(0x07)
	struct USplineComponent* CurrentSplineComp; // 0x438(0x08)
	struct FRotator RotationOffset; // 0x440(0x0c)
	char pad_44C[0x4]; // 0x44c(0x04)
	struct FMulticastInlineDelegate OnReachedExtremityEvent; // 0x450(0x10)
	struct FMulticastInlineDelegate OnPingPongExtremityEvent; // 0x460(0x10)
	bool bMapCheckCollision; // 0x470(0x01)
	char pad_471[0x3]; // 0x471(0x03)
	struct FVector MapCheckDimension; // 0x474(0x0c)
	char pad_480[0x10]; // 0x480(0x10)

	void OnRep_CurrentSplineComp(); // Function OPP.RBSplineFollowingActor.OnRep_CurrentSplineComp // (Final|Native|Public) // @ game+0x1e10080
	void OnNetworkSyncPlayStateChanged(struct URBNetworkSyncComponent* networkSyncComponent); // Function OPP.RBSplineFollowingActor.OnNetworkSyncPlayStateChanged // (Final|Native|Public) // @ game+0x1e0ffd8
	struct USplineComponent* FindDefaultSplineComponent(); // Function OPP.RBSplineFollowingActor.FindDefaultSplineComponent // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1e0fd20
	void BP_SetCurrentSplineComp(struct USplineComponent* newSplineComp); // Function OPP.RBSplineFollowingActor.BP_SetCurrentSplineComp // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e0f8f8
	void BP_OnStoppedMoving(); // Function OPP.RBSplineFollowingActor.BP_OnStoppedMoving // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnStartedMoving(); // Function OPP.RBSplineFollowingActor.BP_OnStartedMoving // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnPingPongExtremityEvent(float progress); // Function OPP.RBSplineFollowingActor.BP_OnPingPongExtremityEvent // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnCurrentSplineCompChanged(); // Function OPP.RBSplineFollowingActor.BP_OnCurrentSplineCompChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_ForceRefreshTransform(bool bRefreshTickState); // Function OPP.RBSplineFollowingActor.BP_ForceRefreshTransform // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0f878
};

// Class OPP.RBSplineFollowingStation
// Size: 0x2d0 (Inherited: 0x248)
struct ARBSplineFollowingStation : AActor {
	bool bStartsActive; // 0x248(0x01)
	bool bStopMovement; // 0x249(0x01)
	bool bRestartMovement; // 0x24a(0x01)
	char pad_24B[0x1]; // 0x24b(0x01)
	struct FRBAnimLengthStruct Animation; // 0x24c(0x04)
	struct USceneComponent* StationRootComponent; // 0x250(0x08)
	bool bUseTriggerBox; // 0x258(0x01)
	char pad_259[0x7]; // 0x259(0x07)
	struct UBoxComponent* TriggerBox; // 0x260(0x08)
	bool bUseDetectionComponent; // 0x268(0x01)
	char pad_269[0x7]; // 0x269(0x07)
	struct URBActorProximityDetectionComponent* DetectionComponent; // 0x270(0x08)
	struct TMap<struct ARBSplineFollowingActor*, float> WaitingForAnimationDoneSplineFollowingActors; // 0x278(0x50)
	char pad_2C8[0x8]; // 0x2c8(0x08)

	void OnSplineFollowingActorReachedStation(struct ARBSplineFollowingActor* splineFollowingActor); // Function OPP.RBSplineFollowingStation.OnSplineFollowingActorReachedStation // (Native|Event|Public|BlueprintEvent) // @ game+0x1d49188
	void OnComponentBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBSplineFollowingStation.OnComponentBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0x1e0fe08
	void OnActorEnterProximity(struct AActor* Actor); // Function OPP.RBSplineFollowingStation.OnActorEnterProximity // (Final|Native|Private) // @ game+0x1e0fd6c
	void Multicast_OnSplineFollowingActorReachedStation(struct ARBSplineFollowingActor* splineFollowingActor); // Function OPP.RBSplineFollowingStation.Multicast_OnSplineFollowingActorReachedStation // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d49104
	void Event_OnSplineFollowingActorAnimationDone(struct ARBSplineFollowingActor* splineFollowingActor); // Function OPP.RBSplineFollowingStation.Event_OnSplineFollowingActorAnimationDone // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_SetStationEnabled(bool bEnabled); // Function OPP.RBSplineFollowingStation.BP_SetStationEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e0fc28
};

// Class OPP.RBSplineMeshActor
// Size: 0x2d0 (Inherited: 0x248)
struct ARBSplineMeshActor : AActor {
	char pad_248[0x10]; // 0x248(0x10)
	struct USceneComponent* SplineRoot; // 0x258(0x08)
	struct USplineComponent* Spline; // 0x260(0x08)
	struct TArray<struct ARBSplineMeshActor*> EndToStartLinks; // 0x268(0x10)
	struct TArray<struct ARBSplineMeshActor*> EndToEndLinks; // 0x278(0x10)
	struct TArray<struct ARBSplineMeshActor*> StartToEndLinks; // 0x288(0x10)
	struct TArray<struct ARBSplineMeshActor*> StartToStartLinks; // 0x298(0x10)
	struct ARBSplineMeshActor* OverridePreviousLink; // 0x2a8(0x08)
	bool bIsOverridePreviousLinkToEnd; // 0x2b0(0x01)
	char pad_2B1[0x7]; // 0x2b1(0x07)
	struct ARBSplineMeshActor* OverrideNextLink; // 0x2b8(0x08)
	bool bIsOverrideNextLinkToStart; // 0x2c0(0x01)
	char pad_2C1[0x3]; // 0x2c1(0x03)
	int32_t NextIndex; // 0x2c4(0x04)
	int32_t previousIndex; // 0x2c8(0x04)
	bool bKeepRailVisibleOnRandom; // 0x2cc(0x01)
	bool bEnabled; // 0x2cd(0x01)
	bool bInvertedInOrder; // 0x2ce(0x01)
	char pad_2CF[0x1]; // 0x2cf(0x01)

	void OnRep_Enabled(); // Function OPP.RBSplineMeshActor.OnRep_Enabled // (Final|Native|Public) // @ game+0x1cfe9e0
	void BP_UnlinkPreviousSpline(); // Function OPP.RBSplineMeshActor.BP_UnlinkPreviousSpline // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e0fce0
	void BP_UnlinkNextSpline(); // Function OPP.RBSplineMeshActor.BP_UnlinkNextSpline // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e0fcc4
	void BP_SetPreviousSpline(struct ARBSplineMeshActor* previousSplineMesh, bool bToLastNode); // Function OPP.RBSplineMeshActor.BP_SetPreviousSpline // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e0fabc
	void BP_SetNextSpline(struct ARBSplineMeshActor* nextSplineMesh, bool bToFirstNode); // Function OPP.RBSplineMeshActor.BP_SetNextSpline // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e0f984
};

// Class OPP.RBSplineMeshLinkChooserComponent
// Size: 0x1c8 (Inherited: 0xb8)
struct URBSplineMeshLinkChooserComponent : UActorComponent {
	struct TSoftObjectPtr<ARBRandomManager> LinkedRandomManager; // 0xb8(0x28)
	struct TSoftObjectPtr<AActor> LinkedRandomActor; // 0xe0(0x28)
	struct TSoftObjectPtr<ARBSplineMeshActor> NextSplineIfStateARef; // 0x108(0x28)
	struct TSoftObjectPtr<ARBSplineMeshActor> PreviousSplineIfStateARef; // 0x130(0x28)
	struct TSoftObjectPtr<ARBSplineMeshActor> NextSplineIfStateBRef; // 0x158(0x28)
	struct TSoftObjectPtr<ARBSplineMeshActor> PreviousSplineIfStateBRef; // 0x180(0x28)
	struct ARBSplineMeshActor* NextSplineIfStateA; // 0x1a8(0x08)
	struct ARBSplineMeshActor* PreviousSplineIfStateA; // 0x1b0(0x08)
	struct ARBSplineMeshActor* NextSplineIfStateB; // 0x1b8(0x08)
	struct ARBSplineMeshActor* PreviousSplineIfStateB; // 0x1c0(0x08)

	void OnRandomizationDone(); // Function OPP.RBSplineMeshLinkChooserComponent.OnRandomizationDone // (Final|Native|Public) // @ game+0x1e10058
};

// Class OPP.RBSplinePushable
// Size: 0x5c0 (Inherited: 0x540)
struct ARBSplinePushable : ARBBasePushable {
	struct TSoftObjectPtr<ARBSplineMeshActor> InitialSpline; // 0x540(0x28)
	float InitialDistanceAlongSpline; // 0x568(0x04)
	bool bInitialFlippedOnSpline; // 0x56c(0x01)
	char pad_56D[0x3]; // 0x56d(0x03)
	float SplineContactOffset; // 0x570(0x04)
	float BasePushActionAnchorOffset; // 0x574(0x04)
	float PitchUpPushActionAnchorOffset; // 0x578(0x04)
	float PitchDownPushActionAnchorOffset; // 0x57c(0x04)
	float RollbackDelayAfterInteraction; // 0x580(0x04)
	float RollbackSpeed; // 0x584(0x04)
	struct ARBSplineMeshActor* Server_Spline; // 0x588(0x08)
	struct ARBSplineMeshActor* Current_Spline; // 0x590(0x08)
	float Server_DistanceAlongSpline; // 0x598(0x04)
	char pad_59C[0x4]; // 0x59c(0x04)
	bool bServer_FlippedOnSpline; // 0x5a0(0x01)
	char pad_5A1[0x1]; // 0x5a1(0x01)
	bool bDetachedFromSpline; // 0x5a2(0x01)
	bool bAutoMove; // 0x5a3(0x01)
	char pad_5A4[0x4]; // 0x5a4(0x04)
	struct ARBSplineMeshActor* Rollback_Spline; // 0x5a8(0x08)
	char pad_5B0[0x8]; // 0x5b0(0x08)
	float AutoMoveSpeed; // 0x5b8(0x04)
	float AutoMoveDistanceLeft; // 0x5bc(0x04)

	void OnRep_AutoMove(); // Function OPP.RBSplinePushable.OnRep_AutoMove // (Final|Native|Public) // @ game+0x1e1006c
	bool IsRollbacking(); // Function OPP.RBSplinePushable.IsRollbacking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0fd48
	void Event_OnAutoMoveStateChanged(); // Function OPP.RBSplinePushable.Event_OnAutoMoveStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_PostRotated(struct FRotator& frontRotation, struct FRotator& rearRotation); // Function OPP.RBSplinePushable.BP_PostRotated // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x201e6d4
	void BP_DetachFromSpline(); // Function OPP.RBSplinePushable.BP_DetachFromSpline // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e0f85c
	void AutoMove(float Distance, float Speed); // Function OPP.RBSplinePushable.AutoMove // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e0f798
};

// Class OPP.RBStairsMarker
// Size: 0x2f0 (Inherited: 0x270)
struct ARBStairsMarker : ARBSplineActor {
	char pad_270[0x60]; // 0x270(0x60)
	float StairsWidth; // 0x2d0(0x04)
	float StairsRightBuffer; // 0x2d4(0x04)
	float StairsLeftBuffer; // 0x2d8(0x04)
	float StepDepth; // 0x2dc(0x04)
	float StepHeight; // 0x2e0(0x04)
	float StairsAngle; // 0x2e4(0x04)
	char pad_2E8[0x8]; // 0x2e8(0x08)

	bool IsLocationValidInZ(struct FVector& Location, float ZBuffer); // Function OPP.RBStairsMarker.IsLocationValidInZ // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e136c4
	bool IsLocationOnStairs(struct FVector& Location, float Radius); // Function OPP.RBStairsMarker.IsLocationOnStairs // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e135e8
	struct FVector GetStairsKnockdownSlideVelocity(struct ARBPlayer* Player); // Function OPP.RBStairsMarker.GetStairsKnockdownSlideVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e13460
	struct FVector GetStairsDownDirection(); // Function OPP.RBStairsMarker.GetStairsDownDirection // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1342c
	float GetApproximateStairsDistanceSqr2D(struct FVector& Location); // Function OPP.RBStairsMarker.GetApproximateStairsDistanceSqr2D // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e13200
	struct FVector CastLocationOnStairs(struct FVector& Location, float Radius); // Function OPP.RBStairsMarker.CastLocationOnStairs // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e13114
};

// Class OPP.RBStalkerObjectiveCoordinator
// Size: 0x1988 (Inherited: 0xba8)
struct ARBStalkerObjectiveCoordinator : ARBBaseObjectiveCoordinator {
	enum class EStalkingObjectiveType ObjectiveType; // 0xba8(0x01)
	char pad_BA9[0x7]; // 0xba9(0x07)
	struct TArray<struct FStalkerTargetTypeSettings> TargetTypeSettings; // 0xbb0(0x10)
	struct FConfigurableFloat TotalMeterAmount; // 0xbc0(0xc8)
	struct FConfigurableFloat MeterDecayRate; // 0xc88(0xc8)
	float SameTargetFillRateMultiplier; // 0xd50(0x04)
	bool bNeedToSeeTarget; // 0xd54(0x01)
	bool bKillTargetsWhenCompleted; // 0xd55(0x01)
	char pad_D56[0x2]; // 0xd56(0x02)
	struct FConfigurableInt NumberOfTargets; // 0xd58(0xc8)
	struct FConfigurableFloat MaxFillRate; // 0xe20(0xc8)
	struct FText NewRoundStartedText; // 0xee8(0x18)
	struct FObjectiveUISettings TargetUISettings; // 0xf00(0xa50)
	struct TArray<struct FStalkerTargetInfo> CurrentTargetInfos; // 0x1950(0x10)
	struct TArray<struct ARBNPC*> AllTargetsBeingStalked_Local; // 0x1960(0x10)
	struct TArray<struct ARBNPC*> TargetsLocallyStalked_Local; // 0x1970(0x10)
	char pad_1980[0x8]; // 0x1980(0x08)

	void OnStopSpectatorMode(); // Function OPP.RBStalkerObjectiveCoordinator.OnStopSpectatorMode // (Final|Native|Protected) // @ game+0x1e13aa8
	void OnStartSpectatingPlayer(struct ARBPlayer* Player); // Function OPP.RBStalkerObjectiveCoordinator.OnStartSpectatingPlayer // (Final|Native|Protected) // @ game+0x1e13ae4
	void OnRep_CurrentTargetInfos(); // Function OPP.RBStalkerObjectiveCoordinator.OnRep_CurrentTargetInfos // (Final|Native|Protected) // @ game+0x1e13aa8
	void Multicast_OnNextRoundStarted(); // Function OPP.RBStalkerObjectiveCoordinator.Multicast_OnNextRoundStarted // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x1d77c80
	bool IsNPCStalked(struct ARBNPC* NPC); // Function OPP.RBStalkerObjectiveCoordinator.IsNPCStalked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1382c
	bool IsNPCLocallyStalked(struct ARBNPC* NPC); // Function OPP.RBStalkerObjectiveCoordinator.IsNPCLocallyStalked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e137a0
	bool IsLocalPlayerStalking(); // Function OPP.RBStalkerObjectiveCoordinator.IsLocalPlayerStalking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e135b4
	void Event_OnNPCStalkedEnd(struct ARBNPC* NPC); // Function OPP.RBStalkerObjectiveCoordinator.Event_OnNPCStalkedEnd // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnNPCStalkedBegin(struct ARBNPC* NPC); // Function OPP.RBStalkerObjectiveCoordinator.Event_OnNPCStalkedBegin // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnLocallyStalkingNPCEnd(struct ARBNPC* NPC); // Function OPP.RBStalkerObjectiveCoordinator.Event_OnLocallyStalkingNPCEnd // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnLocallyStalkingNPCBegin(struct ARBNPC* NPC); // Function OPP.RBStalkerObjectiveCoordinator.Event_OnLocallyStalkingNPCBegin // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBStatsManager
// Size: 0x4f8 (Inherited: 0x28)
struct URBStatsManager : UObject {
	char pad_28[0x4d0]; // 0x28(0x4d0)

	void OnGamePhaseUpdated(enum class EGamePhase gamePhase); // Function OPP.RBStatsManager.OnGamePhaseUpdated // (Final|Native|Private) // @ game+0x1e139e4
	struct FString GetTrialStatContext(struct FName& TrialId); // Function OPP.RBStatsManager.GetTrialStatContext // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1e13500
	struct FString GetGlobalStatContext(); // Function OPP.RBStatsManager.GetGlobalStatContext // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e13410
	struct FString GetCurrentTrialStatContext(); // Function OPP.RBStatsManager.GetCurrentTrialStatContext // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e133cc
	struct FString GetCurrentCharacterStatContext(); // Function OPP.RBStatsManager.GetCurrentCharacterStatContext // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1332c
	struct FString GetCharacterStatContext(struct ARBPlayerState* RBPlayerState); // Function OPP.RBStatsManager.GetCharacterStatContext // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e13294
};

// Class OPP.RBStreaming
// Size: 0x348 (Inherited: 0x248)
struct ARBStreaming : AInfo {
	struct FMulticastInlineDelegate OnMapTransitionStarted; // 0x248(0x10)
	struct FMulticastInlineDelegate OnMapChangeCompleted; // 0x258(0x10)
	struct FMulticastInlineDelegate OnLoadMapCompleted; // 0x268(0x10)
	struct FMulticastInlineDelegate OnWorldPopulateCompleted; // 0x278(0x10)
	struct FTargetStreamingState TargetStreamingState; // 0x288(0x50)
	struct TArray<struct FName> LevelsToExclude; // 0x2d8(0x10)
	struct TArray<struct FName> LevelsToExcludeLocally; // 0x2e8(0x10)
	struct TArray<struct FName> LocalForcedLoadedLevels; // 0x2f8(0x10)
	char pad_308[0x40]; // 0x308(0x40)

	void UnloadLevels(struct TArray<struct FName>& LevelNames); // Function OPP.RBStreaming.UnloadLevels // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1e13c94
	void StartMapTransition(); // Function OPP.RBStreaming.StartMapTransition // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e13c80
	void PrepareMapChange(struct TArray<struct FName>& LevelNames, struct TArray<struct FName>& ForcedLevelNames); // Function OPP.RBStreaming.PrepareMapChange // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1e13b74
	void OnTargetStreamingStateUpdated(); // Function OPP.RBStreaming.OnTargetStreamingStateUpdated // (Final|Native|Private) // @ game+0x1e13b60
	void OnLevelsToExcludeChanged(); // Function OPP.RBStreaming.OnLevelsToExcludeChanged // (Final|Native|Private) // @ game+0x1e13a64
	bool IsTargetStateReachedAndStreamingStable(); // Function OPP.RBStreaming.IsTargetStateReachedAndStreamingStable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e138b8
	void CancelPendingMapChange(); // Function OPP.RBStreaming.CancelPendingMapChange // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e13100
	void AddLocalForcedLoadedLevels(struct TArray<struct FName>& LevelNames); // Function OPP.RBStreaming.AddLocalForcedLoadedLevels // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1e13068
};

// Class OPP.RBSubRandomManager
// Size: 0x360 (Inherited: 0x350)
struct ARBSubRandomManager : ARBRandomManager {
	char pad_350[0x8]; // 0x350(0x08)
	enum class ERandomStateSetup StateToApplyWhenDisabled; // 0x358(0x01)
	char pad_359[0x7]; // 0x359(0x07)
};

// Class OPP.RBSwitchMatchFlipSwitchComponent
// Size: 0x6e0 (Inherited: 0x600)
struct URBSwitchMatchFlipSwitchComponent : URBInteractibleComponent {
	float MinimumInteractInverval; // 0x600(0x04)
	char pad_604[0x4]; // 0x604(0x04)
	struct FText TurnOffInteractionText; // 0x608(0x18)
	struct FText TurnOnInteractionText; // 0x620(0x18)
	int32_t FlipSwitchIndex; // 0x638(0x04)
	char pad_63C[0x4]; // 0x63c(0x04)
	struct TArray<struct URBSwitchMatchFlipSwitchComponent*> LinkedFlipSwitches; // 0x640(0x10)
	struct FScheduledInt CurrentFlipSwitchState; // 0x650(0x78)
	bool bLocked; // 0x6c8(0x01)
	bool bResettedToDefault; // 0x6c9(0x01)
	char pad_6CA[0x6]; // 0x6ca(0x06)
	struct URBSwitchMatchPanelComponent* ParentPanel; // 0x6d0(0x08)
	char pad_6D8[0x8]; // 0x6d8(0x08)

	void OnRep_CurrentFlipSwitchState(); // Function OPP.RBSwitchMatchFlipSwitchComponent.OnRep_CurrentFlipSwitchState // (Final|Native|Private) // @ game+0x1d6f254
	void OnLocallyFocusStateChange(struct ARBPlayer* Player); // Function OPP.RBSwitchMatchFlipSwitchComponent.OnLocallyFocusStateChange // (BlueprintCosmetic|Event|Protected|BlueprintEvent) // @ game+0x201e6d4
	void OnFlipSwitchStageChanged(); // Function OPP.RBSwitchMatchFlipSwitchComponent.OnFlipSwitchStageChanged // (Event|Protected|BlueprintEvent) // @ game+0x201e6d4
	void OnCurrentFlipSwitchStateCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBSwitchMatchFlipSwitchComponent.OnCurrentFlipSwitchStateCallback // (Final|Native|Private) // @ game+0x1e138e4
	bool IsLocallyFocused(); // Function OPP.RBSwitchMatchFlipSwitchComponent.IsLocallyFocused // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e135d0
	enum class EFlipSwitchState GetFlipSwitchState(); // Function OPP.RBSwitchMatchFlipSwitchComponent.GetFlipSwitchState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e133f8
};

// Class OPP.RBSwitchMatchPanelComponent
// Size: 0xd80 (Inherited: 0x7a0)
struct URBSwitchMatchPanelComponent : URBInteractiblePanelComponent {
	char pad_7A0[0x8]; // 0x7a0(0x08)
	struct FConfigurableInt NumberOfSwitches; // 0x7a8(0xc8)
	struct FConfigurableInt NumberOfLockedSwitches; // 0x870(0xc8)
	struct FConfigurableInt NumberOfLinks; // 0x938(0xc8)
	struct FConfigurableInt MaxAmountOfLinksOnPerSwitch; // 0xa00(0xc8)
	struct FConfigurableBool bAllowUnidirectionalLinks; // 0xac8(0x60)
	struct FConfigurableInt AmountOfShuffleMove; // 0xb28(0xc8)
	float ResetDuration; // 0xbf0(0x04)
	bool bUseManualPuzzle; // 0xbf4(0x01)
	char pad_BF5[0x3]; // 0xbf5(0x03)
	struct TArray<struct FSwitchMatchPuzzleData> Puzzles; // 0xbf8(0x10)
	int32_t ForcedPuzzleIndex; // 0xc08(0x04)
	char pad_C0C[0x4]; // 0xc0c(0x04)
	struct FMulticastInlineDelegate OnPanelSuccessStateChanged; // 0xc10(0x10)
	struct FMulticastInlineDelegate OnNumberOfInteractionsChanged; // 0xc20(0x10)
	struct TArray<struct URBSwitchMatchFlipSwitchComponent*> FlipSwitches; // 0xc30(0x10)
	struct FSwitchMatchPuzzleData CurrentPuzzle; // 0xc40(0xb0)
	struct FScheduledInt CurrentNumberOfInteraction; // 0xcf0(0x78)
	bool bIsCompleted; // 0xd68(0x01)
	char pad_D69[0x3]; // 0xd69(0x03)
	float ResetUntilServerTimestamp; // 0xd6c(0x04)
	struct URBSwitchMatchFlipSwitchComponent* LastFocusComponent; // 0xd70(0x08)
	char pad_D78[0x8]; // 0xd78(0x08)

	void OnRep_ResetUntilServerTimestamp(); // Function OPP.RBSwitchMatchPanelComponent.OnRep_ResetUntilServerTimestamp // (Final|Native|Protected) // @ game+0x1e13ad0
	void OnRep_IsCompleted(); // Function OPP.RBSwitchMatchPanelComponent.OnRep_IsCompleted // (Final|Native|Protected) // @ game+0x1e13abc
	void OnRep_CurrentPuzzle(); // Function OPP.RBSwitchMatchPanelComponent.OnRep_CurrentPuzzle // (Final|Native|Protected) // @ game+0x1e13a94
	void OnRep_CurrentNumberOfInteraction(); // Function OPP.RBSwitchMatchPanelComponent.OnRep_CurrentNumberOfInteraction // (Final|Native|Protected) // @ game+0x1e13a78
	void OnCurrentNumberOfInteractionCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBSwitchMatchPanelComponent.OnCurrentNumberOfInteractionCallback // (Final|Native|Protected) // @ game+0x1e13964
	void OnCompletedGameplayCallback(); // Function OPP.RBSwitchMatchPanelComponent.OnCompletedGameplayCallback // (Final|Native|Protected) // @ game+0x1d5e7e8
	void InitializePanel_Server(); // Function OPP.RBSwitchMatchPanelComponent.InitializePanel_Server // (Final|Native|Public) // @ game+0x1e135a0
	void Event_OnPanelSuccessStateChanged(); // Function OPP.RBSwitchMatchPanelComponent.Event_OnPanelSuccessStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnNumbersOfInteractionChanged(); // Function OPP.RBSwitchMatchPanelComponent.Event_OnNumbersOfInteractionChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnCurrentPuzzleReset(); // Function OPP.RBSwitchMatchPanelComponent.Event_OnCurrentPuzzleReset // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnCurrentPuzzleChanged(); // Function OPP.RBSwitchMatchPanelComponent.Event_OnCurrentPuzzleChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBSwitchPanelPart
// Size: 0x568 (Inherited: 0x4c0)
struct ARBSwitchPanelPart : ARBInteractible {
	int32_t PartWidth; // 0x4c0(0x04)
	int32_t PartHeight; // 0x4c4(0x04)
	int32_t ValidVariant; // 0x4c8(0x04)
	enum class ESwitchPanelPartType PartType; // 0x4cc(0x01)
	enum class ESwitchPanelPartVariant VariantType; // 0x4cd(0x01)
	char pad_4CE[0x2]; // 0x4ce(0x02)
	struct URBInteractionPlaneComponent* InteractionPlane; // 0x4d0(0x08)
	float ConfigInitialSwitchValue; // 0x4d8(0x04)
	float ConfigActiveSwitchValue; // 0x4dc(0x04)
	float ActiveThreshold; // 0x4e0(0x04)
	float CloseToActiveThreshold; // 0x4e4(0x04)
	bool bLoopsAround; // 0x4e8(0x01)
	char pad_4E9[0x3]; // 0x4e9(0x03)
	struct FVector2D MouseInputRotationMultiplier; // 0x4ec(0x08)
	struct FVector2D GamepadInputRotationMultiplier; // 0x4f4(0x08)
	struct FVector2D GamepadInputExpRotationMultiplier; // 0x4fc(0x08)
	float DesiredStatusApproachCoef; // 0x504(0x04)
	int32_t DesiredStatusStepCount; // 0x508(0x04)
	bool bAlwaysStartInactive; // 0x50c(0x01)
	char pad_50D[0x3]; // 0x50d(0x03)
	struct FText OperatingText; // 0x510(0x18)
	int32_t InitialSwitchValue; // 0x528(0x04)
	float SwitchValue; // 0x52c(0x04)
	float DesiredSwitchStatusNetwork; // 0x530(0x04)
	char pad_534[0x8]; // 0x534(0x08)
	float DesiredSwitchStatus; // 0x53c(0x04)
	float DesiredDeltaSwitchStatus; // 0x540(0x04)
	char pad_544[0x4]; // 0x544(0x04)
	struct ARBPlayer* interactor; // 0x548(0x08)
	float ActiveSwitchValue; // 0x550(0x04)
	char pad_554[0x4]; // 0x554(0x04)
	struct ARBSwitchPanel* SwitchPanelOwner; // 0x558(0x08)
	char pad_560[0x8]; // 0x560(0x08)

	void OnRep_DesiredSwitchStatusNetwork_Callback(); // Function OPP.RBSwitchPanelPart.OnRep_DesiredSwitchStatusNetwork_Callback // (Final|Native|Public) // @ game+0x1e17bec
	void OnRep_DesiredSwitchStatusNetwork(); // Function OPP.RBSwitchPanelPart.OnRep_DesiredSwitchStatusNetwork // (Final|Native|Public) // @ game+0x1e17bd8
	void OnRep_ActiveSwitchValue(); // Function OPP.RBSwitchPanelPart.OnRep_ActiveSwitchValue // (Final|Native|Public) // @ game+0x1dbffdc
	void Multicast_ResetValues(float desiredSwitchStatusValue); // Function OPP.RBSwitchPanelPart.Multicast_ResetValues // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1daea60
	void BP_SetSwitchStatus(float Value); // Function OPP.RBSwitchPanelPart.BP_SetSwitchStatus // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e171c0
	void BP_ResetValues(bool bKeepCurrentValues); // Function OPP.RBSwitchPanelPart.BP_ResetValues // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e170b0
	void BP_OnSwitchStatusChanged(); // Function OPP.RBSwitchPanelPart.BP_OnSwitchStatusChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnStopInteract(); // Function OPP.RBSwitchPanelPart.BP_OnStopInteract // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnStartInteract(); // Function OPP.RBSwitchPanelPart.BP_OnStartInteract // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnAddInputVertical(float Val, bool bIsGamepad, float deltaValue); // Function OPP.RBSwitchPanelPart.BP_OnAddInputVertical // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnAddInputHorizontal(float Val, bool bIsGamepad, float deltaValue); // Function OPP.RBSwitchPanelPart.BP_OnAddInputHorizontal // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	bool BP_IsPanelEnabled(); // Function OPP.RBSwitchPanelPart.BP_IsPanelEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e16fe0
	bool BP_IsCloseToActive(); // Function OPP.RBSwitchPanelPart.BP_IsCloseToActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e16fc0
	bool BP_IsActive(); // Function OPP.RBSwitchPanelPart.BP_IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e16fa0
};

// Class OPP.RBTalkWheel
// Size: 0x300 (Inherited: 0x300)
struct URBTalkWheel : URBGenericRadialMenu {

	void Event_RefreshSlices(); // Function OPP.RBTalkWheel.Event_RefreshSlices // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBTask
// Size: 0x2a8 (Inherited: 0x248)
struct ARBTask : AActor {
	struct FMulticastInlineDelegate OnTaskProgressUpdated; // 0x248(0x10)
	struct FMulticastInlineDelegate OnTaskStateChanged; // 0x258(0x10)
	struct ARBGameState* RBGameState; // 0x268(0x08)
	struct ARBController* AssociatedController; // 0x270(0x08)
	int64_t TaskUniqueId; // 0x278(0x08)
	struct URBTaskData* TaskData; // 0x280(0x08)
	double progress; // 0x288(0x08)
	double PendingProgress; // 0x290(0x08)
	int64_t ExpirationTime; // 0x298(0x08)
	enum class ETaskState State; // 0x2a0(0x01)
	bool bDirty; // 0x2a1(0x01)
	char pad_2A2[0x6]; // 0x2a2(0x06)

	void OnRep_State(); // Function OPP.RBTask.OnRep_State // (Final|Native|Private) // @ game+0x1e17cc4
	void OnRep_Progress(); // Function OPP.RBTask.OnRep_Progress // (Final|Native|Private) // @ game+0x1e17cb0
	void OnRep_PendingProgress(); // Function OPP.RBTask.OnRep_PendingProgress // (Final|Native|Private) // @ game+0x1e17c18
	void OnGamePhaseUpdated(enum class EGamePhase gamePhase); // Function OPP.RBTask.OnGamePhaseUpdated // (Final|Native|Private) // @ game+0x1e17950
	bool IsExpiringSoon(); // Function OPP.RBTask.IsExpiringSoon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e178b8
	int64_t GetTaskUniqueId(); // Function OPP.RBTask.GetTaskUniqueId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d995cc
	enum class ETaskState GetTaskState(); // Function OPP.RBTask.GetTaskState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d74d84
	struct URBTaskData* GetTaskData(); // Function OPP.RBTask.GetTaskData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e175f4
	int64_t GetSecondsUntilExpiration(); // Function OPP.RBTask.GetSecondsUntilExpiration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e175a8
	struct FText GetProgressText(); // Function OPP.RBTask.GetProgressText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e174f4
	float GetProgressRatio(); // Function OPP.RBTask.GetProgressRatio // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e174cc
	int32_t GetProgressionCounterMaxValue(); // Function OPP.RBTask.GetProgressionCounterMaxValue // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e17558
	int32_t GetProgressionCounterCurrentValue(); // Function OPP.RBTask.GetProgressionCounterCurrentValue // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e17530
	struct FText GetObjectiveText(); // Function OPP.RBTask.GetObjectiveText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e17474
	struct FText GetExpirationTimeText(); // Function OPP.RBTask.GetExpirationTimeText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e17438
};

// Class OPP.RBTask_PlayerCondition
// Size: 0x2b8 (Inherited: 0x2a8)
struct ARBTask_PlayerCondition : ARBTask {
	char pad_2A8[0x10]; // 0x2a8(0x10)
};

// Class OPP.RBTask_PlayerEvent
// Size: 0x2a8 (Inherited: 0x2a8)
struct ARBTask_PlayerEvent : ARBTask {

	void OnPlayerEvent(enum class EPlayerEvent EventType, int32_t Value); // Function OPP.RBTask_PlayerEvent.OnPlayerEvent // (Final|Native|Private) // @ game+0x1e179d0
};

// Class OPP.RBTask_PlayerStat
// Size: 0x2a8 (Inherited: 0x2a8)
struct ARBTask_PlayerStat : ARBTask {
};

// Class OPP.RBTask_StageCompletion
// Size: 0x2b0 (Inherited: 0x2a8)
struct ARBTask_StageCompletion : ARBTask {
	char pad_2A8[0x8]; // 0x2a8(0x08)

	void OnStageEnded(struct FRBStageID& StageID, struct FRBMissionID& MissionID, bool bIsReset); // Function OPP.RBTask_StageCompletion.OnStageEnded // (Final|Native|Private|HasOutParms) // @ game+0x1e17d14
	void OnPlayerEvent(enum class EPlayerEvent EventType, int32_t Value); // Function OPP.RBTask_StageCompletion.OnPlayerEvent // (Final|Native|Private) // @ game+0x1e17a94
};

// Class OPP.RBTaskData
// Size: 0xc8 (Inherited: 0x28)
struct URBTaskData : UObject {
	struct FName GroupID; // 0x28(0x08)
	struct FName ID; // 0x30(0x08)
	enum class ETaskType Type; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct ARBTask* TaskClass; // 0x40(0x08)
	struct FText Title; // 0x48(0x18)
	struct FText Description; // 0x60(0x18)
	struct FText objective; // 0x78(0x18)
	enum class ETaskProgressionDisplayType ProgressionDisplayType; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	struct FName RewardDataId; // 0x94(0x08)
	enum class EGameDifficulty RequiredDifficulty; // 0x9c(0x01)
	char pad_9D[0x3]; // 0x9d(0x03)
	struct FRBTaskDataDisplayCondition DisplayCondition; // 0xa0(0x18)
	char pad_B8[0x10]; // 0xb8(0x10)

	bool HasDifficultyRequirements(); // Function OPP.RBTaskData.HasDifficultyRequirements // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1789c
	int32_t GetProgressionCounterMaxValue(); // Function OPP.RBTaskData.GetProgressionCounterMaxValue // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e17580
	struct FText FormatTitle(); // Function OPP.RBTaskData.FormatTitle // (Native|Public|BlueprintCallable) // @ game+0x1e17384
	struct FText FormatObjective(); // Function OPP.RBTaskData.FormatObjective // (Native|Public|BlueprintCallable) // @ game+0x1e17344
	struct FText FormatDescription(); // Function OPP.RBTaskData.FormatDescription // (Native|Public|BlueprintCallable) // @ game+0x1e17304
};

// Class OPP.RBTaskData_PlayerCondition
// Size: 0x100 (Inherited: 0xc8)
struct URBTaskData_PlayerCondition : URBTaskData {
	int32_t NumTimes; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)
	struct FRBPlayerConditionSet ProgressCondition; // 0xd0(0x10)
	float MinimumTimeBetweenCompletions; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
	struct FRBPlayerConditionSet ResetCondition; // 0xe8(0x10)
	float TickFrequency; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
};

// Class OPP.RBTaskData_PlayerEvent
// Size: 0xe0 (Inherited: 0xc8)
struct URBTaskData_PlayerEvent : URBTaskData {
	int32_t NumTimes; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)
	struct TArray<enum class EPlayerEvent> PlayerEvents; // 0xd0(0x10)
};

// Class OPP.RBTaskData_PlayerStat
// Size: 0xe0 (Inherited: 0xc8)
struct URBTaskData_PlayerStat : URBTaskData {
	int32_t TargetValue; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)
	struct TArray<enum class EPlayerStat> PlayerStats; // 0xd0(0x10)
};

// Class OPP.RBTaskData_StageCompletion
// Size: 0x110 (Inherited: 0xc8)
struct URBTaskData_StageCompletion : URBTaskData {
	int32_t NumTimes; // 0xc8(0x04)
	bool bAnyStage; // 0xcc(0x01)
	char pad_CD[0x3]; // 0xcd(0x03)
	struct TArray<struct FRBStageID> StageIds; // 0xd0(0x10)
	struct FRBPlayerLoadoutValidator PlayerLoadoutValidator; // 0xe0(0x18)
	struct TArray<enum class EPlayerEvent> PlayerEventFailureConditions; // 0xf8(0x10)
	int32_t MaxDamagePerStage; // 0x108(0x04)
	char pad_10C[0x4]; // 0x10c(0x04)
};

// Class OPP.RBTaskManager
// Size: 0x378 (Inherited: 0x248)
struct ARBTaskManager : AInfo {
	struct FMulticastInlineDelegate OnTaskRegistered; // 0x248(0x10)
	struct FMulticastInlineDelegate OnTaskUnregistered; // 0x258(0x10)
	struct FMulticastInlineDelegate OnAcceptedTaskCountChanged; // 0x268(0x10)
	struct ARBGameStateBase* RBGameStateBase; // 0x278(0x08)
	struct ARBPlayerProgressionManager* RBPlayerProgressionManager; // 0x280(0x08)
	char pad_288[0x18]; // 0x288(0x18)
	struct TArray<struct FAvailableTask> AvailableTasks; // 0x2a0(0x10)
	char pad_2B0[0x50]; // 0x2b0(0x50)
	struct FPlayerTasks PlayerTasks; // 0x300(0x28)
	char pad_328[0x50]; // 0x328(0x50)

	void OnPlayerProgressionReceived(struct ARBPlayerState* RBPlayerState); // Function OPP.RBTaskManager.OnPlayerProgressionReceived // (Final|Native|Private) // @ game+0x1e17b58
	struct FPlayerTasks GetPlayerTasks(); // Function OPP.RBTaskManager.GetPlayerTasks // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e174b0
	struct TArray<struct FAvailableTask> GetAvailableTasks(); // Function OPP.RBTaskManager.GetAvailableTasks // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e173c4
};

// Class OPP.RBTasksConfig
// Size: 0x280 (Inherited: 0x28)
struct URBTasksConfig : UObject {
	int32_t MaxTrackedTasks; // 0x28(0x04)
	int32_t DailyTasks; // 0x2c(0x04)
	int32_t MaxActiveDailyTasks; // 0x30(0x04)
	int32_t WeeklyTasks; // 0x34(0x04)
	int32_t MaxActiveWeeklyTasks; // 0x38(0x04)
	int32_t DailyTaskExpirationTimeSeconds; // 0x3c(0x04)
	int32_t WeeklyTaskExpirationTimeSeconds; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct TArray<struct URBTaskData*> Tasks; // 0x48(0x10)
	int32_t ExpiringStatusTimeForDailyTaskInSecond; // 0x58(0x04)
	int32_t ExpiringStatusTimeForWeeklyTaskInSecond; // 0x5c(0x04)
	struct FSlateBrush TaskTrackedIcon; // 0x60(0x88)
	struct FSlateBrush TaskCompletedIcon; // 0xe8(0x88)
	struct FSlateBrush TaskExpiringIcon; // 0x170(0x88)
	struct FSlateBrush TaskAcceptedIcon; // 0x1f8(0x88)

	struct URBTaskData* FindTaskData(struct FName& taskId); // Function OPP.RBTasksConfig.FindTaskData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e17244
};

// Class OPP.RBTextChatManager
// Size: 0x2a8 (Inherited: 0x248)
struct ARBTextChatManager : AInfo {
	char pad_248[0x18]; // 0x248(0x18)
	struct TArray<struct FRBTextChatMessage> Messages; // 0x260(0x10)
	char pad_270[0x38]; // 0x270(0x38)
};

// Class OPP.RBTextChatWidget
// Size: 0x2b0 (Inherited: 0x268)
struct URBTextChatWidget : URBUserWidget {
	struct UAkAudioEvent* OnMessageSoundEvent; // 0x268(0x08)
	struct UAkAudioEvent* OnNotificationSoundEvent; // 0x270(0x08)
	float MessageDisplayTime; // 0x278(0x04)
	char pad_27C[0x4]; // 0x27c(0x04)
	struct TArray<struct FRBTextChatMessage> ActiveMessages; // 0x280(0x10)
	struct TArray<struct FRBTextChatMessage> PendingMessages; // 0x290(0x10)
	struct ARBMenuPlayerController* RBMenuPlayerController; // 0x2a0(0x08)
	char pad_2A8[0x8]; // 0x2a8(0x08)

	void OnTextChatManagerRegistered(); // Function OPP.RBTextChatWidget.OnTextChatManagerRegistered // (Final|Native|Protected) // @ game+0x1e1baf0
	void Event_ShowMessage(struct FRBTextChatMessage& Message); // Function OPP.RBTextChatWidget.Event_ShowMessage // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x201e6d4
	void Event_HideMessage(int32_t MessageId); // Function OPP.RBTextChatWidget.Event_HideMessage // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBThrowableWeapon
// Size: 0xb30 (Inherited: 0x9d0)
struct ARBThrowableWeapon : ARBPickup {
	int32_t BreakOnImpactAfterNumberOfThrow; // 0x9d0(0x04)
	float ThrownSpeed; // 0x9d4(0x04)
	float Gravity; // 0x9d8(0x04)
	float ThrowDistanceBeforeFalloff; // 0x9dc(0x04)
	float ThrowDistanceBeforeVerticalFall; // 0x9e0(0x04)
	bool bAutoAdjustThrownRotation; // 0x9e4(0x01)
	char pad_9E5[0x3]; // 0x9e5(0x03)
	float PitchRotationSpeed; // 0x9e8(0x04)
	float YawRotationSpeed; // 0x9ec(0x04)
	float RollWiggleSpeed; // 0x9f0(0x04)
	float RollWiggleAngle; // 0x9f4(0x04)
	float ThrownRotationOffsetZ; // 0x9f8(0x04)
	float RadiusForExtraNPCHitTest; // 0x9fc(0x04)
	bool bCanUseAimAssit; // 0xa00(0x01)
	char pad_A01[0x7]; // 0xa01(0x07)
	struct USceneComponent* ProjectileCenterRef; // 0xa08(0x08)
	float HitZoneRadius; // 0xa10(0x04)
	char pad_A14[0x4]; // 0xa14(0x04)
	struct UParticleSystemComponent* Trail; // 0xa18(0x08)
	char GameplayFlags; // 0xa20(0x01)
	char pad_A21[0x3]; // 0xa21(0x03)
	float Damage; // 0xa24(0x04)
	float DamageOnObjects; // 0xa28(0x04)
	char pad_A2C[0x4]; // 0xa2c(0x04)
	struct UParticleSystem* ImpactParticleSystem; // 0xa30(0x08)
	struct UAkAudioEvent* ImpactAudioEvent; // 0xa38(0x08)
	struct UAkAudioEvent* BounceAudioEvent; // 0xa40(0x08)
	struct UAkAudioEvent* LandAudioEvent; // 0xa48(0x08)
	struct TArray<struct UPhysicalMaterial*> SticksIntoMaterials; // 0xa50(0x10)
	bool bIsInteractibleAfterRest; // 0xa60(0x01)
	enum class ETriggeringStimulusType ImpactStimulusType; // 0xa61(0x01)
	bool bAffectedByLoudnessPerk; // 0xa62(0x01)
	char pad_A63[0x5]; // 0xa63(0x05)
	struct FMulticastInlineDelegate OnItemThrown; // 0xa68(0x10)
	bool bThrown; // 0xa78(0x01)
	char pad_A79[0x7f]; // 0xa79(0x7f)
	struct URBAimAssistComponent* ThrownAimAssistTarget; // 0xaf8(0x08)
	struct URBSoundComponent* SoundComponent; // 0xb00(0x08)
	struct ARBPawn* thrower; // 0xb08(0x08)
	char pad_B10[0x8]; // 0xb10(0x08)
	struct TArray<struct AActor*> HitIgnoreActors; // 0xb18(0x10)
	char pad_B28[0x8]; // 0xb28(0x08)

	void Multicast_ThrownHit(struct FVector HitLocation, struct FVector HitNormal, struct FVector reflectedDir, struct UPhysicalMaterial* impactMaterial, struct AActor* hitActor, bool forceBreak); // Function OPP.RBThrowableWeapon.Multicast_ThrownHit // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1e1b528
	void Multicast_Throw(struct ARBPawn* throwOwner, struct FVector throwStartLocation, struct FVector throwOnCurveLocationaimAssistTargetComp, struct URBAimAssistComponent* aimAssistTargetComp); // Function OPP.RBThrowableWeapon.Multicast_Throw // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1e1b3e8
	void BP_OnHitDestroy(); // Function OPP.RBThrowableWeapon.BP_OnHitDestroy // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnGroundAndPoundCounter(); // Function OPP.RBThrowableWeapon.BP_OnGroundAndPoundCounter // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBThrowableSkillItem
// Size: 0xb60 (Inherited: 0xb30)
struct ARBThrowableSkillItem : ARBThrowableWeapon {
	enum class EActiveSkillType ActiveSkillType; // 0xb28(0x01)
	struct USkeletalMeshComponent* SkeletalDisplayMesh; // 0xb30(0x08)
	struct UMaterialInterface* PPSActivationEffectMat; // 0xb38(0x08)
	struct ARBItemActiveSkill* ActiveSkillOwner; // 0xb40(0x08)
	enum class EActiveSkillState State; // 0xb48(0x01)
	enum class EActiveSkillState ProcessedState; // 0xb49(0x01)
	char pad_B4B[0xd]; // 0xb4b(0x0d)
	struct UMaterialInstanceDynamic* DynActivationPPSMat; // 0xb58(0x08)

	void OnRep_State(); // Function OPP.RBThrowableSkillItem.OnRep_State // (Final|Native|Protected) // @ game+0x1e1ba34
	float GetImpactRadius(); // Function OPP.RBThrowableSkillItem.GetImpactRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1b294
	void Event_OnDeployed(); // Function OPP.RBThrowableSkillItem.Event_OnDeployed // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnActivate(); // Function OPP.RBThrowableSkillItem.Event_OnActivate // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void DelayedDestroy(); // Function OPP.RBThrowableSkillItem.DelayedDestroy // (Native|Public) // @ game+0x1e1b27c
	void BP_MakePermanentlyDestroyed(); // Function OPP.RBThrowableSkillItem.BP_MakePermanentlyDestroyed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1b19c
	void BP_EndActivationSequence(); // Function OPP.RBThrowableSkillItem.BP_EndActivationSequence // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1b080
	void BP_BeginActivationSequence(); // Function OPP.RBThrowableSkillItem.BP_BeginActivationSequence // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1af70
};

// Class OPP.RBToasterDetector
// Size: 0x298 (Inherited: 0x248)
struct ARBToasterDetector : AActor {
	struct FAlertedStateActions AlertedStateActions; // 0x248(0x20)
	bool bExternalAlertedStateActions; // 0x268(0x01)
	char pad_269[0x7]; // 0x269(0x07)
	struct FAlertedStateActions ExternalAlertedStateActions; // 0x270(0x20)
	struct URBPlayerDetectionComponent* DetectionComponent; // 0x290(0x08)

	void BP_SetExternalAlertedStateActions(struct FAlertedStateActions& inAlertedStateActions); // Function OPP.RBToasterDetector.BP_SetExternalAlertedStateActions // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1e1b1b4
	struct TArray<struct ARBTriggerable*> BP_GetAllLinkedTriggerables(); // Function OPP.RBToasterDetector.BP_GetAllLinkedTriggerables // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1b094
	void BP_ClearExternalAlertedStateActions(); // Function OPP.RBToasterDetector.BP_ClearExternalAlertedStateActions // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1aff4
};

// Class OPP.RBToggleable
// Size: 0x28 (Inherited: 0x28)
struct URBToggleable : UInterface {

	void PostToggled(bool bToggleEnabled); // Function OPP.RBToggleable.PostToggled // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1e1bc00
};

// Class OPP.RBTortureObjectiveCoordinator
// Size: 0x1790 (Inherited: 0xba8)
struct ARBTortureObjectiveCoordinator : ARBBaseObjectiveCoordinator {
	struct FConfigurableFloat TotalMeter; // 0xba8(0xc8)
	struct FConfigurableFloat MeterPerInputSuccess; // 0xc70(0xc8)
	struct FObjectiveUISettings TorturePanelUISettings; // 0xd38(0xa50)
	struct ARBTortureRoom* tortureRoom; // 0x1788(0x08)

	void OnTortureRoomCurrentMeterChanged(struct ARBTortureRoom* tortureRoom); // Function OPP.RBTortureObjectiveCoordinator.OnTortureRoomCurrentMeterChanged // (Final|Native|Protected) // @ game+0x1e1bb84
	void OnTortureRoomCompleted(struct ARBTortureRoom* tortureRoom); // Function OPP.RBTortureObjectiveCoordinator.OnTortureRoomCompleted // (Final|Native|Protected) // @ game+0x1e1bb04
	void OnRep_TortureRoom(struct ARBTortureRoom* oldTortureRoom); // Function OPP.RBTortureObjectiveCoordinator.OnRep_TortureRoom // (Final|Native|Protected) // @ game+0x1e1ba70
	void OnPanelPawnInteractingChangedEvent(struct URBInteractiblePanelComponent* panel, struct ARBPawn* pawnInteracting); // Function OPP.RBTortureObjectiveCoordinator.OnPanelPawnInteractingChangedEvent // (Final|Native|Protected) // @ game+0x1e1b6ec
	void OnPanelActiveChangedEvent(struct URBInteractiblePanelComponent* panel, struct ARBPawn* pawnInteracting); // Function OPP.RBTortureObjectiveCoordinator.OnPanelActiveChangedEvent // (Final|Native|Protected) // @ game+0x1d88e4c
};

// Class OPP.RBTorturePanelComponent
// Size: 0xaa0 (Inherited: 0x7a0)
struct URBTorturePanelComponent : URBInteractiblePanelComponent {
	struct FConfigurableFloat TemporaryDamagePerFail; // 0x7a0(0xc8)
	float DelayBeforeInput; // 0x868(0x04)
	char pad_86C[0x4]; // 0x86c(0x04)
	struct FConfigurableFloat TimeForInput; // 0x870(0xc8)
	struct FConfigurableInt InputPoolSize; // 0x938(0xc8)
	struct ARBTortureRoom* tortureRoom; // 0xa00(0x08)
	int32_t CurrentInputToPress; // 0xa08(0x04)
	bool bMaxPanelMeterReached; // 0xa0c(0x01)
	char pad_A0D[0x3]; // 0xa0d(0x03)
	float PanelMeterRatio; // 0xa10(0x04)
	float InputBeginServerTimestamp; // 0xa14(0x04)
	bool bTryInProgress; // 0xa18(0x01)
	bool bTortureRoomSucceeded_Locally; // 0xa19(0x01)
	char pad_A1A[0x6]; // 0xa1a(0x06)
	struct FMulticastInlineDelegate OnTryInProgressChanged; // 0xa20(0x10)
	struct FMulticastInlineDelegate OnTrySucceeded; // 0xa30(0x10)
	struct FMulticastInlineDelegate OnTryFailed; // 0xa40(0x10)
	struct FMulticastInlineDelegate OnPanelSucceeded; // 0xa50(0x10)
	struct FMulticastInlineDelegate OnInteractionPause; // 0xa60(0x10)
	struct FMulticastInlineDelegate OnInteractionResume; // 0xa70(0x10)
	char pad_A80[0x8]; // 0xa80(0x08)
	struct TArray<struct FPlayerInputState> PlayerInputStates; // 0xa88(0x10)
	char pad_A98[0x8]; // 0xa98(0x08)

	void Multicast_OnTrySucceeded(); // Function OPP.RBTorturePanelComponent.Multicast_OnTrySucceeded // (Net|Native|Event|NetMulticast|Public) // @ game+0x1e1b3d0
	void Multicast_OnTryFailed(); // Function OPP.RBTorturePanelComponent.Multicast_OnTryFailed // (Net|Native|Event|NetMulticast|Public) // @ game+0x1e1b3b8
	void Multicast_OnPanelSucceeded(struct ARBPawn* Pawn, bool tortureCompleted); // Function OPP.RBTorturePanelComponent.Multicast_OnPanelSucceeded // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1e1b2ec
	bool IsTortureRoomCompleted(); // Function OPP.RBTorturePanelComponent.IsTortureRoomCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1b2bc
};

// Class OPP.RBTortureRoom
// Size: 0x2f0 (Inherited: 0x248)
struct ARBTortureRoom : AActor {
	struct FMulticastInlineDelegate OnTortureCompletedChanged; // 0x248(0x10)
	struct FMulticastInlineDelegate OnTortureEnabledChanged; // 0x258(0x10)
	struct FMulticastInlineDelegate OnCurrentMeterChanged; // 0x268(0x10)
	struct FMulticastInlineDelegate OnPlayerInputSuccessCallback; // 0x278(0x10)
	struct FMulticastInlineDelegate OnPlayerInputFailedCallback; // 0x288(0x10)
	struct FMulticastInlineDelegate OnPlayerConnectedCallback; // 0x298(0x10)
	struct FMulticastInlineDelegate OnPlayerDisconnectedCallback; // 0x2a8(0x10)
	struct TArray<struct URBTorturePanelComponent*> LinkedTorturePanels; // 0x2b8(0x10)
	float TotalMeter; // 0x2c8(0x04)
	float CurrentMeter; // 0x2cc(0x04)
	float MeterPerInputSuccess; // 0x2d0(0x04)
	bool bTortureCompleted; // 0x2d4(0x01)
	bool bTortureEnabled; // 0x2d5(0x01)
	char pad_2D6[0x1a]; // 0x2d6(0x1a)

	void OnRep_TortureEnabled(); // Function OPP.RBTortureRoom.OnRep_TortureEnabled // (Final|Native|Private) // @ game+0x1e1ba5c
	void OnRep_TortureCompleted(); // Function OPP.RBTortureRoom.OnRep_TortureCompleted // (Final|Native|Private) // @ game+0x1e1ba48
	void OnRep_CurrentMeter(); // Function OPP.RBTortureRoom.OnRep_CurrentMeter // (Final|Native|Private) // @ game+0x1e1ba0c
	void Event_OnTortureEnabledChanged(); // Function OPP.RBTortureRoom.Event_OnTortureEnabledChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnTortureCompletedChanged(); // Function OPP.RBTortureRoom.Event_OnTortureCompletedChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnPlayerInputSuccess(struct URBTorturePanelComponent* tortureComponent, struct ARBPlayer* Player); // Function OPP.RBTortureRoom.Event_OnPlayerInputSuccess // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnPlayerInputFailed(struct URBTorturePanelComponent* tortureComponent, struct ARBPlayer* Player); // Function OPP.RBTortureRoom.Event_OnPlayerInputFailed // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnPlayerDisconnected(struct URBTorturePanelComponent* tortureComponent, struct ARBPlayer* Player); // Function OPP.RBTortureRoom.Event_OnPlayerDisconnected // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnPlayerConnected(struct URBTorturePanelComponent* tortureComponent, struct ARBPlayer* Player); // Function OPP.RBTortureRoom.Event_OnPlayerConnected // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnCurrentMeterChanged(); // Function OPP.RBTortureRoom.Event_OnCurrentMeterChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBTradeable
// Size: 0x28 (Inherited: 0x28)
struct URBTradeable : UInterface {

	bool IsTradeable(); // Function OPP.RBTradeable.IsTradeable // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1db2f74
};

// Class OPP.RBTradeWindow
// Size: 0x248 (Inherited: 0x248)
struct ARBTradeWindow : AActor {
};

// Class OPP.RBTrapDart
// Size: 0x2b0 (Inherited: 0x250)
struct ARBTrapDart : ARBActor {
	float Speed; // 0x250(0x04)
	float MaxDistance; // 0x254(0x04)
	float HitDistance; // 0x258(0x04)
	enum class EDamageType DamageType; // 0x25c(0x01)
	char pad_25D[0x3]; // 0x25d(0x03)
	struct UStaticMeshComponent* RootStaticMesh; // 0x260(0x08)
	struct UBoxComponent* PlayerCollisionBox; // 0x268(0x08)
	bool bLaunched; // 0x270(0x01)
	char pad_271[0x3]; // 0x271(0x03)
	float LaunchReach; // 0x274(0x04)
	struct FVector LaunchDirection; // 0x278(0x0c)
	struct FVector LaunchInitialLocation; // 0x284(0x0c)
	float LaunchServerTimestamp; // 0x290(0x04)
	char pad_294[0x4]; // 0x294(0x04)
	struct ARBPlayer* TrappedPlayer; // 0x298(0x08)
	struct ARBTrapTriggerable* TrapOwner; // 0x2a0(0x08)
	char pad_2A8[0x8]; // 0x2a8(0x08)

	void OnRep_Launched(); // Function OPP.RBTrapDart.OnRep_Launched // (Final|Native|Public) // @ game+0x1e1ba20
	void OnPawnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComponent, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBTrapDart.OnPawnBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0x1e1b820
	void Multicast_TriggerTrap(bool bInitial); // Function OPP.RBTrapDart.Multicast_TriggerTrap // (Net|Native|Event|NetMulticast|Public) // @ game+0x1d21600
	void BP_OnReachedMaxLimitServer(); // Function OPP.RBTrapDart.BP_OnReachedMaxLimitServer // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnPlayerPsychosis(); // Function OPP.RBTrapDart.BP_OnPlayerPsychosis // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnPlayerDamage(); // Function OPP.RBTrapDart.BP_OnPlayerDamage // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnLaunchEvent(); // Function OPP.RBTrapDart.BP_OnLaunchEvent // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnHitPlayer(struct ARBPlayer* Player); // Function OPP.RBTrapDart.BP_OnHitPlayer // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnDetachFromPlayer(struct ARBPlayer* Player); // Function OPP.RBTrapDart.BP_OnDetachFromPlayer // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_Launch(struct FVector& Direction); // Function OPP.RBTrapDart.BP_Launch // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1e1b118
	bool BP_DoesPsychosis(); // Function OPP.RBTrapDart.BP_DoesPsychosis // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1b044
	bool BP_DoesDamage(); // Function OPP.RBTrapDart.BP_DoesDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1b008
};

// Class OPP.RBTrapGroup
// Size: 0x290 (Inherited: 0x248)
struct ARBTrapGroup : AActor {
	char pad_248[0x8]; // 0x248(0x08)
	bool bEnabled; // 0x250(0x01)
	char pad_251[0x7]; // 0x251(0x07)
	struct TArray<struct TSoftObjectPtr<AActor>> Traps; // 0x258(0x10)
	struct TArray<struct FRBTrapScenarioSetup> TrapScenarios; // 0x268(0x10)
	struct USceneComponent* TrapGroupRoot; // 0x278(0x08)
	struct URBRoomAssociationComponent* roomAssociationComponent; // 0x280(0x08)
	char pad_288[0x8]; // 0x288(0x08)

	void GenerateScenarioForEachTrap(); // Function OPP.RBTrapGroup.GenerateScenarioForEachTrap // (Final|Native|Public) // @ game+0x1521dbc
};

// Class OPP.RBTrapTriggerable
// Size: 0x420 (Inherited: 0x420)
struct ARBTrapTriggerable : ARBTriggerable {
	struct ARBWireTriggerTrap* linkedTrigger; // 0x418(0x08)

	bool IsCurrentlyTriggering(); // Function OPP.RBTrapTriggerable.IsCurrentlyTriggering // (Event|Public|BlueprintEvent|Const) // @ game+0x201e6d4
	void BP_LinkTriggerTrap(struct ARBWireTriggerTrap* triggerTrap); // Function OPP.RBTrapTriggerable.BP_LinkTriggerTrap // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBTrialAsyncData
// Size: 0xd8 (Inherited: 0x30)
struct URBTrialAsyncData : UDataAsset {
	struct FNarrativeScreenAnimationData IntroScreenAnimationData; // 0x30(0x18)
	struct FNarrativeScreenAnimationData EvalScreenAnimationData; // 0x48(0x18)
	bool bOverride_StageMusicEvents; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
	struct FStageAudioEvents StageMusicEvents; // 0x68(0x20)
	bool bOverride_MusicSystemOptions; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
	struct TArray<struct FStageMusicSystem> MusicSystemOptions; // 0x90(0x10)
	bool bOverride_StageSFXEvents; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)
	struct FStageAudioEvents StageSFXEvents; // 0xa8(0x20)
	struct UMaterialInstance* PhotoFinishMaterial; // 0xc8(0x08)
	struct UDataTable* FacialAnimations; // 0xd0(0x08)
};

// Class OPP.RBTrialBoardMenuTabWidget
// Size: 0x3a8 (Inherited: 0x280)
struct URBTrialBoardMenuTabWidget : URBCharacterSheetMenuTabWidget {
	char pad_280[0x8]; // 0x280(0x08)
	struct TArray<struct URBSocialMenuEntry*> SpatiallySortedEntries; // 0x288(0x10)
	bool bAllowDebugMatchSettings; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)
	struct URBSocialMenuEntry* EntryClass; // 0x2a0(0x08)
	struct URBSocialMenuEntry* EmptyEntryClass; // 0x2a8(0x08)
	struct UAkAudioEvent* NotificationSoundEvent; // 0x2b0(0x08)
	struct URBReportPlayerMenu* ReportPlayerMenuClass; // 0x2b8(0x08)
	char pad_2C0[0x50]; // 0x2c0(0x50)
	struct ARBMenuPlayerController* RBMenuPlayerController; // 0x310(0x08)
	struct ARBLobbyPlayerController* RBLobbyPlayerController; // 0x318(0x08)
	struct ARBLobbyPlayerState* PartyOwnerLobbyPlayerState; // 0x320(0x08)
	char pad_328[0x38]; // 0x328(0x38)
	struct ARBSocialMenuSceneActor* SceneActor; // 0x360(0x08)
	struct TArray<struct URBSocialMenuEntry*> Entries; // 0x368(0x10)
	struct TArray<struct URBSocialMenuEntry*> EntriesPendingRemoval; // 0x378(0x10)
	char pad_388[0x18]; // 0x388(0x18)
	struct URBSocialMenuManager* SocialMenuManager; // 0x3a0(0x08)

	bool WouldTrialCompletionUnlockProgram(struct FName& TrialId, struct FName& outProgramId); // Function OPP.RBTrialBoardMenuTabWidget.WouldTrialCompletionUnlockProgram // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e201a4
	void StartMatchCountdown(); // Function OPP.RBTrialBoardMenuTabWidget.StartMatchCountdown // (Final|Native|Public|BlueprintCallable) // @ game+0x1e20160
	void SetTrialId(struct FName& TrialId); // Function OPP.RBTrialBoardMenuTabWidget.SetTrialId // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1e20064
	void SetShowOtherPlayerOverlayWidgets(bool bInShowOtherPlayerOverlayWidgets); // Function OPP.RBTrialBoardMenuTabWidget.SetShowOtherPlayerOverlayWidgets // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1ffe4
	void SetGameDifficulty(enum class EGameDifficulty GameDifficulty); // Function OPP.RBTrialBoardMenuTabWidget.SetGameDifficulty // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1ff64
	void SetEnableCharacterOverlayWidgets(bool bInEnableCharacterOverlayWidgets); // Function OPP.RBTrialBoardMenuTabWidget.SetEnableCharacterOverlayWidgets // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1fee4
	void SaveMatchSettings(); // Function OPP.RBTrialBoardMenuTabWidget.SaveMatchSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1fed0
	void OnSocialMenuEntryCustomizationUpdated(struct URBSocialMenuEntry* Entry); // Function OPP.RBTrialBoardMenuTabWidget.OnSocialMenuEntryCustomizationUpdated // (Final|Native|Private) // @ game+0x1e1fe40
	void OnPlayerStatsDataAvailable(struct TArray<struct FRBStatContext>& stats, struct TArray<struct FRBUIReleasedCharacterDetails>& releasedCharacterDetailsList); // Function OPP.RBTrialBoardMenuTabWidget.OnPlayerStatsDataAvailable // (Final|Native|Private|HasOutParms) // @ game+0x1e1fd10
	void OnPlayerLeftGame(struct FUniqueNetIdRepl UniqueId); // Function OPP.RBTrialBoardMenuTabWidget.OnPlayerLeftGame // (Final|Native|Private) // @ game+0x1e1fc60
	void OnPlayerLeaving(enum class EPlayerLeaveTarget Target); // Function OPP.RBTrialBoardMenuTabWidget.OnPlayerLeaving // (Final|Native|Private) // @ game+0x1e1fbc8
	void OnPlayerJoinedGame(struct FUniqueNetIdRepl UniqueId); // Function OPP.RBTrialBoardMenuTabWidget.OnPlayerJoinedGame // (Final|Native|Private) // @ game+0x1e1fb18
	void OnPartyOwnerMatchSettingsUpdated(struct ARBLobbyPlayerState* RBLobbyPlayerState, struct FMatchSettings& MatchSettings); // Function OPP.RBTrialBoardMenuTabWidget.OnPartyOwnerMatchSettingsUpdated // (Final|Native|Private|HasOutParms) // @ game+0x1e1fa28
	void OnMatchStateUpdated(struct ARBLobbyPlayerState* RBLobbyPlayerState, struct FMatchState& MatchState); // Function OPP.RBTrialBoardMenuTabWidget.OnMatchStateUpdated // (Final|Native|Private|HasOutParms) // @ game+0x1e1f964
	void OnMatchSettingsUpdated(struct FMatchSettings& MatchSettings); // Function OPP.RBTrialBoardMenuTabWidget.OnMatchSettingsUpdated // (Final|Native|Private|HasOutParms) // @ game+0x1e1f8d4
	void OnGameStageInfoUpdated(struct FRBGameStageInfo& gameStageInfo); // Function OPP.RBTrialBoardMenuTabWidget.OnGameStageInfoUpdated // (Final|Native|Private|HasOutParms) // @ game+0x1e1f834
	void OnGameDifficultyChanged(); // Function OPP.RBTrialBoardMenuTabWidget.OnGameDifficultyChanged // (Final|Native|Private) // @ game+0x1e1f820
	void OnFindPartyStateUpdated(struct ARBLobbyPlayerState* RBLobbyPlayerState, struct FFindPartyState& FindPartyState); // Function OPP.RBTrialBoardMenuTabWidget.OnFindPartyStateUpdated // (Final|Native|Private|HasOutParms) // @ game+0x1e1f754
	void OnEntryActionRequested(struct URBSocialMenuEntry* Entry, enum class ERBSocialMenuEntryAction action); // Function OPP.RBTrialBoardMenuTabWidget.OnEntryActionRequested // (Final|Native|Private) // @ game+0x1e1f690
	void OnDrawHud(); // Function OPP.RBTrialBoardMenuTabWidget.OnDrawHud // (Final|Native|Private) // @ game+0x1e1f67c
	bool IsTrialUnlocked(struct TArray<struct FName>& requiredTrialIds); // Function OPP.RBTrialBoardMenuTabWidget.IsTrialUnlocked // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1f5cc
	bool IsTrialEnabled(struct FName& TrialId); // Function OPP.RBTrialBoardMenuTabWidget.IsTrialEnabled // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1f544
	bool IsTrialCompleted(struct FName& TrialId, bool bPerfect); // Function OPP.RBTrialBoardMenuTabWidget.IsTrialCompleted // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1f478
	bool IsSolo(); // Function OPP.RBTrialBoardMenuTabWidget.IsSolo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1f440
	bool IsProgramUnlocked(struct FName& ProgramId); // Function OPP.RBTrialBoardMenuTabWidget.IsProgramUnlocked // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1f3b8
	bool IsProgramEnabled(struct FName& ProgramId); // Function OPP.RBTrialBoardMenuTabWidget.IsProgramEnabled // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1f330
	bool IsOperationPending(); // Function OPP.RBTrialBoardMenuTabWidget.IsOperationPending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1f310
	bool IsMatchOwner(); // Function OPP.RBTrialBoardMenuTabWidget.IsMatchOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1f2ec
	bool IsDataPending(); // Function OPP.RBTrialBoardMenuTabWidget.IsDataPending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1f2b0
	bool HasCompletedProgram(struct FName& ProgramId); // Function OPP.RBTrialBoardMenuTabWidget.HasCompletedProgram // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1f228
	bool HasAttemptedTrial(struct FName& TrialId); // Function OPP.RBTrialBoardMenuTabWidget.HasAttemptedTrial // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1f1a0
	struct URBSocialMenuManager* GetSocialMenuManager(); // Function OPP.RBTrialBoardMenuTabWidget.GetSocialMenuManager // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e1f188
	struct ARBSocialMenuSceneActor* GetSceneActor(); // Function OPP.RBTrialBoardMenuTabWidget.GetSceneActor // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e1f15c
	float GetProgramTQ(struct FName& ProgramId); // Function OPP.RBTrialBoardMenuTabWidget.GetProgramTQ // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1f0c4
	struct FName GetProgramId(); // Function OPP.RBTrialBoardMenuTabWidget.GetProgramId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1f068
	struct FMatchSettings GetMatchSettings(); // Function OPP.RBTrialBoardMenuTabWidget.GetMatchSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1f040
	int32_t GetMatchCurrentPlayerCount(); // Function OPP.RBTrialBoardMenuTabWidget.GetMatchCurrentPlayerCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1f00c
	float GetBestTrialPersonalTQ(struct FName& TrialId); // Function OPP.RBTrialBoardMenuTabWidget.GetBestTrialPersonalTQ // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1ef74
	void FindParty(int32_t DesiredSize); // Function OPP.RBTrialBoardMenuTabWidget.FindParty // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1eee4
	void Event_UpdatePartyInviteWidgetVisibility(bool bShouldBeVisible); // Function OPP.RBTrialBoardMenuTabWidget.Event_UpdatePartyInviteWidgetVisibility // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_ShowOptions(); // Function OPP.RBTrialBoardMenuTabWidget.Event_ShowOptions // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_SetEntryPosition(struct URBSocialMenuEntry* Entry, struct FVector2D& Position); // Function OPP.RBTrialBoardMenuTabWidget.Event_SetEntryPosition // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x201e6d4
	void Event_RemoveEntry(struct URBSocialMenuEntry* Entry); // Function OPP.RBTrialBoardMenuTabWidget.Event_RemoveEntry // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_Refresh(); // Function OPP.RBTrialBoardMenuTabWidget.Event_Refresh // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_ChangeActiveSkill(); // Function OPP.RBTrialBoardMenuTabWidget.Event_ChangeActiveSkill // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_AddEntry(struct URBSocialMenuEntry* Entry); // Function OPP.RBTrialBoardMenuTabWidget.Event_AddEntry // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	bool CanStartMatch(); // Function OPP.RBTrialBoardMenuTabWidget.CanStartMatch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1ee4c
	bool CanSendPartyInvite(); // Function OPP.RBTrialBoardMenuTabWidget.CanSendPartyInvite // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1ee28
	bool CanFindParty(); // Function OPP.RBTrialBoardMenuTabWidget.CanFindParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1edf0
	void CancelMatchCountdown(); // Function OPP.RBTrialBoardMenuTabWidget.CancelMatchCountdown // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1eeb8
	void CancelFindParty(); // Function OPP.RBTrialBoardMenuTabWidget.CancelFindParty // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1ee8c
	bool CanCancelMatch(); // Function OPP.RBTrialBoardMenuTabWidget.CanCancelMatch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1edb8
	bool CanCancelFindParty(); // Function OPP.RBTrialBoardMenuTabWidget.CanCancelFindParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1ed4c
	bool CanAddFriend(); // Function OPP.RBTrialBoardMenuTabWidget.CanAddFriend // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1ed28
};

// Class OPP.RBTrialSectionConfig
// Size: 0x2af8 (Inherited: 0x28)
struct URBTrialSectionConfig : UObject {
	struct FRBTrialSectionConfigData SectionData; // 0x28(0x2ac8)
	struct URBTrialSectionConfig* Parent; // 0x2af0(0x08)
};

// Class OPP.RBTriggerableDoorWayDetector
// Size: 0x2f0 (Inherited: 0x248)
struct ARBTriggerableDoorWayDetector : AActor {
	struct URBRoomConnectorComponent* RoomConnectorComp; // 0x248(0x08)
	struct URBSoundConnectorComponent* SoundConnectorComp; // 0x250(0x08)
	struct UBoxComponent* DetectionZoneBox; // 0x258(0x08)
	struct UBoxComponent* DoorwayCollision; // 0x260(0x08)
	bool bStartsEnabled; // 0x268(0x01)
	bool bEnabled; // 0x269(0x01)
	bool bShouldBeOpened; // 0x26a(0x01)
	bool bLockedClosed; // 0x26b(0x01)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct TArray<struct ARBLargePickup*> DetectedActors; // 0x270(0x10)
	struct FScheduledBool bIsBlockingDoorWay; // 0x280(0x70)

	void OnRep_ShouldBeOpened(); // Function OPP.RBTriggerableDoorWayDetector.OnRep_ShouldBeOpened // (Final|Native|Protected) // @ game+0x1e29434
	void OnRep_LockedClosed(); // Function OPP.RBTriggerableDoorWayDetector.OnRep_LockedClosed // (Final|Native|Protected) // @ game+0x1e29420
	void OnRep_IsBlockingDoorWay(); // Function OPP.RBTriggerableDoorWayDetector.OnRep_IsBlockingDoorWay // (Final|Native|Protected) // @ game+0x1e29404
	void OnRep_Enabled(); // Function OPP.RBTriggerableDoorWayDetector.OnRep_Enabled // (Final|Native|Protected) // @ game+0x1e293f0
	void OnLargePickupDropped(struct ARBLargePickup* largePickup); // Function OPP.RBTriggerableDoorWayDetector.OnLargePickupDropped // (Final|Native|Protected) // @ game+0x1e29100
	void OnComponentEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function OPP.RBTriggerableDoorWayDetector.OnComponentEndOverlap // (Final|Native|Protected) // @ game+0x1e28f88
	void OnComponentBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBTriggerableDoorWayDetector.OnComponentBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x1e28ce8
	void IsBlockingDoorWaybackChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBTriggerableDoorWayDetector.IsBlockingDoorWaybackChangedCallback // (Final|Native|Protected) // @ game+0x1e28b84
	bool IsBlockingDoorway(); // Function OPP.RBTriggerableDoorWayDetector.IsBlockingDoorway // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e28c04
	void Event_OnShouldBeOpenedChanged(); // Function OPP.RBTriggerableDoorWayDetector.Event_OnShouldBeOpenedChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnLockedClosedChanged(); // Function OPP.RBTriggerableDoorWayDetector.Event_OnLockedClosedChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnIsBlockingDoorwayChanged(); // Function OPP.RBTriggerableDoorWayDetector.Event_OnIsBlockingDoorwayChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnEnabledChanged(); // Function OPP.RBTriggerableDoorWayDetector.Event_OnEnabledChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_SetShouldBeOpened(bool bValue); // Function OPP.RBTriggerableDoorWayDetector.BP_SetShouldBeOpened // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e28ac0
};

// Class OPP.RBTriggerableGate
// Size: 0x480 (Inherited: 0x420)
struct ARBTriggerableGate : ARBTriggerable {
	char pad_420[0x8]; // 0x420(0x08)
	bool bCanBeClosed; // 0x428(0x01)
	bool bCanBeUsedForRandomVariators; // 0x429(0x01)
	char pad_42A[0x6]; // 0x42a(0x06)
	struct TArray<struct FBlockableLink> BlockableLinks; // 0x430(0x10)
	bool bCanBeAutomaticallyBlockedBySection; // 0x440(0x01)
	char pad_441[0x7]; // 0x441(0x07)
	struct USceneComponent* TriggerableGateRootComponent; // 0x448(0x08)
	struct URBRoomConnectorComponent* RoomConnectorComp; // 0x450(0x08)
	enum class ERollingGateVariatorType DefaultVariatorType; // 0x458(0x01)
	bool bVariatorLogicEnabled; // 0x459(0x01)
	enum class EBlockableState BlockableState; // 0x45a(0x01)
	char pad_45B[0x5]; // 0x45b(0x05)
	struct TArray<struct URBRoomConnectorComponent*> RoomDetourPath; // 0x460(0x10)
	bool bRoomDetourValid; // 0x470(0x01)
	enum class ERollingGateVariatorType CurrentVariatorType; // 0x471(0x01)
	char pad_472[0xe]; // 0x472(0x0e)

	void OnRep_VariatorLogicEnabled(); // Function OPP.RBTriggerableGate.OnRep_VariatorLogicEnabled // (Final|Native|Private) // @ game+0x1e29448
	void OnRep_CurrentVariatorType(); // Function OPP.RBTriggerableGate.OnRep_CurrentVariatorType // (Final|Native|Private) // @ game+0x1e293dc
	void OnRep_BlockableState(); // Function OPP.RBTriggerableGate.OnRep_BlockableState // (Final|Native|Private) // @ game+0x1e293c8
	enum class ERollingGateVariatorType GetCurrentVariatorType(); // Function OPP.RBTriggerableGate.GetCurrentVariatorType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e28b6c
	enum class EBlockableState GetBlockableState(); // Function OPP.RBTriggerableGate.GetBlockableState // (Native|Public|Const) // @ game+0x1e28b40
	void Event_OnVariatorLogicEnabledChanged(); // Function OPP.RBTriggerableGate.Event_OnVariatorLogicEnabledChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnCurrentVariatorTypeChanged(); // Function OPP.RBTriggerableGate.Event_OnCurrentVariatorTypeChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnBlockableStateChanged(); // Function OPP.RBTriggerableGate.Event_OnBlockableStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_ForceVariatorType(enum class ERollingGateVariatorType VariatorType); // Function OPP.RBTriggerableGate.BP_ForceVariatorType // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e28a40
};

// Class OPP.RBTriggerableGroup
// Size: 0x430 (Inherited: 0x420)
struct ARBTriggerableGroup : ARBTriggerable {
	bool bInvertTrigger; // 0x418(0x01)
	struct TArray<struct TSoftObjectPtr<ARBTriggerable>> LinkedTriggerables; // 0x420(0x10)
};

// Class OPP.RBTutorialComponent
// Size: 0x250 (Inherited: 0x220)
struct URBTutorialComponent : USceneComponent {
	struct FName TutorialPersistentID; // 0x218(0x08)
	struct FText TutorialText; // 0x220(0x18)
	enum class EMessagePriority TutorialPriority; // 0x238(0x01)
	enum class ETutorialType TutorialType; // 0x239(0x01)
	bool bEnabledByDefault; // 0x23a(0x01)
	float MaxTutorialDistance; // 0x23c(0x04)
	float MaxTutorialAngle; // 0x240(0x04)
	bool bEnabled; // 0x244(0x01)
	char pad_24C[0x4]; // 0x24c(0x04)
};

// Class OPP.CoordinatorTutorialInfo
// Size: 0x48 (Inherited: 0x28)
struct UCoordinatorTutorialInfo : UObject {
	struct ARBBaseObjectiveCoordinator* coordinator; // 0x28(0x08)
	char pad_30[0x18]; // 0x30(0x18)

	void OnCompletionInProgressChanged(bool isProgressionInProgress, bool isCompletedByLocalPlayer); // Function OPP.CoordinatorTutorialInfo.OnCompletionInProgressChanged // (Final|Native|Private) // @ game+0x1e28c24
};

// Class OPP.RBTutorialManager
// Size: 0x180 (Inherited: 0x28)
struct URBTutorialManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct URBLocalProfile* RBProfile; // 0x30(0x08)
	char pad_38[0x8]; // 0x38(0x08)
	struct FTutorialRuntimeData CurrentTutorial; // 0x40(0x20)
	char pad_60[0x18]; // 0x60(0x18)
	struct TArray<struct UCoordinatorTutorialInfo*> CoordinatorInfos; // 0x78(0x10)
	struct TArray<struct URBTutorialComponent*> TutorialComponents; // 0x88(0x10)
	char pad_98[0xe8]; // 0x98(0xe8)

	void OnPlayerRevived(struct ARBPlayer* instigatorActor, struct ARBPlayer* subjectActor); // Function OPP.RBTutorialManager.OnPlayerRevived // (Final|Native|Public) // @ game+0x1e29304
	void OnObjectiveCoordinatorStateChanged(struct ARBBaseObjectiveCoordinator* coordinator, enum class EObjectiveCoordinatorState State); // Function OPP.RBTutorialManager.OnObjectiveCoordinatorStateChanged // (Final|Native|Private) // @ game+0x1e29180
};

// Class OPP.RBTutorialZoneComponent
// Size: 0x5c0 (Inherited: 0x590)
struct URBTutorialZoneComponent : URBDisplayMessageZoneComponent {
	struct FName TutorialPersistentID; // 0x590(0x08)
	enum class ETutorialType TutorialType; // 0x598(0x01)
	char pad_599[0x7]; // 0x599(0x07)
	struct TArray<struct FTutorialTextData> TutorialSequence; // 0x5a0(0x10)
	int32_t MaxNumberOfDisplayedTimes; // 0x5b0(0x04)
	float DelayBetweenTutorial; // 0x5b4(0x04)
	char pad_5B8[0x8]; // 0x5b8(0x08)
};

// Class OPP.RBUIBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct URBUIBlueprintLibrary : UBlueprintFunctionLibrary {

	void UpdateLastLevelGainedInfo(struct FUILevelInfo& levelInfo); // Function OPP.RBUIBlueprintLibrary.UpdateLastLevelGainedInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1e2dc74
	void TryClearMinigameProgressHUDOwner(struct AActor* progressOwner); // Function OPP.RBUIBlueprintLibrary.TryClearMinigameProgressHUDOwner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e2dbf0
	void ShowContextualTutorial(struct FText TutorialText, float duration); // Function OPP.RBUIBlueprintLibrary.ShowContextualTutorial // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e2db1c
	void SetTutorialPlayed(struct FName TutorialId); // Function OPP.RBUIBlueprintLibrary.SetTutorialPlayed // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e2da64
	void SetShouldReplayMenuTutorials(bool shouldReplay); // Function OPP.RBUIBlueprintLibrary.SetShouldReplayMenuTutorials // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e2d9c8
	void SetNPCUnlockAnnouncementPlayed(enum class EMetaNPCType NPCType); // Function OPP.RBUIBlueprintLibrary.SetNPCUnlockAnnouncementPlayed // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e2d95c
	void SetMinigameProgressHUDOwner(struct AActor* progressOwner); // Function OPP.RBUIBlueprintLibrary.SetMinigameProgressHUDOwner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e2d8e4
	void SetMenuTutorialPlayed(struct FName TutorialId); // Function OPP.RBUIBlueprintLibrary.SetMenuTutorialPlayed // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e2d868
	void SetMenuFocusAction(struct UWidget* Source, struct FName& action, struct FText& Text); // Function OPP.RBUIBlueprintLibrary.SetMenuFocusAction // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1e2d754
	void SetLastLevelGainedVoicelinePlayed(struct FUILevelInfo& levelInfo); // Function OPP.RBUIBlueprintLibrary.SetLastLevelGainedVoicelinePlayed // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1e2d6d4
	void SetHasVisitedNPC(enum class EMetaNPCType NPCType); // Function OPP.RBUIBlueprintLibrary.SetHasVisitedNPC // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e2d658
	void SetHasSeenItemInMenu(struct FName& OnlineID); // Function OPP.RBUIBlueprintLibrary.SetHasSeenItemInMenu // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1e2d5e0
	void SetHasSeenDocument(struct FName& ID); // Function OPP.RBUIBlueprintLibrary.SetHasSeenDocument // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1e2d520
	void SaveThumbnailForOutfits(struct TArray<struct URBCustomizationOutfit*>& rbCustomizationOutfits); // Function OPP.RBUIBlueprintLibrary.SaveThumbnailForOutfits // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d19c08
	void SaveThumbnailForOptions(struct TArray<struct URBPlayerCustomizationOption*>& rbCustomizationOptions); // Function OPP.RBUIBlueprintLibrary.SaveThumbnailForOptions // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d19c08
	void SaveThumbnailForCellItems(struct TArray<struct URBPlayerCellItemDefinition*>& rbPlayerCellItems); // Function OPP.RBUIBlueprintLibrary.SaveThumbnailForCellItems // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d19c08
	void ResetNonMenuTutorials(); // Function OPP.RBUIBlueprintLibrary.ResetNonMenuTutorials // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e2d4f0
	void ResetMenuTutorials(); // Function OPP.RBUIBlueprintLibrary.ResetMenuTutorials // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d31dc8
	void PushReleaseTutorials(); // Function OPP.RBUIBlueprintLibrary.PushReleaseTutorials // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e2d494
	void PushProgramTutorials(); // Function OPP.RBUIBlueprintLibrary.PushProgramTutorials // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e2d414
	void PushHUDTutorial(struct FHUDTutorialTextData& HUDTutorialTextData); // Function OPP.RBUIBlueprintLibrary.PushHUDTutorial // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1e2d38c
	struct TArray<struct FString> ParseTVChannelTextIntoLines(struct FString Text); // Function OPP.RBUIBlueprintLibrary.ParseTVChannelTextIntoLines // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e2d2e4
	struct FText NormalizedScoreToText(float Score); // Function OPP.RBUIBlueprintLibrary.NormalizedScoreToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e2d244
	enum class EPlayerTrialRating NormalizedScoreToRating(float Score); // Function OPP.RBUIBlueprintLibrary.NormalizedScoreToRating // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e2d1c0
	bool IsShowingLoadingScreen(); // Function OPP.RBUIBlueprintLibrary.IsShowingLoadingScreen // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e2d180
	bool IsShippingBuild(); // Function OPP.RBUIBlueprintLibrary.IsShippingBuild // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x16c9874
	bool IsReplayingMenuTutorials(); // Function OPP.RBUIBlueprintLibrary.IsReplayingMenuTutorials // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e2d144
	bool IsMetaNPCUnlocked(enum class EMetaNPCType NPCType); // Function OPP.RBUIBlueprintLibrary.IsMetaNPCUnlocked // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e2d0bc
	void HideTutorial(); // Function OPP.RBUIBlueprintLibrary.HideTutorial // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e2d094
	bool HasVisitedNPC(enum class EMetaNPCType NPCType); // Function OPP.RBUIBlueprintLibrary.HasVisitedNPC // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e2cff8
	bool HasUnseenAcquiredDocument(); // Function OPP.RBUIBlueprintLibrary.HasUnseenAcquiredDocument // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e2cfd4
	bool HasSeenDocument(struct FName& ID); // Function OPP.RBUIBlueprintLibrary.HasSeenDocument // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1e2cf28
	bool HasPlayedVoicelineForLastLevelGained(struct FUILevelInfo& levelInfo); // Function OPP.RBUIBlueprintLibrary.HasPlayedVoicelineForLastLevelGained // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1e2ce9c
	bool HasPlayedTutorial(struct FName TutorialId); // Function OPP.RBUIBlueprintLibrary.HasPlayedTutorial // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e2cdec
	bool HasPlayedNPCUnlockAnnouncement(enum class EMetaNPCType NPCType); // Function OPP.RBUIBlueprintLibrary.HasPlayedNPCUnlockAnnouncement // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e2cd50
	bool HasPlayedMenuTutorial(struct FName TutorialId); // Function OPP.RBUIBlueprintLibrary.HasPlayedMenuTutorial // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e2cc98
	bool HasNewShopItem(enum class ECustomizationMenuCategory Category); // Function OPP.RBUIBlueprintLibrary.HasNewShopItem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e2cc18
	bool HasAnyNewShopItem(bool isCustomizingFemale); // Function OPP.RBUIBlueprintLibrary.HasAnyNewShopItem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e2cb84
	struct FString GetMatchmakingRegionName(struct FString region); // Function OPP.RBUIBlueprintLibrary.GetMatchmakingRegionName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e2cadc
	struct AActor* GetLocalCellMenuCharacter(); // Function OPP.RBUIBlueprintLibrary.GetLocalCellMenuCharacter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e2ca88
	struct UTexture2D* GetGamepadInputTextureFromKey(struct FKey& Key); // Function OPP.RBUIBlueprintLibrary.GetGamepadInputTextureFromKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1e2c9dc
	int32_t GetCurrencyReward(struct FRBGeneratedRewardData& RewardData, enum class ECurrencyType currencyType); // Function OPP.RBUIBlueprintLibrary.GetCurrencyReward // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1e2c8c8
	struct TArray<struct FText> FormatUpgradeEffectTexts(struct FName& upgradeOnlineId); // Function OPP.RBUIBlueprintLibrary.FormatUpgradeEffectTexts // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1e2c828
	struct FText FormatUpgradeEffectText(struct FName& upgradeOnlineId); // Function OPP.RBUIBlueprintLibrary.FormatUpgradeEffectText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1e2c760
	struct FText FormatTextForDecorator(struct FText& Message, int32_t HeightOverride); // Function OPP.RBUIBlueprintLibrary.FormatTextForDecorator // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1e2c66c
	struct FString FormatPlayerName(struct FString DisplayName, int32_t maxLength); // Function OPP.RBUIBlueprintLibrary.FormatPlayerName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e2c580
	void ClearMenuFocusAction(struct UWidget* Source); // Function OPP.RBUIBlueprintLibrary.ClearMenuFocusAction // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e2c4fc
	bool BP_IsQuestGiverUnlocked(struct ARBQuestGiver* questGiver); // Function OPP.RBUIBlueprintLibrary.BP_IsQuestGiverUnlocked // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e2c454
	struct FString BP_GetRHIName(enum class EGraphicsRHI Version); // Function OPP.RBUIBlueprintLibrary.BP_GetRHIName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e2c3bc
};

// Class OPP.RBUnlockableLargePickupRequirement
// Size: 0x90 (Inherited: 0x88)
struct URBUnlockableLargePickupRequirement : URBInteractionRequirement {
	struct ARBUnlockableLargePickup* ParentLargePickup; // 0x88(0x08)
};

// Class OPP.RBUnlockableLargePickup
// Size: 0x960 (Inherited: 0x930)
struct ARBUnlockableLargePickup : ARBLargePickup {
	bool bStartsLocked; // 0x928(0x01)
	struct FText UnlockInteractionText; // 0x930(0x18)
	bool bIsLocked; // 0x948(0x01)
	char pad_94A[0x6]; // 0x94a(0x06)
	struct FMulticastInlineDelegate OnIsLockedChanged; // 0x950(0x10)

	void OnRep_Islocked(); // Function OPP.RBUnlockableLargePickup.OnRep_Islocked // (Final|Native|Protected) // @ game+0x1e313d8
	void Event_OnIsLockedChanged(bool bValue); // Function OPP.RBUnlockableLargePickup.Event_OnIsLockedChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_SetIsLocked(bool bValue); // Function OPP.RBUnlockableLargePickup.BP_SetIsLocked // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e30a18
};

// Class OPP.RBUpgradeMenuTab
// Size: 0x278 (Inherited: 0x268)
struct URBUpgradeMenuTab : URBUserWidget {
	struct FMulticastInlineDelegate OnUpgradeAcquired; // 0x268(0x10)

	void TryAcquireUpgrade(struct FName& ID); // Function OPP.RBUpgradeMenuTab.TryAcquireUpgrade // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1e3157c
	void OnItemMouseUp(struct FMenuUpgradeItemInfo& itemInfo); // Function OPP.RBUpgradeMenuTab.OnItemMouseUp // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1e30e7c
	void OnItemMouseDown(struct FMenuUpgradeItemInfo& itemInfo); // Function OPP.RBUpgradeMenuTab.OnItemMouseDown // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1e30dbc
	void Event_OnUpgradeAcquired(); // Function OPP.RBUpgradeMenuTab.Event_OnUpgradeAcquired // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
};

// Class OPP.RBQuestItemSpawner
// Size: 0x28 (Inherited: 0x28)
struct URBQuestItemSpawner : UInterface {

	struct ARBPickup* SpawnQuestItem(struct ARBPickup* specificItemClass); // Function OPP.RBQuestItemSpawner.SpawnQuestItem // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1e314e8
	struct AActor* GetSpecificObjectiveActorTarget(); // Function OPP.RBQuestItemSpawner.GetSpecificObjectiveActorTarget // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1db2ab0
	void CleanQuestItem(); // Function OPP.RBQuestItemSpawner.CleanQuestItem // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x16acf98
};

// Class OPP.RBValvePanelComponent
// Size: 0x18e0 (Inherited: 0x7a0)
struct URBValvePanelComponent : URBInteractiblePanelComponent {
	struct FConfigurableFloat TotalMeter; // 0x7a0(0xc8)
	struct FConfigurableFloat MeterGainPerSecond; // 0x868(0xc8)
	struct FConfigurableFloat MeterDecayPerSecond; // 0x930(0xc8)
	struct FConfigurableBool bMeterResetsWhenLockedOut; // 0x9f8(0x60)
	bool bNewInputMethod; // 0xa58(0x01)
	char pad_A59[0x7]; // 0xa59(0x07)
	struct FRuntimeFloatCurve InputAccelerationCurve; // 0xa60(0x88)
	struct FRuntimeFloatCurve FrictionSpeedCurve; // 0xae8(0x88)
	struct FConfigurableFloat SuccessRatioRange; // 0xb70(0xc8)
	struct FConfigurableFloat MinSuccessTargetRatioRange; // 0xc38(0xc8)
	struct FConfigurableFloat MaxSuccessTargetRatioRange; // 0xd00(0xc8)
	struct FConfigurableFloat MaxTimeInFailureZoneBeforeLockOut; // 0xdc8(0xc8)
	struct FConfigurableFloat MinNonInputVelocity; // 0xe90(0xc8)
	struct UAnimSequence* ForwardWheelAnimation; // 0xf58(0x08)
	struct UAnimSequence* StuckWheelAnimation; // 0xf60(0x08)
	struct UAnimSequence* BackwardWheelAnimation; // 0xf68(0x08)
	struct FConfigurableFloat NumberOfTurnForCompletion; // 0xf70(0xc8)
	struct FConfigurableFloat LockedOutDuration; // 0x1038(0xc8)
	struct FConfigurableFloat DamageWhenLockedOut; // 0x1100(0xc8)
	struct FConfigurableFloat LockedOutPressionResetSpeed; // 0x11c8(0xc8)
	struct FConfigurableFloat MinimumLockedOutDuration; // 0x1290(0xc8)
	bool bMajorDisturbanceOnWrongValve; // 0x1358(0x01)
	char pad_1359[0x7]; // 0x1359(0x07)
	struct FConfigurableFloat PlayerNoiseOnWrongValve; // 0x1360(0xc8)
	struct FConfigurableFloat PlayerNoiseFullyAudibleRange; // 0x1428(0xc8)
	struct FConfigurableFloat PlayerNoiseMaxAudibleRange; // 0x14f0(0xc8)
	bool bShowLockedText; // 0x15b8(0x01)
	char pad_15B9[0x7]; // 0x15b9(0x07)
	struct FHUDTutorialTextData DisconnectedTutorialData; // 0x15c0(0x38)
	struct TArray<struct TSoftObjectPtr<AActor>> LinkedButtons; // 0x15f8(0x10)
	struct TArray<struct FPipeArrangement> PipeArrangements; // 0x1608(0x10)
	struct FMulticastInlineDelegate OnValveTurn; // 0x1618(0x10)
	struct FScheduledFloat CurrentMeter; // 0x1628(0x78)
	float SuccessRatioTarget; // 0x16a0(0x04)
	enum class EPressureValveType ValveType; // 0x16a4(0x01)
	bool bLocked; // 0x16a5(0x01)
	char pad_16A6[0x2]; // 0x16a6(0x02)
	struct TArray<struct URBCoopOperatableComponent*> UnlockingButtons; // 0x16a8(0x10)
	struct FScheduledFloat CurrentGameplayRatio; // 0x16b8(0x78)
	struct FScheduledBool bIsInSuccessZone; // 0x1730(0x70)
	struct FScheduledBool bIsInFailureZone; // 0x17a0(0x70)
	struct FNetworkFloat CurrentPawnTurningIntent; // 0x1810(0x10)
	struct FMulticastInlineDelegate OnInSuccessZoneChanged; // 0x1820(0x10)
	struct FMulticastInlineDelegate OnInFailureZoneChanged; // 0x1830(0x10)
	struct FMulticastInlineDelegate OnPanelSucceeded; // 0x1840(0x10)
	struct FMulticastInlineDelegate OnCurrentMeterChanged; // 0x1850(0x10)
	struct FMulticastInlineDelegate OnCurrentGameplayRatioChanged; // 0x1860(0x10)
	struct FMulticastInlineDelegate OnSuccessRatioTargetChanged; // 0x1870(0x10)
	struct FMulticastInlineDelegate OnValveTypeChanged; // 0x1880(0x10)
	struct FMulticastInlineDelegate OnLockedStateChanged; // 0x1890(0x10)
	struct FMulticastInlineDelegate OnInitialInteraction; // 0x18a0(0x10)
	char pad_18B0[0x10]; // 0x18b0(0x10)
	float InputDirectionHeldSide; // 0x18c0(0x04)
	float InputVelocity; // 0x18c4(0x04)
	char pad_18C8[0x18]; // 0x18c8(0x18)

	void OnUnlockingButtonStateChanged_Server(struct URBCoopOperatableComponent* Component); // Function OPP.RBValvePanelComponent.OnUnlockingButtonStateChanged_Server // (Final|Native|Public) // @ game+0x1e31440
	void OnRep_ValveType(); // Function OPP.RBValvePanelComponent.OnRep_ValveType // (Final|Native|Protected) // @ game+0x1e3142c
	void OnRep_SuccessRatioTarget(); // Function OPP.RBValvePanelComponent.OnRep_SuccessRatioTarget // (Final|Native|Protected) // @ game+0x1e31418
	void OnRep_Locked(); // Function OPP.RBValvePanelComponent.OnRep_Locked // (Final|Native|Protected) // @ game+0x1e313ec
	void OnRep_IsInSuccessZone(); // Function OPP.RBValvePanelComponent.OnRep_IsInSuccessZone // (Final|Native|Protected) // @ game+0x1e313bc
	void OnRep_IsInFailureZone(); // Function OPP.RBValvePanelComponent.OnRep_IsInFailureZone // (Final|Native|Protected) // @ game+0x1e313a0
	void OnRep_CurrentMeter(); // Function OPP.RBValvePanelComponent.OnRep_CurrentMeter // (Final|Native|Protected) // @ game+0x1e31384
	void OnRep_CurrentGameplayRatio(); // Function OPP.RBValvePanelComponent.OnRep_CurrentGameplayRatio // (Final|Native|Protected) // @ game+0x1e31368
	void Multicast_OnPanelSucceeded(struct ARBPawn* Pawn); // Function OPP.RBValvePanelComponent.Multicast_OnPanelSucceeded // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d0c848
	void IsInSuccessZoneChangedCallback(enum class EScheduledPropertyValueChangedType changeType); // Function OPP.RBValvePanelComponent.IsInSuccessZoneChangedCallback // (Final|Native|Protected) // @ game+0x1e30d3c
	void IsInFailureZoneChangedCallback(enum class EScheduledPropertyValueChangedType changeType); // Function OPP.RBValvePanelComponent.IsInFailureZoneChangedCallback // (Final|Native|Protected) // @ game+0x1e30cbc
	bool IsCompleted(); // Function OPP.RBValvePanelComponent.IsCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e30c98
	float GetUnlockedTimeLeftRatio(); // Function OPP.RBValvePanelComponent.GetUnlockedTimeLeftRatio // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e30c70
	float GetCurrentMeterRatio(); // Function OPP.RBValvePanelComponent.GetCurrentMeterRatio // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e30c48
	void CurrentMeterChangedCallback(enum class EScheduledPropertyValueChangedType changeType); // Function OPP.RBValvePanelComponent.CurrentMeterChangedCallback // (Final|Native|Protected) // @ game+0x1e30bc8
	void CurrentGameplayRatioChangedCallback(enum class EScheduledPropertyValueChangedType changeType); // Function OPP.RBValvePanelComponent.CurrentGameplayRatioChangedCallback // (Final|Native|Protected) // @ game+0x1e30b48
	bool BP_IsInSuccessZone(); // Function OPP.RBValvePanelComponent.BP_IsInSuccessZone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e309dc
	bool BP_IsInFailureZone(); // Function OPP.RBValvePanelComponent.BP_IsInFailureZone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e309c4
	float BP_GetCurrentPawnTurningIntent(); // Function OPP.RBValvePanelComponent.BP_GetCurrentPawnTurningIntent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e309ac
};

// Class OPP.RBVariatorAction
// Size: 0x28 (Inherited: 0x28)
struct URBVariatorAction : UObject {
};

// Class OPP.RBVariatorAction_PlayerGameplayModifier
// Size: 0xf8 (Inherited: 0x28)
struct URBVariatorAction_PlayerGameplayModifier : URBVariatorAction {
	struct FRBConfigurableGameplayAttributeModifier GameplayAttributeModifier; // 0x28(0xd0)
};

// Class OPP.RBVariatorAction_ChangeItemSpawing
// Size: 0xf8 (Inherited: 0x28)
struct URBVariatorAction_ChangeItemSpawing : URBVariatorAction {
	enum class EItemType ItemType; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct FConfigurableFloat SpawningCountMultiplier; // 0x30(0xc8)
};

// Class OPP.RBVariatorAction_StartingItem
// Size: 0x30 (Inherited: 0x28)
struct URBVariatorAction_StartingItem : URBVariatorAction {
	enum class EItemType ItemType; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
};

// Class OPP.RBVariatorAction_UniqueVariatorType
// Size: 0x80 (Inherited: 0x28)
struct URBVariatorAction_UniqueVariatorType : URBVariatorAction {
	enum class EUniqueVariatorType VariatorType; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct TMap<struct FName, struct FConfigurableFloat> Values; // 0x30(0x50)
};

// Class OPP.RBVariatorAction_AIConfig
// Size: 0x40 (Inherited: 0x28)
struct URBVariatorAction_AIConfig : URBVariatorAction {
	struct URBPartialAIConfig* GlobalConfigOverrides; // 0x28(0x08)
	struct TArray<struct FRBVariatorNPCAIConfigOverride> ConfigOverrides; // 0x30(0x10)
};

// Class OPP.RBVariatorAction_TrialConfig
// Size: 0x60 (Inherited: 0x28)
struct URBVariatorAction_TrialConfig : URBVariatorAction {
	struct FRBTrialConfigDataOverrides Overrides; // 0x28(0x34)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class OPP.RBVariatorAction_RollingGate
// Size: 0x30 (Inherited: 0x28)
struct URBVariatorAction_RollingGate : URBVariatorAction {
	enum class ERollingGateVariatorType Type; // 0x28(0x01)
	bool bForRandomGates; // 0x29(0x01)
	char pad_2A[0x6]; // 0x2a(0x06)
};

// Class OPP.RBVariatorAction_Bundle
// Size: 0x38 (Inherited: 0x28)
struct URBVariatorAction_Bundle : URBVariatorAction {
	struct TArray<struct URBVariatorInfo*> Variators; // 0x28(0x10)
};

// Class OPP.RBVariatorInfo
// Size: 0x78 (Inherited: 0x28)
struct URBVariatorInfo : UObject {
	struct FName ID; // 0x28(0x08)
	struct FText DisplayName; // 0x30(0x18)
	struct FText Description; // 0x48(0x18)
	struct UTexture2D* Icon; // 0x60(0x08)
	struct TArray<struct URBVariatorAction*> Actions; // 0x68(0x10)
};

// Class OPP.RBVariatorManager
// Size: 0x370 (Inherited: 0x248)
struct ARBVariatorManager : AActor {
	struct FMulticastInlineDelegate OnVariatorsChanged; // 0x248(0x10)
	struct TArray<struct URBVariatorInfo*> ReplicatedVariatorInfos; // 0x258(0x10)
	struct TArray<struct URBVariatorInfo*> CurrentVariatorInfos; // 0x268(0x10)
	char pad_278[0xf8]; // 0x278(0xf8)

	void OnRep_ReplicatedVariatorInfos(); // Function OPP.RBVariatorManager.OnRep_ReplicatedVariatorInfos // (Final|Native|Protected) // @ game+0x1e35818
	bool IsVariatorUniqueTypeActive(enum class EUniqueVariatorType Type); // Function OPP.RBVariatorManager.IsVariatorUniqueTypeActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e354e0
	enum class ERollingGateVariatorType GetRandomRollingGateVariatorType(); // Function OPP.RBVariatorManager.GetRandomRollingGateVariatorType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e354c8
	enum class ERollingGateVariatorType GetFixedRollingGateVariatorType(); // Function OPP.RBVariatorManager.GetFixedRollingGateVariatorType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e354b0
	struct TArray<struct URBVariatorInfo*> GetCurrentVariatorConfigs(); // Function OPP.RBVariatorManager.GetCurrentVariatorConfigs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3543c
};

// Class OPP.RBVoiceChatManager
// Size: 0x398 (Inherited: 0x28)
struct URBVoiceChatManager : UObject {
	char pad_28[0x370]; // 0x28(0x370)

	void OnVoiceChatEnabledChanged(struct ARBPlayerState* RBPlayerState); // Function OPP.RBVoiceChatManager.OnVoiceChatEnabledChanged // (Final|Native|Private) // @ game+0x1e35904
};

// Class OPP.RBVolumeGroup
// Size: 0x258 (Inherited: 0x248)
struct ARBVolumeGroup : AActor {
	struct TArray<struct TSoftObjectPtr<AVolume>> Volumes; // 0x248(0x10)
};

// Class OPP.RBVolumetricFog
// Size: 0x258 (Inherited: 0x258)
struct ARBVolumetricFog : ARBVolumetricFogBase {
};

// Class OPP.RBVolumetricFogComponent
// Size: 0x5c0 (Inherited: 0x5c0)
struct URBVolumetricFogComponent : URBVolumetricFogBaseComponent {
	float NightVisionVolumetricsIntensity; // 0x5b8(0x04)
};

// Class OPP.RBVOManager
// Size: 0x228 (Inherited: 0x28)
struct URBVOManager : UObject {
	struct TArray<struct FTalkerState> TalkerStates; // 0x28(0x10)
	struct TArray<struct FEndOfEventInfo> EndOfEventCallbacksToProcess; // 0x38(0x10)
	struct TArray<struct FMarkerInfo> MarkerCallbacksToProcess; // 0x48(0x10)
	struct TArray<struct FPlayedVOInfo> PlayedVOs; // 0x58(0x10)
	struct TArray<struct FQueuedLine> QueuedLines; // 0x68(0x10)
	char pad_78[0x1a0]; // 0x78(0x1a0)
	struct TArray<struct FVOEventData> VOEventLog; // 0x218(0x10)
};

// Class OPP.RBVOMapping
// Size: 0x108 (Inherited: 0x28)
struct URBVOMapping : UObject {
	struct TArray<struct FString> VoiceTypeOptions; // 0x28(0x10)
	struct TArray<struct FVOMapping> Mappings; // 0x38(0x10)
	struct TArray<struct FContinuousSoundConfig> ContinuousSounds; // 0x48(0x10)
	struct TMap<enum class EContinuousSoundNPCState, struct FContinuousSoundInfo> ContinuousSoundVOs; // 0x58(0x50)
	struct TMap<enum class EContinuousSoundNPCState, struct FContinuousSoundInfo> ContinuousSoundFoleys; // 0xa8(0x50)
	struct FVORemapTable VORemapTable; // 0xf8(0x10)
};

// Class OPP.RBVOMappingOverride
// Size: 0x48 (Inherited: 0x28)
struct URBVOMappingOverride : UObject {
	struct TArray<struct FVOMapping> MappingOverrides; // 0x28(0x10)
	struct FVORemapTable VORemapOverrides; // 0x38(0x10)
};

// Class OPP.RBVOSoundComponent
// Size: 0x590 (Inherited: 0x580)
struct URBVOSoundComponent : URBSoundComponent {
	enum class ESubtitlePriority SubtitlePriority; // 0x580(0x01)
	char pad_581[0xf]; // 0x581(0x0f)
};

// Class OPP.RBWarningsAndErrorsTestAgent
// Size: 0x68 (Inherited: 0x40)
struct URBWarningsAndErrorsTestAgent : URBFunctionalTestAgent {
	char pad_40[0x8]; // 0x40(0x08)
	struct TArray<struct FString> IgnoreFilter; // 0x48(0x10)
	struct TArray<struct FString> ErrorStack; // 0x58(0x10)
};

// Class OPP.RBWaterRippleEmitter
// Size: 0x260 (Inherited: 0x220)
struct URBWaterRippleEmitter : USceneComponent {
	float RippleRadius; // 0x218(0x04)
	float IdleRippleForce; // 0x21c(0x04)
	float TranslationRippleForceMultiplier; // 0x220(0x04)
	float RotationRippleForceMultiplier; // 0x224(0x04)
	float MaxRotationRippleForce; // 0x228(0x04)
	float MaxRippleForce; // 0x22c(0x04)
	struct TArray<struct ARBWaterVolume*> WaterVolumes; // 0x230(0x10)
	char pad_248[0x18]; // 0x248(0x18)
};

// Class OPP.RBWaterValveObjectiveCoordinator
// Size: 0x2488 (Inherited: 0xba8)
struct ARBWaterValveObjectiveCoordinator : ARBBaseObjectiveCoordinator {
	char pad_BA8[0x8]; // 0xba8(0x08)
	struct UMaterialInterface* NeutralPipeMaterial; // 0xbb0(0x08)
	struct TArray<struct FWaterValveSectionGroupConfig> WaterValveSectionGroupConfig; // 0xbb8(0x10)
	struct FConfigurableInt NumberOfValveSections; // 0xbc8(0xc8)
	struct FRandomSettings ValvePerSectionRandomSettings; // 0xc90(0x320)
	bool bDisableValveInSectionWhenWaterFlowing; // 0xfb0(0x01)
	char pad_FB1[0x7]; // 0xfb1(0x07)
	struct UTexture2D* HUDObjectiveIcon; // 0xfb8(0x08)
	struct UTexture2D* UnknownValveIcon; // 0xfc0(0x08)
	struct UTexture2D* DiscoveredValveIcon; // 0xfc8(0x08)
	struct FObjectiveUISettings WaterValveUISettings; // 0xfd0(0xa50)
	struct FObjectiveUISettings PumpDisplayUISettings; // 0x1a20(0xa50)
	struct TArray<struct FWaterValveSectionRuntimeData> WaterValveSectionRuntimeData; // 0x2470(0x10)
	char pad_2480[0x8]; // 0x2480(0x08)

	void SelectAllLinkedActors(); // Function OPP.RBWaterValveObjectiveCoordinator.SelectAllLinkedActors // (Final|Native|Protected) // @ game+0x1521dbc
	void OnValveInitialInteraction_Server(struct URBInteractiblePanelComponent* panel, struct ARBPawn* pawnInteracting); // Function OPP.RBWaterValveObjectiveCoordinator.OnValveInitialInteraction_Server // (Final|Native|Protected) // @ game+0x1e35840
	void OnRep_WaterValveSectionData(); // Function OPP.RBWaterValveObjectiveCoordinator.OnRep_WaterValveSectionData // (Final|Native|Private) // @ game+0x1e3582c
	void OnPumpInteractionEvent_Server(struct ARBPawn* interactor, struct URBInteractibleComponent* Component); // Function OPP.RBWaterValveObjectiveCoordinator.OnPumpInteractionEvent_Server // (Final|Native|Protected) // @ game+0x1e35750
	void OnPanelActiveChangedEvent_Server(struct URBInteractiblePanelComponent* panel, struct ARBPawn* pawnInteracting); // Function OPP.RBWaterValveObjectiveCoordinator.OnPanelActiveChangedEvent_Server // (Final|Native|Protected) // @ game+0x1e3556c
	void BP_StopWater(); // Function OPP.RBWaterValveObjectiveCoordinator.BP_StopWater // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x1e35428
};

// Class OPP.RBWaterVolume
// Size: 0x880 (Inherited: 0x850)
struct ARBWaterVolume : APostProcessVolume {
	struct TSoftObjectPtr<ALandscape> AssociatedWaterLandscape; // 0x850(0x28)
	char pad_878[0x8]; // 0x878(0x08)

	void OnWaterVolumeEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function OPP.RBWaterVolume.OnWaterVolumeEndOverlap // (Final|Native|Public) // @ game+0x1e35b8c
	void OnWaterVolumeBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function OPP.RBWaterVolume.OnWaterVolumeBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0x1e35984
};

// Class OPP.RBWaypoint
// Size: 0x2d0 (Inherited: 0x248)
struct ARBWaypoint : AActor {
	bool bEnabled; // 0x248(0x01)
	bool bSkipAction; // 0x249(0x01)
	char pad_24A[0x6]; // 0x24a(0x06)
	struct TArray<struct TSoftObjectPtr<ARBWaypointGroup>> WaypointGroups; // 0x250(0x10)
	struct FGameplayTagContainer EnableOnlyForNPCTags; // 0x260(0x20)
	struct FGameplayTagContainer DisableForNPCTags; // 0x280(0x20)
	bool bPlayRandomWaypointAnim; // 0x2a0(0x01)
	char pad_2A1[0x3]; // 0x2a1(0x03)
	float OverrideMinWaitTime; // 0x2a4(0x04)
	float OverrideMaxWaitTime; // 0x2a8(0x04)
	bool bTurnToRotation; // 0x2ac(0x01)
	char pad_2AD[0x3]; // 0x2ad(0x03)
	float Radius; // 0x2b0(0x04)
	char pad_2B4[0x4]; // 0x2b4(0x04)
	struct UAnimSequence* AnimToPlay; // 0x2b8(0x08)
	bool bLoopAnimation; // 0x2c0(0x01)
	bool bAlignToWaypoint; // 0x2c1(0x01)
	char pad_2C2[0x2]; // 0x2c2(0x02)
	float SlowDownFactor; // 0x2c4(0x04)
	char pad_2C8[0x1]; // 0x2c8(0x01)
	enum class RBWaypointVersion Version; // 0x2c9(0x01)
	char pad_2CA[0x6]; // 0x2ca(0x06)

	void Event_OnReached(struct ARBBot* bot); // Function OPP.RBWaypoint.Event_OnReached // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	bool BP_IsEnabled(); // Function OPP.RBWaypoint.BP_IsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e35410
};

// Class OPP.RBWaypointGroup
// Size: 0x270 (Inherited: 0x248)
struct ARBWaypointGroup : AActor {
	struct FRBWaypointGroupCustomizationProxy UICustomizationProxy; // 0x248(0x08)
	struct TArray<struct TSoftObjectPtr<AVolume>> WaypointVolumes; // 0x250(0x10)
	struct TArray<struct ARBWaypoint*> LinkedWaypoints; // 0x260(0x10)
};

// Class OPP.RBWhoWasWhere
// Size: 0x440 (Inherited: 0x28)
struct URBWhoWasWhere : UObject {
	struct FWWWRecordingData Recording; // 0x28(0xd0)
	char pad_F8[0x158]; // 0xf8(0x158)
	struct TArray<struct AWWWPawnPlaybackActor*> PawnPlaybackActors; // 0x250(0x10)
	struct TArray<struct AWWWObjectiveMarker*> ObjectiveMarkers; // 0x260(0x10)
	struct TArray<struct UPrimitiveComponent*> HiddenComps; // 0x270(0x10)
	struct TArray<struct AActor*> HiddenActors; // 0x280(0x10)
	struct FWWWPlaybackStateData CachedPlaybackStateData[0xc]; // 0x290(0x180)
	struct TArray<struct FWWWPawnRecord> LoadedPawnRecords; // 0x410(0x10)
	char pad_420[0x10]; // 0x420(0x10)
	struct TArray<struct FSoftObjectPath> DebugAssetReferences; // 0x430(0x10)
};

// Class OPP.RBWindowShutter
// Size: 0x450 (Inherited: 0x420)
struct ARBWindowShutter : ARBTriggerable {
	bool bCanBeBlocked; // 0x420(0x01)
	enum class EBlockableState BlockableState; // 0x421(0x01)
	char pad_422[0x6]; // 0x422(0x06)
	struct USceneComponent* SceneRootComponent; // 0x428(0x08)
	struct URBRoomConnectorComponent* RoomConnectorComp; // 0x430(0x08)
	struct TArray<struct URBRoomConnectorComponent*> RoomDetourPath; // 0x438(0x10)
	bool bRoomDetourValid; // 0x448(0x01)
	char pad_449[0x7]; // 0x449(0x07)

	void OnRep_BlockableState(); // Function OPP.RBWindowShutter.OnRep_BlockableState // (Final|Native|Protected) // @ game+0x1e38c7c
	enum class EBlockableState GetBlockableState(); // Function OPP.RBWindowShutter.GetBlockableState // (Native|Public|Const) // @ game+0x1e28b40
	void Event_OnBlockableStateChanged(); // Function OPP.RBWindowShutter.Event_OnBlockableStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_ForceBlockableState(enum class EBlockableState inBlockableState); // Function OPP.RBWindowShutter.BP_ForceBlockableState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e385b8
};

// Class OPP.RBWireTriggerTrap
// Size: 0x720 (Inherited: 0x658)
struct ARBWireTriggerTrap : ARBOperatable {
	char pad_658[0x68]; // 0x658(0x68)
	bool bEnabled; // 0x6c0(0x01)
	char pad_6C1[0x7]; // 0x6c1(0x07)
	struct TArray<struct ARBTrapTriggerable*> LinkedTraps; // 0x6c8(0x10)
	struct FVector PingIconOffset; // 0x6d8(0x0c)
	bool bStartsArmed; // 0x6e4(0x01)
	bool bNeedTrapToArm; // 0x6e5(0x01)
	char pad_6E6[0x2]; // 0x6e6(0x02)
	struct ARBPawn* Triggerer; // 0x6e8(0x08)
	bool bCanPlayBypassSound; // 0x6f0(0x01)
	char pad_6F1[0x3]; // 0x6f1(0x03)
	float TriggeredServerTimestamp; // 0x6f4(0x04)
	struct ARBDoor* linkedDoor; // 0x6f8(0x08)
	struct UAkAudioEvent* TriggeredSoundEvent; // 0x700(0x08)
	struct UAkAudioEvent* TrapBypassedSoundEvent; // 0x708(0x08)
	float TrapBypassedAudioCueRatio; // 0x710(0x04)
	bool bIsArmed; // 0x714(0x01)
	bool bTriggered; // 0x715(0x01)
	bool bCurrentlyEnabled; // 0x716(0x01)
	char pad_717[0x9]; // 0x717(0x09)

	void SetIsTriggered(bool bInIsTriggered); // Function OPP.RBWireTriggerTrap.SetIsTriggered // (Final|Native|Public|BlueprintCallable) // @ game+0x1e38ccc
	void OnRep_Triggered(); // Function OPP.RBWireTriggerTrap.OnRep_Triggered // (Final|Native|Public) // @ game+0x1e38cb8
	void OnRep_LinkedTraps(); // Function OPP.RBWireTriggerTrap.OnRep_LinkedTraps // (Final|Native|Public) // @ game+0x1e38ca4
	void OnRep_IsArmed(); // Function OPP.RBWireTriggerTrap.OnRep_IsArmed // (Final|Native|Public) // @ game+0x1e38c90
	void OnRep_Enabled(); // Function OPP.RBWireTriggerTrap.OnRep_Enabled // (Final|Native|Public) // @ game+0x1d518d4
	void OnLinkedDoorAction(struct ARBPawn* Pawn, enum class EDoorActionType actionType); // Function OPP.RBWireTriggerTrap.OnLinkedDoorAction // (Final|Native|Public) // @ game+0x1e38b98
	void OnLinkDoorInteraction(struct ARBPawn* Pawn, bool bOpening); // Function OPP.RBWireTriggerTrap.OnLinkDoorInteraction // (Final|Native|Public) // @ game+0x1e38ad0
	bool GetIsTriggered(); // Function OPP.RBWireTriggerTrap.GetIsTriggered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e38890
	bool GetIsEnabled(); // Function OPP.RBWireTriggerTrap.GetIsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e38878
	bool GetIsArmed(); // Function OPP.RBWireTriggerTrap.GetIsArmed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e38860
	void BP_TriggerTrap(); // Function OPP.RBWireTriggerTrap.BP_TriggerTrap // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e3879c
	void BP_OnDisarmed(); // Function OPP.RBWireTriggerTrap.BP_OnDisarmed // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_OnArmed(); // Function OPP.RBWireTriggerTrap.BP_OnArmed // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_LinkTrap(struct ARBTrapTriggerable* trap); // Function OPP.RBWireTriggerTrap.BP_LinkTrap // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void BP_IsTriggererOnWrongSide(struct ARBPawn*& outTriggerer, bool& outIsOnWrongSide); // Function OPP.RBWireTriggerTrap.BP_IsTriggererOnWrongSide // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3864c
	void BP_ForceArmedState(bool bArmed); // Function OPP.RBWireTriggerTrap.BP_ForceArmedState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e38530
};

// Class OPP.RBWorld
// Size: 0x3b10 (Inherited: 0x28)
struct URBWorld : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct URBAimAssistComponent*> AimAssistComponents; // 0x30(0x10)
	struct TArray<struct ARBAISpawner*> AISpawners; // 0x40(0x10)
	struct TArray<struct UPointLightComponent*> AllDynamicLights; // 0x50(0x10)
	struct TArray<struct ALightmassImportanceVolume*> AllLightmassImportanceVolumes; // 0x60(0x10)
	struct TArray<struct ARBAmbientActivityMarker*> ambientMarkers; // 0x70(0x10)
	struct TArray<struct ARBBackgroundCharacter*> BackgroundCharacters; // 0x80(0x10)
	struct TArray<struct ARBBackgroundDoor*> BackgroundDoors; // 0x90(0x10)
	struct TArray<struct URBBoxNavMeshBlockingComponent*> BoxNavMeshBlockingComponents; // 0xa0(0x10)
	struct TArray<struct ARBDoor*> Doors; // 0xb0(0x10)
	struct TArray<struct AActor*> RandomBlockableActors; // 0xc0(0x10)
	struct TArray<struct AActor*> BlockedActors; // 0xd0(0x10)
	struct TArray<struct URBHackPanelComponent*> HackPanelComponents; // 0xe0(0x10)
	struct TArray<struct ARBHittableActor*> Hittables; // 0xf0(0x10)
	struct TArray<struct URBNPCInterestPointComponent*> InterestPoints; // 0x100(0x10)
	struct TArray<struct URBPlayerDetectionComponent*> PlayerDetectionComponents; // 0x110(0x10)
	struct TArray<struct ARBInvestigationPoint*> InvestigationPoints; // 0x120(0x10)
	struct TArray<struct ARBItemSpawningManager*> ItemSpawningManagers; // 0x130(0x10)
	struct TArray<struct URBLocalPlayerProximityComponent*> LocalPlayerProximityComponents; // 0x140(0x10)
	struct TArray<struct URBLocalPlayerVisibilityComponent*> LocalPlayerVisibilityComponents; // 0x150(0x10)
	char pad_160[0x10]; // 0x160(0x10)
	struct TArray<struct ARBMonsterCloset*> MonsterClosets; // 0x170(0x10)
	struct TArray<struct ARBNPC*> NPCs; // 0x180(0x10)
	struct TArray<struct ARBNPC*> NightHunters; // 0x190(0x10)
	struct TArray<struct URBOutlineComponent*> OutlineComponents; // 0x1a0(0x10)
	struct TArray<struct ARBPlayerCell*> PlayerCells; // 0x1b0(0x10)
	struct TArray<struct URBPropOptimizerComponent*> PropOptimizers; // 0x1c0(0x10)
	struct TArray<struct ARBPushCartSpawner*> PushCartSpawners; // 0x1d0(0x10)
	struct TArray<struct URBPuzzleRoomComponent*> PuzzleRooms; // 0x1e0(0x10)
	struct TArray<struct ARBRandomManager*> RandomManagers; // 0x1f0(0x10)
	struct TArray<struct URBActiveSkillVisionComponent*> RBActiveSkillVisionComponents; // 0x200(0x10)
	struct TArray<struct ARBBreakableObstacle*> RBBreakableObstacles; // 0x210(0x10)
	struct TArray<struct URBDamageableComponent*> RBDamageableComponents; // 0x220(0x10)
	struct TArray<struct URBHidespotComponent*> RBHidespotComponents; // 0x230(0x10)
	struct TArray<struct ARBIconMergerVolume*> RBIconMergerVolumes; // 0x240(0x10)
	struct TArray<struct ARBInteractible*> RBInteractibles; // 0x250(0x10)
	struct TArray<struct ARBLargePickup*> RBLargePickups; // 0x260(0x10)
	struct TArray<struct ARBBasePushable*> RBPushables; // 0x270(0x10)
	struct TArray<struct ARBPawn*> RBPawns; // 0x280(0x10)
	struct TArray<struct ARBPickup*> RBPickups; // 0x290(0x10)
	struct TArray<struct ARBPlayer*> RBPlayers; // 0x2a0(0x10)
	struct TArray<struct URBRandomAmbientSoundComponent*> RBRandomAmbientSounds; // 0x2b0(0x10)
	struct TArray<struct ARBPlayerRespawner*> RBRespawners; // 0x2c0(0x10)
	struct TArray<struct URBRepulsionComponent*> RepulsionComponents; // 0x2d0(0x10)
	struct TArray<struct URBRewardRoomComponent*> RewardRooms; // 0x2e0(0x10)
	struct TArray<struct UObject*> WorldPopulateInterfaceObjects; // 0x2f0(0x10)
	struct TArray<struct UObject*> WorldFullyLoadedToCallObjects; // 0x300(0x10)
	struct TArray<struct ARBRoom*> Rooms; // 0x310(0x10)
	struct TArray<struct ARBRoomGroup*> RoomGroups; // 0x320(0x10)
	struct TArray<struct ARBRoomGroup*> MissionRoomGroups; // 0x330(0x10)
	struct ARBHallucinationManager* HallucinationManager; // 0x340(0x08)
	struct TArray<struct ARBSAS*> SASList; // 0x348(0x10)
	struct ARBEvalCorridor* CurrentEvalCorridor; // 0x358(0x08)
	struct TArray<struct ARBCrouchUnderMarker*> SlideUnderMarkers; // 0x360(0x10)
	struct TArray<struct URBSoundConnectorComponent*> SoundConnectors; // 0x370(0x10)
	struct TArray<struct ARBSoundVolume*> SoundVolumes; // 0x380(0x10)
	struct TArray<struct URBSinglePlayerHelperComponent*> SinglePlayerHelperComponentList; // 0x390(0x10)
	struct TArray<struct URBEvalCorridorHelperComponent*> EvalCorridorHelperComponentList; // 0x3a0(0x10)
	struct TArray<struct URBRailForPushableComponent*> RailForPushableComponentList; // 0x3b0(0x10)
	struct TArray<struct FObstacleVariatorComponentList> ObstacleVariatorComponentLists; // 0x3c0(0x10)
	struct TArray<struct ARBSASTransitionZone*> TransitionZones; // 0x3d0(0x10)
	struct TArray<struct ARBTriggerableGate*> TriggerableGates; // 0x3e0(0x10)
	struct TArray<struct ARBNarrativeScreen*> NarrativeScreens; // 0x3f0(0x10)
	struct TArray<struct ARBNarrativeScreenChannel*> NarrativeScreenChannels; // 0x400(0x10)
	struct TArray<struct ARBLedgeMarker*> UnvalidatedLedgeMarkers; // 0x410(0x10)
	struct TArray<struct ARBVolumetricFog*> VolumetricFogs; // 0x420(0x10)
	struct TArray<struct ARBVolumetricFogAlternateDensityVolume*> FogAlternateDensityVolumes; // 0x430(0x10)
	struct TArray<struct URBWaterSimulationComponent*> WaterSimulations; // 0x440(0x10)
	struct TArray<struct ARBWaypoint*> Waypoints; // 0x450(0x10)
	struct TArray<struct ARBWaypointGroup*> WaypointGroups; // 0x460(0x10)
	struct TArray<struct FLongJumpInfo> LongJumps; // 0x470(0x10)
	struct TArray<struct ARBPushCartGoalManager*> PushCartGoalManagers; // 0x480(0x10)
	struct TArray<struct URBSinglePlayerHelperComponent*> SinglePlayerHelperComponentToProcess; // 0x490(0x10)
	struct TArray<struct URBRoomAssociationComponent*> RoomAssociationComponents; // 0x4a0(0x10)
	struct TArray<struct URBRoomConnectorComponent*> RoomConnectorComponents; // 0x4b0(0x10)
	struct TArray<struct URBObjectiveProximityComponent*> ObjectiveProximityComponents; // 0x4c0(0x10)
	struct TArray<struct ARBTrapGroup*> TrapGroups; // 0x4d0(0x10)
	struct FObstacleRandomizationRuntimeData ObstacleRandomizationRuntimeData; // 0x4e0(0xc0)
	struct TArray<struct FTemporaryAttachmentInfo> TemporaryAttachments; // 0x5a0(0x10)
	struct TArray<struct ARBGeneratorMultiObjectiveActor*> Generators; // 0x5b0(0x10)
	struct TArray<struct ARBWaterVolume*> WaterVolumes; // 0x5c0(0x10)
	struct TArray<struct URBWaterRippleEmitter*> WaterRippleEmitters; // 0x5d0(0x10)
	struct TArray<struct URBRandomizableHelperComponent*> RandomizableHelperComponents; // 0x5e0(0x10)
	struct TArray<struct ULevel*> LevelsToPopulate; // 0x5f0(0x10)
	struct TArray<struct ULevel*> AddedLevels; // 0x600(0x10)
	struct TArray<struct FDelayedActionHandle> ReplicationCallback; // 0x610(0x10)
	char pad_620[0x6c0]; // 0x620(0x6c0)
	struct TArray<struct ARBThrowableWeapon*> ActiveThrowableWeapons; // 0xce0(0x10)
	struct TArray<struct ARBSplineFollowingActor*> SplineFollowingActors; // 0xcf0(0x10)
	struct TArray<struct URBNetworkSyncComponent*> NetworkSyncComponents; // 0xd00(0x10)
	struct ARBAnnouncer* RBAnnouncer; // 0xd10(0x08)
	struct ARBStreaming* RBStreaming; // 0xd18(0x08)
	struct ARBTaskManager* RBTaskManager; // 0xd20(0x08)
	struct ARBPlayerProgressionManager* RBPlayerProgressionManager; // 0xd28(0x08)
	struct ARBPlayerLoadoutManager* RBPlayerLoadoutManager; // 0xd30(0x08)
	struct ARBTextChatManager* RBTextChatManager; // 0xd38(0x08)
	struct ARBVariatorManager* VariatorManager; // 0xd40(0x08)
	bool bIsResettingStage; // 0xd48(0x01)
	char pad_D49[0x17]; // 0xd49(0x17)
	struct FMulticastInlineDelegate OnInteractibleRegistered; // 0xd60(0x10)
	struct FMulticastInlineDelegate OnInteractibleUnregistered; // 0xd70(0x10)
	struct FMulticastInlineDelegate OnRBStreamingInitialized; // 0xd80(0x10)
	struct FMulticastInlineDelegate OnPopulateFinished; // 0xd90(0x10)
	struct FMulticastInlineDelegate OnTextChatManagerRegistered; // 0xda0(0x10)
	struct FMulticastInlineDelegate OnPawnRegistered; // 0xdb0(0x10)
	struct FMulticastInlineDelegate OnPawnUnregistered; // 0xdc0(0x10)
	char pad_DD0[0x68]; // 0xdd0(0x68)
	struct TArray<struct ARBAISpawner*> LevelAISpawnersToPopulate; // 0xe38(0x10)
	struct TArray<struct UObject*> WorldPopulateInterfaceObjectToPopulate; // 0xe48(0x10)
	struct TArray<struct ARBContainer*> ContainersToSpawnItems; // 0xe58(0x10)
	struct TArray<struct ARBItemSpawningManager*> ItemSpawningManagersToPopulate; // 0xe68(0x10)
	struct TArray<struct URBPuzzleRoomComponent*> PuzzleRoomsToPopulate; // 0xe78(0x10)
	struct TArray<struct URBRewardRoomComponent*> RewardRoomsToPopulate; // 0xe88(0x10)
	struct TArray<struct URBRewardRoomComponent*> RewardRoomsToSetup; // 0xe98(0x10)
	struct TArray<struct ARBSASTransitionZone*> TransitionZonesToPopulate; // 0xea8(0x10)
	struct TArray<struct ARBBaseObjectiveCoordinator*> ObjCoordinatorsToPrepare; // 0xeb8(0x10)
	struct TArray<struct ARBBaseObjectiveCoordinator*> ObjCoordinatorsToPopulate; // 0xec8(0x10)
	struct TArray<struct ARBBaseObjectiveCoordinator*> RailObjCoordinatorsToPopulate; // 0xed8(0x10)
	struct TArray<struct ARBBaseObjectiveCoordinator*> PreDoorRandomizationObjCoordinatorsToPopulate; // 0xee8(0x10)
	struct TArray<struct ARBBaseObjectiveCoordinator*> ObjCoordinatorsToSetup; // 0xef8(0x10)
	struct TArray<struct URBObjectiveProximityComponent*> ObjectiveProximityComponentsToPopulate; // 0xf08(0x10)
	struct TArray<struct ARBWaypointGroup*> WaypointGroupsToPopulate; // 0xf18(0x10)
	struct TArray<struct ARBTriggerableGate*> VariatorGatesToPopulate; // 0xf28(0x10)
	struct TArray<struct URBHidespotComponent*> HidespotComponentsToPopulate; // 0xf38(0x10)
	struct TArray<struct ARBRoomGroup*> RoomGroupsToBuildCaches; // 0xf48(0x10)
	struct TArray<struct ARBRoomGroup*> MissionRoomGroupsToPopulate; // 0xf58(0x10)
	struct TArray<struct URBRewardRoomComponent*> RewardRoomsToFinalize; // 0xf68(0x10)
	struct FRBTrialSectionConfigData FullStageSectionData; // 0xf78(0x2ac8)
	bool bFullStageSectionDataValid; // 0x3a40(0x01)
	char pad_3A41[0x7]; // 0x3a41(0x07)
	struct TArray<struct ARBRoomGroup*> RoomGroupsToRandomizeBlocked; // 0x3a48(0x10)
	struct TArray<struct ARBRoomGroup*> RoomGroupsToRandomizeDoors; // 0x3a58(0x10)
	struct TArray<struct ARBRoomGroup*> RoomGroupsToRandomizeHidespots; // 0x3a68(0x10)
	struct TArray<struct URBRoomAssociationComponent*> RoomAssociationComponentsToPopulate; // 0x3a78(0x10)
	struct TArray<struct URBRoomConnectorComponent*> RoomConnectorComponentsToPopulate; // 0x3a88(0x10)
	struct TArray<struct ARBRoom*> RoomsToBuildCaches; // 0x3a98(0x10)
	struct TArray<struct ARBRandomManager*> RandomManagersToUpdate; // 0x3aa8(0x10)
	struct TArray<struct AActor*> NavmeshActorsToRegister; // 0x3ab8(0x10)
	char pad_3AC8[0x8]; // 0x3ac8(0x08)
	struct TArray<struct AActor*> ActiveSkillVisionActors; // 0x3ad0(0x10)
	struct TArray<struct AActor*> ActorsToClean; // 0x3ae0(0x10)
	struct TArray<struct USkinnedMeshComponent*> SkinnedMeshComponents; // 0x3af0(0x10)
	char pad_3B00[0x10]; // 0x3b00(0x10)

	struct URBWaterSimulationComponent* GetRBWaterSimulationComponent(); // Function OPP.RBWorld.GetRBWaterSimulationComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e38aac
	struct TArray<struct ARBPlayerRespawner*> GetRBRespawners(); // Function OPP.RBWorld.GetRBRespawners // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e38a38
	struct TArray<struct ARBPlayer*> GetRBPlayers(); // Function OPP.RBWorld.GetRBPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e38a1c
	struct TArray<struct ARBPickup*> GetRBPickups(); // Function OPP.RBWorld.GetRBPickups // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e38a00
	struct TArray<struct ARBPawn*> GetRBPawns(); // Function OPP.RBWorld.GetRBPawns // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e389e4
	struct TArray<struct ARBLargePickup*> GetRBLargePickups(); // Function OPP.RBWorld.GetRBLargePickups // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e389c8
	struct TArray<struct ARBInteractible*> GetRBInteractibles(); // Function OPP.RBWorld.GetRBInteractibles // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e389ac
	struct TArray<struct ARBBreakableObstacle*> GetRBBreakableObstacles(); // Function OPP.RBWorld.GetRBBreakableObstacles // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e38938
	struct TArray<struct ARBNPC*> GetNPCs(); // Function OPP.RBWorld.GetNPCs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3891c
	struct TArray<struct ARBMonsterCloset*> GetMonsterClosets(); // Function OPP.RBWorld.GetMonsterClosets // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e388a8
	struct TArray<struct ARBDoor*> GetDoors(); // Function OPP.RBWorld.GetDoors // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e38844
	float EstimateFogDensity(struct FVector& Location); // Function OPP.RBWorld.EstimateFogDensity // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e387b0
	void BP_RegisterActorToClean(struct AActor* Actor); // Function OPP.RBWorld.BP_RegisterActorToClean // (Final|Native|Public|BlueprintCallable) // @ game+0x1e3871c
};

// Class OPP.RBWorldSettings
// Size: 0x750 (Inherited: 0x3e0)
struct ARBWorldSettings : AWorldSettings {
	int32_t NumPlayersToStart; // 0x3e0(0x04)
	int32_t maxNumberOfPlayers; // 0x3e4(0x04)
	struct ARBPawn* CheatBotToSpawn; // 0x3e8(0x08)
	struct URBFootStepGridComponent* FootStepGrid; // 0x3f0(0x08)
	float MinDistanceBetweenSASAndObjectivesOverride; // 0x3f8(0x04)
	float MinDistanceBetweenSASSeperatedAndObjectivesOverride; // 0x3fc(0x04)
	float MinDistanceBetweenDifferentMainObjectivesActorsOverride; // 0x400(0x04)
	float MinDistanceBetweenSameMainObjectivesActorsOverride; // 0x404(0x04)
	float MinDistanceBetweenSameSecondaryObjectivesActorsOverride; // 0x408(0x04)
	float MinDistanceBetweenSecondaryObjectivesActorsAndMainActorsOverride; // 0x40c(0x04)
	char bOverride_PuzzleRoomCount : 1; // 0x410(0x01)
	char pad_410_1 : 7; // 0x410(0x01)
	char pad_411[0x7]; // 0x411(0x07)
	struct FRandomSettings PuzzleRoomCountOverride; // 0x418(0x320)
	bool bAutoRunMapCheck; // 0x738(0x01)
	bool bAutoHidespotRandomization; // 0x739(0x01)
	bool bAutoDoorRandomization; // 0x73a(0x01)
	bool bAutoTrapRandomization; // 0x73b(0x01)
	char pad_73C[0x4]; // 0x73c(0x04)
	struct URBTrialSectionConfig* FullStageSectionConfigOverride; // 0x740(0x08)
	bool bForceUseRoomGroupsAsSections; // 0x748(0x01)
	bool bUseRandomManagerForRollingGateRandomization; // 0x749(0x01)
	bool bEditorBlockableValidation; // 0x74a(0x01)
	bool bDisableRoomErrors; // 0x74b(0x01)
	bool bDisableItemClearanceErrors; // 0x74c(0x01)
	bool bDisableLargeObjectTutorial; // 0x74d(0x01)
	bool bDisableTrapGroups; // 0x74e(0x01)
	char pad_74F[0x1]; // 0x74f(0x01)

	void ClearCurrentFootStepData(); // Function OPP.RBWorldSettings.ClearCurrentFootStepData // (Final|Native|Public) // @ game+0x1521dbc
	void ClearAllFootStepData(); // Function OPP.RBWorldSettings.ClearAllFootStepData // (Final|Native|Public) // @ game+0x1521dbc
};

// Class OPP.RBWWWControlMenu
// Size: 0x310 (Inherited: 0x308)
struct URBWWWControlMenu : URBMenuWidget {
	char pad_308[0x8]; // 0x308(0x08)

	void TogglePlayPause(); // Function OPP.RBWWWControlMenu.TogglePlayPause // (Final|Native|Public|BlueprintCallable) // @ game+0x1e3c0c0
	bool ShouldShowGameEvents(); // Function OPP.RBWWWControlMenu.ShouldShowGameEvents // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e3c084
	bool ShouldShowAIDirectorInfo(); // Function OPP.RBWWWControlMenu.ShouldShowAIDirectorInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e3c048
	void SetWWWPlaybackSpeed(enum class EWWWPlaybackSpeed PlaybackSpeed); // Function OPP.RBWWWControlMenu.SetWWWPlaybackSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e3bf7c
	void SetTrackDrawOptions(enum class EWWWTrackDrawSelection drawSelection, enum class EWWWTrackDrawLength drawLength); // Function OPP.RBWWWControlMenu.SetTrackDrawOptions // (Final|Native|Public|BlueprintCallable) // @ game+0x1e3bec8
	void SetShowGameEvents(bool bShouldShow); // Function OPP.RBWWWControlMenu.SetShowGameEvents // (Final|Native|Public|BlueprintCallable) // @ game+0x1e3be48
	void SetShowAIDirectorInfo(bool bShouldShow); // Function OPP.RBWWWControlMenu.SetShowAIDirectorInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x1e3bdc8
	void SetPlaybackTime(float PlaybackTime); // Function OPP.RBWWWControlMenu.SetPlaybackTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1e3bd40
	void OnPlayControlButton(bool bForward, enum class EWWWPlaybackSpeed PlaybackSpeed); // Function OPP.RBWWWControlMenu.OnPlayControlButton // (Final|Native|Public|BlueprintCallable) // @ game+0x1e3b8f0
	bool IsPlaying(); // Function OPP.RBWWWControlMenu.IsPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e3b4b8
	enum class EWWWPlaybackSpeed GetWWWPlaybackSpeed(); // Function OPP.RBWWWControlMenu.GetWWWPlaybackSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e3b230
	float GetPlaybackTime(); // Function OPP.RBWWWControlMenu.GetPlaybackTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e3b164
	struct FText GetPlaybackInfoText(); // Function OPP.RBWWWControlMenu.GetPlaybackInfoText // (Final|Native|Public|BlueprintCallable) // @ game+0x1e3b128
	void Event_OnPlaybackSpeedChanged(int32_t speedIdx); // Function OPP.RBWWWControlMenu.Event_OnPlaybackSpeedChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void CloseWWW(); // Function OPP.RBWWWControlMenu.CloseWWW // (Final|Native|Public|BlueprintCallable) // @ game+0x1e3aff4
};

// Class OPP.WWWObjectiveMarker
// Size: 0x268 (Inherited: 0x248)
struct AWWWObjectiveMarker : AActor {
	struct URBWhoWasWhere* WWW; // 0x248(0x08)
	char pad_250[0x10]; // 0x250(0x10)
	struct UStaticMeshComponent* ObjectiveMarkerMesh; // 0x260(0x08)
};

// Class OPP.WWWPawnPlaybackActor
// Size: 0x300 (Inherited: 0x248)
struct AWWWPawnPlaybackActor : AActor {
	struct FSoftObjectPath BigSkeletonMeshRef; // 0x248(0x18)
	struct FSoftObjectPath GruntMeshRef; // 0x260(0x18)
	struct FSoftObjectPath DynamicAnimBPRef; // 0x278(0x18)
	struct TArray<struct FSoftObjectPath> ExtraAssetRefs; // 0x290(0x10)
	struct URBWhoWasWhere* WWW; // 0x2a0(0x08)
	struct AWWWObjectiveMarker* ObjectiveMarker; // 0x2a8(0x08)
	char pad_2B0[0x18]; // 0x2b0(0x18)
	struct USkeletalMeshComponent* PlaybackMesh; // 0x2c8(0x08)
	struct USkeletalMeshComponent* DynamicPlaybackMesh; // 0x2d0(0x08)
	struct UStaticMeshComponent* NPCStateMesh; // 0x2d8(0x08)
	struct UStaticMeshComponent* PlayerIndicatorMesh; // 0x2e0(0x08)
	struct UStaticMeshComponent* FocusIndicatorMesh; // 0x2e8(0x08)
	struct USkeletalMesh* PlayerPreviewMesh; // 0x2f0(0x08)
	struct UMaterial* MeshMaterial; // 0x2f8(0x08)
};

// Class OPP.RBZoneDefenceWatcherComponent
// Size: 0x138 (Inherited: 0xb8)
struct URBZoneDefenceWatcherComponent : UActorComponent {
	struct ARBZoneDefenceLocation* LinkedZoneLocation; // 0xb8(0x08)
	struct ARBZoneDefenceObjectiveCoordinator* WatchedCoordinator; // 0xc0(0x08)
	struct FMulticastInlineDelegate OnZoneDefenceProgressChanged; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnCoordinatorCompleted; // 0xd8(0x10)
	struct FMulticastInlineDelegate OnCoordinatorStarted; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnZoneCompletedEvent; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnZoneActiveEvent; // 0x108(0x10)
	struct FMulticastInlineDelegate OnPlayerEnteredZone; // 0x118(0x10)
	struct FMulticastInlineDelegate OnPlayerExitedZone; // 0x128(0x10)

	void OnObjectiveCoordinatorStateChanged(struct ARBBaseObjectiveCoordinator* coordinator, enum class EObjectiveCoordinatorState newState); // Function OPP.RBZoneDefenceWatcherComponent.OnObjectiveCoordinatorStateChanged // (Final|Native|Public) // @ game+0x1e3b82c
	bool IsZoneCompleted(); // Function OPP.RBZoneDefenceWatcherComponent.IsZoneCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e3b6ac
	bool IsZoneActive(); // Function OPP.RBZoneDefenceWatcherComponent.IsZoneActive // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e3b5b0
	float GetZoneProgress(); // Function OPP.RBZoneDefenceWatcherComponent.GetZoneProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e3b32c
};

// Class OPP.RBZoneDefenceLocation
// Size: 0x2a8 (Inherited: 0x248)
struct ARBZoneDefenceLocation : AActor {
	char pad_248[0x8]; // 0x248(0x08)
	struct TArray<struct ARBPlayerTriggerVolume*> ZoneTriggers; // 0x250(0x10)
	struct TArray<struct TSoftObjectPtr<AActor>> ActorsToToggleWhenEnabled; // 0x260(0x10)
	struct TArray<struct TSoftObjectPtr<AActor>> ActorsToUnToggleWhenEnabled; // 0x270(0x10)
	enum class ERandomState RandomState; // 0x280(0x01)
	char pad_281[0x7]; // 0x281(0x07)
	struct FMulticastInlineDelegate OnZoneCompleted; // 0x288(0x10)
	struct FMulticastInlineDelegate OnZoneActive; // 0x298(0x10)

	void OnRep_RandomState(); // Function OPP.RBZoneDefenceLocation.OnRep_RandomState // (Final|Native|Protected) // @ game+0x1e3bd04
	bool IsEnabled(); // Function OPP.RBZoneDefenceLocation.IsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b49c
};

// Class OPP.RBZoneDefenceObjectiveCoordinator
// Size: 0x18a0 (Inherited: 0xba8)
struct ARBZoneDefenceObjectiveCoordinator : ARBBaseObjectiveCoordinator {
	struct FConfigurableFloat TimeToComplete; // 0xba8(0xc8)
	struct FConfigurableFloat CompletionDecayRate; // 0xc70(0xc8)
	bool bTriggerDistraction; // 0xd38(0x01)
	bool bActivateAllZonesOnStart; // 0xd39(0x01)
	char pad_D3A[0x6]; // 0xd3a(0x06)
	struct FConfigurableFloat MaxDistractionDistance; // 0xd40(0xc8)
	struct FText ZoneEnterText; // 0xe08(0x18)
	struct TArray<struct URBZoneDefenceWatcherComponent*> Watchers; // 0xe20(0x10)
	struct TArray<struct FObjectiveZoneInfo> ObjectiveZoneInfos; // 0xe30(0x10)
	struct FObjectiveUISettings ZoneUISettings; // 0xe40(0xa50)
	struct TArray<struct FObjectiveZoneInfo> ObjectiveZoneInfos_Local; // 0x1890(0x10)

	void OnRep_ObjectiveZoneInfos(); // Function OPP.RBZoneDefenceObjectiveCoordinator.OnRep_ObjectiveZoneInfos // (Final|Native|Protected) // @ game+0x1e3bcf0
	void OnPlayerExitedTrigger(struct ARBPlayer* Player); // Function OPP.RBZoneDefenceObjectiveCoordinator.OnPlayerExitedTrigger // (Final|Native|Protected) // @ game+0x1e3bba4
	void OnPlayerEnteredTrigger(struct ARBPlayer* Player); // Function OPP.RBZoneDefenceObjectiveCoordinator.OnPlayerEnteredTrigger // (Final|Native|Protected) // @ game+0x1e3ba38
	bool IsZoneCompleted(struct ARBZoneDefenceLocation* zone); // Function OPP.RBZoneDefenceObjectiveCoordinator.IsZoneCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b5f0
	bool IsZoneActive(struct ARBZoneDefenceLocation* zone); // Function OPP.RBZoneDefenceObjectiveCoordinator.IsZoneActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b4f4
	float GetZoneProgress(struct ARBZoneDefenceLocation* zone); // Function OPP.RBZoneDefenceObjectiveCoordinator.GetZoneProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b254
};

// Class OPP.RBZoneDefenseMarker
// Size: 0x278 (Inherited: 0x270)
struct ARBZoneDefenseMarker : ARBSplineActor {
	float InsideZoneRange; // 0x270(0x04)
	char pad_274[0x4]; // 0x274(0x04)
};

// Class OPP.RBZoneTimingPanelComponent
// Size: 0x14f0 (Inherited: 0x7a0)
struct URBZoneTimingPanelComponent : URBInteractiblePanelComponent {
	bool bAutoCompletion; // 0x7a0(0x01)
	char pad_7A1[0x7]; // 0x7a1(0x07)
	struct FConfigurableFloat TotalMeter; // 0x7a8(0xc8)
	struct FConfigurableFloat ThresholdMeter; // 0x870(0xc8)
	struct FConfigurableFloat MeterGainPerPartialSuccess; // 0x938(0xc8)
	struct FConfigurableFloat MeterGainPerSuccess; // 0xa00(0xc8)
	struct FConfigurableFloat MeterLossPerFailure; // 0xac8(0xc8)
	struct FConfigurableFloat MeterDecayDelay; // 0xb90(0xc8)
	struct FConfigurableFloat MeterDecayPerSecond; // 0xc58(0xc8)
	struct FConfigurableFloat ThresholdReachedMeterDecayDelay; // 0xd20(0xc8)
	struct FConfigurableFloat ThresholdReachedMeterDecayPerSecond; // 0xde8(0xc8)
	int32_t TotalRangeIncrements; // 0xeb0(0x04)
	char pad_EB4[0x4]; // 0xeb4(0x04)
	struct FConfigurableInt RangeLeftPadding; // 0xeb8(0xc8)
	struct FConfigurableInt SuccessRangeIncrements; // 0xf80(0xc8)
	struct FConfigurableInt PartialSuccessRangeIncrements; // 0x1048(0xc8)
	struct FConfigurableFloat SuccessFlexibilityRange; // 0x1110(0xc8)
	struct FConfigurableFloat MinNeedleSpeed; // 0x11d8(0xc8)
	struct FConfigurableFloat MaxNeedleSpeed; // 0x12a0(0xc8)
	float MinDelayBetweenInputs; // 0x1368(0x04)
	char pad_136C[0x4]; // 0x136c(0x04)
	struct UAkAudioEvent* MeterStartedAudioEvent; // 0x1370(0x08)
	struct UAkAudioEvent* MeterStoppedAudioEvent; // 0x1378(0x08)
	struct FName MeterRatioRTPC; // 0x1380(0x08)
	float CurrentMeter; // 0x1388(0x04)
	float NeedleStartTimeStamp; // 0x138c(0x04)
	struct FScheduledFloat NeedleResetTimeStamp; // 0x1390(0x78)
	struct FScheduledFloat NeedleResetInitialRatio; // 0x1408(0x78)
	bool bThresholdReached; // 0x1480(0x01)
	char pad_1481[0x7]; // 0x1481(0x07)
	struct FZoneTimingTargetInfo TargetInfo; // 0x1488(0x18)
	struct FMulticastInlineDelegate OnPanelSucceeded; // 0x14a0(0x10)
	struct FMulticastInlineDelegate OnTargetInfoChanged; // 0x14b0(0x10)
	struct FMulticastInlineDelegate OnInputEvent; // 0x14c0(0x10)
	struct FMulticastInlineDelegate OnThresholdStateChangeEvent; // 0x14d0(0x10)
	char pad_14E0[0x10]; // 0x14e0(0x10)

	void OnRep_ThresholdReached(); // Function OPP.RBZoneTimingPanelComponent.OnRep_ThresholdReached // (Final|Native|Private) // @ game+0x1e3bd2c
	void OnRep_TargetInfo(); // Function OPP.RBZoneTimingPanelComponent.OnRep_TargetInfo // (Final|Native|Private) // @ game+0x1e3bd18
	void OnRep_NeedleResetTimeStamp(); // Function OPP.RBZoneTimingPanelComponent.OnRep_NeedleResetTimeStamp // (Final|Native|Private) // @ game+0x1e3bcd4
	void OnRep_NeedleResetInitialRatio(); // Function OPP.RBZoneTimingPanelComponent.OnRep_NeedleResetInitialRatio // (Final|Native|Private) // @ game+0x1e3bcb8
	void OnNeedleResetTimeStampChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBZoneTimingPanelComponent.OnNeedleResetTimeStampChangedCallback // (Final|Native|Private) // @ game+0x1d32d30
	void OnNeedleResetInitialRatioChangedCallback(enum class EScheduledPropertyValueChangedType changedType); // Function OPP.RBZoneTimingPanelComponent.OnNeedleResetInitialRatioChangedCallback // (Final|Native|Private) // @ game+0x1d32d30
	void Multicast_OnPanelSucceeded(struct ARBPawn* Pawn); // Function OPP.RBZoneTimingPanelComponent.Multicast_OnPanelSucceeded // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d74eb8
	void Multicast_OnPanelInput(struct ARBPlayer* Player, float needleRatio, float Timestamp, enum class ETimingInputResultType Result); // Function OPP.RBZoneTimingPanelComponent.Multicast_OnPanelInput // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1e3b6ec
	bool GetZoneTimingCustomInteractionText(struct ARBPlayer* Player, struct FText& out_CustomInteractionText, bool& out_bInteractionFail); // Function OPP.RBZoneTimingPanelComponent.GetZoneTimingCustomInteractionText // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x1e3b36c
	int32_t GetResultIndexAtPosition(float ratio); // Function OPP.RBZoneTimingPanelComponent.GetResultIndexAtPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b19c
	float GetNeedleSpeed(); // Function OPP.RBZoneTimingPanelComponent.GetNeedleSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b100
	float GetNeedlePosition(float Timestamp); // Function OPP.RBZoneTimingPanelComponent.GetNeedlePosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b06c
	float GetMeterRatio(); // Function OPP.RBZoneTimingPanelComponent.GetMeterRatio // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b044
	float GetCurrentNeedlePosition(); // Function OPP.RBZoneTimingPanelComponent.GetCurrentNeedlePosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b01c
	void Event_OnThresholdReachedStateChanged(); // Function OPP.RBZoneTimingPanelComponent.Event_OnThresholdReachedStateChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnTargetInfoChanged(); // Function OPP.RBZoneTimingPanelComponent.Event_OnTargetInfoChanged // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnInteractionAnimationDone(); // Function OPP.RBZoneTimingPanelComponent.Event_OnInteractionAnimationDone // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void Event_OnInputEvent(struct ARBPlayer* Player, int32_t targetIndex, float Timestamp, enum class ETimingInputResultType Result); // Function OPP.RBZoneTimingPanelComponent.Event_OnInputEvent // (Event|Public|BlueprintEvent) // @ game+0x201e6d4
	void CompleteGameplay_Server(); // Function OPP.RBZoneTimingPanelComponent.CompleteGameplay_Server // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e3b008
	void AnimationDone(); // Function OPP.RBZoneTimingPanelComponent.AnimationDone // (Final|Native|Public|BlueprintCallable) // @ game+0x1e3afe0
};

